[
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , identification FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY identification ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , identification FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY identification ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "browser_web_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "identification",
            "x_data": [
                [
                    "CACHEbox",
                    "CProxy",
                    "Fasterfox"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display a bar chart for what are the ids and names of the web accelerators that are compatible with two or more browsers?, and I want to sort y-axis from low to high order.",
            "What are the ids and names of the web accelerators that are compatible with two or more browsers Visualize by bar chart, and order by the y axis in asc.",
            "Visualize a bar chart for what are the ids and names of the web accelerators that are compatible with two or more browsers?, display Y-axis from low to high order."
        ],
        "record_name": "375@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "SUM(employee_id)",
            "x_data": [
                [
                    "Sept",
                    "Aug",
                    "July",
                    "June",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    5512,
                    4960,
                    3999,
                    1491,
                    206
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the sum of employee_id bin hire_date by time, and visualize them by a bar chart, display by the y axis in descending please.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart, and could you display by the total number in desc?",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by time, rank Y in descending order.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of hire_date and the sum of employee_id bin hire_date by time in a bar chart, and list Y-axis in descending order.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of employee_id over the hire_date bin hire_date by time, and list Y-axis in descending order."
        ],
        "record_name": "1582@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home"
        },
        "chart": "Grouping Scatter",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "teamID",
            "y_name": "percentage_of_all_games",
            "x_data": [
                [
                    1,
                    4
                ],
                [
                    3,
                    2
                ]
            ],
            "y_data": [
                [
                    0.946,
                    0.6
                ],
                [
                    0.706,
                    0.8240000000000001
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home"
        },
        "nl_queries": [
            "Visualize the relationship between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home.",
            "Draw a scatter chart about the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home.",
            "A scatter chart shows the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home.",
            "Show me about the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home in a scatter chart.",
            "Return a scatter chart about the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home.",
            "Draw a scatterplot of team id vs all_games_percent where team id is on the x-axis and points are colored by ACC_Home"
        ],
        "record_name": "3082"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Directed_by",
            "y_name": "COUNT(Directed_by)",
            "x_data": [
                [
                    "Bill Schreiner",
                    "Jesus Salvador Trevi\u00f1o"
                ]
            ],
            "y_data": [
                [
                    4,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Directed_by"
        },
        "nl_queries": [
            "Bar graph to show the number of directed by from different directed by, show Directed_by in asc order.",
            "Give me a bar chart showing the number of films for each director, and display bar in asc order.",
            "What is the number of films of each director? Return a bar chart, order in ascending by the names."
        ],
        "record_name": "443@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tvshow_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Package_Option",
            "y_name": "COUNT(Package_Option)",
            "x_data": [
                [
                    "no ( FTV )",
                    "Sky Famiglia + Sky HD",
                    "Sky Famiglia"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Package_Option"
        },
        "nl_queries": [
            "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, I want to rank names in descending order.",
            "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a bar chart, and I want to show from high to low by the X.",
            "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a bar chart, and list by the bars from high to low.",
            "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, I want to rank names in descending order."
        ],
        "record_name": "3064@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Locaton_To) ASC",
                "binning": "BIN Date_in_Locaton_To BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Date_in_Locaton_To",
            "y_name": "COUNT(Date_in_Locaton_To)",
            "x_data": [
                [
                    "Sat",
                    "Wed",
                    "Mon",
                    "Sun",
                    "Thur",
                    "Fri",
                    "Tue"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    4
                ]
            ],
            "classify": [
                "b",
                "c",
                "e",
                "n",
                "x"
            ],
            "describe": "GROUP BY Location_Code, BIN Date_in_Locaton_To BY WEEKDAY"
        },
        "nl_queries": [
            "Show the number of documents in different ending date Bin ending date by weekday and group by location code with a stacked bar chart, order by the Y in ascending.",
            "Stacked bar of date in locaton to and the number of date in locaton to colored by Location_Code, order by the Y in ascending."
        ],
        "record_name": "780@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "ship_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Level",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Commander, junior captain",
                    "Lieutenant",
                    "Midshipman"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Count the number of captains younger than 50 of each rank by a bar chart, and rank by the y axis in asc.",
            "Draw a bar chart for how many captains with younger than 50 are in each rank?, show by the Y-axis in asc.",
            "Count the number of captains younger than 50 of each rank, list by the y-axis in asc.",
            "Show me a bar chart for how many captains with younger than 50 are in each rank?, list by the y-axis in asc.",
            "How many captains with younger than 50 are in each rank, display y axis in asc order."
        ],
        "record_name": "2737@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "phone_market_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Carrier",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Sprint",
                    "TMobile"
                ]
            ],
            "y_data": [
                [
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show different carriers of phones together with the number of phones with each carrier by a pie chart.",
            "Show different carriers of phones together with the number of phones with each carrier. ",
            "I want to know the proportion of the total number for each carrier."
        ],
        "record_name": "2567"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.Fac_ID ORDER BY Fname ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.Fac_ID ORDER BY Fname ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "activity_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Fname",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Alan",
                    "Cheng",
                    "Daniel",
                    "David",
                    "Ellie",
                    "Joanne",
                    "Lawrence",
                    "Leslie",
                    "Louis",
                    "Luigi",
                    "Mark",
                    "Michael",
                    "Robert",
                    "Russell",
                    "Scott",
                    "Stacey",
                    "Steven",
                    "Yair"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    3,
                    3,
                    1,
                    2,
                    2,
                    1,
                    2,
                    2,
                    3,
                    3,
                    1,
                    2,
                    3,
                    3,
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A bar chart showing the first name of all the faculty members who participated in some activity, together with the number of activities they participated in, and could you sort in ascending by the x axis?",
            "What is the first name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in with a bar chart, list in ascending by the X."
        ],
        "record_name": "26@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "concert_singer_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "count(*)",
            "x_data": [
                [
                    "France",
                    "Netherlands",
                    "United States"
                ]
            ],
            "y_data": [
                [
                    4,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show all countries and the number of singers in each country Show bar chart, and I want to sort by the X in asc.",
            "Give me a histogram for how many singers are from each country?, and I want to sort in ascending by the names.",
            "Draw a bar chart of country versus the total number, and rank from low to high by the X-axis.",
            "Return a bar chart on how many singers are from each country?, and rank from low to high by the X-axis.",
            "How many singers are from each country, I want to show by the bar from low to high.",
            "Show all countries and the number of singers in each country in a bar chart, and I want to sort by the X in asc."
        ],
        "record_name": "690@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "JOB_ID",
            "y_name": "COUNT(JOB_ID)",
            "x_data": [
                [
                    "FI_ACCOUNT",
                    "FI_MGR"
                ]
            ],
            "y_data": [
                [
                    5,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For all employees in the Finance department, show me the proportion of their job id using a pie chart."
        ],
        "record_name": "1961"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "flight_4_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "elevation",
            "x_data": [
                [
                    "Indianola Municipal Airport",
                    "John F Kennedy International Airport",
                    "La Guardia Airport",
                    "One Police Plaza Heliport"
                ]
            ],
            "y_data": [
                [
                    126,
                    13,
                    21,
                    244
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the altitude (or elevation) of the airports in the city of New York? Show me a bar chart, and I want to sort from low to high by the x axis.",
            "Find the altitude (or elevation) of the airports in the city of New York with a bar chart, could you display in asc by the X?"
        ],
        "record_name": "1416@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Last_Name , AVG(Age) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Last_Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Last_Name , AVG(Age) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Last_Name ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "allergy_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Last_Name",
            "y_name": "AVG(Age)",
            "x_data": [
                [
                    "Apap",
                    "Cheng",
                    "Jones",
                    "Kim",
                    "Lee",
                    "Nelson",
                    "Prater",
                    "Schmidt",
                    "Smith"
                ]
            ],
            "y_data": [
                [
                    18,
                    21,
                    21,
                    19,
                    16,
                    20,
                    18,
                    26,
                    19
                ]
            ],
            "classify": [],
            "describe": "GROUP BY LName"
        },
        "nl_queries": [
            "Show the average age for all female students and group them by last name with a bar chart, and rank bar in ascending order."
        ],
        "record_name": "44@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT product_category_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplierID = 3 GROUP BY product_category_code ORDER BY AVG(product_price) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT product_category_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplierID = 3 GROUP BY product_category_code ORDER BY AVG(product_price) ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "department_store_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_category_code",
            "y_name": "AVG(product_price)",
            "x_data": [
                [
                    "Hardware",
                    "Clothes"
                ]
            ],
            "y_data": [
                [
                    803,
                    817
                ]
            ],
            "classify": [],
            "describe": "GROUP BY product_type_code"
        },
        "nl_queries": [
            "Show the average of price supplied by supplier id 3 for different product type code in a bar chart, and order by the y axis in ascending."
        ],
        "record_name": "1139@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT job , min(Age) FROM Person GROUP BY job",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT job , min(Age) FROM Person GROUP BY job"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "network_2_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "job",
            "y_name": "min(Age)",
            "x_data": [
                [
                    "doctor",
                    "engineer",
                    "student"
                ]
            ],
            "y_data": [
                [
                    45,
                    35,
                    25
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display a pie chart for what is minimum age for different job title?",
            "Return a pie on what is minimum age for different job title?",
            "What is minimum age for different job title. Show a pie chart.",
            "Return a pie chart on how old is the youngest person for each job?",
            "Pie chart. how old is the youngest person for each job?",
            "How old is the youngest person for each job. Show the proportion.",
            "Create a pie chart showing minimal age across job."
        ],
        "record_name": "2462"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "mountain_photos_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "brand",
            "y_name": "COUNT(brand)",
            "x_data": [
                [
                    "Schneider Kreuznach",
                    "Olympus",
                    "Panasonic",
                    "Sigma"
                ]
            ],
            "y_data": [
                [
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY brand"
        },
        "nl_queries": [
            "Group and count brand for each camera lens using a bar chart, and rank in asc by the total number.",
            "Show the number of brand from each brand, order total number in ascending order."
        ],
        "record_name": "2349@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations",
                "binning": "BIN Date_in_Location_From BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR"
        },
        "chart": "Line",
        "hardness": "Easy",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "Date_in_Location_From",
            "y_name": "COUNT(Date_in_Location_From)",
            "x_data": [
                [
                    "1972~1976",
                    "1977~1981",
                    "1982~1986",
                    "1987~1991",
                    "1992~1996",
                    "1997~2001",
                    "2002~2006",
                    "2007~2011",
                    "2012~2016",
                    "2017"
                ]
            ],
            "y_data": [
                [
                    3,
                    0,
                    3,
                    0,
                    0,
                    1,
                    0,
                    3,
                    0,
                    5
                ]
            ],
            "classify": [],
            "describe": "BIN Date_in_Location_From BY YEAR"
        },
        "nl_queries": [
            "Show the number of documents in different starting date and bin starting date by year interval with a line chart.",
            "How many documents in different starting date? Return a line chart binning starting date by year interval.",
            "Can you draw the trend of how many date in location from over the date in location from?"
        ],
        "record_name": "771"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "swimming_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "citizenship",
            "y_name": "SUM(ID)",
            "x_data": [
                [
                    "Australia",
                    "Canada",
                    "France",
                    "Italy",
                    "Poland",
                    "Tunisia",
                    "Ukraine"
                ]
            ],
            "y_data": [
                [
                    6,
                    6,
                    8,
                    5,
                    7,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "Show me about the distribution of Nationality and the sum of ID , and group by attribute Nationality in a bar chart, and order from low to high by the X please.",
            "Draw a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality, order from low to high by the X please.",
            "Return a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality, could you show by the x-axis in ascending?",
            "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality, order by the Nationality in ascending.",
            "Show total number of id from each nationality, order by the bar from low to high.",
            "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality by a bar chart, order by the bar from low to high."
        ],
        "record_name": "2906@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Category , COUNT(Category) FROM Music_Festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM Music_Festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "music_4_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Category",
            "y_name": "COUNT(Category)",
            "x_data": [
                [
                    "Best Sound Song",
                    "Best Song"
                ]
            ],
            "y_data": [
                [
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Category"
        },
        "nl_queries": [
            "Return the categories of music festivals that have the result \"Awarded\", and count them by a bar chart, sort by the X in desc please.",
            "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\", and rank Category in descending order please.",
            "A bar chart for what are the number of the category of music festivals with result \"Awarded\"?, and I want to order by the X-axis from high to low.",
            "What are the number of the category of music festivals with result \"Awarded\"?, show in descending by the x axis.",
            "Return the number of the categories of music festivals that have the result \"Awarded\", show in descending by the x axis.",
            "What are the category of music festivals with result \"Awarded\", and count them by a bar chart, and show by the x axis in desc."
        ],
        "record_name": "2439@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "local_govt_in_alabama_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Participant_Type_Code",
            "y_name": "COUNT(Participant_Type_Code)",
            "x_data": [
                [
                    "Participant",
                    "Organizer"
                ]
            ],
            "y_data": [
                [
                    8,
                    7
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Participant_Type_Code"
        },
        "nl_queries": [
            "Please draw a histogram to show the total number of participants in each type code, and order in desc by the Participant_Type_Code.",
            "Bar chart x axis participant type code y axis the number of participant type code, show by the bar in desc please.",
            "Compare the number of participants in each participant type code using a bar chart, order bars from high to low order."
        ],
        "record_name": "2127@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT First_year , COUNT(First_year) FROM party WHERE PartyTheme = \"Spring\" OR PartyTheme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC",
                "binning": "BIN First_year BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE PartyTheme = \"Spring\" OR PartyTheme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "party_host_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "First_year",
            "y_name": "COUNT(First_year)",
            "x_data": [
                [
                    "Fri",
                    "Mon",
                    "Sun",
                    "Thur",
                    "Wed",
                    "Sat",
                    "Tue"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN First_year BY WEEKDAY"
        },
        "nl_queries": [
            "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart, bin the first year into weekday interval and count the first year, and I want to display y axis from low to high order."
        ],
        "record_name": "2498@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street"
        },
        "chart": "Grouping Scatter",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "schoolID",
            "y_name": "percentage_of_ACC",
            "x_data": [
                [
                    5,
                    4
                ],
                [
                    2
                ],
                [
                    1
                ]
            ],
            "y_data": [
                [
                    0.563,
                    0.625
                ],
                [
                    0.813
                ],
                [
                    0.875
                ]
            ],
            "classify": [
                "3\u20135",
                "6\u20132",
                "8\u20130"
            ],
            "describe": "GROUP BY ACC_Road"
        },
        "nl_queries": [
            "Give me a scatter chart that groups acc road, the x-axis is school id and the y-axis is acc percent.\n\n",
            "Group by all acc road, show the school id and All_Games_Percent in a scatter plot.",
            "Draw a scatterplot of school id vs acc_percent where school id is on the x-axis and points are colored by ACC_Road"
        ],
        "record_name": "3075"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_paid , COUNT(date_paid) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY date_paid ORDER BY date_paid DESC",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT date_paid , COUNT(date_paid) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY date_paid ORDER BY date_paid DESC"
        },
        "chart": "Line",
        "hardness": "Extra Hard",
        "db_id": "products_for_hire_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_paid",
            "y_name": "COUNT(date_paid)",
            "x_data": [
                [
                    "2018-03-23",
                    "2018-03-22",
                    "2018-03-19",
                    "2018-03-17",
                    "2018-03-12",
                    "2018-03-09",
                    "2018-03-03",
                    "2018-03-02",
                    "2018-02-27"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    2,
                    2,
                    1,
                    3,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY payment_date"
        },
        "nl_queries": [
            "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart, and show X from high to low order.",
            "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart, and display in descending by the payment_date."
        ],
        "record_name": "2617@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "formula_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "year",
            "y_name": "COUNT(year)",
            "x_data": [
                [
                    "2016-01-01",
                    "2017-01-01"
                ]
            ],
            "y_data": [
                [
                    2,
                    20
                ]
            ],
            "classify": [],
            "describe": "GROUP BY year"
        },
        "nl_queries": [
            "How many races are held in each year after 2014? Show me a bar chart, and list X-axis from low to high order.",
            "Show me a bar chart about the number of races held in each year after 2014, and rank from low to high by the names."
        ],
        "record_name": "1437@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC"
        },
        "chart": "Line",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_of_hire",
            "y_name": "wage",
            "x_data": [
                [
                    "1987-06-17",
                    "1987-06-18",
                    "1987-06-19",
                    "1987-06-20",
                    "1987-06-21",
                    "1987-06-22",
                    "1987-06-23",
                    "1987-06-24",
                    "1987-06-25",
                    "1987-06-26",
                    "1987-06-27",
                    "1987-06-28",
                    "1987-06-29",
                    "1987-06-30",
                    "1987-07-01",
                    "1987-07-02",
                    "1987-07-03",
                    "1987-07-04",
                    "1987-07-05",
                    "1987-07-06",
                    "1987-07-07",
                    "1987-07-08",
                    "1987-07-09",
                    "1987-07-10",
                    "1987-07-11",
                    "1987-07-12",
                    "1987-07-13",
                    "1987-07-14",
                    "1987-07-15",
                    "1987-07-16",
                    "1987-07-17",
                    "1987-07-18",
                    "1987-07-19",
                    "1987-07-20",
                    "1987-07-21",
                    "1987-07-22",
                    "1987-07-23",
                    "1987-07-24",
                    "1987-07-25",
                    "1987-07-26",
                    "1987-07-27",
                    "1987-07-28",
                    "1987-07-29",
                    "1987-07-30",
                    "1987-07-31",
                    "1987-08-01",
                    "1987-08-02",
                    "1987-08-03",
                    "1987-08-04",
                    "1987-08-05",
                    "1987-08-06",
                    "1987-08-07",
                    "1987-08-08",
                    "1987-08-09",
                    "1987-08-10",
                    "1987-08-11",
                    "1987-08-12",
                    "1987-08-13",
                    "1987-08-14",
                    "1987-08-15",
                    "1987-08-16",
                    "1987-08-17",
                    "1987-08-18",
                    "1987-08-19",
                    "1987-08-20",
                    "1987-08-21",
                    "1987-08-22",
                    "1987-08-23",
                    "1987-08-24",
                    "1987-08-25",
                    "1987-08-26",
                    "1987-08-27",
                    "1987-08-28",
                    "1987-08-29",
                    "1987-08-30",
                    "1987-08-31",
                    "1987-09-01",
                    "1987-09-02",
                    "1987-09-03",
                    "1987-09-04",
                    "1987-09-05",
                    "1987-09-06",
                    "1987-09-07",
                    "1987-09-08",
                    "1987-09-09",
                    "1987-09-10",
                    "1987-09-11",
                    "1987-09-12",
                    "1987-09-13",
                    "1987-09-14",
                    "1987-09-15",
                    "1987-09-16",
                    "1987-09-17",
                    "1987-09-18",
                    "1987-09-19",
                    "1987-09-20",
                    "1987-09-21",
                    "1987-09-22",
                    "1987-09-23",
                    "1987-09-24",
                    "1987-09-25",
                    "1987-09-26",
                    "1987-09-27",
                    "1987-09-28",
                    "1987-09-29",
                    "1987-09-30",
                    "1987-10-01"
                ]
            ],
            "y_data": [
                [
                    24000,
                    17000,
                    17000,
                    9000,
                    6000,
                    4800,
                    4800,
                    4200,
                    12000,
                    9000,
                    8200,
                    7700,
                    7800,
                    6900,
                    11000,
                    3100,
                    2900,
                    2800,
                    2600,
                    2500,
                    8000,
                    8200,
                    7900,
                    6500,
                    5800,
                    3200,
                    2700,
                    2400,
                    2200,
                    3300,
                    2800,
                    2500,
                    2100,
                    3300,
                    2900,
                    2400,
                    2200,
                    3600,
                    3200,
                    2700,
                    2500,
                    3500,
                    3100,
                    2600,
                    2500,
                    14000,
                    13500,
                    12000,
                    11000,
                    10500,
                    10000,
                    9500,
                    9000,
                    8000,
                    7500,
                    7000,
                    10000,
                    9500,
                    9000,
                    8000,
                    7500,
                    7000,
                    10500,
                    9500,
                    7200,
                    6800,
                    6400,
                    6200,
                    11500,
                    10000,
                    9600,
                    7400,
                    7300,
                    6100,
                    11000,
                    8800,
                    8600,
                    8400,
                    7000,
                    6200,
                    3200,
                    3100,
                    2500,
                    2800,
                    4200,
                    4100,
                    3400,
                    3000,
                    3800,
                    3600,
                    2900,
                    2500,
                    4000,
                    3900,
                    3200,
                    2800,
                    3100,
                    3000,
                    2600,
                    2600,
                    4400,
                    13000,
                    6000,
                    6500,
                    10000,
                    12000,
                    8300
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those employees who was hired before 2002-06-21, draw a line chart about the change of salary over hire_date , sort x axis in asc order.",
            "For those employees who was hired before 2002-06-21, visualize a line chart about the change of salary over hire_date , and order x axis in asc order.",
            "For those employees who was hired before 2002-06-21, return a line chart about the change of salary over hire_date , and could you rank by the X-axis from low to high?",
            "For those employees who was hired before 2002-06-21, show me about the change of salary over hire_date in a line chart, and could you rank by the X-axis from low to high?",
            "For those employees who was hired before 2002-06-21, a line chart shows the change of salary over hire_date, and list x-axis in ascending order.",
            "For those employees who was hired before 2002-06-21, show me the trend about salary over hire_date with a line chart, and rank in ascending by the HIRE_DATE please."
        ],
        "record_name": "1790@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT length , COUNT(length) FROM station  ORDER BY COUNT(length) ASC",
                "binning": "BIN length BY ZERO"
            },
            "VQL": "Visualize BAR SELECT length , COUNT(length) FROM station  ORDER BY COUNT(length) ASC BIN length BY ZERO"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "bike_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "length",
            "y_name": "COUNT(length)",
            "x_data": [
                [
                    ">0",
                    "<=0"
                ]
            ],
            "y_data": [
                [
                    0,
                    69
                ]
            ],
            "classify": [],
            "describe": "BIN long BY ZERO"
        },
        "nl_queries": [
            "Show me how many long by long in a histogram, could you rank from low to high by the y axis?",
            "For each station, bin its longitude divided by zero as buckets, and count the frequency in each bucket, and I want to show by the Y in ascending."
        ],
        "record_name": "327@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT class , COUNT(class) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY class ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY class ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "ship_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "class",
            "y_name": "COUNT(class)",
            "x_data": [
                [
                    "GL",
                    "KR"
                ]
            ],
            "y_data": [
                [
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Class"
        },
        "nl_queries": [
            "Give me a bar chart showing the total number of ships' classes that do not have a captain, display from low to high by the bars please.",
            "For those ships that do not have a captain, tell me the total number of their classes using a pie chart, display from low to high by the bars please."
        ],
        "record_name": "2749@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "music_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "languages",
            "y_name": "avg(rating)",
            "x_data": [
                [
                    "bangla",
                    "english"
                ]
            ],
            "y_data": [
                [
                    7.5,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the average rating of songs for each language Plot them as bar chart, and could you list from high to low by the total number?",
            "Show me mean rating by languages in a histogram, order by the mean rating in desc please.",
            "Show me a bar chart for what is the average rating of songs for each language?, and could you sort total number in desc order?",
            "Draw a bar chart for what is the average rating of songs for each language?, order by the mean rating in desc please.",
            "Show me a bar chart for what is the average song rating for each language?, could you sort total number in desc order?",
            "What is the average song rating for each language Plot them as bar chart, could you list from high to low by the total number?"
        ],
        "record_name": "2423@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hospital_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Christopher Turk",
                    "Elliot Reid",
                    "John Dorian"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many patients do each physician take care of? List their names and number of patients they take care of in a bar chart, and show X-axis in asc order please.",
            "How many patients do each physician take care of? List their names and number of patients they take care of Show bar chart, sort in asc by the x axis.",
            "Draw a bar chart for how many patients do each physician take care of? List their names and number of patients they take care of, and I want to display in asc by the X.",
            "Return the name of each physician and the number of patients he or she treats in a bar chart, and I want to sort in ascending by the bars.",
            "Return the name of each physician and the number of patients he or she treats, I want to sort by the bars in ascending.",
            "Return a bar chart on how many patients do each physician take care of? List their names and number of patients they take care of, and I want to sort by the bars in ascending."
        ],
        "record_name": "1535@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "train_station_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Position",
            "y_name": "COUNT(Position)",
            "x_data": [
                [
                    "Birmingham",
                    "Glasgow",
                    "London"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    10
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Location"
        },
        "nl_queries": [
            "A bar chart shows how many locations, and order in ascending by the X-axis please.",
            "Bar graph to show how many location from different location, order in ascending by the X-axis please.",
            "How many locations? Draw a bar chart, and list by the X-axis in ascending."
        ],
        "record_name": "3043@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
        },
        "chart": "Grouping Scatter",
        "hardness": "Medium",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Code",
            "y_name": "Manufacturer",
            "x_data": [
                [
                    6,
                    7,
                    10
                ],
                [
                    3
                ],
                [
                    8,
                    9,
                    11
                ],
                [
                    2,
                    4
                ],
                [
                    1
                ],
                [
                    5
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    2
                ],
                [
                    4
                ],
                [
                    3,
                    3,
                    3
                ],
                [
                    6,
                    6
                ],
                [
                    5
                ],
                [
                    1
                ]
            ],
            "classify": [
                "Austin",
                "Beijing",
                "Los Angeles",
                "Paris",
                "Taiwan",
                "Tokyo"
            ],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  code and  manufacturer , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  code and  manufacturer , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  code and  manufacturer , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, visualize the relationship between  code and  manufacturer , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  manufacturer , and group by attribute headquarter."
        ],
        "record_name": "2284"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN course AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY CRS_DESCRIPTION ,  EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN course AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY CRS_DESCRIPTION ,  EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "EMPLOYEE_FIRST_NAME",
            "y_name": "COUNT(EMPLOYEE_FIRST_NAME)",
            "x_data": [
                [
                    "Peter",
                    "Gerald",
                    "Ismael",
                    "Carlos",
                    "Arnelle",
                    "Robert"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    2,
                    0,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    2,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    2,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Accounting I",
                "Accounting II",
                "Database Design and Implementation",
                "Intro. to Microcomputing",
                "Intro. to Statistics",
                "Statistical Applications"
            ],
            "describe": "GROUP BY CRS_DESCRIPTION, GROUP BY EMP_FNAME"
        },
        "nl_queries": [
            "Show the number of courses each instructor taught in a stacked bar chart The x-axis is the instructor's first name and group by course description, could you order by the Y-axis in descending?",
            "How many courses each teacher taught? Show me a stacked bar chart The x-axis is the teacher's first name and group by course description, and rank from high to low by the total number."
        ],
        "record_name": "582@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "SCHOOL_CODE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "BUS",
                    "A&SCI"
                ]
            ],
            "y_data": [
                [
                    10,
                    12
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the number of professors for different school Plot them as bar chart, and show by the names from high to low.",
            "Return a bar chart on what is the number of professors for different school?, and show by the names from high to low.",
            "A bar chart about how many different professors are there for the different schools?, and I want to list from high to low by the X.",
            "How many different professors are there for the different schools Show bar chart, sort bars from high to low order.",
            "Return a bar chart on how many different professors are there for the different schools?, and sort x axis in desc order.",
            "Give me a histogram for what is the number of professors for different school?, sort x axis in desc order."
        ],
        "record_name": "574@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "SCHOOL_CODE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "A&SCI",
                    "BUS"
                ]
            ],
            "y_data": [
                [
                    12,
                    10
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the number of professors for different school Plot them as bar chart, display X-axis from low to high order.",
            "Give me a histogram for what is the number of professors for different school?, could you order in asc by the x axis?",
            "A bar chart about how many different professors are there for the different schools?, and could you list by the bar from low to high?",
            "Return a bar chart on how many different professors are there for the different schools?, list in asc by the X.",
            "Return a bar chart on what is the number of professors for different school?, and could you list by the bar from low to high?",
            "How many different professors are there for the different schools Show bar chart, and show in asc by the SCHOOL_CODE."
        ],
        "record_name": "574@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT approval_rate , disapproval_rate FROM candidate",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "candidate_poll_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "approval_rate",
            "y_name": "disapproval_rate",
            "x_data": [
                [
                    0.25,
                    0.33,
                    0.24,
                    0.18,
                    0.24,
                    0.17
                ]
            ],
            "y_data": [
                [
                    0.43,
                    0.45,
                    0.43,
                    0.44,
                    0.32,
                    0.32
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A scatter showing the correlation between support and oppose rates for each candidate.",
            "What is the relationship between support and oppose rates of each candidate?",
            "Plot a scatter chart, support rate by oppose_rate."
        ],
        "record_name": "401"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" ORDER BY stars DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" ORDER BY stars DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "movie_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "director",
            "y_name": "stars",
            "x_data": [
                [
                    "James Cameron",
                    "Victor Fleming",
                    "Steven Spielberg",
                    "Robert Wise"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each director, return the director's name together with the value of that rating and ignore movies whose director is NULL Could you plot the result with a bar chart?, rank by the total number in descending."
        ],
        "record_name": "2396@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT other_info , COUNT(other_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ORDER BY COUNT(other_info) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT other_info , COUNT(other_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ORDER BY COUNT(other_info) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "assets_maintenance_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "other_info",
            "y_name": "COUNT(other_info)",
            "x_data": [
                [
                    "Skilled",
                    ""
                ]
            ],
            "y_data": [
                [
                    1,
                    19
                ]
            ],
            "classify": [],
            "describe": "GROUP BY other_details"
        },
        "nl_queries": [
            "Show the number of engineers for different other details in a bar chart, and rank y-axis from low to high order please."
        ],
        "record_name": "130@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "SUM(Code)",
            "x_data": [
                [
                    "Winchester",
                    "Hewlett-Packard",
                    "Creative Labs",
                    "Fujits",
                    "Iomega",
                    "Sony"
                ]
            ],
            "y_data": [
                [
                    12,
                    9,
                    6,
                    5,
                    4,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the sum of code , and group by attribute name, could you show by the y-axis in descending?",
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, show in descending by the Y please.",
            "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of code , and group by attribute name in a bar chart, and sort from high to low by the total number.",
            "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, and display in desc by the y-axis please.",
            "For those records from the products and each product's manufacturer, find name and the sum of code , and group by attribute name, and visualize them by a bar chart, and sort by the Y-axis from high to low."
        ],
        "record_name": "2211@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Fname",
            "y_name": "COUNT(Fname)",
            "x_data": [
                [
                    "Adam",
                    "Payam",
                    "William"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY FIRST_NAME"
        },
        "nl_queries": [
            "For those employees whose first name is ending with the letter m, show the frequency of the first name using a bar chart.",
            "For employees with first names that end with the letter m, groups and count the first name to visualize a bar graph."
        ],
        "record_name": "1802"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.ID = t2.Swimmer_ID JOIN event AS t3 ON t2.Incident_ID = t3.ID JOIN stadium AS t4 ON t4.ID = t3.stadium_id WHERE t1.citizenship = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.ID = t2.Swimmer_ID JOIN event AS t3 ON t2.Incident_ID = t3.ID JOIN stadium AS t4 ON t4.ID = t3.stadium_id WHERE t1.citizenship = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "swimming_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Baku Olympic Stadium",
                    "Gazprom Arena",
                    "Yubileyniy Stadium",
                    "Nou Mestalla"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Find the names of stadiums that some Australian swimmers have been to, and count them by a bar chart, could you display total number in ascending order?",
            "Find the number of the names of stadiums that some Australian swimmers have been to, and show in ascending by the the number of name.",
            "A bar chart for finding the number of the names of stadiums that some Australian swimmers have been to, and could you display Y in asc order?"
        ],
        "record_name": "2931@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "chinook_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Title",
            "y_name": "AlbumId",
            "x_data": [
                [
                    "Battlestar Galactica: The Story So Far",
                    "Battlestar Galactica, Season 3",
                    "Heroes, Season 1",
                    "Lost, Season 3",
                    "Lost, Season 1",
                    "Lost, Season 2",
                    "The Office, Season 1",
                    "The Office, Season 2",
                    "The Office, Season 3",
                    "Battlestar Galactica (Classic), Season 1",
                    "Aquaman",
                    "LOST, Season 4"
                ]
            ],
            "y_data": [
                [
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    249,
                    250,
                    251,
                    253,
                    254,
                    261
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the album names and ids for albums that contain tracks with unit price bigger than 1 by a bar chart.",
            "Show the album names and ids for albums that contain tracks with unit price bigger than 1. Visualize by bar chart.",
            "Return a histogram on what are the titles and ids for albums containing tracks with unit price greater than 1?",
            "Show me a bar chart for what are the titles and ids for albums containing tracks with unit price greater than 1?",
            "What are the titles and ids for albums containing tracks with unit price greater than 1. "
        ],
        "record_name": "438"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "AVG(Dept_ID)",
            "x_data": [
                [
                    "ST_MAN",
                    "ST_CLERK",
                    "SH_CLERK",
                    "SA_REP",
                    "SA_MAN",
                    "PU_MAN",
                    "PU_CLERK",
                    "PR_REP",
                    "MK_REP",
                    "MK_MAN",
                    "IT_PROG",
                    "FI_MGR",
                    "FI_ACCOUNT",
                    "AD_VP",
                    "AD_PRES",
                    "AD_ASST",
                    "AC_MGR",
                    "AC_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    50,
                    50,
                    50,
                    77.33333333333333,
                    80,
                    30,
                    30,
                    70,
                    20,
                    20,
                    60,
                    100,
                    100,
                    90,
                    90,
                    10,
                    110,
                    110
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, and could you order in descending by the x-axis?",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the average of department_id , and group by attribute job_id, and visualize them by a bar chart, I want to sort by the x-axis in desc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of department_id over the job_id , and group by attribute job_id, I want to sort by the x-axis in desc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, show by the names in descending.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart, and could you order in descending by the x-axis?"
        ],
        "record_name": "1607@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Role_Code",
            "y_name": "count(*)",
            "x_data": [
                [
                    "PT",
                    "PR",
                    "MG",
                    "HR",
                    "ED"
                ]
            ],
            "y_data": [
                [
                    1,
                    5,
                    1,
                    1,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Bar chart x axis role code y axis the total number, I want to display in descending by the Role_Code.",
            "Show all role codes and the number of employees in each role Show bar chart, and could you show by the bars in desc please?",
            "Show all role codes and the number of employees in each role by a bar chart, display from high to low by the X-axis please.",
            "What is the code of each role and the number of employees in each role Show bar chart, and I want to show by the x axis in desc please.",
            "Return a histogram on what is the code of each role and the number of employees in each role?, sort x axis in desc order please.",
            "Give me a histogram for what is the code of each role and the number of employees in each role?, and sort x axis in desc order please."
        ],
        "record_name": "782@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT writer , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "workshop_paper_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "writer",
            "y_name": "COUNT(DISTINCT T1.workshop_id)",
            "x_data": [
                [
                    "Jeff Lloyd",
                    "Sherman Smith",
                    "Steve Niehaus",
                    "Steve Raible",
                    "Sammy Green"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show each author and the number of workshops they submitted to with a bar chart, and display in asc by the Y-axis please.",
            "How many workshops did each author submit to? Return the author name and the number of workshops Plot them as bar chart, and I want to show by the y axis from low to high.",
            "How many workshops did each author submit to? Return the author name and the number of workshops in a bar chart, rank Y-axis from low to high order.",
            "Visualize a bar chart for how many workshops did each author submit to? Return the author name and the number of workshops, sort workshop_id) in ascending order.",
            "Show each author and the number of workshops they submitted to Show bar chart, show in asc by the total number.",
            "Give me a histogram for how many workshops did each author submit to? Return the author name and the number of workshops, and show total number in asc order."
        ],
        "record_name": "3266@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "apartment_rentals_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "reservation_status_code",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Provisional",
                    "Confirmed"
                ]
            ],
            "y_data": [
                [
                    8,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the booking status code and the corresponding number of bookings Show bar chart, and rank by the names from high to low please.",
            "Return a bar chart on how many bookings does each booking status have? List the booking status code and the number of corresponding bookings, rank by the booking_status_code from high to low.",
            "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings, order X from high to low order.",
            "Show the booking status code and the corresponding number of bookings in a bar chart, rank by the names from high to low please.",
            "Show me a bar chart for how many bookings does each booking status have? List the booking status code and the number of corresponding bookings, could you rank booking_status_code from high to low order?",
            "Plot the total number by grouped by booking status code as a bar graph, rank by the names from high to low please.",
            "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings with a bar chart, order X from high to low order."
        ],
        "record_name": "74@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "local_govt_and_lot_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_moved_in",
            "y_name": "COUNT(date_moved_in)",
            "x_data": [
                [
                    "2016-09-27",
                    "2015-03-27"
                ]
            ],
            "y_data": [
                [
                    4,
                    9
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date_moved_in"
        },
        "nl_queries": [
            "Please use a bar chart to compare the number of customers of each customer's move in date, and rank by the total number from low to high.",
            "What is the proportion of each customer's move in date? Show me the bar chart, and show by the how many date moved in in asc please."
        ],
        "record_name": "2096@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date , COUNT(date) FROM weather WHERE minimum_dew_point_F < (SELECT min(minimum_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE minimum_dew_point_F < (SELECT min(minimum_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "bike_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date",
            "y_name": "COUNT(date)",
            "x_data": [
                [
                    "2014-12-31",
                    "2013-12-20"
                ]
            ],
            "y_data": [
                [
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date"
        },
        "nl_queries": [
            "For days had a minimum dew point smaller than any day in zip code 94107, show the total number of such days using a bar chart, could you order how many date in ascending order?",
            "Count those days and in which zip code was the min dew point lower than any day in zip code 94107 using a bar graph, and could you order in asc by the y axis please?"
        ],
        "record_name": "329@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , AVG(wage) FROM employees  ORDER BY AVG(wage) ASC",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees  ORDER BY AVG(wage) ASC BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "AVG(wage)",
            "x_data": [
                [
                    "Sept",
                    "July",
                    "Aug",
                    "June"
                ]
            ],
            "y_data": [
                [
                    9180,
                    9600,
                    14000,
                    15000
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "Compare the average salary by each hire date (bin it into month interval) of employees using a bar chart, and sort Y-axis in ascending order.",
            "Give me a bar chart for the average of salary of each hire date, and sort Y-axis in ascending order.",
            "Show the average salary by each hire date of employees, and please bin the hire date into the Month interval for showing a bar chart, rank by the Y-axis from low to high."
        ],
        "record_name": "1843@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Template_Type_Code",
            "y_name": "count(*)",
            "x_data": [
                [
                    "AD",
                    "PPT",
                    "PP",
                    "BK"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    4,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show all template type codes and the number of documents using each type Visualize by bar chart, and could you display in asc by the y-axis?",
            "What are the different template type codes, and how many documents use each type Plot them as bar chart, and could you order y axis from low to high order please?",
            "Show all template type codes and the number of documents using each type with a bar chart, list from low to high by the Y please.",
            "A bar chart about what are the different template type codes, and how many documents use each type?, and could you display in asc by the y-axis?",
            "what are the different template type codes, and how many documents use each type?, and could you display in asc by the y-axis?"
        ],
        "record_name": "744@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT transaction_date , COUNT(transaction_date) FROM TRANSACTIONS  ORDER BY transaction_date DESC",
                "binning": "BIN transaction_date BY YEAR"
            },
            "VQL": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM TRANSACTIONS  ORDER BY transaction_date DESC BIN transaction_date BY YEAR"
        },
        "chart": "Line",
        "hardness": "Medium",
        "db_id": "tracking_share_transactions_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "transaction_date",
            "y_name": "COUNT(transaction_date)",
            "x_data": [
                [
                    "2004",
                    "2001~2003",
                    "1998~2000",
                    "1995~1997",
                    "1992~1994",
                    "1989~1991",
                    "1986~1988",
                    "1983~1985",
                    "1980~1982",
                    "1977~1979"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    1,
                    1,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_transaction BY YEAR"
        },
        "nl_queries": [
            "Bin all date of transactions into the weekday interval, and the total number of each bin, and then show me the trend, display by the date_of_transaction in desc.",
            "Plot how many date of transaction over date of transaction in a line chart, and list X-axis from high to low order.",
            "Give me a line chart, that bins all date of transactions into the weekday interval, and the count for each bin, order in desc by the date_of_transaction."
        ],
        "record_name": "3008@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "college_2_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "semester",
            "y_name": "COUNT(semester)",
            "x_data": [
                [
                    "Fall",
                    "Spring"
                ]
            ],
            "y_data": [
                [
                    3,
                    9
                ]
            ],
            "classify": [],
            "describe": "GROUP BY semester"
        },
        "nl_queries": [
            "Find the number of courses offered by Psychology department in each semester with a pie chart.",
            "How many courses are in the Psychology department for each semester? Return a pie chart."
        ],
        "record_name": "610"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "activity_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Rank",
            "y_name": "COUNT(Rank)",
            "x_data": [
                [
                    "Professor",
                    "AsstProf",
                    "Instructor",
                    "AssocProf"
                ]
            ],
            "y_data": [
                [
                    27,
                    15,
                    8,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Rank"
        },
        "nl_queries": [
            "Show how many rank from each rank, rank by the Y-axis from high to low.",
            "Show the number of faculty members for each rank in a bar chart, rank by the Y-axis from high to low.",
            "What is the number of the faculty members for each rank? Visualize in bar chart, and show by the total number in desc."
        ],
        "record_name": "9@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "SCHOOL_CODE",
            "y_name": "count(DISTINCT dept_name)",
            "x_data": [
                [
                    "A&SCI",
                    "BUS"
                ]
            ],
            "y_data": [
                [
                    7,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the number of departments in each school Plot them as bar chart, and I want to show by the y axis from high to low please.",
            "How many departments are in each school Show bar chart, could you sort by the total number in descending?",
            "A bar chart about how many departments are in each school?, could you order in descending by the count(DISTINCTdept_name)?",
            "Return a bar chart on how many departments are in each school?, and list by the total number in desc please."
        ],
        "record_name": "515@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "debate_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Party",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Republican",
                    "Independent Democrat",
                    "Democratic",
                    "Anti-Lecompton Democrat"
                ]
            ],
            "y_data": [
                [
                    4,
                    1,
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show different parties of people along with the number of people in each party with a bar chart, and could you show by the X in desc?",
            "Show different parties of people along with the number of people in each party Plot them as bar chart, display by the names in descending.",
            "Bar graph to show the total number from different party, rank by the x-axis in descending."
        ],
        "record_name": "1069@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Location , count(*) FROM player WHERE score < 30 GROUP BY Location ORDER BY Location DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Location , count(*) FROM player WHERE score < 30 GROUP BY Location ORDER BY Location DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "sports_competition_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Location",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Second Row",
                    "Prop",
                    "Loose Forward",
                    "Left Wing",
                    "Full Back"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the number of players who have points less than 30 for each position Plot them as bar chart, and list by the names in desc.",
            "what is the number of players who have points less than 30 for each position?, and rank by the X in desc.",
            "Give me a histogram for what is the number of players who have points less than 30 for each position?, and I want to sort bars in descending order."
        ],
        "record_name": "2818@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_category_code ,  premises_type ORDER BY COUNT(premises_type) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_category_code ,  premises_type ORDER BY COUNT(premises_type) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "customers_campaigns_ecommerce_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "premises_type",
            "y_name": "COUNT(premises_type)",
            "x_data": [
                [
                    "Warehouse",
                    "Office",
                    "Residence"
                ]
            ],
            "y_data": [
                [
                    4,
                    3,
                    1
                ],
                [
                    3,
                    2,
                    2
                ]
            ],
            "classify": [
                "Billing",
                "Shipping"
            ],
            "describe": "GROUP BY address_type_code, GROUP BY premises_type"
        },
        "nl_queries": [
            "Show the of customer addresses and group by premises type and address type code in a stacked bar chart The x-axis is premises type, and I want to sort in descending by the total number please."
        ],
        "record_name": "1016@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Fname",
            "y_name": "COMMISSION_PCT",
            "x_data": [
                [
                    "Kimberely",
                    "William",
                    "Susan",
                    "Shelley",
                    "Pat",
                    "Michael",
                    "Hermann"
                ]
            ],
            "y_data": [
                [
                    0.15,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and commission_pct , sort from high to low by the COMMISSION_PCT.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of first_name and commission_pct , show total number in descending order please.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, find first_name and commission_pct , and visualize them by a bar chart, list from high to low by the Y.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of first_name and commission_pct in a bar chart, and sort by the Y-axis in descending.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of first_name and commission_pct , I want to show by the Y-axis from high to low."
        ],
        "record_name": "1692@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "SUM(wage)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept"
                ]
            ],
            "y_data": [
                [
                    73400,
                    59900,
                    110100,
                    53900
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.",
            "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.",
            "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.",
            "For all employees who have the letters D or S in their first name, show me about the distribution of  hire_date and the sum of salary bin hire_date by time in a bar chart.",
            "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of  hire_date and the sum of salary bin hire_date by time."
        ],
        "record_name": "1542"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.ProjectID = T2.ProjectID WHERE T2.Project_information = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC",
                "binning": "BIN Document_Date BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.ProjectID = T2.ProjectID WHERE T2.Project_information = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Document_Date",
            "y_name": "COUNT(Document_Date)",
            "x_data": [
                [
                    "Wed",
                    "Thur",
                    "Sun",
                    "Tue",
                    "Sat",
                    "Mon",
                    "Fri"
                ]
            ],
            "y_data": [
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Chapter on private files",
                "Katheryn statement",
                "Review on Canadian files",
                "Review on USA files",
                "Winona Book"
            ],
            "describe": "GROUP BY Document_Name, BIN Document_Date BY WEEKDAY"
        },
        "nl_queries": [
            "Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by weekday and group by document name with a stacked bar chart, could you show from high to low by the Y?"
        ],
        "record_name": "852@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.name , T1.ID FROM mountain AS T1 JOIN photos AS T2 ON T1.ID = T2.mountain_ID ORDER BY T1.ID ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.name , T1.ID FROM mountain AS T1 JOIN photos AS T2 ON T1.ID = T2.mountain_ID ORDER BY T1.ID ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "mountain_photos_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "ID",
            "x_data": [
                [
                    "Mount Cameroon",
                    "Ighil Mgoun",
                    "Taska n\u2019Zat"
                ]
            ],
            "y_data": [
                [
                    12,
                    14,
                    20
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What are the id and name of the mountains that have at least 2 photos Show bar chart, order from low to high by the y axis.",
            "Return a bar chart on what are the id and name of the mountains that have at least 2 photos?, I want to list by the y-axis from low to high.",
            "Draw a bar chart for what are the id and name of the mountains that have at least 2 photos?, I want to sort by the id in asc."
        ],
        "record_name": "2337@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "customers_and_products_contacts_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_name",
            "y_name": "COUNT(product_name)",
            "x_data": [
                [
                    "Apple",
                    "gucci",
                    "jcrew"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY product_name"
        },
        "nl_queries": [
            "Compare the frequency of product names using a bar chart.",
            "Show me a bar chart with the product name and their frequency.",
            "Bar chart x axis product name y axis how many product name"
        ],
        "record_name": "1000"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "SUM(Code)",
            "x_data": [
                [
                    "Fujits",
                    "Iomega",
                    "Sony",
                    "Winchester",
                    "Creative Labs",
                    "Hewlett-Packard"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    5,
                    6,
                    23,
                    28
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, and show from low to high by the total number.",
            "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of code , and group by attribute name in a bar chart, and could you list in asc by the Y?",
            "For those records from the products and each product's manufacturer, find name and the sum of code , and group by attribute name, and visualize them by a bar chart, and order in ascending by the y axis.",
            "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of code , and group by attribute name, sort total number of code in asc order.",
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, and show from low to high by the total number."
        ],
        "record_name": "2205@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name",
                "binning": "BIN Document_Date BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Document_Date",
            "y_name": "COUNT(Document_Date)",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    1,
                    0,
                    1,
                    1,
                    1,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    2,
                    0,
                    0,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    1,
                    0
                ]
            ],
            "classify": [
                "Book",
                "CV",
                "Film",
                "Paper"
            ],
            "describe": "GROUP BY Document_Type_Name, BIN Document_Date BY WEEKDAY"
        },
        "nl_queries": [
            "How many documents are created in each day? Bin the document date by weekday and group by document type with a stacked bar chart.",
            "Show the number of documents created in each day and bin document date by weekday and group by document type with a stacked bar chart."
        ],
        "record_name": "849"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT organization_information , COUNT(organization_information) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_ID = T2.organization_ID GROUP BY Type_of_Thing_Code ,  organization_information ORDER BY COUNT(organization_information) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT organization_information , COUNT(organization_information) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_ID = T2.organization_ID GROUP BY Type_of_Thing_Code ,  organization_information ORDER BY COUNT(organization_information) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "local_govt_and_lot_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "organization_information",
            "y_name": "COUNT(organization_information)",
            "x_data": [
                [
                    "Denesik and Sons Party",
                    "Robel-Schulist Group",
                    "Reinger, Hudson and Nolan Group"
                ]
            ],
            "y_data": [
                [
                    5,
                    2,
                    1
                ],
                [
                    4,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    0
                ]
            ],
            "classify": [
                "Commen",
                "Electronics",
                "Furniture"
            ],
            "describe": "GROUP BY Type_of_Thing_Code, GROUP BY organization_details"
        },
        "nl_queries": [
            "Give me a stacked bar chart to show how many things in different types of each thing, and the details of the organization that owns it, I want to show in descending by the Y-axis please."
        ],
        "record_name": "2080@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Dept_ID",
            "y_name": "SUM(wage)",
            "x_data": [
                [
                    20,
                    30,
                    50,
                    60,
                    80,
                    90,
                    100,
                    110
                ]
            ],
            "y_data": [
                [
                    19000,
                    24900,
                    156400,
                    28800,
                    304500,
                    58000,
                    51600,
                    20300
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize a scatter chart on what are total salaries and department id for each department that has more than 2 employees?",
            "plot scatter on what are total salaries and department id for each department that has more than 2 employees?",
            "What are total salaries and department id for each department that has more than 2 employees. Show scatter chart.",
            "Scatter plot to show department id on x axis and sum salary on y axis."
        ],
        "record_name": "1709"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC",
                "binning": "BIN Actual_Delivery_Date BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Drama_Workshop_Groups_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Actual_Delivery_Date",
            "y_name": "COUNT(Actual_Delivery_Date)",
            "x_data": [
                [
                    "Fri",
                    "Thur",
                    "Sun",
                    "Sat",
                    "Mon",
                    "Wed",
                    "Tue"
                ]
            ],
            "y_data": [
                [
                    4,
                    3,
                    3,
                    2,
                    2,
                    1,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN Actual_Delivery_Date BY WEEKDAY"
        },
        "nl_queries": [
            "Give me a bar chart for how many actual delivery date of each actual delivery date, and rank total number in descending order.",
            "Show all the actual delivery dates and bin by weekday in a bar chart, and sort in desc by the y-axis please."
        ],
        "record_name": "863@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_class_code = \"SALE\" ORDER BY T1.investor_id DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_class_code = \"SALE\" ORDER BY T1.investor_id DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tracking_share_transactions_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "investor_details",
            "y_name": "investor_id",
            "x_data": [
                [
                    "d",
                    "z"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" by a bar chart, list from high to low by the Y.",
            "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" Plot them as bar chart, sort in desc by the y-axis."
        ],
        "record_name": "2997@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.MarketID = T2.MarketID JOIN phone AS T3 ON T1.PhoneID = T3.PhoneID GROUP BY Name ORDER BY Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.MarketID = T2.MarketID JOIN phone AS T3 ON T1.PhoneID = T3.PhoneID GROUP BY Name ORDER BY Name ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "phone_market_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "IPhone 5s",
                    "IPhone 6s",
                    "IPhone 7",
                    "IPhone X"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "I want to compare the number of the names of phones by a bar chart, and list by the Name in ascending.",
            "Show the number of names of phones in a bar chart, list by the Name in ascending."
        ],
        "record_name": "2581@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "culture_company_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Category",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Lesb. M/SF",
                    "Gay SF/F",
                    "Gay M/SF"
                ]
            ],
            "y_data": [
                [
                    5,
                    2,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Give me a histogram for how many books fall into each category?, list X-axis in desc order please.",
            "Show the total number from each category, I want to list in desc by the bars.",
            "Show all book categories and the number of books in each category with a bar chart, and show by the names from high to low.",
            "How many books fall into each category, I want to list in desc by the bars.",
            "Show all book categories and the number of books in each category, I want to list in desc by the bars.",
            "Visualize a bar chart for how many books fall into each category?, show by the names from high to low."
        ],
        "record_name": "907@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "tvshow_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Package_Option",
            "y_name": "COUNT(Package_Option)",
            "x_data": [
                [
                    "Sky Famiglia",
                    "Sky Famiglia + Sky HD",
                    "no ( FTV )"
                ]
            ],
            "y_data": [
                [
                    8,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Package_Option"
        },
        "nl_queries": [
            "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a pie chart",
            "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
            "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a pie chart",
            "A pie chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?"
        ],
        "record_name": "3063"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'"
        },
        "chart": "Scatter",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "employee_id",
            "y_name": "COMMISSION_PCT",
            "x_data": [
                [
                    100,
                    205,
                    168,
                    114,
                    148,
                    169,
                    151,
                    163,
                    103,
                    109,
                    175,
                    121,
                    153,
                    159,
                    112,
                    111,
                    160,
                    161,
                    113,
                    165,
                    123,
                    203,
                    166,
                    179,
                    173,
                    105,
                    107,
                    184,
                    185,
                    192,
                    137,
                    133,
                    138,
                    180,
                    194,
                    115,
                    142,
                    116,
                    117,
                    183,
                    143,
                    198,
                    199,
                    131,
                    140,
                    191,
                    127,
                    128
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0.25,
                    0,
                    0.3,
                    0.2,
                    0.25,
                    0.15,
                    0,
                    0,
                    0.25,
                    0,
                    0.2,
                    0.3,
                    0,
                    0,
                    0.3,
                    0.25,
                    0,
                    0.1,
                    0,
                    0,
                    0.1,
                    0.1,
                    0.1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For all employees who have the letters D or S in their first name, a scatter chart shows the correlation between  employee_id and  commission_pct .",
            "For all employees who have the letters D or S in their first name, what is the relationship between  employee_id and  commission_pct ?",
            "For all employees who have the letters D or S in their first name, draw a scatter chart about the correlation between  employee_id and  commission_pct .",
            "For all employees who have the letters D or S in their first name, return a scatter chart about the correlation between  employee_id and  commission_pct .",
            "For all employees who have the letters D or S in their first name, visualize a scatter chart about the correlation between  employee_id and  commission_pct ."
        ],
        "record_name": "1576"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Fname , Dept_ID FROM employees ORDER BY Dept_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Fname , Dept_ID FROM employees ORDER BY Dept_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Fname",
            "y_name": "Dept_ID",
            "x_data": [
                [
                    "Shelley",
                    "Nancy",
                    "Steven",
                    "John",
                    "Hermann",
                    "Alexander",
                    "Adam",
                    "Susan",
                    "Den",
                    "Michael",
                    "Jennifer"
                ]
            ],
            "y_data": [
                [
                    110,
                    100,
                    90,
                    80,
                    70,
                    60,
                    50,
                    40,
                    30,
                    20,
                    10
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Use a histogram to show the department's id and corresponding employees' first name, and order by the y axis in desc please.",
            "Show me department_id by first name in a histogram, and show by the y axis in descending."
        ],
        "record_name": "1899@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN course AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY EMPLOYEE_FIRST_NAME ORDER BY EMPLOYEE_FIRST_NAME ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN course AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY EMPLOYEE_FIRST_NAME ORDER BY EMPLOYEE_FIRST_NAME ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "EMPLOYEE_FIRST_NAME",
            "y_name": "COUNT(EMPLOYEE_FIRST_NAME)",
            "x_data": [
                [
                    "Arnelle",
                    "Carlos",
                    "Gerald",
                    "Ismael",
                    "Peter",
                    "Robert"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    3,
                    2,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY EMP_FNAME"
        },
        "nl_queries": [
            "How many courses each teacher taught? Show me a bar chart, I want to rank bars in ascending order please.",
            "Show the number of courses each instructor taught in a bar chart, show in asc by the X."
        ],
        "record_name": "583@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Budget_Type_Code",
            "y_name": "COUNT(Budget_Type_Code)",
            "x_data": [
                [
                    "GV",
                    "ORG",
                    "SF"
                ]
            ],
            "y_data": [
                [
                    6,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Budget_Type_Code"
        },
        "nl_queries": [
            "Show the number of documents for different budget type code in a pie chart.",
            "Return a pie chart to show how many documents for different budget type code."
        ],
        "record_name": "834"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM student AS T1 JOIN enroll AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM student AS T1 JOIN enroll AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "STUDENT_LAST_NAME",
            "y_name": "COUNT(STUDENT_LAST_NAME)",
            "x_data": [
                [
                    "Smithson",
                    "Bowser"
                ]
            ],
            "y_data": [
                [
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY STU_LNAME"
        },
        "nl_queries": [
            "Find the number of students who took some course and got A or C and group by last name in a bar chart, show by the y-axis from low to high.",
            "How many students taking a course who received an A or C? Group by students' last name with a bar chart, display in ascending by the the number of stu lname."
        ],
        "record_name": "578@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "tracking_grants_for_research_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "sum(grant_quantity)",
            "y_name": "organisation_id",
            "x_data": [
                [
                    608438.0290999999,
                    281.2446,
                    610.7004,
                    76977810.29079999,
                    42.8061,
                    25313.51,
                    38679503.1437,
                    330.6339,
                    2001349.459,
                    4516014.121800002
                ]
            ],
            "y_data": [
                [
                    2,
                    3,
                    5,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    14
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize a scatter chart on what is the total amount of grants given by each organisations? Also list the organisation id.",
            "Scatter chart. what is the total amount of grants given by each organisations? Also list the organisation id.",
            "What is the total amount of grants given by each organisations? Also list the organisation id. ",
            "Scatter chart. what is the total amount of grant money given to each organization and what is its id?",
            "plot scatter on what is the total amount of grant money given to each organization and what is its id?",
            "What is the total amount of grant money given to each organization and what is its id. Show the correlation.",
            "Plot a scatter chart, sum(grant amount) by organisation_id."
        ],
        "record_name": "2961"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "SUM(Code)",
            "x_data": [
                [
                    "Hewlett-Packard",
                    "Creative Labs",
                    "Winchester",
                    "Sony",
                    "Iomega",
                    "Fujits"
                ]
            ],
            "y_data": [
                [
                    28,
                    23,
                    6,
                    5,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, order in descending by the y axis.",
            "For those records from the products and each product's manufacturer, find name and the sum of code , and group by attribute name, and visualize them by a bar chart, and show total number of code from high to low order.",
            "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, could you list by the y axis in desc?",
            "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of code , and group by attribute name, could you display total number in desc order?",
            "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of code , and group by attribute name in a bar chart, and sort y-axis in desc order."
        ],
        "record_name": "2205@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT investor_details , COUNT(investor_details) FROM INVESTORS GROUP BY investor_details ORDER BY COUNT(investor_details) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT investor_details , COUNT(investor_details) FROM INVESTORS GROUP BY investor_details ORDER BY COUNT(investor_details) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "tracking_share_transactions_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "investor_details",
            "y_name": "COUNT(investor_details)",
            "x_data": [
                [
                    "z",
                    "y",
                    "w",
                    "l",
                    "k",
                    "d",
                    "t",
                    "r",
                    "q",
                    "o",
                    "j",
                    "i",
                    "c",
                    "b"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Investor_details"
        },
        "nl_queries": [
            "Show all investor details, and count them by a bar chart, I want to rank from high to low by the how many investor details please.",
            "Plot the number of investor details by grouped by investor details as a bar graph, display Y from high to low order."
        ],
        "record_name": "3002@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC",
                "binning": "BIN date_of_enrolment BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "e_learning_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_enrolment",
            "y_name": "COUNT(date_of_enrolment)",
            "x_data": [
                [
                    "Thur",
                    "Wed",
                    "Tue",
                    "Sun",
                    "Sat",
                    "Mon",
                    "Fri"
                ]
            ],
            "y_data": [
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_enrolment BY WEEKDAY"
        },
        "nl_queries": [
            "What is the date of enrollment of the course named \"Spanish\", and count them by a bar chart, and list by the total number in desc.",
            "Find the number of the the date of enrollment of the \"Spanish\" course, I want to show in desc by the y-axis.",
            "Find the the date of enrollment of the \"Spanish\" course, and count them by a bar chart, and order Y-axis in descending order.",
            "A bar chart for finding the number of the the date of enrollment of the \"Spanish\" course, list by the total number in desc."
        ],
        "record_name": "1294@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY hometown_city DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY hometown_city DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "school_bus_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "hometown_city",
            "y_name": "AVG(years)",
            "x_data": [
                [
                    "Manchester",
                    "Hartford",
                    "East Hartford",
                    "Coventry",
                    "Bethel"
                ]
            ],
            "y_data": [
                [
                    52,
                    43.5,
                    37,
                    35,
                    30
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Home_city"
        },
        "nl_queries": [
            "Show the average age of drivers from the same home city using a bar graph, could you rank X from high to low order?",
            "Plot the average of age by grouped by home city as a bar graph, could you sort by the bar from high to low?",
            "Compare the average age of drivers from the same home city with a bar chart, sort in descending by the X."
        ],
        "record_name": "2698@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT length , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.identification = T2.start_station_identification GROUP BY T2.start_station_identification",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT length , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.identification = T2.start_station_identification GROUP BY T2.start_station_identification"
        },
        "chart": "Scatter",
        "hardness": "Medium",
        "db_id": "bike_1_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "length",
            "y_name": "avg(T2.duration)",
            "x_data": [
                [
                    -121.901782,
                    -121.888979,
                    -121.894902,
                    -121.8932,
                    -121.894074,
                    -121.886943,
                    -121.885831,
                    -121.894715,
                    -121.886995,
                    -121.88566000000002,
                    -121.883891,
                    -121.88993700000002,
                    -121.900084,
                    -121.877349,
                    -122.226904,
                    -122.232089,
                    -122.227424,
                    -122.203288,
                    -122.223492,
                    -122.081896,
                    -122.07671299999998,
                    -122.106758,
                    -122.066553,
                    -122.108338,
                    -122.083678,
                    -122.099076,
                    -122.164759,
                    -122.163093,
                    -122.142805,
                    -122.159504,
                    -122.13777749999998,
                    -122.408433,
                    -122.39997,
                    -122.398436,
                    -122.402923,
                    -122.404767,
                    -122.403452,
                    -122.398525,
                    -122.390637,
                    -122.394203,
                    -122.391034,
                    -122.388013,
                    -122.394643,
                    -122.39708600000002,
                    -122.405127,
                    -122.418235,
                    -122.418603,
                    -122.403234,
                    -122.39028799999998,
                    -122.39623600000002,
                    -122.398108,
                    -122.392738,
                    -122.402717,
                    -122.418954,
                    -122.417385,
                    -122.401014,
                    -122.39547,
                    -122.39526,
                    -122.408499,
                    -122.411748,
                    -122.407245,
                    -122.394434,
                    -122.399051,
                    -122.404966,
                    -122.400811,
                    -121.905733,
                    -122.40086200000002,
                    -122.236234,
                    -121.895617
                ]
            ],
            "y_data": [
                [
                    544.7611940298508,
                    885,
                    378.28,
                    980.0714285714287,
                    840.225,
                    529.0909090909091,
                    682.3333333333334,
                    1230.655172413793,
                    1123.4,
                    810.5416666666665,
                    711.7777777777777,
                    616.4,
                    608.8333333333334,
                    3597.095238095238,
                    3909,
                    2643.871794871795,
                    741,
                    979.0666666666667,
                    555.4,
                    563.0333333333333,
                    714.8062015503875,
                    380.4090909090909,
                    918.1315789473683,
                    667.5925925925926,
                    1082.7142857142858,
                    699.7,
                    1653.3255813953488,
                    2643.6,
                    1423.842105263158,
                    1164.1153846153845,
                    872.2222222222223,
                    1245.5836909871246,
                    906.0827586206897,
                    1067.6629213483143,
                    524.774834437086,
                    1497.7671232876712,
                    825.1928571428572,
                    1817.221649484536,
                    655.7166666666667,
                    1802.6721991701245,
                    938.7894736842104,
                    766.0746268656717,
                    535.0488372093023,
                    752.6637554585153,
                    551.4051282051282,
                    1774.6315789473686,
                    734.3861386138614,
                    1630.002267573696,
                    905.3340611353713,
                    399.6787330316742,
                    414.5117370892018,
                    512.8461538461538,
                    568.9297752808989,
                    912.8475609756098,
                    1139.6389891696754,
                    561.7394957983194,
                    725.3219284603423,
                    801.9405320813771,
                    765.4458598726114,
                    1276.7208121827412,
                    1423.375,
                    890.9441964285713,
                    655.2933333333333,
                    1664.8505338078294,
                    786.4408284023668,
                    862.4666666666667,
                    1044.7237569060774,
                    253.33333333333331,
                    556
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each station, just simply show its longitude and the average duration of trips that started from the station using a scatter chart.",
            "Please return a scatter chart to show each start station's longitude and the corresponding average duration of trips started there."
        ],
        "record_name": "328"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "swimming_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "meter_seven_hundred",
            "y_name": "meter_one_hundred",
            "x_data": [
                [
                    "6:57.69",
                    "6:52.58",
                    "6:52.69",
                    "6:57.44",
                    "6:55.07",
                    "6:50.91",
                    "6:50.80",
                    "6:53.34"
                ]
            ],
            "y_data": [
                [
                    57.84,
                    57.66,
                    57.35,
                    57.34,
                    57.34,
                    57.31,
                    57.31,
                    55.67
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show me about the distribution of meter_700 and meter_100 in a bar chart, order by the Y-axis in descending.",
            "Bar graph to show meter_100 from different meter 700, and order by the meter_100 from high to low.",
            "Give me the comparison about meter_100 over the meter_700 , and order by the meter_100 from high to low.",
            "A bar chart shows the distribution of meter_700 and meter_100 , and show y axis in desc order.",
            "Find meter_700 and meter_100 , and visualize them by a bar chart, I want to show meter_100 in descending order.",
            "Visualize a bar chart about the distribution of meter_700 and meter_100 , and I want to show meter_100 in descending order."
        ],
        "record_name": "2925@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM Company GROUP BY Headquarters",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM Company GROUP BY Headquarters"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "gas_company_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarters",
            "y_name": "COUNT(Headquarters)",
            "x_data": [
                [
                    "Brazil",
                    "China",
                    "Netherlands",
                    "UK",
                    "USA"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1,
                    2,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarters"
        },
        "nl_queries": [
            "Show the number of companies in each headquarter with a bar chart.",
            "How many companies in each headquarter? Plot a bar chart.",
            "Bar chart of how many headquarters from each headquarters"
        ],
        "record_name": "1518"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "dog_kennels_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Lname",
            "y_name": "COUNT(Lname)",
            "x_data": [
                [
                    "DuBuque",
                    "Feil",
                    "Fisher",
                    "Funk",
                    "Haley",
                    "Mertz",
                    "Nicolas",
                    "Price",
                    "Prohaska",
                    "Rippin",
                    "Schmitt",
                    "Stoltenberg"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY last_name"
        },
        "nl_queries": [
            "List the number of dogs each owner has in a bar chart that groups by owner's last name, and sort x-axis from low to high order.",
            "How many dogs each owner has? Return a bar chart that groups by owner's last name, I want to show in ascending by the X-axis."
        ],
        "record_name": "1204@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "employee_hire_evaluation_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ss_full_time",
            "y_name": "COUNT(ss_full_time)",
            "x_data": [
                [
                    "F",
                    "T"
                ]
            ],
            "y_data": [
                [
                    2,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Is_full_time"
        },
        "nl_queries": [
            "Draw a bar chart about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and I want to show in ascending by the bars.",
            "Draw a bar chart of is full time versus how many is full time, and I want to list in asc by the Is_full_time.",
            "Return a bar chart about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and list by the X in ascending.",
            "A bar chart shows the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and I want to display from low to high by the X.",
            "Give me the comparison about the amount of Is_full_time over the Is_full_time , and group by attribute Is_full_time by a bar chart, list by the x-axis in asc.",
            "Show me about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time in a bar chart, I want to show in ascending by the bars."
        ],
        "record_name": "1335@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "total_neutral",
            "y_name": "percentage_of_ACC",
            "x_data": [
                [
                    "3\u20133",
                    "4\u20133",
                    "5\u20133",
                    "9\u20131"
                ]
            ],
            "y_data": [
                [
                    0.563,
                    0.625,
                    0.813,
                    0.875
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show me about the distribution of All_Neutral and ACC_Percent in a bar chart, and could you list X in asc order?",
            "A bar chart shows the distribution of All_Neutral and ACC_Percent , and rank by the x-axis from low to high please.",
            "Bar chart of acc_percent from each all neutral, and could you show from low to high by the X please?",
            "Return a bar chart about the distribution of All_Neutral and ACC_Percent , could you list X in asc order?",
            "Visualize a bar chart about the distribution of All_Neutral and ACC_Percent , and sort by the x-axis in asc.",
            "Give me the comparison about ACC_Percent over the All_Neutral , and could you rank All_Neutral in ascending order?"
        ],
        "record_name": "3144@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "loan_1_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "acc_type",
            "y_name": "avg(acc_bal)",
            "x_data": [
                [
                    "checking",
                    "saving"
                ]
            ],
            "y_data": [
                [
                    1000,
                    2000
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each account type, find the average account balance of customers with credit score lower than 50. Show a pie chart.",
            "what is the average account balance of customers with credit score below 50 for the different account types?",
            "Show me a pie chart for what is the average account balance of customers with credit score below 50 for the different account types?",
            "What is the average account balance of customers with credit score below 50 for the different account types. Show the proportion."
        ],
        "record_name": "2067"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder"
        },
        "chart": "Grouping Scatter",
        "hardness": "Medium",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Code",
            "y_name": "Price",
            "x_data": [
                [
                    5
                ],
                [
                    8,
                    9,
                    11
                ],
                [
                    1
                ],
                [
                    3
                ],
                [
                    6,
                    7,
                    10
                ],
                [
                    2,
                    4
                ]
            ],
            "y_data": [
                [
                    240
                ],
                [
                    270,
                    66,
                    150
                ],
                [
                    240
                ],
                [
                    150
                ],
                [
                    180,
                    90,
                    180
                ],
                [
                    120,
                    5
                ]
            ],
            "classify": [
                "Andy",
                "James",
                "John",
                "Mary",
                "Owen",
                "Robert"
            ],
            "describe": "GROUP BY Founder"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, visualize the relationship between  code and  price , and group by attribute founder.",
            "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  code and  price , and group by attribute founder.",
            "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  code and  price , and group by attribute founder.",
            "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  price , and group by attribute founder.",
            "For those records from the products and each product's manufacturer, show me about the correlation between  code and  price , and group by attribute founder in a scatter chart."
        ],
        "record_name": "2293"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT transaction_class_code , avg(transaction_amount) FROM TRANSACTIONS GROUP BY transaction_class_code",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM TRANSACTIONS GROUP BY transaction_class_code"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "tracking_share_transactions_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "transaction_class_code",
            "y_name": "avg(transaction_amount)",
            "x_data": [
                [
                    "PUR",
                    "SALE"
                ]
            ],
            "y_data": [
                [
                    25945880.3716125,
                    11198167.237771427
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the average transaction amount for different transaction types with a pie chart.",
            "Show the average transaction amount for different transaction types. Visualize by pie chart.",
            "Compute the total the average of amount of transaction across transaction type code as a pie chart."
        ],
        "record_name": "3004"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC"
        },
        "chart": "Line",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_of_hire",
            "y_name": "COMMISSION_PCT",
            "x_data": [
                [
                    "1987-06-17",
                    "1987-06-18",
                    "1987-06-19",
                    "1987-06-20",
                    "1987-06-21",
                    "1987-06-22",
                    "1987-06-23",
                    "1987-06-24",
                    "1987-06-25",
                    "1987-06-26",
                    "1987-06-27",
                    "1987-06-28",
                    "1987-06-29",
                    "1987-06-30",
                    "1987-07-01",
                    "1987-07-02",
                    "1987-07-03",
                    "1987-07-04",
                    "1987-07-05",
                    "1987-07-06",
                    "1987-07-07",
                    "1987-07-08",
                    "1987-07-09",
                    "1987-07-10",
                    "1987-07-11",
                    "1987-07-12",
                    "1987-07-13",
                    "1987-07-14",
                    "1987-07-15",
                    "1987-07-16",
                    "1987-07-17",
                    "1987-07-18",
                    "1987-07-19",
                    "1987-07-20",
                    "1987-07-21",
                    "1987-07-22",
                    "1987-07-23",
                    "1987-07-24",
                    "1987-07-25",
                    "1987-07-26",
                    "1987-07-27",
                    "1987-07-28",
                    "1987-07-29",
                    "1987-07-30",
                    "1987-07-31",
                    "1987-08-01",
                    "1987-08-02",
                    "1987-08-03",
                    "1987-08-04",
                    "1987-08-05",
                    "1987-08-06",
                    "1987-08-07",
                    "1987-08-08",
                    "1987-08-09",
                    "1987-08-10",
                    "1987-08-11",
                    "1987-08-12",
                    "1987-08-13",
                    "1987-08-14",
                    "1987-08-15",
                    "1987-08-16",
                    "1987-08-17",
                    "1987-08-18",
                    "1987-08-19",
                    "1987-08-20",
                    "1987-08-21",
                    "1987-08-22",
                    "1987-08-23",
                    "1987-08-24",
                    "1987-08-25",
                    "1987-08-26",
                    "1987-08-27",
                    "1987-08-28",
                    "1987-08-29",
                    "1987-08-30",
                    "1987-08-31",
                    "1987-09-01",
                    "1987-09-02",
                    "1987-09-03",
                    "1987-09-04",
                    "1987-09-05",
                    "1987-09-06",
                    "1987-09-07",
                    "1987-09-08",
                    "1987-09-09",
                    "1987-09-10",
                    "1987-09-11",
                    "1987-09-12",
                    "1987-09-13",
                    "1987-09-14",
                    "1987-09-15",
                    "1987-09-16",
                    "1987-09-17",
                    "1987-09-18",
                    "1987-09-19",
                    "1987-09-20",
                    "1987-09-21",
                    "1987-09-22",
                    "1987-09-23",
                    "1987-09-24",
                    "1987-09-25",
                    "1987-09-26",
                    "1987-09-27",
                    "1987-09-29",
                    "1987-09-30",
                    "1987-10-01"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.4,
                    0.3,
                    0.3,
                    0.3,
                    0.2,
                    0.3,
                    0.25,
                    0.25,
                    0.2,
                    0.2,
                    0.15,
                    0.35,
                    0.35,
                    0.35,
                    0.3,
                    0.3,
                    0.25,
                    0.25,
                    0.15,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.25,
                    0.2,
                    0.2,
                    0.15,
                    0.15,
                    0.1,
                    0.3,
                    0.25,
                    0.2,
                    0.2,
                    0.15,
                    0.1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a line chart about the change of commission_pct over hire_date , and sort X-axis from low to high order.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a line chart shows the change of commission_pct over hire_date, and sort X-axis from low to high order.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a line chart shows the trend of commission_pct over hire_date , show X-axis in ascending order please.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a line chart about the change of commission_pct over hire_date , show in asc by the X-axis.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the change of commission_pct over hire_date in a line chart, order from low to high by the x-axis.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a line chart about the change of commission_pct over hire_date , rank x axis in ascending order."
        ],
        "record_name": "1621@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.productID = T2.productID GROUP BY T1.product_name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.productID = T2.productID GROUP BY T1.product_name"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_products_contacts_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_name",
            "y_name": "AVG(sum(T2.order_quantity))",
            "x_data": [
                [
                    "Apple",
                    "gucci",
                    "jcrew"
                ]
            ],
            "y_data": [
                [
                    7.666666666666667,
                    7,
                    10
                ]
            ],
            "classify": [],
            "describe": "GROUP BY product_name"
        },
        "nl_queries": [
            "Show the product name and total order quantity for each product with a bar chart.",
            "Show the product name and total order quantity for each product. Show bar chart."
        ],
        "record_name": "1002"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT FName , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.Customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT FName , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.Customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "store_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "FName",
            "y_name": "SUM(T2.total)",
            "x_data": [
                [
                    "Helena",
                    "Richard",
                    "Luis",
                    "Ladislav",
                    "Hugh",
                    "Julia",
                    "Frank",
                    "Fynn",
                    "Astrid",
                    "Victor"
                ]
            ],
            "y_data": [
                [
                    49.62000000000001,
                    47.62000000000001,
                    46.62,
                    45.62,
                    45.62,
                    43.62000000000001,
                    43.62,
                    43.62,
                    42.62,
                    42.62
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "List the top 10 customers by total gross sales. Compare the total gross sales of customers by their first name.",
            "What are the top 10 customers' first names with the highest gross sales, and also what are the sales?",
            "What are the top 10 customers' first names with the highest gross sales, and also what are the sales? Visualize the result with a bar chart."
        ],
        "record_name": "2852"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Directed_by",
            "y_name": "COUNT(Directed_by)",
            "x_data": [
                [
                    "Jesus Salvador Trevi\u00f1o",
                    "Bill Schreiner"
                ]
            ],
            "y_data": [
                [
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Directed_by"
        },
        "nl_queries": [
            "Give me a bar chart showing the number of films for each director, and I want to display by the x-axis in desc please.",
            "What is the number of films of each director? Return a bar chart, and could you order from high to low by the x axis?",
            "Bar graph to show the number of directed by from different directed by, and I want to sort by the x axis from high to low."
        ],
        "record_name": "443@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "CITY",
            "y_name": "COUNT(CITY)",
            "x_data": [
                [
                    "London",
                    "Munich",
                    "OX9 9ZB",
                    "Seattle",
                    "South San Francisco",
                    "Southlake",
                    "Toronto"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    21,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY CITY"
        },
        "nl_queries": [
            "Group and count the city attribute of the location table to visualize a bar chart, show by the names from low to high.",
            "Give me a bar chart to compare the number of departments located in different cities, and rank in ascending by the x-axis.",
            "Create a bar chart showing the number of city across city, order in asc by the bars."
        ],
        "record_name": "1624@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT class , COUNT(class) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY COUNT(class) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY COUNT(class) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "ship_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "class",
            "y_name": "COUNT(class)",
            "x_data": [
                [
                    "KR",
                    "GL"
                ]
            ],
            "y_data": [
                [
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Class"
        },
        "nl_queries": [
            "Give me a bar chart showing the total number of ships' classes that do not have a captain, show Y in descending order.",
            "For those ships that do not have a captain, tell me the total number of their classes using a pie chart, and rank in desc by the y-axis."
        ],
        "record_name": "2749@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "journal_committee_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Kamila Porczyk",
                    "Marek Siudym",
                    "Maria G\u00f3ralczyk",
                    "Piotr Pr\u0119gowski",
                    "W\u0142adys\u0142aw Grzywna",
                    "Gra\u017cyna Wolszczak"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Bar chart x axis name y axis how many name, and could you sort in ascending by the Y?",
            "Group and count the name attribute for visualizing a bar chart, and display total number in asc order."
        ],
        "record_name": "2055@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT DEPARTMENT_CODE , count(*) FROM student GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM student GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "DEPARTMENT_CODE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "ENGL",
                    "EDU",
                    "CIS",
                    "BIOL",
                    "ACCT"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "how many students are in each department?, and display X from high to low order.",
            "Find the number of students for each department Plot them as bar chart, and display in desc by the names.",
            "Return a histogram on how many students are in each department?, and I want to order by the names from high to low.",
            "How many students are in each department Visualize by bar chart, and display X from high to low order.",
            "Draw a bar chart of dept code versus the total number, rank by the bar in descending."
        ],
        "record_name": "564@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY Year",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY Year"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "wine_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year",
            "y_name": "COUNT(Year)",
            "x_data": [
                [
                    "2006-01-01",
                    "2007-01-01",
                    "2008-01-01"
                ]
            ],
            "y_data": [
                [
                    4,
                    11,
                    2
                ],
                [
                    1,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    0
                ]
            ],
            "classify": [
                "Cabernet Sauvingnon",
                "Grenache",
                "Syrah"
            ],
            "describe": "GROUP BY Grape, GROUP BY Year"
        },
        "nl_queries": [
            "For those wines whose price is bigger than 100, count their total number of each year and sort by year in a bar chart."
        ],
        "record_name": "3227"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "phone_market_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Carrier",
            "y_name": "COUNT(Carrier)",
            "x_data": [
                [
                    "Sprint",
                    "TMobile"
                ]
            ],
            "y_data": [
                [
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Carrier"
        },
        "nl_queries": [
            "Bar chart x axis carrier y axis the number of carrier, show by the X in asc.",
            "What is the number of carriers of phones? Give me a bar chart, and sort X in asc order.",
            "Can you show a bar chart to visualize the number of carriers?, and I want to display in ascending by the x-axis."
        ],
        "record_name": "2569@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'",
                "binning": "BIN year BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "baseball_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "year",
            "y_name": "AVG(count(*))",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    10,
                    8.333333333333334,
                    5,
                    10,
                    5,
                    5,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN year BY WEEKDAY"
        },
        "nl_queries": [
            "Give me a bar chart that bins the year into day of the week interval, and return the average number of times the team Boston Red Stockings won in the postseasons."
        ],
        "record_name": "160"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT category , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY count(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT category , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY count(*) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "school_bus_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "category",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Private",
                    "Public"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the type of school and the number of buses for each type in a bar chart, display y axis in descending order.",
            "Show the type of school and the number of buses for each type, and I want to list by the y axis in descending."
        ],
        "record_name": "2694@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Pet_ID , weight FROM pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Pet_ID , weight FROM pets WHERE pet_age > 1 ORDER BY Pet_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "pets_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Pet_ID",
            "y_name": "weight",
            "x_data": [
                [
                    "2002-01-01",
                    "2001-01-01"
                ]
            ],
            "y_data": [
                [
                    13.4,
                    12
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A bar chart about what is the id and weight of every pet who is older than 1?, could you list by the names in descending?",
            "What is the id and weight of every pet who is older than 1, and show by the bars in descending.",
            "Visualize a bar chart for what is the id and weight of every pet who is older than 1?, and I want to list in desc by the X.",
            "Find the id and weight of all pets whose age is older than 1 Visualize by bar chart, sort in descending by the names."
        ],
        "record_name": "2551@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_home ,  ACC_Street ORDER BY teamID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_home ,  ACC_Street ORDER BY teamID DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ACC_Street",
            "y_name": "teamID",
            "x_data": [
                [
                    "3\u20135",
                    "6\u20132",
                    "8\u20130"
                ]
            ],
            "y_data": [
                [
                    4,
                    0,
                    1
                ],
                [
                    3,
                    2,
                    0
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home, GROUP BY ACC_Road"
        },
        "nl_queries": [
            "Find ACC_Road and Team_ID , and group by attribute ACC_Home, and visualize them by a bar chart, and list from high to low by the Team_ID.",
            "A bar chart shows the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home, and list from high to low by the Team_ID.",
            "Give me the comparison about Team_ID over the ACC_Road , and group by attribute ACC_Home, and display Y in descending order.",
            "Stacked bar chart of team_id for with each ACC_Home in each acc road, display Y in descending order.",
            "Draw a bar chart about the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home, list Y-axis in descending order.",
            "Show me about the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home in a bar chart, list from high to low by the Team_ID."
        ],
        "record_name": "3090@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "ship_mission_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "citizenship",
            "y_name": "COUNT(citizenship)",
            "x_data": [
                [
                    "United States",
                    "United Kingdom"
                ]
            ],
            "y_data": [
                [
                    3,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "What is the total number of different nationalities of all ships? Give me a bar graph, and I want to list by the Y from low to high.",
            "Return a bar chart showing the total number of ships' nationalities, display from low to high by the how many nationality.",
            "Show me the comparison of the total number of all ships' nationalities with a bar graph, and display from low to high by the how many nationality.",
            "Bar graph to show how many nationality from different nationality, display from low to high by the how many nationality."
        ],
        "record_name": "2760@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "department_store_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_category_code",
            "y_name": "max(product_price)",
            "x_data": [
                [
                    "Hardware",
                    "Clothes"
                ]
            ],
            "y_data": [
                [
                    971.44,
                    939.57
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the highest price of product, grouped by product type? Show a bar chart, list by the maximal product price in desc.",
            "Bar chart of maximal product price from each product type code, show in desc by the maximal product price please.",
            "Give the maximum product price for each product type in a bar chart, order in descending by the maximal product price please."
        ],
        "record_name": "1116@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "dog_kennels_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Houston",
                    "Kacey",
                    "Lyric"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "List the number of the treatments for each dog of the rarest breed in a bar chart.",
            "How many treatments for each dog of the rarest breed? Give me a bar chart."
        ],
        "record_name": "1155"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT banner , COUNT(banner) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain WHERE rank = 'Midshipman') GROUP BY banner ORDER BY banner ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT banner , COUNT(banner) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain WHERE rank = 'Midshipman') GROUP BY banner ORDER BY banner ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "ship_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "banner",
            "y_name": "COUNT(banner)",
            "x_data": [
                [
                    "Malta",
                    "Panama"
                ]
            ],
            "y_data": [
                [
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Flag"
        },
        "nl_queries": [
            "What is the total number of flags of ships that do not have a captain with the rank of Midshipman? Show the result using a bar chart, and display by the X in ascending.",
            "Show me the total number of the flag of ships that are not steered by any captain with Midshipman rank using a bar graph, show in ascending by the x axis."
        ],
        "record_name": "2735@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC",
                "binning": "BIN date BY YEAR"
            },
            "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "bike_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date",
            "y_name": "SUM(cloud_cover)",
            "x_data": [
                [
                    "2014",
                    "2015"
                ]
            ],
            "y_data": [
                [
                    32,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN date BY YEAR"
        },
        "nl_queries": [
            "What is the total cloud cover rates of the dates (bin into year interval) that had the top 5 cloud cover rates? You can draw me a bar chart for this purpose, rank in descending by the Y-axis.",
            "For those dates that have the 5 highest cloud cover rates, please bin the date into Year interval and compute their total cloud cover, and order in desc by the total number.",
            "Bar chart x axis date y axis total number of cloud cover, and show Y from high to low order.",
            "I want a bar chart to show the total cloud cover of the dates that have the 5 highest cloud cover rates each year, and rank in descending by the Y-axis."
        ],
        "record_name": "344@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "COUNT(JOB_ID)",
            "x_data": [
                [
                    "FI_ACCOUNT",
                    "FI_MGR"
                ]
            ],
            "y_data": [
                [
                    5,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For all employees in the Finance department, compare the total number of different job id using a bar chart.",
            "Give me a bar chart that groups and count the job id for all employees in the Finance department."
        ],
        "record_name": "1962"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "e_learning_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_test_taken",
            "y_name": "COUNT(date_test_taken)",
            "x_data": [
                [
                    "2018-03-25",
                    "2018-03-24",
                    "2018-03-23",
                    "2018-03-21",
                    "2018-03-19"
                ]
            ],
            "y_data": [
                [
                    3,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date_test_taken"
        },
        "nl_queries": [
            "Find the dates of the tests taken with result \"Pass\", and count them by a bar chart, and rank names in descending order.",
            "A bar chart for finding the number of the dates of the tests taken with result \"Pass\", show X-axis in desc order.",
            "Find the number of the dates of the tests taken with result \"Pass\", and I want to list by the bars from high to low.",
            "Which tests have \"Pass\" results? Return the dates when the tests were taken, and count them by a bar chart, rank by the X in desc."
        ],
        "record_name": "1284@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "voter_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "state",
            "y_name": "AVG(vote_id)",
            "x_data": [
                [
                    "CA",
                    "NJ\n",
                    "NY"
                ]
            ],
            "y_data": [
                [
                    3,
                    5,
                    1.5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY state"
        },
        "nl_queries": [
            "List the states of all votes, compute the total number of states, and compute the average of their vote id with a bar chart, and order by the x axis in ascending.",
            "Bar chart x axis state y axis the average of vote id, and list bar from low to high order."
        ],
        "record_name": "3195@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "SUM(Dept_ID)",
            "x_data": [
                [
                    "AC_ACCOUNT",
                    "AC_MGR",
                    "AD_ASST",
                    "AD_PRES",
                    "AD_VP",
                    "FI_ACCOUNT",
                    "FI_MGR",
                    "IT_PROG",
                    "MK_MAN",
                    "MK_REP",
                    "PR_REP",
                    "PU_CLERK",
                    "PU_MAN",
                    "SA_MAN",
                    "SA_REP",
                    "SH_CLERK",
                    "ST_CLERK",
                    "ST_MAN"
                ]
            ],
            "y_data": [
                [
                    110,
                    110,
                    10,
                    90,
                    180,
                    500,
                    100,
                    300,
                    20,
                    20,
                    70,
                    150,
                    30,
                    400,
                    2320,
                    1000,
                    1000,
                    250
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and sort by the bar from low to high please.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of department_id over the job_id , and group by attribute job_id, and I want to order x-axis in asc order.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and display by the bar in asc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and display by the bar in asc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the sum of department_id , and group by attribute job_id, and could you order bars in ascending order?"
        ],
        "record_name": "1606@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "SUM(Dept_ID)",
            "x_data": [
                [
                    "AC_MGR",
                    "AD_PRES",
                    "FI_ACCOUNT",
                    "HR_REP",
                    "IT_PROG",
                    "PU_CLERK",
                    "PU_MAN",
                    "SA_MAN",
                    "SA_REP",
                    "SH_CLERK",
                    "ST_CLERK",
                    "ST_MAN"
                ]
            ],
            "y_data": [
                [
                    110,
                    90,
                    400,
                    40,
                    180,
                    90,
                    30,
                    80,
                    1040,
                    450,
                    450,
                    100
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For all employees who have the letters D or S in their first name, show me about the distribution of  job_id and the sum of department_id , and group by attribute job_id in a bar chart.",
            "For all employees who have the letters D or S in their first name, give me the comparison about the sum of department_id over the  job_id , and group by attribute job_id.",
            "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of  job_id and the sum of department_id , and group by attribute job_id.",
            "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  job_id and the sum of department_id , and group by attribute job_id.",
            "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of  job_id and the sum of department_id , and group by attribute job_id."
        ],
        "record_name": "1566"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "sakila_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "NAME",
            "y_name": "category_id",
            "x_data": [
                [
                    "Travel",
                    "Sports",
                    "Sci-Fi",
                    "New",
                    "Music",
                    "Horror",
                    "Games",
                    "Foreign",
                    "Family",
                    "Drama",
                    "Documentary",
                    "Comedy",
                    "Classics",
                    "Children",
                    "Animation",
                    "Action"
                ]
            ],
            "y_data": [
                [
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "List the genre name and genre id using a bar chart, list by the category_id in desc.",
            "What are the names and ids of the different categories? Show me the bar chart, list by the category_id in desc."
        ],
        "record_name": "2690@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\"  ORDER BY birthdate ASC",
                "binning": "BIN birthdate BY YEAR"
            },
            "VQL": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\"  ORDER BY birthdate ASC BIN birthdate BY YEAR"
        },
        "chart": "Line",
        "hardness": "Hard",
        "db_id": "apartment_rentals_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "birthdate",
            "y_name": "COUNT(birthdate)",
            "x_data": [
                [
                    "1983~1985",
                    "1986~1988",
                    "1989~1991",
                    "1992~1994",
                    "1995~1997",
                    "1998~2000",
                    "2001~2003",
                    "2004~2006",
                    "2007~2009",
                    "2010~2012",
                    "2013~2015"
                ]
            ],
            "y_data": [
                [
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_birth BY YEAR"
        },
        "nl_queries": [
            "Return the number of the date of birth for all the guests with gender code \"Male\", and could you display by the x axis in asc?",
            "What are the number of dates of birth of all the guests whose gender is \"Male\"?, I want to show x axis in ascending order.",
            "What are dates of birth of all the guests whose gender is \"Male\", and count them by a line chart, list date_of_birth in asc order.",
            "Return the date of birth for all the guests with gender code \"Male\", and count them by a line chart, I want to show x axis in ascending order.",
            "A line chart for returning the number of the date of birth for all the guests with gender code \"Male\", I want to show x axis in ascending order."
        ],
        "record_name": "80@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Project_information",
            "y_name": "ProjectID",
            "x_data": [
                [
                    "Human Resource project",
                    "Graph Database project",
                    "Internet of Things project",
                    "Society Research project"
                ]
            ],
            "y_data": [
                [
                    134,
                    105,
                    35,
                    30
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Return the ids and details corresponding to projects for which there are more than two documents in a bar chart, show from high to low by the total number.",
            "Return the ids and details corresponding to projects for which there are more than two documents Show bar chart, and show from high to low by the total number.",
            "What is the project id and detail for the project with at least two documents Plot them as bar chart, and order by the y axis from high to low.",
            "Show me a bar chart for what is the project id and detail for the project with at least two documents?, and order by the y axis from high to low.",
            "A bar chart about what is the project id and detail for the project with at least two documents?, and list y-axis from high to low order."
        ],
        "record_name": "824@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "theme_gallery_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year",
            "y_name": "COUNT(Year)",
            "x_data": [
                [
                    "2007",
                    "2008",
                    "2009",
                    "2006"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "classify": [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                "Summer"
            ],
            "describe": "GROUP BY Theme, BIN Year BY TIME"
        },
        "nl_queries": [
            "Find those themes and years for all exhibitions with ticket prices lower than 15, show me a stacked bar chart that groups by themes, counts year, and the x-axis is Year, show by the Y from low to high.",
            "Find those themes and years for all exhibitions with ticket prices lower than 15, group by themes, count year, and the x-axis is Year, show from low to high by the y-axis."
        ],
        "record_name": "2949@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street ,  all_home ORDER BY all_home ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street ,  all_home ORDER BY all_home ASC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "all_home",
            "y_name": "schoolID",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    4,
                    5,
                    0
                ],
                [
                    0,
                    0,
                    2
                ],
                [
                    1,
                    0,
                    0
                ]
            ],
            "classify": [
                "3\u20135",
                "6\u20132",
                "8\u20130"
            ],
            "describe": "GROUP BY ACC_Road, GROUP BY All_Home"
        },
        "nl_queries": [
            "Find All_Home and School_ID , and group by attribute ACC_Road, and visualize them by a bar chart, sort bars in ascending order.",
            "Visualize a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Road, could you sort by the bar in asc please?",
            "Give me the comparison about School_ID over the All_Home , and group by attribute ACC_Road by a bar chart, and sort names in ascending order please.",
            "Stack bar chart of school_id vs ACC_Road based on all home, and show bar in asc order.",
            "Give me the comparison about School_ID over the All_Home , and group by attribute ACC_Road, and show bar in asc order.",
            "Draw a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Road, and sort bars in ascending order."
        ],
        "record_name": "3087@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "scientist_1_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "A Silver-Cleaning Battery",
                    "Aerodynamics and Ice Hockey",
                    "Build Your Own Telescope",
                    "Juicy: Extracting Apple Juice with Pectinase"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the number of scientists involved for the projects that require more than 300 hours. Show a pie chart.",
            "Return a pie chart on what are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
            "A pie chart about what are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
            "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each. "
        ],
        "record_name": "2725"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC",
                "binning": "BIN Year BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "wine_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year",
            "y_name": "AVG(max(Score))",
            "x_data": [
                [
                    "Sun",
                    "Mon",
                    "Tue",
                    "Sat",
                    "Thur",
                    "Fri",
                    "Wed"
                ]
            ],
            "y_data": [
                [
                    98,
                    98,
                    95,
                    95,
                    93.5,
                    88,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN Year BY WEEKDAY"
        },
        "nl_queries": [
            "Compare the average of maximum score of wines each year, bin the year into the weekday interval, and show by the Y-axis from high to low.",
            "A bar chart about the average of maximum score of wines each year, bin the year into the weekday interval, and I want to show in descending by the total number.",
            "Compare the average of maximum score of wines each year, bin the year into the weekday interval and draw a bar chart, and list Y from high to low order.",
            "Give me a bar chart for mean max(score) of each year, and show by the Y-axis from high to low."
        ],
        "record_name": "3251@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC",
                "binning": "BIN date_of_notes BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "behavior_monitoring_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_notes",
            "y_name": "COUNT(date_of_notes)",
            "x_data": [
                [
                    "Tue",
                    "Thur",
                    "Wed",
                    "Sun",
                    "Sat",
                    "Mon",
                    "Fri"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_notes BY WEEKDAY"
        },
        "nl_queries": [
            "A bar chart for finding the number of the dates of assessment notes for students with first name \"Fanny\", and sort Y-axis in descending order.",
            "Find the dates of assessment notes for students with first name \"Fanny\", and count them by a bar chart, and I want to sort from high to low by the Y please.",
            "Find the number of the dates of assessment notes for students with first name \"Fanny\", I want to sort from high to low by the Y please."
        ],
        "record_name": "185@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT gender , COUNT(gender) FROM people GROUP BY gender",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "candidate_poll_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "gender",
            "y_name": "COUNT(gender)",
            "x_data": [
                [
                    "F",
                    "M"
                ]
            ],
            "y_data": [
                [
                    2,
                    7
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Sex"
        },
        "nl_queries": [
            "Give me the comparison about the amount of Sex over the  Sex , and group by attribute Sex by a bar chart.",
            "Return a bar chart about the distribution of  Sex and the amount of Sex , and group by attribute Sex.",
            "Show me about the distribution of  Sex and the amount of Sex , and group by attribute Sex in a bar chart.",
            "A bar chart shows the distribution of  Sex and the amount of Sex , and group by attribute Sex.",
            "Find  Sex and the amount of Sex , and group by attribute Sex, and visualize them by a bar chart.",
            "Bar chart x axis sex y axis how many sex"
        ],
        "record_name": "376"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT customer_Lname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT customer_Lname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_invoices_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "customer_Lname",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Schaefer",
                    "Leuschke",
                    "Keeling",
                    "Ruecker",
                    "Muller",
                    "Auer",
                    "Boyle"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    4,
                    1,
                    1,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the number of accounts for each customer in a bar chart grouping by customer's last name.",
            "How many accounts for each customer? Show a bar chart that groups by customer's last name."
        ],
        "record_name": "990"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , SUM(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Manager_ID) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , SUM(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Manager_ID) DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "SUM(Manager_ID)",
            "x_data": [
                [
                    "SA_REP",
                    "ST_CLERK",
                    "SH_CLERK",
                    "PU_CLERK",
                    "FI_ACCOUNT",
                    "IT_PROG",
                    "ST_MAN",
                    "SA_MAN",
                    "AC_ACCOUNT",
                    "MK_REP",
                    "AD_VP",
                    "PR_REP",
                    "FI_MGR",
                    "AD_ASST",
                    "AC_MGR",
                    "PU_MAN",
                    "MK_MAN",
                    "AD_PRES"
                ]
            ],
            "y_data": [
                [
                    4410,
                    2440,
                    2440,
                    570,
                    540,
                    514,
                    500,
                    500,
                    205,
                    201,
                    200,
                    101,
                    101,
                    101,
                    101,
                    100,
                    100,
                    0
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of manager_id over the job_id , and group by attribute job_id by a bar chart, display by the y axis in desc please.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the sum of manager_id , and group by attribute job_id, and visualize them by a bar chart, I want to list Y-axis from high to low order.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id, and display by the y axis in desc please.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart, and display by the y axis in desc please.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id, I want to sort by the Y in descending."
        ],
        "record_name": "1604@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT role_annotation , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT role_annotation , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Doc_Control_Systems_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "role_annotation",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Editor",
                    "Manager",
                    "Proof Manager",
                    "Photo"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show a bar chart about how many employees does each role have?"
        ],
        "record_name": "723"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "journal_committee_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Gra\u017cyna Wolszczak",
                    "Kamila Porczyk",
                    "Maria G\u00f3ralczyk",
                    "W\u0142adys\u0142aw Grzywna"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Show the number of the names of editors that are on the committee of journals with sales bigger than 3000.",
            "A pie chart for showing the number of the names of editors that are on the committee of journals with sales bigger than 3000.",
            "Show the names of editors that are on the committee of journals with sales bigger than 3000, and count them by a pie chart"
        ],
        "record_name": "2059"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "formula_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Honda",
                    "Toyota"
                ]
            ],
            "y_data": [
                [
                    45,
                    95
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Find the number of the names of Japanese constructors that have once earned more than 5 points?",
            "What are the names of all the Japanese constructors that have earned more than 5 points, and count them by a bar chart",
            "A bar chart for what are the number of the names of all the Japanese constructors that have earned more than 5 points?",
            "A bar chart for finding the number of the names of Japanese constructors that have once earned more than 5 points?",
            "What are the number of the names of all the Japanese constructors that have earned more than 5 points?",
            "Find the names of Japanese constructors that have once earned more than 5 points, and count them by a bar chart"
        ],
        "record_name": "1435"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Creative Labs",
                    "Fujits",
                    "Hewlett-Packard",
                    "Iomega",
                    "Sony",
                    "Winchester"
                ]
            ],
            "y_data": [
                [
                    3,
                    1,
                    3,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, show me about the distribution of  name and the amount of name , and group by attribute name in a bar chart.",
            "For those records from the products and each product's manufacturer, give me the comparison about the amount of name over the  name , and group by attribute name.",
            "For those records from the products and each product's manufacturer, find  name and the amount of name , and group by attribute name, and visualize them by a bar chart.",
            "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  name and the amount of name , and group by attribute name.",
            "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and the amount of name , and group by attribute name."
        ],
        "record_name": "2204"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name"
        },
        "chart": "Grouping Scatter",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "schoolID",
            "y_name": "percentage_of_ACC",
            "x_data": [
                [
                    4
                ],
                [
                    2
                ],
                [
                    1
                ],
                [
                    5
                ]
            ],
            "y_data": [
                [
                    0.625
                ],
                [
                    0.813
                ],
                [
                    0.875
                ],
                [
                    0.563
                ]
            ],
            "classify": [
                "Clemson",
                "Duke",
                "North Carolina",
                "Virginia Tech"
            ],
            "describe": "GROUP BY Team_Name"
        },
        "nl_queries": [
            "What is the relationship between  School_ID and  ACC_Percent , and group by attribute Team_Name?",
            "A scatter chart shows the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name.",
            "Show me about the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name in a scatter chart.",
            "Visualize a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name.",
            "Return a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name.",
            "Show the relation between school id and acc_percent for each Team_Name using a scatter chart"
        ],
        "record_name": "3163"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT birthdate , COUNT(birthdate) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY POTENTIAL DESC LIMIT 5",
                "binning": "BIN birthdate BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT birthdate , COUNT(birthdate) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY POTENTIAL DESC LIMIT 5 BIN birthdate BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "soccer_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "birthdate",
            "y_name": "COUNT(birthdate)",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2,
                    0,
                    1,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN birthday BY WEEKDAY"
        },
        "nl_queries": [
            "For the top five players in terms of potential, bin their birthday into weekday interval, and show me the distribution of their birthday.",
            "For the top five players in terms of potential, bin their birthday into weekday interval count them using a bar graph."
        ],
        "record_name": "2780"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Document_information , COUNT(Document_information) FROM Documents GROUP BY Document_information ORDER BY COUNT(Document_information) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Document_information , COUNT(Document_information) FROM Documents GROUP BY Document_information ORDER BY COUNT(Document_information) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Document_information",
            "y_name": "COUNT(Document_information)",
            "x_data": [
                [
                    "y",
                    "w",
                    "h",
                    "z",
                    "r",
                    "n",
                    "k",
                    "f",
                    "b",
                    ""
                ]
            ],
            "y_data": [
                [
                    4,
                    2,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Document_Description"
        },
        "nl_queries": [
            "How many documents for each document description? Show me a bar chart, I want to sort in descending by the the number of document description.",
            "List the number of documents for each document description in a bar chart, I want to sort in descending by the the number of document description.",
            "Bar chart x axis document description y axis how many document description, and could you rank total number in descending order?"
        ],
        "record_name": "763@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tvshow_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Package_Option",
            "y_name": "COUNT(Package_Option)",
            "x_data": [
                [
                    "Sky Famiglia + Sky HD",
                    "no ( FTV )",
                    "Sky Famiglia"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Package_Option"
        },
        "nl_queries": [
            "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and order from low to high by the Y please.",
            "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a bar chart, and rank by the total number in ascending.",
            "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and rank in ascending by the total number please.",
            "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a bar chart, and rank by the total number in ascending."
        ],
        "record_name": "3064@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(Country) FROM people WHERE Age < (SELECT avg(Age) FROM people) GROUP BY Country",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age < (SELECT avg(Age) FROM people) GROUP BY Country"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "wedding_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(Country)",
            "x_data": [
                [
                    "Australia",
                    "United States"
                ]
            ],
            "y_data": [
                [
                    1,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Country"
        },
        "nl_queries": [
            "Show the number of countries for all people whose age is smaller than the average.",
            "A bar chart about the number of countries for all people whose age is smaller than the average."
        ],
        "record_name": "3214"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ACC_regular_season",
            "y_name": "percentage_of_all_games",
            "x_data": [
                [
                    "10\u20136",
                    "13\u20133",
                    "14\u20132",
                    "9\u20137"
                ]
            ],
            "y_data": [
                [
                    0.706,
                    0.8240000000000001,
                    0.946,
                    0.6
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A bar chart shows the distribution of ACC_Regular_Season and All_Games_Percent , and display from low to high by the bars.",
            "Show me about the distribution of ACC_Regular_Season and All_Games_Percent in a bar chart, and could you order x-axis in asc order?",
            "Create a bar chart showing all_games_percent across acc regular season, could you list ACC_Regular_Season in ascending order?",
            "Give me the comparison about All_Games_Percent over the ACC_Regular_Season , and display from low to high by the bars.",
            "Give me the comparison about All_Games_Percent over the ACC_Regular_Season by a bar chart, show X from low to high order.",
            "Find ACC_Regular_Season and All_Games_Percent , and visualize them by a bar chart, and show X-axis in asc order."
        ],
        "record_name": "3137@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT College_Name , min(enr) FROM college GROUP BY province ORDER BY College_Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT College_Name , min(enr) FROM college GROUP BY province ORDER BY College_Name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "soccer_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "College_Name",
            "y_name": "min(enr)",
            "x_data": [
                [
                    "ASU",
                    "FSU",
                    "LSU",
                    "OU"
                ]
            ],
            "y_data": [
                [
                    12000,
                    19000,
                    18000,
                    22000
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Bar graph to show minimal enr from different cname, I want to display by the X-axis in asc.",
            "Compare the smallest enrollment of schools in each state using a bar chart, and I want to display by the X-axis in asc.",
            "What is the name of the school that has the smallest enrollment in each state?, I want to list x-axis in ascending order.",
            "Return a bar graph for the name of the school that has the smallest enrollment in each state, could you order by the x axis in asc please?"
        ],
        "record_name": "2798@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "activity_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Rank",
            "y_name": "count(Rank)",
            "x_data": [
                [
                    "Professor",
                    "Instructor",
                    "AsstProf",
                    "AssocProf"
                ]
            ],
            "y_data": [
                [
                    27,
                    8,
                    15,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Rank"
        },
        "nl_queries": [
            "How many faculty members do we have for each rank? Show bar chart, rank X-axis from high to low order please.",
            "Show the number of faculty for each rank in a bar chart, and list X-axis in descending order.",
            "Bar chart of total number by each rank, and I want to display from high to low by the bars."
        ],
        "record_name": "17@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Nation != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Nation != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "theme_gallery_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year_Join",
            "y_name": "COUNT(Year_Join)",
            "x_data": [
                [
                    "1994",
                    "1998",
                    "1997",
                    "1996",
                    "1995"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    2,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Nick Price",
                "Vijay Singh"
            ],
            "describe": "GROUP BY Name, BIN Year_Join BY TIME"
        },
        "nl_queries": [
            "For artist names who are not from the United States, how many names in each year?, and I want to sort by the y axis in descending.",
            "For artist names who are not from United States, show me a stacked that the x-axis is the Year_Join and the group by name in Y, and order by the total number from high to low."
        ],
        "record_name": "2936@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "apartment_rentals_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "reservation_status_code",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Confirmed",
                    "Provisional"
                ]
            ],
            "y_data": [
                [
                    7,
                    8
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the booking status code and the corresponding number of bookings by a pie chart.",
            "Show the booking status code and the corresponding number of bookings. Show a pie chart.",
            "Pie chart. how many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
            "Draw a pie chart for how many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
            "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings in a pie chart.",
            "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings. Show a pie chart.",
            "Give me a pie to show the total number from different booking status code."
        ],
        "record_name": "73"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "association",
            "y_name": "sum(registration)",
            "x_data": [
                [
                    "Private/Methodist",
                    "Public"
                ]
            ],
            "y_data": [
                [
                    2100,
                    43092
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type. Show bar chart.",
            "A bar chart about what are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
            "Show me a bar chart for what are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
            "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type. Visualize by bar chart."
        ],
        "record_name": "3191"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Founder",
            "y_name": "SUM(Code)",
            "x_data": [
                [
                    "James",
                    "Owen",
                    "Robert",
                    "Andy",
                    "Mary",
                    "John"
                ]
            ],
            "y_data": [
                [
                    28,
                    23,
                    6,
                    5,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Founder"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of founder and the sum of code , and group by attribute founder, and I want to sort by the Y-axis in desc.",
            "For those records from the products and each product's manufacturer, a bar chart shows the distribution of founder and the sum of code , and group by attribute founder, I want to sort by the Y-axis in desc.",
            "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of founder and the sum of code , and group by attribute founder, display total number of code from high to low order.",
            "For those records from the products and each product's manufacturer, give me the comparison about the sum of code over the founder , and group by attribute founder by a bar chart, and show Y in descending order.",
            "For those records from the products and each product's manufacturer, show me about the distribution of founder and the sum of code , and group by attribute founder in a bar chart, and show Y in descending order."
        ],
        "record_name": "2227@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Openning_year , COUNT(Openning_year) FROM cinema",
                "binning": "BIN Openning_year BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR"
        },
        "chart": "Line",
        "hardness": "Easy",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "Openning_year",
            "y_name": "COUNT(Openning_year)",
            "x_data": [
                [
                    "2009",
                    "2010",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    3,
                    1,
                    1,
                    0,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN Openning_year BY YEAR"
        },
        "nl_queries": [
            "Show how many cinemas open for each year in a line chart.",
            "Plot openning year by how many openning year as a trend line"
        ],
        "record_name": "466"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY Title ORDER BY Title DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY Title ORDER BY Title DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Title",
            "y_name": "AVG(Price)",
            "x_data": [
                [
                    "The Case: Off the Record",
                    "The Case of the Smart Dummy",
                    "The Case of the Piggy Banker",
                    "The Case of the Mystery Weekend",
                    "The Case of the Bermuda Triangle"
                ]
            ],
            "y_data": [
                [
                    8,
                    12,
                    12,
                    12,
                    9
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Title"
        },
        "nl_queries": [
            "Show the average price of each film in a bar chart, show names in descending order."
        ],
        "record_name": "451@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "tvshow_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "LANGUAGE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "English",
                    "Italian"
                ]
            ],
            "y_data": [
                [
                    3,
                    12
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "List each language and the number of TV Channels using it in a bar chart.",
            "List each language and the number of TV Channels using it. Visualize by bar chart.",
            "For each language, list the number of TV Channels that use it. Plot them as bar chart.",
            "Bar chart of the total number from each language"
        ],
        "record_name": "3058"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "activity_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Rank",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Professor",
                    "AsstProf",
                    "AssocProf",
                    "Instructor"
                ]
            ],
            "y_data": [
                [
                    0,
                    3,
                    3,
                    1
                ],
                [
                    27,
                    12,
                    7,
                    5
                ]
            ],
            "classify": [
                "F",
                "M"
            ],
            "describe": "GROUP BY Sex, GROUP BY Rank"
        },
        "nl_queries": [
            "Stacked bar chart of the total number for with each Sex in each rank, I want to show in desc by the the total number .",
            "Show all the ranks and the number of male and female faculty for each rank in a bar chart, I want to show in desc by the the total number .",
            "How many faculty members do we have for each rank and gender? Plot them as bar chart, rank by the y-axis in descending please."
        ],
        "record_name": "11@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE Stu_ID NOT IN (SELECT T1.Stu_ID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.Allergy_Type = \"food\") GROUP BY Last_Name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE Stu_ID NOT IN (SELECT T1.Stu_ID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.Allergy_Type = \"food\") GROUP BY Last_Name"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "allergy_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Last_Name",
            "y_name": "COUNT(Last_Name)",
            "x_data": [
                [
                    "Adams",
                    "Andreo",
                    "Brody",
                    "Brown",
                    "Cheng",
                    "Davis",
                    "Epp",
                    "Goldman",
                    "Jones",
                    "Nelson",
                    "Pang",
                    "Prater",
                    "Rugh",
                    "Schmidt",
                    "Simms",
                    "Smith",
                    "Tai",
                    "Thornton",
                    "Wilson"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY LName"
        },
        "nl_queries": [
            "List the last name of the students who do not have any food type allergy and count them in a bart chart.",
            "What is the last name of each student who is not allergic to any type of food? Count them with a bar chart."
        ],
        "record_name": "49"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "employee_hire_evaluation_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ss_full_time",
            "y_name": "SUM(Shop_ID)",
            "x_data": [
                [
                    "T",
                    "F"
                ]
            ],
            "y_data": [
                [
                    17,
                    10
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Is_full_time"
        },
        "nl_queries": [
            "Visualize a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and could you rank in desc by the x axis?",
            "Show me about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time in a bar chart, list in descending by the x axis please.",
            "Draw a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and list in descending by the x axis please.",
            "Return a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and could you rank in desc by the x axis?",
            "A bar chart shows the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and I want to list by the X from high to low.",
            "Bar chart of sum shop id from each is full time, and I want to list by the X from high to low."
        ],
        "record_name": "1345@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)"
        },
        "chart": "Line",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_of_hire",
            "y_name": "Dept_ID",
            "x_data": [
                [
                    "1987-09-03",
                    "1987-09-26",
                    "1987-09-27",
                    "1987-09-28",
                    "1987-09-29",
                    "1987-09-30",
                    "1987-10-01"
                ]
            ],
            "y_data": [
                [
                    0,
                    20,
                    20,
                    40,
                    70,
                    110,
                    110
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a line chart about the change of  department_id over  hire_date .",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, show me the trend about  department_id over  hire_date  with a line chart.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, return a line chart about the change of  department_id over  hire_date .",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the trend of  department_id over  hire_date .",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the trend about  department_id over  hire_date .",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the change of  department_id over  hire_date "
        ],
        "record_name": "1654"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.StuID = T2.StuID JOIN dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.StuID = T2.StuID JOIN dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY dorm_name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "dorm_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "dorm_name",
            "y_name": "avg(T1.age)",
            "x_data": [
                [
                    "University Hovels",
                    "Smith Hall",
                    "Grad Student Asylum",
                    "Fawlty Towers",
                    "Dorm-plex 2000",
                    "Bud Jones Hall",
                    "Anonymous Donor Hall"
                ]
            ],
            "y_data": [
                [
                    18,
                    20.166666666666668,
                    18,
                    19.777777777777782,
                    19.6,
                    20,
                    19.666666666666668
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the average age for each dorm and what are the names of each dorm Plot them as bar chart, could you rank by the dorm_name in descending?",
            "Find the average age of students living in each dorm and the name of dorm Plot them as bar chart, could you sort bar from high to low order please?",
            "Visualize a bar chart for what is the average age for each dorm and what are the names of each dorm?, could you sort bar from high to low order please?",
            "what is the average age for each dorm and what are the names of each dorm?, order from high to low by the x-axis."
        ],
        "record_name": "1222@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "book_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_publication",
            "y_name": "COUNT(date_of_publication)",
            "x_data": [
                [
                    "April 2007",
                    "June 2006",
                    "March 2007",
                    "March 2008",
                    "October 2005",
                    "August 2008"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Publication_Date"
        },
        "nl_queries": [
            "A bar chart showing the number of publication dates of books, and sort by the Y-axis in asc please.",
            "Bar chart x axis publication date y axis how many publication date, and show y-axis in ascending order."
        ],
        "record_name": "365@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "race_track_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Class",
            "y_name": "COUNT(Class)",
            "x_data": [
                [
                    "GT",
                    "DP/GT"
                ]
            ],
            "y_data": [
                [
                    2,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Class"
        },
        "nl_queries": [
            "Create a bar chart showing how many class across class, sort y axis from low to high order.",
            "Show me how many in each class of all races using a bar chart, and sort by the the number of class in ascending."
        ],
        "record_name": "2643@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tvshow_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Package_Option",
            "y_name": "COUNT(Package_Option)",
            "x_data": [
                [
                    "Sky Famiglia",
                    "no ( FTV )",
                    "Sky Famiglia + Sky HD"
                ]
            ],
            "y_data": [
                [
                    8,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Package_Option"
        },
        "nl_queries": [
            "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a bar chart, and list in descending by the y-axis.",
            "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and display total number in desc order.",
            "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and list in desc by the total number.",
            "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a bar chart, rank how many package option in desc order."
        ],
        "record_name": "3064@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT job , avg(Age) FROM Person GROUP BY job",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "network_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "job",
            "y_name": "avg(Age)",
            "x_data": [
                [
                    "doctor",
                    "engineer",
                    "student"
                ]
            ],
            "y_data": [
                [
                    45,
                    35,
                    25.5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize a bar chart for what is average age for different job title?",
            "A bar chart about what is average age for different job title?",
            "What is average age for different job title. Visualize by bar chart.",
            "Return a histogram on how old is the average person for each job?",
            "Display a bar chart for how old is the average person for each job?",
            "How old is the average person for each job. Show bar chart.",
            "Bar chart x axis job y axis the average of age"
        ],
        "record_name": "2459"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(T1.stars) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(T1.stars) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "movie_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "director",
            "y_name": "min(T1.stars)",
            "x_data": [
                [
                    "Robert Wise",
                    "Steven Spielberg",
                    "Victor Fleming",
                    "James Cameron",
                    ""
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    2,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Please visualize a bar chart, that the X-axis is the director and the Y-axis is thier corresponding lowest rating among all movies, and I want to list in ascending by the Y-axis.",
            "Show the director and their lowest rating among all movies in a bar chart, display by the stars in asc.",
            "Compare the lowest rating among all movies by each director using a bar chart, and could you list Y-axis in asc order?"
        ],
        "record_name": "2387@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "AVG(employee_id)",
            "x_data": [
                [
                    "ST_MAN",
                    "ST_CLERK",
                    "SH_CLERK",
                    "SA_REP",
                    "SA_MAN",
                    "PU_MAN",
                    "PU_CLERK",
                    "PR_REP",
                    "MK_REP",
                    "MK_MAN",
                    "IT_PROG",
                    "FI_MGR",
                    "FI_ACCOUNT",
                    "AD_VP",
                    "AD_PRES",
                    "AD_ASST",
                    "AC_MGR",
                    "AC_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    122,
                    134.5,
                    189.5,
                    164.5,
                    147,
                    114,
                    117,
                    204,
                    202,
                    201,
                    105,
                    108,
                    111,
                    101.5,
                    100,
                    200,
                    205,
                    206
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the average of employee_id , and group by attribute job_id, and visualize them by a bar chart, could you display X in descending order?",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, could you show in desc by the X-axis please?",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, and list by the x-axis in desc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, show X-axis from high to low order.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart, and rank X-axis in descending order."
        ],
        "record_name": "1601@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT category , count(*) FROM store GROUP BY category ORDER BY category DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT category , count(*) FROM store GROUP BY category ORDER BY category DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "store_product_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "category",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Village Store",
                    "City Mall"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find all types of store and number of them Visualize by bar chart, could you sort x axis in desc order please?",
            "Bar chart x axis type y axis the total number, and order in desc by the names.",
            "For each type of store, how many of them are there Plot them as bar chart, and display by the X from high to low."
        ],
        "record_name": "2862@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Last_Name , COUNT(Last_Name) FROM STUDENT WHERE gender = \"F\" GROUP BY Last_Name ORDER BY Age DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM STUDENT WHERE gender = \"F\" GROUP BY Last_Name ORDER BY Age DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_3_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Last_Name",
            "y_name": "COUNT(Last_Name)",
            "x_data": [
                [
                    "Apap",
                    "Cheng",
                    "Jones",
                    "Kim",
                    "Lee",
                    "Nelson",
                    "Prater",
                    "Schmidt",
                    "Smith"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY LName"
        },
        "nl_queries": [
            "A bar chart for what are the number of the last names of female students, ordered by age descending?",
            "Find the number of the last name of female (sex is F) students in the descending order of age.",
            "Find the last name of female (sex is F) students in the descending order of age, and count them by a bar chart",
            "What are the last names of female students, ordered by age descending, and count them by a bar chart",
            "A bar chart for finding the number of the last name of female (sex is F) students in the descending order of age.",
            "What are the number of the last names of female students, ordered by age descending?"
        ],
        "record_name": "659"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "chinook_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "FirstName",
            "y_name": "SupportRepId",
            "x_data": [
                [
                    "Luis",
                    "Diego",
                    "Puja"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Draw a bar chart for what are the first names and support rep ids for employees serving 10 or more customers?, and could you list total number in descending order please?",
            "Show me a bar chart for what are the first names and support rep ids for employees serving 10 or more customers?, I want to rank from high to low by the Y please.",
            "What are the first names and support rep ids for employees serving 10 or more customers, and could you list total number in descending order please?"
        ],
        "record_name": "437@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "station_weather_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "amenities",
            "y_name": "COUNT(amenities)",
            "x_data": [
                [
                    "London Overground",
                    "London Overground and London Midland",
                    "c2c",
                    "Metropolitan line",
                    "Greater Anglia",
                    "Metropolitan line and Chiltern Railways"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY services"
        },
        "nl_queries": [
            "Count the number of services by services, and display Y-axis from low to high order please.",
            "Give me a bar chart for the number of services of each services, could you display from low to high by the y axis?",
            "Compare the number of services by services with a bar graph, I want to show Y in ascending order.",
            "A bar graph listing the services and how many services provided by all stations\n\n, order in ascending by the Y-axis."
        ],
        "record_name": "2831@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(employee_id) ASC",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "AVG(employee_id)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    107.33333333333333,
                    129.75862068965517,
                    160,
                    190.2962962962963,
                    206
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For those employees who did not have any job in the past, draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time, and sort total number from low to high order.",
            "For those employees who did not have any job in the past, find hire_date and the average of employee_id bin hire_date by time, and visualize them by a bar chart, display y axis in asc order.",
            "For those employees who did not have any job in the past, a bar chart shows the distribution of hire_date and the average of employee_id bin hire_date by time, and list by the Y-axis from low to high.",
            "For those employees who did not have any job in the past, visualize a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time, and order Y-axis from low to high order please.",
            "For those employees who did not have any job in the past, show me about the distribution of hire_date and the average of employee_id bin hire_date by time in a bar chart, and list by the Y-axis from low to high."
        ],
        "record_name": "1713@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Fujits",
                    "Iomega",
                    "Sony",
                    "Winchester",
                    "Creative Labs",
                    "Hewlett-Packard"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, show me about the distribution of name and the amount of name , and group by attribute name in a bar chart, sort y axis from low to high order.",
            "For those records from the products and each product's manufacturer, give me the comparison about the amount of name over the name , and group by attribute name, and rank Y in asc order.",
            "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the amount of name , and group by attribute name, rank by the y-axis from low to high.",
            "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the amount of name , and group by attribute name, and could you order in asc by the y-axis?",
            "For those records from the products and each product's manufacturer, find name and the amount of name , and group by attribute name, and visualize them by a bar chart, and rank by the y-axis from low to high."
        ],
        "record_name": "2204@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "network_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "AVG(grade)",
            "x_data": [
                [
                    "Tiffany",
                    "Logan",
                    "Kyle",
                    "Kris",
                    "Jordan",
                    "John",
                    "Jessica",
                    "Haley",
                    "Gabriel",
                    "Cassandra",
                    "Brittany",
                    "Austin",
                    "Andrew",
                    "Alexis"
                ]
            ],
            "y_data": [
                [
                    9,
                    12,
                    12,
                    10,
                    10.5,
                    12,
                    11,
                    10,
                    10,
                    9,
                    10,
                    11,
                    10,
                    11
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Show the names and their average grades of each high schooler with a bar chart, and I want to rank by the bars in descending.",
            "Show the names and their average grades of each high schooler, and order in descending by the bar.",
            "Bar graph to show mean grade from different name, and could you rank in descending by the names?",
            "Draw a bar chart for what are the names and the average grades for each high schooler?, and I want to rank by the bars in descending.",
            "What are the names and the average grades for each high schooler Plot them as a bar chart, I want to show from high to low by the X please.",
            "Display a bar chart for what are the names and the average grades for each high schooler?, and list X in desc order please."
        ],
        "record_name": "2453@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.PhoneID = T2.PhoneID GROUP BY T2.Name",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.PhoneID = T2.PhoneID GROUP BY T2.Name"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "phone_market_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Name",
            "y_name": "sum(T1.Num_of_stock)",
            "x_data": [
                [
                    "IPhone 5s",
                    "IPhone 6s",
                    "IPhone 7",
                    "IPhone X"
                ]
            ],
            "y_data": [
                [
                    2914,
                    4324,
                    874,
                    2540
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each phone, show its names and total number of stocks. "
        ],
        "record_name": "2574"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "twitter_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "partitionid",
            "x_data": [
                [
                    "Tyler Swift",
                    "Black Widow\n"
                ]
            ],
            "y_data": [
                [
                    10,
                    23
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the name and partition id for users who tweeted less than twice Show bar chart, and could you sort by the total number in ascending?"
        ],
        "record_name": "3066@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nominee , COUNT(Nominee) FROM musical WHERE prize = \"Tony Award\" OR prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE prize = \"Tony Award\" OR prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "musical_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nominee",
            "y_name": "COUNT(Nominee)",
            "x_data": [
                [
                    "Cleavant Derricks",
                    "Bob Fosse"
                ]
            ],
            "y_data": [
                [
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nominee"
        },
        "nl_queries": [
            "Show the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", I want to sort x axis from high to low order please.",
            "A bar chart for showing the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", and display x-axis in desc order.",
            "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", and count them by a bar chart, and could you list from high to low by the X-axis?",
            "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards, and count them by a bar chart, display x-axis in desc order."
        ],
        "record_name": "2446@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(Manager_ID) ASC",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "AVG(Manager_ID)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Sept",
                    "Aug",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    96.78571428571429,
                    116.45161290322581,
                    125.51724137931035,
                    139.16129032258064,
                    205
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of hire_date and the average of manager_id bin hire_date by time in a bar chart, and display from low to high by the Y.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of hire_date and the average of manager_id bin hire_date by time, and order by the Y in asc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the hire_date bin hire_date by time, show by the y-axis in asc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by time, and order by the Y in asc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the hire_date bin hire_date by time by a bar chart, and could you list in asc by the y-axis?"
        ],
        "record_name": "1587@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customerID = t2.customerID WHERE t2.channelCode = 'Email'",
                "binning": "BIN active_from_date BY YEAR"
            },
            "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customerID = t2.customerID WHERE t2.channelCode = 'Email' BIN active_from_date BY YEAR"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "customers_and_addresses_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "active_from_date",
            "y_name": "COUNT(active_from_date)",
            "x_data": [
                [
                    "2017",
                    "2018"
                ]
            ],
            "y_data": [
                [
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN active_from_date BY YEAR"
        },
        "nl_queries": [
            "Find the number of customers that use email as the contact channel for each year. Visualize with a bar chart.",
            "Return a bar chart showing how many customers whose contact channel code is email for each year."
        ],
        "record_name": "920"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "wine_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Winery",
            "y_name": "COUNT(Winery)",
            "x_data": [
                [
                    "Bucella",
                    "Carter",
                    "Casa Piena",
                    "Caymus",
                    "Chappellet",
                    "Chimeney Rock",
                    "Darioush",
                    "David Arthur",
                    "Dos Lagos",
                    "Hourglass",
                    "Janzen",
                    "Lewis",
                    "Morlet",
                    "Paul Hobbs",
                    "Sine Qua Non"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Winery"
        },
        "nl_queries": [
            "Compare the number of winery of the wines whose price is bigger than 100, and could you order bar in asc order please?",
            "List the number of winery of the wines whose price is bigger than 100 in a bar chart, rank from low to high by the names please.",
            "Visualize a bar chart about the number of winery of the wines whose price is bigger than 100, and rank X in ascending order."
        ],
        "record_name": "3236@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY SUM(Price) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY SUM(Price) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date",
            "y_name": "SUM(Price)",
            "x_data": [
                [
                    "21 May",
                    "19 May",
                    "2 Aug",
                    "20 May",
                    "11 July",
                    "21 Jun"
                ]
            ],
            "y_data": [
                [
                    24,
                    15,
                    12,
                    9,
                    9,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Date"
        },
        "nl_queries": [
            "For each record in schedule, show sum of price for each day in a bar chart, and could you list y-axis in desc order?"
        ],
        "record_name": "459@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "AVG(wage)",
            "x_data": [
                [
                    "ST_MAN",
                    "ST_CLERK",
                    "SH_CLERK",
                    "SA_REP",
                    "SA_MAN",
                    "PU_MAN",
                    "PU_CLERK",
                    "PR_REP",
                    "MK_REP",
                    "MK_MAN",
                    "IT_PROG",
                    "HR_REP",
                    "FI_MGR",
                    "FI_ACCOUNT",
                    "AD_VP",
                    "AD_PRES",
                    "AD_ASST",
                    "AC_MGR",
                    "AC_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    7280,
                    2785,
                    3215,
                    8350,
                    12200,
                    11000,
                    2780,
                    10000,
                    6000,
                    13000,
                    5760,
                    6500,
                    12000,
                    7920,
                    17000,
                    24000,
                    4400,
                    12000,
                    8300
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, list X-axis in descending order.",
            "For those employees who was hired before 2002-06-21, show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart, display in descending by the X-axis.",
            "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, and show by the X-axis from high to low please.",
            "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, I want to order bars in descending order.",
            "For those employees who was hired before 2002-06-21, find job_id and the average of salary , and group by attribute job_id, and visualize them by a bar chart, and display in descending by the X-axis."
        ],
        "record_name": "1777@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "all_home",
            "y_name": "SUM(schoolID)",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    5,
                    5,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY All_Home"
        },
        "nl_queries": [
            "Give me the comparison about the sum of School_ID over the All_Home , and group by attribute All_Home, and display by the x-axis from low to high.",
            "Draw a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home, and order All_Home from low to high order please.",
            "Find All_Home and the sum of School_ID , and group by attribute All_Home, and visualize them by a bar chart, could you order from low to high by the x-axis please?",
            "Give me a bar chart for total number of school id of each all home, and display in asc by the bars please.",
            "Return a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home, and display in asc by the bars please.",
            "Show me about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home in a bar chart, and display x axis from low to high order."
        ],
        "record_name": "3104@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC",
                "binning": "BIN Year BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "car_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year",
            "y_name": "avg(Weight)",
            "x_data": [
                [
                    "Thur",
                    "Mon",
                    "Sat",
                    "Fri",
                    "Tue",
                    "Wed",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    9051,
                    6474,
                    6234,
                    5413,
                    5313,
                    3176,
                    2861
                ]
            ],
            "classify": [],
            "describe": "BIN Year BY WEEKDAY"
        },
        "nl_queries": [
            "Plot total number of avg weight by binning by year as a bar graph, and order in desc by the y-axis.",
            "Compute average weight and bin year into weekday interval for a bar chart, sort in desc by the Y-axis."
        ],
        "record_name": "413@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , Manager_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY Manager_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , Manager_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY Manager_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "Manager_ID",
            "x_data": [
                [
                    "AC_ACCOUNT",
                    "MK_REP",
                    "SA_REP",
                    "PR_REP",
                    "HR_REP",
                    "AC_MGR",
                    "MK_MAN"
                ]
            ],
            "y_data": [
                [
                    205,
                    201,
                    149,
                    101,
                    101,
                    101,
                    100
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of job_id and manager_id , and show in desc by the total number.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of job_id and manager_id , could you sort total number in descending order?",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of job_id and manager_id , list by the Y from high to low.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about manager_id over the job_id , could you list from high to low by the y axis?",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of job_id and manager_id in a bar chart, and could you show by the total number in desc?"
        ],
        "record_name": "1688@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%'",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "COUNT(date_of_hire)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept"
                ]
            ],
            "y_data": [
                [
                    12,
                    24,
                    28,
                    24
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "when is the hire date for those employees whose first name does not containing the letter M, and count them by a bar chart",
            "On what dates were employees without the letter M in their first names hired, and count them by a bar chart"
        ],
        "record_name": "1953"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "team_Name",
            "y_name": "schoolID",
            "x_data": [
                [
                    "Virginia Tech",
                    "Clemson",
                    "Duke",
                    "North Carolina"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize a bar chart about the distribution of Team_Name and School_ID , and display in desc by the Y-axis.",
            "Bar chart x axis team name y axis school_id, display in desc by the Y-axis.",
            "Give me the comparison about School_ID over the Team_Name , order by the total number in descending.",
            "A bar chart shows the distribution of Team_Name and School_ID , and rank total number from high to low order.",
            "Show me about the distribution of Team_Name and School_ID in a bar chart, and display in desc by the Y-axis.",
            "Return a bar chart about the distribution of Team_Name and School_ID , list by the Y in desc."
        ],
        "record_name": "3111@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "decoration_competition_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Canada",
                    "United States"
                ]
            ],
            "y_data": [
                [
                    4,
                    6
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the different countries and the number of members from each with a bar chart.",
            "Show the different countries and the number of members from each. Visualize by bar chart.",
            "Plot the total number by grouped by country as a bar graph"
        ],
        "record_name": "1091"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY date_moved_in ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY date_moved_in ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "local_govt_and_lot_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_moved_in",
            "y_name": "COUNT(date_moved_in)",
            "x_data": [
                [
                    "2015-03-27",
                    "2016-09-27"
                ]
            ],
            "y_data": [
                [
                    9,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date_moved_in"
        },
        "nl_queries": [
            "What is the proportion of each customer's move in date? Show me the bar chart, sort X from low to high order please.",
            "Please use a bar chart to compare the number of customers of each customer's move in date, and order by the bars from low to high."
        ],
        "record_name": "2096@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "all_home",
            "y_name": "COUNT(all_home)",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY All_Home"
        },
        "nl_queries": [
            "Visualize a pie chart about the proportion of  All_Home and the amount of All_Home.",
            "Give me a pie chart to reflect the proportion of  All_Home and the amount of All_Home.",
            "Show me about the proportion of the amount of All_Home and the amount of All_Home in a pie chart.",
            "Draw a pie chart about the proportion of  All_Home and the amount of All_Home.",
            "For the attribute  All_Home and the amount of All_Home, show their proportion by a pie chart.",
            "Give me a pie to show the number of all home from different all home."
        ],
        "record_name": "3159"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "station_weather_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Local_Authority",
            "y_name": "COUNT(Local_Authority)",
            "x_data": [
                [
                    "Brentwood",
                    "Thurrock",
                    "Watford",
                    "Broxbourne",
                    "Chiltern",
                    "Three Rivers"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY local_authority"
        },
        "nl_queries": [
            "Count the number of local authorities by the local authority, and order Y-axis from low to high order.",
            "A bar graph listing the local authorities and how many local authorities provided by all stations, order in ascending by the y-axis.",
            "Bar chart of how many local authority from each local authority, and order in ascending by the y-axis.",
            "Compare the number of the local authority by the local authority, and could you show by the total number in ascending?"
        ],
        "record_name": "2830@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC",
                "binning": "BIN Start_from BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"
        },
        "chart": "Line",
        "hardness": "Medium",
        "db_id": "employee_hire_evaluation_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "Start_from",
            "y_name": "SUM(EmployeeID)",
            "x_data": [
                [
                    "2003",
                    "2004",
                    "2005",
                    "2006",
                    "2007",
                    "2008",
                    "2009",
                    "2010",
                    "2011",
                    "2012",
                    "2013"
                ]
            ],
            "y_data": [
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    7,
                    1,
                    6,
                    3,
                    4,
                    5
                ]
            ],
            "classify": [],
            "describe": "BIN Start_from BY YEAR"
        },
        "nl_queries": [
            "A line chart shows the change of the sum of Employee_ID over Start_from bin start_from by time, sort X-axis in asc order.",
            "Return a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time, and rank from low to high by the x-axis.",
            "Visualize a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time, display in asc by the x-axis.",
            "Draw a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time, and display in asc by the x-axis.",
            "A line chart shows the trend of the sum of Employee_ID over Start_from bin start_from by time, I want to sort by the x-axis from low to high.",
            "Show me about the change of the sum of Employee_ID over Start_from bin start_from by time in a line chart, and sort Start_from in ascending order.",
            "I want to see trend of sum employee id by start from, list by the x axis in ascending."
        ],
        "record_name": "1360@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "local_govt_and_lot_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Type_of_Thing_Code",
            "y_name": "COUNT(Type_of_Thing_Code)",
            "x_data": [
                [
                    "Furniture",
                    "Electronics",
                    "Commen"
                ]
            ],
            "y_data": [
                [
                    2,
                    5,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Type_of_Thing_Code"
        },
        "nl_queries": [
            "Compare the number of items in the type of each thing using a bar chart, list in asc by the Y please.",
            "Show the number of type of thing code from each type of thing code, and I want to rank Y-axis in asc order please."
        ],
        "record_name": "2087@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "all_home",
            "y_name": "schoolID",
            "x_data": [
                [
                    "15\u20131",
                    "14\u20133",
                    "14\u20132"
                ]
            ],
            "y_data": [
                [
                    0,
                    5,
                    1
                ],
                [
                    2,
                    0,
                    4
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home, GROUP BY All_Home"
        },
        "nl_queries": [
            "Return a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, sort X-axis in descending order.",
            "Visualize a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, rank in desc by the bar.",
            "Show me about the distribution of All_Home and School_ID , and group by attribute ACC_Home in a bar chart, and could you rank by the bars from high to low?",
            "A bar chart shows the distribution of All_Home and School_ID , and group by attribute ACC_Home, and sort X-axis in descending order.",
            "Stack bar chart of school_id vs ACC_Home based on all home, and list from high to low by the bars.",
            "Find All_Home and School_ID , and group by attribute ACC_Home, and visualize them by a bar chart, sort X-axis in descending order."
        ],
        "record_name": "3093@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home ASC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "all_home",
            "y_name": "teamID",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    1,
                    4,
                    0
                ],
                [
                    3,
                    0,
                    2
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home, GROUP BY All_Home"
        },
        "nl_queries": [
            "Draw a bar chart about the distribution of All_Home and Team_ID , and group by attribute ACC_Home, I want to rank All_Home in ascending order.",
            "Find All_Home and Team_ID , and group by attribute ACC_Home, and visualize them by a bar chart, and display in asc by the x-axis.",
            "Show me about the distribution of All_Home and Team_ID , and group by attribute ACC_Home in a bar chart, and rank x-axis from low to high order.",
            "Give me the comparison about Team_ID over the All_Home , and group by attribute ACC_Home by a bar chart, and list from low to high by the All_Home please.",
            "Stack bar chart of team_id vs ACC_Home based on all home, and display by the x axis in asc.",
            "Give me the comparison about Team_ID over the All_Home , and group by attribute ACC_Home, and I want to rank All_Home in ascending order."
        ],
        "record_name": "3092@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
        },
        "chart": "Line",
        "hardness": "Easy",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_of_hire",
            "y_name": "wage",
            "x_data": [
                [
                    "1987-06-17",
                    "1987-06-20",
                    "1987-06-21",
                    "1987-06-22",
                    "1987-06-23",
                    "1987-06-24",
                    "1987-06-25",
                    "1987-06-26",
                    "1987-06-27",
                    "1987-06-28",
                    "1987-06-29",
                    "1987-06-30",
                    "1987-07-02",
                    "1987-07-03",
                    "1987-07-04",
                    "1987-07-05",
                    "1987-07-06",
                    "1987-07-07",
                    "1987-07-08",
                    "1987-07-10",
                    "1987-07-11",
                    "1987-07-12",
                    "1987-07-13",
                    "1987-07-14",
                    "1987-07-15",
                    "1987-07-16",
                    "1987-07-17",
                    "1987-07-18",
                    "1987-07-19",
                    "1987-07-20",
                    "1987-07-21",
                    "1987-07-22",
                    "1987-07-23",
                    "1987-07-24",
                    "1987-07-25",
                    "1987-07-26",
                    "1987-07-27",
                    "1987-07-28",
                    "1987-07-29",
                    "1987-07-30",
                    "1987-07-31",
                    "1987-08-01",
                    "1987-08-02",
                    "1987-08-03",
                    "1987-08-04",
                    "1987-08-05",
                    "1987-08-06",
                    "1987-08-07",
                    "1987-08-08",
                    "1987-08-09",
                    "1987-08-10",
                    "1987-08-11",
                    "1987-08-12",
                    "1987-08-13",
                    "1987-08-14",
                    "1987-08-15",
                    "1987-08-16",
                    "1987-08-17",
                    "1987-08-18",
                    "1987-08-19",
                    "1987-08-20",
                    "1987-08-21",
                    "1987-08-22",
                    "1987-08-23",
                    "1987-08-24",
                    "1987-08-25",
                    "1987-08-26",
                    "1987-08-27",
                    "1987-08-28",
                    "1987-08-29",
                    "1987-08-30",
                    "1987-08-31",
                    "1987-09-02",
                    "1987-09-03",
                    "1987-09-04",
                    "1987-09-05",
                    "1987-09-06",
                    "1987-09-07",
                    "1987-09-08",
                    "1987-09-09",
                    "1987-09-10",
                    "1987-09-11",
                    "1987-09-12",
                    "1987-09-13",
                    "1987-09-14",
                    "1987-09-15",
                    "1987-09-16",
                    "1987-09-17",
                    "1987-09-18",
                    "1987-09-19",
                    "1987-09-20",
                    "1987-09-21",
                    "1987-09-22",
                    "1987-09-23",
                    "1987-09-24",
                    "1987-09-27",
                    "1987-09-28",
                    "1987-09-29",
                    "1987-09-30",
                    "1987-10-01"
                ]
            ],
            "y_data": [
                [
                    24000,
                    9000,
                    6000,
                    4800,
                    4800,
                    4200,
                    12000,
                    9000,
                    8200,
                    7700,
                    7800,
                    6900,
                    3100,
                    2900,
                    2800,
                    2600,
                    2500,
                    8000,
                    8200,
                    6500,
                    5800,
                    3200,
                    2700,
                    2400,
                    2200,
                    3300,
                    2800,
                    2500,
                    2100,
                    3300,
                    2900,
                    2400,
                    2200,
                    3600,
                    3200,
                    2700,
                    2500,
                    3500,
                    3100,
                    2600,
                    2500,
                    14000,
                    13500,
                    12000,
                    11000,
                    10500,
                    10000,
                    9500,
                    9000,
                    8000,
                    7500,
                    7000,
                    10000,
                    9500,
                    9000,
                    8000,
                    7500,
                    7000,
                    10500,
                    9500,
                    7200,
                    6800,
                    6400,
                    6200,
                    11500,
                    10000,
                    9600,
                    7400,
                    7300,
                    6100,
                    11000,
                    8800,
                    8400,
                    7000,
                    6200,
                    3200,
                    3100,
                    2500,
                    2800,
                    4200,
                    4100,
                    3400,
                    3000,
                    3800,
                    3600,
                    2900,
                    2500,
                    4000,
                    3900,
                    3200,
                    2800,
                    3100,
                    3000,
                    2600,
                    2600,
                    6000,
                    6500,
                    10000,
                    12000,
                    8300
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those employees who did not have any job in the past, draw a line chart about the change of  salary over  hire_date .",
            "For those employees who did not have any job in the past, return a line chart about the change of  salary over  hire_date .",
            "For those employees who did not have any job in the past, visualize a line chart about the change of  salary over  hire_date .",
            "For those employees who did not have any job in the past, show me about the change of  salary over  hire_date  in a line chart.",
            "For those employees who did not have any job in the past, show me the trend about  salary over  hire_date  with a line chart.",
            "For those employees who did not have any job in the past, give me the trend about  salary over  hire_date ."
        ],
        "record_name": "1746"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "movie_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "director",
            "y_name": "stars",
            "x_data": [
                [
                    "",
                    "James Cameron",
                    "Robert Wise",
                    "Steven Spielberg",
                    "Victor Fleming"
                ]
            ],
            "y_data": [
                [
                    4,
                    3,
                    2,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the stars of each director by a bar chart.",
            "Please give me a bar chart to compare the stars by directors."
        ],
        "record_name": "2385"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "allergy_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Allergy",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Anchovies",
                    "Cat",
                    "Dog",
                    "Eggs",
                    "Grass Pollen",
                    "Milk",
                    "Nuts",
                    "Ragweed",
                    "Rodent",
                    "Shellfish",
                    "Soy",
                    "Tree Pollen"
                ]
            ],
            "y_data": [
                [
                    3,
                    4,
                    3,
                    3,
                    4,
                    3,
                    11,
                    6,
                    1,
                    4,
                    4,
                    13
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Return a bar chart on how many students have each different allergy?, rank by the x axis from low to high.",
            "Show the total number from each allergy, order from low to high by the X.",
            "Show all allergies with number of students affected Show bar chart, and could you list by the X-axis in asc please?",
            "How many students have each different allergy Show bar chart, could you list by the X-axis in asc please?",
            "Show all allergies with number of students affected with a bar chart, order from low to high by the X."
        ],
        "record_name": "45@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "mountain_photos_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Height",
            "y_name": "Prominence",
            "x_data": [
                [
                    4260,
                    4220,
                    4195,
                    4193,
                    4167,
                    4127,
                    4125,
                    4120,
                    4100,
                    4088,
                    4071,
                    4070,
                    4070,
                    4068,
                    4030,
                    3996,
                    3950,
                    3941,
                    3912,
                    3903,
                    3900
                ]
            ],
            "y_data": [
                [
                    1909,
                    350,
                    1605,
                    1215,
                    3755,
                    1530,
                    660,
                    1510,
                    2225,
                    420,
                    610,
                    3931,
                    500,
                    1904,
                    420,
                    910,
                    500,
                    1540,
                    460,
                    450,
                    590
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What are the correlation between the height and prominence of mountains which do not belong to the range 'Aberdare Range'? Plot the result by a scatter chart."
        ],
        "record_name": "2345"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "inn_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "decor",
            "y_name": "avg(basePrice)",
            "x_data": [
                [
                    "traditional",
                    "rustic",
                    "modern"
                ]
            ],
            "y_data": [
                [
                    187.5,
                    162.5,
                    112.5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Give me a bar chart for the average of baseprice of each decor, could you display Y-axis from high to low order?",
            "What is the average price of the rooms for each different decor? Show me a bar chart!, and sort total number in desc order.",
            "Show the average price of the rooms in different decor using a bar chart, and could you display Y-axis from high to low order?",
            "Please use a bar chart to show the average price of the rooms in a different decor, and display Y-axis in desc order."
        ],
        "record_name": "1969@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "world_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "GovernmentForm",
            "y_name": "sum(Population)",
            "x_data": [
                [
                    "Commonwealth of the US",
                    "Constitutional Monarchy (Emirate)",
                    "Constitutional Monarchy, Federation",
                    "Dependent Territory of the UK",
                    "Emirate Federation",
                    "Federation",
                    "Monarchy (Emirate)",
                    "Monarchy (Sultanate)",
                    "Nonmetropolitan Territory of France",
                    "Nonmetropolitan Territory of The Netherlands",
                    "Overseas Department of France",
                    "Parliamentary Coprincipality",
                    "Part of Denmark",
                    "Socialistic Republic",
                    "Socialistic State",
                    "Special Administrative Region of China",
                    "US Territory"
                ]
            ],
            "y_data": [
                [
                    3947000,
                    1972000,
                    82516000,
                    193050,
                    2441000,
                    7160400,
                    617000,
                    2870000,
                    464000,
                    320000,
                    1731000,
                    78000,
                    99000,
                    115072000,
                    5605000,
                    7255000,
                    329000
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the government form name and total population for each government form whose average life expectancy is longer than 72. ",
            "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
            "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72. Visualize by bar chart.",
            "Bar graph to show total number of population from different governmentform"
        ],
        "record_name": "3275"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Allergy_Type , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Allergy_Type , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "allergy_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Allergy_Type",
            "y_name": "count(*)",
            "x_data": [
                [
                    "food",
                    "environmental",
                    "animal"
                ]
            ],
            "y_data": [
                [
                    28,
                    23,
                    8
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many students are affected by each allergy type Visualize by bar chart, could you display total number in descending order please?",
            "Draw a bar chart for how many students are affected by each allergy type?, and could you display total number in descending order please?",
            "Show all allergy type with number of students affected with a bar chart, list the total number in descending order.",
            "Show all allergy type with number of students affected Visualize by bar chart, list the total number in descending order.",
            "A bar chart about how many students are affected by each allergy type?, and could you order in descending by the Y-axis?"
        ],
        "record_name": "38@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , seating FROM cinema ORDER BY Name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , seating FROM cinema ORDER BY Name DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "seating",
            "x_data": [
                [
                    "Oriel",
                    "Mount Callan",
                    "Moneypoint",
                    "Grouse Lodge",
                    "Gortahile",
                    "Glenough",
                    "Glenmore",
                    "Dublin Array",
                    "Codling",
                    "Carrowleagh"
                ]
            ],
            "y_data": [
                [
                    330,
                    908,
                    225,
                    203,
                    208,
                    325,
                    305,
                    364,
                    1100,
                    368
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a bar chart showing capacity across name, order Name in desc order.",
            "Show the capacity for each cinema in a bar chart, list x axis from high to low order."
        ],
        "record_name": "474@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "CITY",
            "y_name": "COUNT(CITY)",
            "x_data": [
                [
                    "Seattle",
                    "Toronto",
                    "Southlake",
                    "South San Francisco",
                    "OX9 9ZB",
                    "Munich",
                    "London"
                ]
            ],
            "y_data": [
                [
                    21,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY CITY"
        },
        "nl_queries": [
            "Group and count the city attribute of the location table to visualize a bar chart, rank by the how many city in desc.",
            "Give me a bar chart to compare the number of departments located in different cities, and list y-axis from high to low order.",
            "Create a bar chart showing the number of city across city, and rank from high to low by the y axis."
        ],
        "record_name": "1624@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Code FROM products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Code",
            "x_data": [
                [
                    "Memory",
                    "CD drive",
                    "Toner cartridge"
                ]
            ],
            "y_data": [
                [
                    2,
                    7,
                    9
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those products with a price between 60 and 120, return a bar chart about the distribution of name and code , I want to sort from low to high by the Y.",
            "For those products with a price between 60 and 120, draw a bar chart about the distribution of name and code , and rank by the y axis in asc please.",
            "For those products with a price between 60 and 120, a bar chart shows the distribution of name and code , list Y-axis in ascending order please.",
            "For those products with a price between 60 and 120, visualize a bar chart about the distribution of name and code , I want to sort in ascending by the y axis.",
            "For those products with a price between 60 and 120, find name and code , and visualize them by a bar chart, list Y-axis in ascending order please."
        ],
        "record_name": "2189@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(Manager_ID) DESC",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "SUM(Manager_ID)",
            "x_data": [
                [
                    "Aug",
                    "July",
                    "Sept",
                    "June"
                ]
            ],
            "y_data": [
                [
                    1862,
                    1742,
                    1449,
                    740
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, sort Y-axis from high to low order.",
            "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, sort Y-axis from high to low order.",
            "For all employees who have the letters D or S in their first name, give me the comparison about the sum of manager_id over the hire_date bin hire_date by time by a bar chart, and display by the total number in descending.",
            "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of hire_date and the sum of manager_id bin hire_date by time, and I want to sort by the Y-axis from high to low.",
            "For all employees who have the letters D or S in their first name, give me the comparison about the sum of manager_id over the hire_date bin hire_date by time, and I want to order in desc by the total number."
        ],
        "record_name": "1544@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "climbing_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(Country)",
            "x_data": [
                [
                    "DR Congo Uganda",
                    "Kenya",
                    "Tanzania"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Country"
        },
        "nl_queries": [
            "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000.",
            "What are the countries of mountains with height bigger than 5000, and count them by a bar chart",
            "Return the countries of the mountains that have a height larger than 5000, and count them by a bar chart",
            "Return the number of the countries of the mountains that have a height larger than 5000.",
            "What are the number of the countries of mountains with height bigger than 5000?",
            "A bar chart for what are the number of the countries of mountains with height bigger than 5000?"
        ],
        "record_name": "490"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_products_contacts_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_name",
            "y_name": "COUNT(product_name)",
            "x_data": [
                [
                    "Apple",
                    "gucci",
                    "jcrew"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY product_name"
        },
        "nl_queries": [
            "Bar chart x axis product name y axis how many product name, and I want to display in asc by the x axis.",
            "Compare the frequency of product names using a bar chart, and list x-axis in ascending order.",
            "Show me a bar chart with the product name and their frequency, sort in ascending by the names."
        ],
        "record_name": "1000@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(wage) ASC",
                "binning": "BIN date_of_hire BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "SUM(wage)",
            "x_data": [
                [
                    "Fri",
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Sat",
                    "Thur"
                ]
            ],
            "y_data": [
                [
                    0,
                    6000,
                    6500,
                    10000,
                    12000,
                    13000,
                    15300
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY WEEKDAY"
        },
        "nl_queries": [
            "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, could you show from low to high by the Y please?",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the sum of salary bin hire_date by weekday, could you rank from low to high by the total number?",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, and order from low to high by the total number.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the sum of salary bin hire_date by weekday in a bar chart, and display Y-axis in ascending order.",
            "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, and list by the Y-axis from low to high."
        ],
        "record_name": "1657@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.ProjectID = T2.ProjectID WHERE T2.Project_information = 'Graph Database project'",
                "binning": "BIN Document_Date BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.ProjectID = T2.ProjectID WHERE T2.Project_information = 'Graph Database project' BIN Document_Date BY YEAR"
        },
        "chart": "Line",
        "hardness": "Hard",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "Document_Date",
            "y_name": "COUNT(Document_Date)",
            "x_data": [
                [
                    "1970~1973",
                    "1974~1977",
                    "1978~1981",
                    "1982~1985",
                    "1986~1989",
                    "1990~1993",
                    "1994~1997",
                    "1998~2001",
                    "2002~2005",
                    "2006~2009",
                    "2010~2012"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN Document_Date BY YEAR"
        },
        "nl_queries": [
            "Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by year interval with a line chart."
        ],
        "record_name": "855"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.Station_id JOIN train AS t3 ON t2.Train_id = t3.id WHERE t1.Local_Authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.Station_id JOIN train AS t3 ON t2.Train_id = t3.id WHERE t1.Local_Authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "station_weather_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Ananthapuri Express",
                    "Jayanthi Janatha Express",
                    "Madurai Fast Passenger",
                    "Quilon Fast Passenger",
                    "Guruvayur Express",
                    "Island Express"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Find names of trains that run through stations for the local authority Chiltern, compare the total number of name in a bar graph, and sort in asc by the y-axis."
        ],
        "record_name": "2845@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21'",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "AVG(wage)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    9885.714285714286,
                    3774.1935483870966,
                    9074.193548387097,
                    4880,
                    8300
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of  hire_date and the average of salary bin hire_date by time.",
            "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of  hire_date and the average of salary bin hire_date by time.",
            "For those employees who was hired before 2002-06-21, find  hire_date and the average of salary bin hire_date by time, and visualize them by a bar chart.",
            "For those employees who was hired before 2002-06-21, give me the comparison about the average of salary over the  hire_date bin hire_date by time.",
            "For those employees who was hired before 2002-06-21, show me about the distribution of  hire_date and the average of salary bin hire_date by time in a bar chart."
        ],
        "record_name": "1759"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY AVG(Price) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY AVG(Price) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date",
            "y_name": "AVG(Price)",
            "x_data": [
                [
                    "19 May",
                    "21 May",
                    "2 Aug",
                    "20 May",
                    "11 July",
                    "21 Jun"
                ]
            ],
            "y_data": [
                [
                    15,
                    12,
                    12,
                    9,
                    9,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Date"
        },
        "nl_queries": [
            "For each record in schedule, show average of the price for each day in a bar chart, rank by the Y-axis in desc."
        ],
        "record_name": "460@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "network_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Jordan",
                    "Gabriel",
                    "Tiffany",
                    "Logan",
                    "Kyle",
                    "Kris",
                    "John",
                    "Jessica",
                    "Haley",
                    "Cassandra",
                    "Brittany",
                    "Austin",
                    "Andrew",
                    "Alexis"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Bar graph to show the number of name from different name, display in descending by the y axis.",
            "Can you show me a bar chart to answer how many people with different names for each high schooler?, and I want to rank how many name from high to low order please.",
            "Count the names of each high schooler using a bar chart, order in desc by the how many name."
        ],
        "record_name": "2451@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ACC_regular_season , teamID FROM basketball_match",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ACC_regular_season",
            "y_name": "teamID",
            "x_data": [
                [
                    "14\u20132",
                    "13\u20133",
                    "10\u20136",
                    "9\u20137"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Draw a bar chart about the distribution of  ACC_Regular_Season and  Team_ID .",
            "Give me the comparison about  Team_ID over the  ACC_Regular_Season  by a bar chart.",
            "Give me the comparison about  Team_ID over the  ACC_Regular_Season .",
            "Visualize a bar chart about the distribution of  ACC_Regular_Season and  Team_ID .",
            "A bar chart shows the distribution of  ACC_Regular_Season and  Team_ID .",
            "Show me team_id by acc regular season in a histogram"
        ],
        "record_name": "3112"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association ORDER BY association ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association ORDER BY association ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "association",
            "y_name": "sum(registration)",
            "x_data": [
                [
                    "Private/Methodist",
                    "Public"
                ]
            ],
            "y_data": [
                [
                    2100,
                    43092
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show me a bar chart for what are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?, and rank in asc by the bar.",
            "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type Show bar chart, I want to sort X-axis from low to high order please.",
            "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type Visualize by bar chart, and could you list from low to high by the bars?",
            "A bar chart about what are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?, I want to sort X-axis from low to high order please."
        ],
        "record_name": "3191@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "customers_card_transactions_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "card_type_code",
            "y_name": "COUNT(card_type_code)",
            "x_data": [
                [
                    "Credit",
                    "Debit"
                ]
            ],
            "y_data": [
                [
                    7,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY card_type_code"
        },
        "nl_queries": [
            "Show the number of cards in different card type code in a bar chart.",
            "How many cards in different card type code? Plot a bar chart.",
            "Show me the number of card type code by card type code in a histogram"
        ],
        "record_name": "1043"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "election_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Committee",
            "y_name": "COUNT(Committee)",
            "x_data": [
                [
                    "Environmental Matters",
                    "Economic Matters",
                    "Appropriations"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Committee"
        },
        "nl_queries": [
            "Which committees have delegates from the Democratic party, and count them by a bar chart, I want to rank x axis from high to low order.",
            "Return all the committees that have delegates from Democratic party, and count them by a bar chart, display in desc by the bars."
        ],
        "record_name": "1317@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "station_weather_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "amenities",
            "y_name": "COUNT(amenities)",
            "x_data": [
                [
                    "c2c",
                    "Metropolitan line and Chiltern Railways",
                    "Metropolitan line",
                    "London Overground and London Midland",
                    "London Overground",
                    "Greater Anglia"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1,
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY services"
        },
        "nl_queries": [
            "Draw a bar chart of services versus the number of services, could you display by the names in desc?",
            "Group by services attribute in station table and compute the total number of services with a bar chart, display x-axis from high to low order please.",
            "Give me a bar chart that the x-axis is the services and the Y is the count(services), list by the names from high to low please."
        ],
        "record_name": "2834@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Donator_name , sum(quantity) FROM endowment GROUP BY Donator_name ORDER BY sum(quantity) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Donator_name , sum(quantity) FROM endowment GROUP BY Donator_name ORDER BY sum(quantity) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "school_finance_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Donator_name",
            "y_name": "sum(quantity)",
            "x_data": [
                [
                    "San Jos\u00e9 de Ocoa",
                    "Valverde",
                    "Distrito Nacional",
                    "Monte Plata",
                    "San Crist\u00f3bal",
                    "Santo Domingo Este",
                    "Santiago",
                    "La Vega",
                    "Duarte",
                    "Com. Dom. En Estados Unidos",
                    "Peravia"
                ]
            ],
            "y_data": [
                [
                    9.83,
                    9.73,
                    9.55,
                    9.51,
                    9.05,
                    8.99,
                    8.85,
                    8.82,
                    8.53,
                    8.43,
                    8.33
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "List each donator name and the amount of endowment in descending order of the amount of endowment by a bar chart.",
            "List each donator name and the amount of endowment in descending order of the amount of endowment. Plot them as bar chart."
        ],
        "record_name": "2703"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(date_of_hire) DESC",
                "binning": "BIN date_of_hire BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "COUNT(date_of_hire)",
            "x_data": [
                [
                    "Wed",
                    "Sat",
                    "Mon",
                    "Fri",
                    "Tue",
                    "Thur",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    11,
                    9,
                    8,
                    7,
                    5,
                    5,
                    3
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY WEEKDAY"
        },
        "nl_queries": [
            "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the amount of hire_date bin hire_date by weekday in a bar chart, and rank from high to low by the Y please.",
            "For all employees who have the letters D or S in their first name, find hire_date and the amount of hire_date bin hire_date by weekday, and visualize them by a bar chart, and could you show in descending by the how many hire date?",
            "For all employees who have the letters D or S in their first name, give me the comparison about the amount of hire_date over the hire_date bin hire_date by weekday by a bar chart, sort by the y axis from high to low.",
            "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday, and show y axis from high to low order.",
            "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday, and rank total number from high to low order."
        ],
        "record_name": "1539@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" GROUP BY director",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" GROUP BY director"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "movie_1_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "director",
            "y_name": "max(T1.stars)",
            "x_data": [
                [
                    "James Cameron",
                    "Robert Wise",
                    "Steven Spielberg",
                    "Victor Fleming"
                ]
            ],
            "y_data": [
                [
                    5,
                    3,
                    4,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each director, return the director's name together with  the highest rating among all of their movies and ignore movies whose director is NULL. Could you plot the result with a pie chart?"
        ],
        "record_name": "2397"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT sex , count(*) FROM student WHERE Age > (SELECT avg(Age) FROM student) GROUP BY sex",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT sex , count(*) FROM student WHERE Age > (SELECT avg(Age) FROM student) GROUP BY sex"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "dorm_1_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "sex",
            "y_name": "count(*)",
            "x_data": [
                [
                    "F",
                    "M"
                ]
            ],
            "y_data": [
                [
                    5,
                    10
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the number of students whose age is older than the average age for each gender. Visualize by pie chart.",
            "Draw a pie chart for how many students are older than average for each gender?",
            "Return a pie on how many students are older than average for each gender?",
            "How many students are older than average for each gender. "
        ],
        "record_name": "1234"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT gender , SUM(Height) FROM people GROUP BY gender",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "candidate_poll_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "gender",
            "y_name": "SUM(Height)",
            "x_data": [
                [
                    "F",
                    "M"
                ]
            ],
            "y_data": [
                [
                    395,
                    1366
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Sex"
        },
        "nl_queries": [
            "Show me about the proportion of the sum of Height and the sum of Height in a pie chart.",
            "For the attribute  Sex and the sum of Height, show their proportion by a pie chart.",
            "Visualize a pie chart about the proportion of  Sex and the sum of Height.",
            "A pie chart shows the proportion of  Sex and the sum of Height.",
            "Return a pie chart about the proportion of  Sex and the sum of Height.",
            "Create a pie chart showing sum height across sex."
        ],
        "record_name": "388"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT customer_Fname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT customer_Fname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_invoices_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "customer_Fname",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Joesph",
                    "Vesta",
                    "Meaghan",
                    "Abbey",
                    "Jensen",
                    "Kieran",
                    "Ruby"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    4,
                    1,
                    1,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the number of accounts for each customer in a bar chart grouping by customer's first name.",
            "How many accounts for each customer? Show a bar chart that groups by customer's first name."
        ],
        "record_name": "988"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identifacation GROUP BY T1.staff_name ORDER BY count(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identifacation GROUP BY T1.staff_name ORDER BY count(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "assets_maintenance_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "staff_name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Christophe",
                    "Cyrus",
                    "Oren",
                    "Rodger",
                    "Berneice",
                    "Bernice",
                    "Edmond",
                    "Kadin"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted in a bar chart, rank from low to high by the y-axis.",
            "Return a bar chart on how many engineers did each staff contact? List both the contact staff name and number of engineers contacted, and could you order by the Y in asc please?",
            "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted Plot them as bar chart, show the total number in ascending order.",
            "Give me a histogram for how many engineers did each staff contact? List both the contact staff name and number of engineers contacted, could you order in ascending by the y axis?"
        ],
        "record_name": "116@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "department_management_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "state_of_birth",
            "y_name": "AVG(age)",
            "x_data": [
                [
                    "Alabama",
                    "California",
                    "Connecticut",
                    "Delaware",
                    "Florida"
                ]
            ],
            "y_data": [
                [
                    68,
                    61.25,
                    55,
                    53,
                    50
                ]
            ],
            "classify": [],
            "describe": "GROUP BY born_state"
        },
        "nl_queries": [
            "Show the average age of heads of departments born in each state with a bar chart.",
            "Show me mean age by born state in a histogram"
        ],
        "record_name": "1112"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "network_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "AVG(count(*))",
            "x_data": [
                [
                    "Tiffany",
                    "Logan",
                    "Kyle",
                    "Kris",
                    "Jordan",
                    "Jessica",
                    "Haley",
                    "Gabriel",
                    "Cassandra",
                    "Austin",
                    "Andrew",
                    "Alexis"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    1.5,
                    1,
                    1,
                    1.5,
                    1,
                    1,
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Show the names of high school students and their corresponding number of friends Plot them as bar chart, and rank in desc by the X-axis.",
            "A bar chart about what are the names of the high schoolers and how many friends does each have?, and display X-axis in desc order.",
            "Display a bar chart for what are the names of the high schoolers and how many friends does each have?, display by the bars in desc.",
            "Show the names of high school students and their corresponding number of friends in a bar chart, and order in descending by the x axis.",
            "What are the names of the high schoolers and how many friends does each have Show bar chart, and rank in desc by the X-axis."
        ],
        "record_name": "2456@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "e_learning_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "login_name",
            "y_name": "authorID",
            "x_data": [
                [
                    "al75",
                    "jmckenzie",
                    "dschaefer",
                    "clementina29",
                    "adam.rippin",
                    "fiona77",
                    "antonetta19",
                    "wlehner",
                    "medhurst.alvah",
                    "marty.bergnaum",
                    "qking",
                    "heidenreich.ara",
                    "ekshlerin",
                    "nellie.mosciski",
                    "nyundt"
                ]
            ],
            "y_data": [
                [
                    6,
                    1,
                    11,
                    3,
                    10,
                    14,
                    9,
                    4,
                    8,
                    7,
                    13,
                    2,
                    15,
                    12,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find  login_name and  author_id , and visualize them by a bar chart.",
            "Visualize a bar chart about the distribution of  login_name and  author_id .",
            "Return a bar chart about the distribution of  login_name and  author_id .",
            "Show me about the distribution of  login_name and  author_id  in a bar chart.",
            "Draw a bar chart about the distribution of  login_name and  author_id ."
        ],
        "record_name": "1258"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , all_Passengers FROM station WHERE Position != 'London' ORDER BY Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , all_Passengers FROM station WHERE Position != 'London' ORDER BY Name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "train_station_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "all_Passengers",
            "x_data": [
                [
                    "Birmingham New Street",
                    "Glasgow Central"
                ]
            ],
            "y_data": [
                [
                    36.330999999999996,
                    29.658
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the names and total passengers for all train stations not in London Visualize by bar chart, and I want to sort in ascending by the bars please.",
            "Show the names and total passengers for all train stations not in London with a bar chart, and could you display by the x axis from low to high please?"
        ],
        "record_name": "3050@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(date_of_hire) DESC",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "COUNT(date_of_hire)",
            "x_data": [
                [
                    "July",
                    "Aug",
                    "Sept",
                    "June",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    31,
                    31,
                    30,
                    14,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, and could you order by the y axis in descending?",
            "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, and display by the Y-axis in desc.",
            "For those employees who was hired before 2002-06-21, find hire_date and the amount of hire_date bin hire_date by time, and visualize them by a bar chart, sort by the how many hire date in descending please.",
            "For those employees who was hired before 2002-06-21, show me about the distribution of hire_date and the amount of hire_date bin hire_date by time in a bar chart, sort in descending by the y-axis please.",
            "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, display Y in desc order."
        ],
        "record_name": "1754@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "COURSE_CODE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "ACCT-211",
                    "ACCT-212",
                    "CIS-220",
                    "CIS-420",
                    "QM-261",
                    "QM-362"
                ]
            ],
            "y_data": [
                [
                    3,
                    2,
                    3,
                    1,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "how many sections does each course has?",
            "Visualize a bar chart for how many sections does each course has?",
            "How many sections does each course has. Visualize by bar chart.",
            "Draw a bar chart for how many sections does each course have?",
            "Give me a histogram for how many sections does each course have?",
            "How many sections does each course have. Visualize by bar chart.",
            "Bar chart x axis crs code y axis the total number "
        ],
        "record_name": "553"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "election_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Party",
            "y_name": "COUNT(Party)",
            "x_data": [
                [
                    "Democratic",
                    "Independence",
                    "Liberal",
                    "Working Families"
                ]
            ],
            "y_data": [
                [
                    4,
                    1,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Party"
        },
        "nl_queries": [
            "Show how many delegates in each party with a bar chart.",
            "For each party, use a bar chart to show the number of its delegates."
        ],
        "record_name": "1311"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "epinions_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "avg(trust)",
            "x_data": [
                [
                    "Terry",
                    "Roxi",
                    "Rosie",
                    "Nancy",
                    "Mark"
                ]
            ],
            "y_data": [
                [
                    5,
                    10,
                    4.5,
                    8,
                    4.666666666666667
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find each target user's name and average trust score Visualize by bar chart, and sort by the x-axis from high to low."
        ],
        "record_name": "1380@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY Title ORDER BY Title ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY Title ORDER BY Title ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "film_rank_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Title",
            "y_name": "COUNT(Title)",
            "x_data": [
                [
                    "An Officer and a Gentleman",
                    "ET the Extra-Terrestrial",
                    "Rocky III",
                    "Tootsie"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    4,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Title"
        },
        "nl_queries": [
            "For each title, use a bar chart to show the number of films, list from low to high by the x axis please."
        ],
        "record_name": "1394@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "dog_kennels_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "charge_type",
            "y_name": "charge_amount",
            "x_data": [
                [
                    "Daily Accommodation",
                    "Drugs",
                    "Health Check"
                ]
            ],
            "y_data": [
                [
                    98,
                    322,
                    640
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Give me a bar chart for charge_amount of each charge type, could you list by the x axis in asc?",
            "List each charge type and its amount Show bar chart, display bars in asc order.",
            "List each charge type and its amount in a bar chart, list in asc by the x-axis.",
            "Visualize a bar chart for how much does each charge type costs? List both charge type and amount, and rank charge_type in asc order.",
            "How much does each charge type costs? List both charge type and amount, could you list bar in asc order?"
        ],
        "record_name": "1174@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Description , COUNT(Description) FROM Sections GROUP BY Description",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Description , COUNT(Description) FROM Sections GROUP BY Description"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "student_transcripts_tracking_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Description",
            "y_name": "COUNT(Description)",
            "x_data": [
                [
                    "ad",
                    "doloremque",
                    "et",
                    "ex",
                    "facilis",
                    "nesciunt",
                    "non",
                    "provident",
                    "qui",
                    "quis",
                    "reprehenderit",
                    "voluptas",
                    "voluptatem"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY section_description"
        },
        "nl_queries": [
            "Count the section_description, and group by section_description with a bar chart.",
            "Show how many section description from each section description"
        ],
        "record_name": "2902"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT DateClosed , COUNT(DateClosed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.CustomerName LIKE \"%Diana%\"",
                "binning": "BIN DateClosed BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT DateClosed , COUNT(DateClosed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.CustomerName LIKE \"%Diana%\" BIN DateClosed BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "insurance_fnol_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "DateClosed",
            "y_name": "COUNT(DateClosed)",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN Date_Closed BY WEEKDAY"
        },
        "nl_queries": [
            "Retrieve the close dates of all the policies associated with the customer whose name contains \"Diana\", bin the close dates into the day of week interval and count them for a bar chart."
        ],
        "record_name": "1990"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT T1.investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT T1.investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "tracking_share_transactions_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "investor_details",
            "y_name": "investor_id",
            "x_data": [
                [
                    "d",
                    "z",
                    "w"
                ]
            ],
            "y_data": [
                [
                    3,
                    2,
                    18
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the id and details for the investors who have the top 3 number of transactions in a pie chart.",
            "Show the id and details for the investors who have the top 3 number of transactions. Show the proportion."
        ],
        "record_name": "3019"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT DEPARTMENT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.DEPARTMENT_CODE ORDER BY count(*) DESC LIMIT 3",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT DEPARTMENT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.DEPARTMENT_CODE ORDER BY count(*) DESC LIMIT 3"
        },
        "chart": "Pie",
        "hardness": "Extra Hard",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "DEPARTMENT_NAME",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Accounting",
                    "Computer Info. Systems",
                    "Biology"
                ]
            ],
            "y_data": [
                [
                    3,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the number of students in each department that has the top 3 highest number of students with a pie chart.",
            "Which departments have the top 3 highest number of students? Show the department name and number of students with a pie chart."
        ],
        "record_name": "525"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY Budget_Type_Code",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY Budget_Type_Code"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Budget_Type_Code",
            "y_name": "count(*)",
            "x_data": [
                [
                    "GV",
                    "ORG",
                    "SF"
                ]
            ],
            "y_data": [
                [
                    6,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show budget type codes and the number of documents in each budget type by a pie chart.",
            "Show budget type codes and the number of documents in each budget type. Show the proportion.",
            "Display a pie chart for what are the different budget type codes, and how many documents are there for each?",
            "Give the proportion of what are the different budget type codes, and how many documents are there for each?",
            "What are the different budget type codes, and how many documents are there for each. Show a pie chart.",
            "Compute the total the total number across budget type code as a pie chart."
        ],
        "record_name": "802"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , sum(income) FROM manufacturers GROUP BY Name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , sum(income) FROM manufacturers GROUP BY Name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "sum(income)",
            "x_data": [
                [
                    "Creative Labs",
                    "Fujits",
                    "Hewlett-Packard",
                    "Iomega",
                    "Sony",
                    "Winchester"
                ]
            ],
            "y_data": [
                [
                    100,
                    130,
                    50,
                    200,
                    120,
                    30
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the total revenue for each manufacturer. Plot them as bar chart.",
            "A bar chart about what is the total revenue of each manufacturer?",
            "Return a bar chart on what is the total revenue of each manufacturer?",
            "What is the total revenue of each manufacturer. ",
            "Bar graph to show sum revenue from different name"
        ],
        "record_name": "2181"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , capacity FROM track WHERE Year_Opened > 2000 ORDER BY capacity",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , capacity FROM track WHERE Year_Opened > 2000 ORDER BY capacity"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "race_track_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "capacity",
            "x_data": [
                [
                    "Chicagoland Speedway",
                    "Kansas Speedway"
                ]
            ],
            "y_data": [
                [
                    75000,
                    81687
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show names and seatings, ordered by seating for all tracks opened after 2000 in a bar chart.",
            "Show names and seatings, ordered by seating for all tracks opened after 2000. Plot them as bar chart.",
            "Return a histogram on what are the names and seatings for all tracks opened after 2000, ordered by seating?",
            "Return a bar chart on what are the names and seatings for all tracks opened after 2000, ordered by seating?",
            "What are the names and seatings for all tracks opened after 2000, ordered by seating. Visualize by bar chart."
        ],
        "record_name": "2646"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "title",
            "y_name": "AVG(credits)",
            "x_data": [
                [
                    "World History",
                    "Groups and Rings",
                    "Game Programming",
                    "Embedded Systems",
                    "International Practicum",
                    "Rock and Roll",
                    "Ponzi Schemes",
                    "Operating Systems",
                    "Immunology",
                    "Graph Theory",
                    "Fiction Writing",
                    "Electron Microscopy",
                    "Elastic Structures",
                    "Differential Geometry",
                    "Cat Herding",
                    "Aquatic Chemistry"
                ]
            ],
            "y_data": [
                [
                    4,
                    4,
                    4,
                    4,
                    3.5,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY title"
        },
        "nl_queries": [
            "Find the average of credits of courses that have more than one prerequisite for each title with a bar chart, I want to order in descending by the y-axis.",
            "What is the average of credit value of courses with more than one prerequisite for each title? Return a bar chart, rank by the total number in descending."
        ],
        "record_name": "636@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Event_Information , COUNT(Event_Information) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "local_govt_in_alabama_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Event_Information",
            "y_name": "COUNT(Event_Information)",
            "x_data": [
                [
                    "Fail",
                    "Success"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Event_Details"
        },
        "nl_queries": [
            "Give me a bar chart to show the number of event details of events that have more than one participant, and list from high to low by the total number.",
            "For events that have more than one participant, count the event details for a bar chart, sort by the y axis in desc."
        ],
        "record_name": "2149@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "county_public_safety_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Police_force",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Abbotsford Police Department",
                    "Central Saanich Police",
                    "RCMP"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display a bar chart for how many counties correspond to each police force?",
            "Return a bar chart on how many counties correspond to each police force?",
            "How many counties correspond to each police force. ",
            "Create a bar chart showing the total number across police force"
        ],
        "record_name": "709"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "COUNT(date_of_hire)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    14,
                    31,
                    31,
                    29,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by time.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the amount of hire_date over the  hire_date bin hire_date by time.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by time in a bar chart.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find  hire_date and the amount of hire_date bin hire_date by time, and visualize them by a bar chart.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by time."
        ],
        "record_name": "1580"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "ZIP drive",
                    "Toner cartridge",
                    "Printer",
                    "Monitor",
                    "Memory",
                    "Hard drive",
                    "Floppy disk",
                    "DVD drive",
                    "DVD burner",
                    "CD drive"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "What is the number of names for each product in the store?, and sort by the Name in descending.",
            "Give me a bar chart for how many name of each name, order by the bar from high to low.",
            "Count the names of all the products in the store and return me a bar chart, could you sort X from high to low order?"
        ],
        "record_name": "2177@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Manufacturer , income FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Manufacturer , income FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
        },
        "chart": "Grouping Scatter",
        "hardness": "Medium",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Manufacturer",
            "y_name": "income",
            "x_data": [
                [
                    2,
                    2,
                    2
                ],
                [
                    4
                ],
                [
                    3,
                    3,
                    3
                ],
                [
                    6,
                    6
                ],
                [
                    5
                ],
                [
                    1
                ]
            ],
            "y_data": [
                [
                    100,
                    100,
                    100
                ],
                [
                    200
                ],
                [
                    50,
                    50,
                    50
                ],
                [
                    30,
                    30
                ],
                [
                    130
                ],
                [
                    120
                ]
            ],
            "classify": [
                "Austin",
                "Beijing",
                "Los Angeles",
                "Paris",
                "Taiwan",
                "Tokyo"
            ],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, show me about the correlation between  manufacturer and  revenue , and group by attribute headquarter in a scatter chart.",
            "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  manufacturer and  revenue , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute headquarter."
        ],
        "record_name": "2291"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE Injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE Injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "game_injury_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Number_of_matches",
            "y_name": "COUNT(Number_of_matches)",
            "x_data": [
                [
                    "1 (2)",
                    "10",
                    "12",
                    "4",
                    "2",
                    "3",
                    "4 (6)",
                    "1"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Number_of_matches"
        },
        "nl_queries": [
            "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches, and rank by the y axis from low to high."
        ],
        "record_name": "1481@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
        },
        "chart": "Line",
        "hardness": "Extra Hard",
        "db_id": "dog_kennels_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_of_treatment",
            "y_name": "COUNT(date_of_treatment)",
            "x_data": [
                [
                    "8th",
                    "9th",
                    "10th",
                    "11th",
                    "12th",
                    "13th",
                    "14th",
                    "15th",
                    "16th",
                    "17th",
                    "18th",
                    "19th"
                ]
            ],
            "y_data": [
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_treatment BY TIME"
        },
        "nl_queries": [
            "List the number of dogs of the rarest breed in each treatment day with a line chart that groups by date of treatment.",
            "How many dogs of the rarest breed in each treatment day? Draw a line chart that groups by date of treatment."
        ],
        "record_name": "1157"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "protein_institute_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "category",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Tribal",
                    "Public",
                    "Private"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Let institution types as the X-axis and the number of institutions for each type as Y-axis, the visualization type is bar chart, rank from low to high by the y axis.",
            "Please give me a bar chart showing institution types, along with the number of institutions for each type, could you show from low to high by the y axis?",
            "Draw a bar chart of type versus the total number, and order from low to high by the the total number ."
        ],
        "record_name": "2629@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarter",
            "y_name": "AVG(Manufacturer)",
            "x_data": [
                [
                    "Austin",
                    "Beijing",
                    "Los Angeles",
                    "Paris",
                    "Taiwan",
                    "Tokyo"
                ]
            ],
            "y_data": [
                [
                    2,
                    4,
                    3,
                    6,
                    5,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, a bar chart shows the distribution of  headquarter and the average of manufacturer , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the  headquarter , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  headquarter and the average of manufacturer , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  headquarter and the average of manufacturer , and group by attribute headquarter.",
            "For those records from the products and each product's manufacturer, find  headquarter and the average of manufacturer , and group by attribute headquarter, and visualize them by a bar chart."
        ],
        "record_name": "2221"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "SUM(employee_id)",
            "x_data": [
                [
                    "ST_MAN",
                    "ST_CLERK",
                    "SH_CLERK",
                    "SA_REP",
                    "SA_MAN",
                    "PU_MAN",
                    "PU_CLERK",
                    "PR_REP",
                    "MK_REP",
                    "MK_MAN",
                    "IT_PROG",
                    "HR_REP",
                    "FI_MGR",
                    "FI_ACCOUNT",
                    "AD_VP",
                    "AD_PRES",
                    "AD_ASST",
                    "AC_MGR",
                    "AC_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    610,
                    2690,
                    3790,
                    4935,
                    735,
                    114,
                    585,
                    204,
                    202,
                    201,
                    525,
                    203,
                    108,
                    555,
                    203,
                    100,
                    200,
                    205,
                    206
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of job_id and the sum of employee_id , and group by attribute job_id, show by the X in desc.",
            "For those employees who was hired before 2002-06-21, find job_id and the sum of employee_id , and group by attribute job_id, and visualize them by a bar chart, could you order x-axis in desc order?",
            "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, and show bars from high to low order please.",
            "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, I want to order in desc by the X-axis please.",
            "For those employees who was hired before 2002-06-21, show me about the distribution of job_id and the sum of employee_id , and group by attribute job_id in a bar chart, show bars from high to low order please."
        ],
        "record_name": "1774@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "flight_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "destination",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Boston",
                    "Chicago",
                    "Dallas",
                    "Honolul",
                    "Los Angeles",
                    "New York",
                    "Sydney",
                    "Tokyo",
                    "Washington D.C."
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show all destinations and the number of flights to each destination by a bar chart.",
            "Show all destinations and the number of flights to each destination. Plot them as bar chart.",
            "Draw a bar chart for what are the destinations and number of flights to each one?",
            "A bar chart about what are the destinations and number of flights to each one?",
            "What are the destinations and number of flights to each one. Visualize by bar chart.",
            "Draw a bar chart of destination versus the total number "
        ],
        "record_name": "1408"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_information ORDER BY Document_Date ASC",
                "binning": "BIN Document_Date BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_information ORDER BY Document_Date ASC BIN Document_Date BY YEAR"
        },
        "chart": "Grouping Line",
        "hardness": "Extra Hard",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "Document_Date",
            "y_name": "COUNT(Document_Date)",
            "x_data": [
                [
                    "1970~1973",
                    "1974~1977",
                    "1978~1981",
                    "1982~1985",
                    "1986~1989",
                    "1990~1993",
                    "1994~1997",
                    "1998~2001",
                    "2002~2005",
                    "2006~2009",
                    "2010~2013"
                ]
            ],
            "y_data": [
                [
                    10,
                    2,
                    9,
                    3,
                    0,
                    3,
                    0,
                    0,
                    5,
                    2,
                    5
                ],
                [
                    10,
                    2,
                    9,
                    3,
                    0,
                    3,
                    0,
                    0,
                    5,
                    3,
                    5
                ],
                [
                    12,
                    3,
                    9,
                    3,
                    0,
                    3,
                    0,
                    0,
                    6,
                    3,
                    6
                ]
            ],
            "classify": [
                "excellent",
                "fun",
                "good"
            ],
            "describe": "GROUP BY Document_Type_Description, BIN Document_Date BY YEAR"
        },
        "nl_queries": [
            "How many documents are created in each day? Bin the document date by year interval and group by document type description with a group line chart, and I want to show in ascending by the X-axis.",
            "Show the number of documents created in each day and bin document date by year interval and group by document type description with a group line chart, and order by the x axis from low to high.",
            "Show the number of documents created in each day and bin document date by year interval and group by document type description with a group line chart, sort by the Document_Date in ascending.",
            "How many documents are created in each day? Bin the document date by year interval and group by document type description with a group line chart, and show in asc by the X."
        ],
        "record_name": "850@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Shop_ID , EmployeeID FROM hiring",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "employee_hire_evaluation_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Shop_ID",
            "y_name": "EmployeeID",
            "x_data": [
                [
                    1,
                    1,
                    8,
                    4,
                    5,
                    2,
                    6
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A scatter chart shows the correlation between  Shop_ID and  Employee_ID .",
            "Draw a scatter chart about the correlation between  Shop_ID and  Employee_ID .",
            "Visualize the relationship between  Shop_ID and  Employee_ID .",
            "Return a scatter chart about the correlation between  Shop_ID and  Employee_ID .",
            "Visualize a scatter chart about the correlation between  Shop_ID and  Employee_ID .",
            "Scatter plot to show shop id on x axis and employee_id on y axis."
        ],
        "record_name": "1357"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "building",
            "y_name": "COUNT(building)",
            "x_data": [
                [
                    "Brodhead",
                    "Bronfman",
                    "Linderman",
                    "Mercer",
                    "Palmer",
                    "Thompson",
                    "Whitman",
                    "Wrigley",
                    "Candlestick",
                    "Taylor"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY building"
        },
        "nl_queries": [
            "How many departments whose budget is more than the average budget in each building? Show me a bar chart, list by the total number in asc.",
            "Give the number of departments with greater than average budget in each building with a bar chart, and order the number of building from low to high order."
        ],
        "record_name": "657@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "college_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "department_name",
            "y_name": "min(wage)",
            "x_data": [
                [
                    "Astronomy",
                    "Comp. Sci.",
                    "Cybernetics",
                    "Finance",
                    "Geology",
                    "Marketing",
                    "Mech. Eng.",
                    "Physics",
                    "Pol. Sci."
                ]
            ],
            "y_data": [
                [
                    79070.08,
                    80797.83,
                    79866.95,
                    105311.38,
                    99382.59,
                    43770.36,
                    51647.57,
                    108011.81,
                    87549.8
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the minimum salary for the departments whose average salary is above the average payment of all instructors. Plot them as bar chart.",
            "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average.",
            "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average.",
            "What is the lowest salary in departments with average salary greater than the overall average. Plot them as bar chart.",
            "Bar chart of minimal salary from each dept name"
        ],
        "record_name": "619"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Openning_year , AVG(seating) FROM cinema",
                "binning": "BIN Openning_year BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema BIN Openning_year BY YEAR"
        },
        "chart": "Line",
        "hardness": "Easy",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "Openning_year",
            "y_name": "AVG(seating)",
            "x_data": [
                [
                    "2009",
                    "2010",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015"
                ]
            ],
            "y_data": [
                [
                    305,
                    544.3333333333334,
                    445.3333333333333,
                    368,
                    330,
                    0,
                    364
                ]
            ],
            "classify": [],
            "describe": "BIN Openning_year BY YEAR"
        },
        "nl_queries": [
            "Tell me the average of capacity of cinemas open for each year in a line chart.",
            "Can you draw the trend of the average of capacity over the openning year?"
        ],
        "record_name": "471"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT teacher , Department_NO FROM COURSE ORDER BY Credits",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT teacher , Department_NO FROM COURSE ORDER BY Credits"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "college_3_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "teacher",
            "y_name": "Department_NO",
            "x_data": [
                [
                    4230,
                    9826,
                    6191,
                    9011,
                    2881,
                    6112,
                    1193,
                    4230,
                    6112,
                    6112,
                    6112,
                    1121,
                    9826,
                    9172,
                    2192,
                    1148,
                    8918,
                    7712,
                    2192,
                    1148,
                    8918,
                    7723,
                    8114,
                    7712,
                    7792,
                    1121,
                    8423,
                    1121,
                    9823,
                    9823,
                    8791,
                    8791,
                    2738,
                    8102,
                    6182,
                    9823,
                    8772,
                    6541,
                    8122,
                    9922,
                    8723,
                    9210,
                    6191,
                    1823,
                    9824,
                    6925,
                    6191,
                    6191,
                    2119,
                    7231,
                    9514,
                    6330,
                    8722,
                    9379,
                    7134,
                    9514,
                    4432,
                    6910,
                    4432,
                    6910,
                    8989,
                    4432,
                    4432,
                    5718,
                    2311,
                    8772,
                    6541,
                    8102,
                    2881,
                    1177,
                    2738,
                    8772,
                    9210,
                    8118,
                    9210,
                    9011
                ]
            ],
            "y_data": [
                [
                    600,
                    600,
                    600,
                    50,
                    550,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    50,
                    50,
                    50,
                    50,
                    50,
                    50,
                    50,
                    50,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    520,
                    520,
                    520,
                    50
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Draw a scatter chart about the correlation between  Instructor and  DNO .",
            "Return a scatter chart about the correlation between  Instructor and  DNO .",
            "Visualize a scatter chart about the correlation between  Instructor and  DNO .",
            "Visualize the relationship between  Instructor and  DNO .",
            "Show me about the correlation between  Instructor and  DNO  in a scatter chart."
        ],
        "record_name": "672"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "dog_kennels_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Lname",
            "y_name": "COUNT(Lname)",
            "x_data": [
                [
                    "Stoltenberg",
                    "Schmitt",
                    "Rippin",
                    "Prohaska",
                    "Price",
                    "Nicolas",
                    "Mertz",
                    "Haley",
                    "Funk",
                    "Fisher",
                    "Feil",
                    "DuBuque"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY last_name"
        },
        "nl_queries": [
            "List the number of dogs each owner has in a bar chart that groups by owner's last name, display by the last_name in desc.",
            "How many dogs each owner has? Return a bar chart that groups by owner's last name, display x axis from high to low order."
        ],
        "record_name": "1204@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC",
                "binning": "BIN date_of_hire BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "SUM(employee_id)",
            "x_data": [
                [
                    "Thur",
                    "Wed",
                    "Tue",
                    "Sun",
                    "Sat",
                    "Fri",
                    "Mon"
                ]
            ],
            "y_data": [
                [
                    2456,
                    2440,
                    2325,
                    2295,
                    2280,
                    2265,
                    2107
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY WEEKDAY"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, order by the y-axis in descending.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the sum of employee_id bin hire_date by weekday, and visualize them by a bar chart, and sort in desc by the y-axis.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of hire_date and the sum of employee_id bin hire_date by weekday in a bar chart, sort by the Y-axis in desc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, and show by the Y in desc.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, and list by the total number from high to low."
        ],
        "record_name": "1590@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "ship_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "class",
            "y_name": "COUNT(class)",
            "x_data": [
                [
                    "Armed schooner",
                    "Cutter",
                    "Frigate",
                    "Sloop-of-war",
                    "Third-rate ship of the line"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Class"
        },
        "nl_queries": [
            "What is the total number of captains with different classes?, show by the Class in ascending.",
            "Plot how many class by grouped by class as a bar graph, order in asc by the Class.",
            "Show me a bar chart comparing the total number of captains of different classes, and rank by the Class from low to high.",
            "Compare the total number of captains with different classes using a bar graph, show by the Class in ascending."
        ],
        "record_name": "2753@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "swimming_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "citizenship",
            "y_name": "SUM(meter_one_hundred)",
            "x_data": [
                [
                    "France",
                    "Canada",
                    "Italy",
                    "Poland",
                    "Tunisia",
                    "Ukraine",
                    "Australia"
                ]
            ],
            "y_data": [
                [
                    55,
                    57,
                    57,
                    57,
                    57,
                    57,
                    114
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "Visualize a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, sort by the Y-axis in asc.",
            "Return a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and could you list by the total number from low to high?",
            "Bar chart x axis nationality y axis sum meter 100, and rank from low to high by the Y-axis.",
            "Draw a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and I want to display by the total number in ascending.",
            "Give me the comparison about the sum of meter_100 over the Nationality , and group by attribute Nationality, and list y axis in ascending order please.",
            "Find Nationality and the sum of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and rank from low to high by the Y-axis."
        ],
        "record_name": "2908@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "world_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Continent",
            "y_name": "avg(LifeExpectancy)",
            "x_data": [
                [
                    "South America",
                    "Oceania",
                    "Asia",
                    "Africa"
                ]
            ],
            "y_data": [
                [
                    70.94615384615386,
                    69.715,
                    67.44117647058825,
                    52.57192982456139
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each continent where the average life expectancy is shorter than 72, draw a bar chart to show their average life expectancy, and display by the Continent from high to low.",
            "Draw a bar chart of continent versus mean lifeexpectancy, and rank in descending by the x-axis.",
            "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72, and display in descending by the X-axis."
        ],
        "record_name": "3269@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "railway_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(Country)",
            "x_data": [
                [
                    "United States",
                    "England",
                    "Australia"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Country"
        },
        "nl_queries": [
            "A bar chart for showing the number of the countries that have managers of age above 50 or below 46, and list in descending by the Y.",
            "Show the number of the countries that have managers of age above 50 or below 46, and could you show from high to low by the total number?",
            "Show the countries that have managers of age above 50 or below 46, and count them by a bar chart, could you rank the number of country from high to low order please?"
        ],
        "record_name": "2657@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ACC_Street",
            "y_name": "AVG(schoolID)",
            "x_data": [
                [
                    "3\u20135",
                    "6\u20132",
                    "8\u20130"
                ]
            ],
            "y_data": [
                [
                    4.5,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY ACC_Road"
        },
        "nl_queries": [
            "Bar chart x axis acc road y axis the average of school id, and sort bar in asc order please.",
            "Visualize a bar chart about the distribution of ACC_Road and the average of School_ID , and group by attribute ACC_Road, could you order in ascending by the names?",
            "A bar chart shows the distribution of ACC_Road and the average of School_ID , and group by attribute ACC_Road, and I want to show names from low to high order.",
            "Show me about the distribution of ACC_Road and the average of School_ID , and group by attribute ACC_Road in a bar chart, sort bar in asc order please.",
            "Find ACC_Road and the average of School_ID , and group by attribute ACC_Road, and visualize them by a bar chart, I want to list by the bar from low to high.",
            "Give me the comparison about the average of School_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart, and could you sort from low to high by the names?"
        ],
        "record_name": "3101@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT avg(STUDENT_GPA) , min(STUDENT_GPA) FROM student GROUP BY DEPARTMENT_CODE",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT avg(STUDENT_GPA) , min(STUDENT_GPA) FROM student GROUP BY DEPARTMENT_CODE"
        },
        "chart": "Grouping Scatter",
        "hardness": "Easy",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "avg(STUDENT_GPA)",
            "y_name": "min(STUDENT_GPA)",
            "x_data": [
                [
                    2.776666666666667
                ],
                [
                    2.84
                ],
                [
                    3.18
                ],
                [
                    3.87
                ],
                [
                    2.11
                ]
            ],
            "y_data": [
                [
                    2.26
                ],
                [
                    2.84
                ],
                [
                    3.09
                ],
                [
                    3.87
                ],
                [
                    2.11
                ]
            ],
            "classify": [
                "ACCT",
                "BIOL",
                "CIS",
                "EDU",
                "ENGL"
            ],
            "describe": "GROUP BY DEPT_CODE"
        },
        "nl_queries": [
            "Find the relationship between minimum and average gpa of all students in each department with a scatter chart grouping by department code.",
            "What is the relationship between lowest and average student GPA for every department? Give me a scatter chart grouping by department code.",
            "Scatterplot of minimal stu gpa vs avg(stu gpa) by DEPT_CODE"
        ],
        "record_name": "541"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "company_employee_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarters",
            "y_name": "COUNT(Headquarters)",
            "x_data": [
                [
                    "USA",
                    "UK",
                    "Russia",
                    "Netherlands",
                    "Germany",
                    "France",
                    "China",
                    "Brazil"
                ]
            ],
            "y_data": [
                [
                    8,
                    2,
                    1,
                    1,
                    1,
                    1,
                    4,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarters"
        },
        "nl_queries": [
            "Show the number of headquarters from each headquarters, and I want to show by the X from high to low.",
            "What is the number of companies for each headquarter? Visualize by bar chart, could you sort by the Headquarters in desc?"
        ],
        "record_name": "683@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "swimming_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "citizenship",
            "y_name": "SUM(meter_one_hundred)",
            "x_data": [
                [
                    "Australia",
                    "Canada",
                    "France",
                    "Italy",
                    "Poland",
                    "Tunisia",
                    "Ukraine"
                ]
            ],
            "y_data": [
                [
                    114,
                    57,
                    55,
                    57,
                    57,
                    57,
                    57
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "Return a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, I want to order bars in asc order.",
            "Visualize a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and could you sort X-axis in asc order?",
            "Give me the comparison about the sum of meter_100 over the Nationality , and group by attribute Nationality, and order x axis in asc order please.",
            "Draw a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and I want to list bar from low to high order.",
            "Bar chart x axis nationality y axis sum meter 100, order x axis in asc order please.",
            "Find Nationality and the sum of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and order by the x-axis in asc."
        ],
        "record_name": "2908@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "total_neutral",
            "y_name": "percentage_of_all_games",
            "x_data": [
                [
                    "3\u20133",
                    "4\u20133",
                    "5\u20133",
                    "9\u20131"
                ]
            ],
            "y_data": [
                [
                    0.6,
                    0.706,
                    0.8240000000000001,
                    0.946
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a bar chart showing all_games_percent across all neutral, I want to show bar in asc order.",
            "Show me about the distribution of All_Neutral and All_Games_Percent in a bar chart, and list by the bars in asc.",
            "Give me the comparison about All_Games_Percent over the All_Neutral , and sort by the x-axis in asc.",
            "Give me the comparison about All_Games_Percent over the All_Neutral by a bar chart, and order by the x axis in asc please.",
            "Return a bar chart about the distribution of All_Neutral and All_Games_Percent , rank by the X in ascending.",
            "Find All_Neutral and All_Games_Percent , and visualize them by a bar chart, and I want to rank by the names from low to high."
        ],
        "record_name": "3146@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "poker_player_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nationality",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Bulgaria",
                    "Russia"
                ]
            ],
            "y_data": [
                [
                    1,
                    6
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "what are different nationalities of people and the corresponding number of people from each nation?",
            "Return a bar chart on what are different nationalities of people and the corresponding number of people from each nation?",
            "What are different nationalities of people and the corresponding number of people from each nation. Visualize by bar chart.",
            "Draw a bar chart for how many people are there of each nationality?",
            "Visualize a bar chart for how many people are there of each nationality?",
            "How many people are there of each nationality. Visualize by bar chart.",
            "Draw a bar chart of nationality versus the total number "
        ],
        "record_name": "2594"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Openning_year , SUM(seating) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Openning_year , SUM(seating) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Openning_year",
            "y_name": "SUM(seating)",
            "x_data": [
                [
                    "2015-01-01",
                    "2013-01-01",
                    "2012-01-01",
                    "2011-01-01",
                    "2010-01-01",
                    "2009-01-01"
                ]
            ],
            "y_data": [
                [
                    364,
                    330,
                    368,
                    1336,
                    1633,
                    305
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Openning_year"
        },
        "nl_queries": [
            "Give me a bar chart for total number of capacity of each openning year, and sort bars in desc order.",
            "A bar chart showing the sum of capacity of cinemas open for each year, could you sort in desc by the x-axis?"
        ],
        "record_name": "468@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "dog_kennels_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_departed",
            "y_name": "COUNT(date_departed)",
            "x_data": [
                [
                    "2018-03-24",
                    "2018-03-25"
                ]
            ],
            "y_data": [
                [
                    3,
                    12
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date_departed"
        },
        "nl_queries": [
            "List the number of dogs departed in each day with a bar chart that groups by departed date, and could you show bars in ascending order?",
            "Show how many date departed from each date departed, and I want to order by the date_departed in asc.",
            "How many dogs departed in each day? Visualize with a bar chart that groups by departed date, could you sort date_departed in ascending order?"
        ],
        "record_name": "1182@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Main_Industry , COUNT(Main_Industry) FROM Company WHERE Company_ID NOT IN (SELECT Company_ID FROM station_company) GROUP BY Main_Industry",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM Company WHERE Company_ID NOT IN (SELECT Company_ID FROM station_company) GROUP BY Main_Industry"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "gas_company_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Main_Industry",
            "y_name": "COUNT(Main_Industry)",
            "x_data": [
                [
                    "Banking",
                    "Conglomerate"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Main_Industry"
        },
        "nl_queries": [
            "Show the number of companies without a gas station in each main industry with a bar chart.",
            "How many companies without a gas station in each main industry? Draw a bar chart."
        ],
        "record_name": "1510"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "cinema_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Title",
            "y_name": "max(T1.price)",
            "x_data": [
                [
                    "The Case of the Mystery Weekend",
                    "The Case of the Smart Dummy",
                    "The Case: Off the Record",
                    "The Case of the Bermuda Triangle",
                    "The Case of the Piggy Banker"
                ]
            ],
            "y_data": [
                [
                    15.99,
                    12.99,
                    8.99,
                    9.99,
                    12.99
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A bar chart about what are the title and maximum price of each film?",
            "Return a bar chart on what are the title and maximum price of each film?",
            "What are the title and maximum price of each film. ",
            "Give me the title and highest price for each film in a bar chart.",
            "Give me the title and highest price for each film. Show bar chart."
        ],
        "record_name": "447"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC",
                "binning": "BIN Start_from BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"
        },
        "chart": "Grouping Line",
        "hardness": "Extra Hard",
        "db_id": "employee_hire_evaluation_robust",
        "vis_obj": {
            "chart": "line",
            "x_name": "Start_from",
            "y_name": "AVG(EmployeeID)",
            "x_data": [
                [
                    "2013",
                    "2012",
                    "2011",
                    "2010",
                    "2009",
                    "2008",
                    "2007",
                    "2006",
                    "2005",
                    "2004",
                    "2003"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    1.5,
                    3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    2.5,
                    2,
                    0,
                    0,
                    0.5,
                    3.5,
                    0,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "classify": [
                "F",
                "T"
            ],
            "describe": "GROUP BY Is_full_time, BIN Start_from BY YEAR"
        },
        "nl_queries": [
            "A line chart shows the change of the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and show by the x-axis from high to low please.",
            "Show me about the change of the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time in a line chart, and order by the X from high to low please.",
            "Show me the trend about the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time with a line chart, and sort in descending by the X-axis.",
            "Give me the trend about the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and display by the x-axis from high to low.",
            "Draw a line chart about the change of the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, I want to sort Start_from in descending order.",
            "For the average of Employee_ID, Start_from, visualize the trend, and display by the x-axis from high to low.",
            "I want to see trend mean employee id over start from by Is_full_time, sort by the x axis from high to low."
        ],
        "record_name": "1353@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Minister , COUNT(Minister) FROM party WHERE PartyName != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE PartyName != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "party_people_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Minister",
            "y_name": "COUNT(Minister)",
            "x_data": [
                [
                    "Dr. Kwame Nkrumah (MP)",
                    "Ebenezer Ako-Adjei (MP)",
                    "Imoru Egala (MP)"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Minister"
        },
        "nl_queries": [
            "Which ministers are not a part of the Progress Party, and count them by a bar chart, list by the Minister from low to high.",
            "Show all ministers who do not belong to Progress Party, and count them by a bar chart, rank in asc by the bars."
        ],
        "record_name": "2517@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "COUNT(JOB_ID)",
            "x_data": [
                [
                    "FI_MGR",
                    "FI_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    1,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "Give me a bar chart that groups and count the job id for all employees in the Finance department, and could you list by the bar in descending?",
            "For all employees in the Finance department, compare the total number of different job id using a bar chart, and could you list by the bar in descending?"
        ],
        "record_name": "1962@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "company_employee_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Industry",
            "y_name": "COUNT(Industry)",
            "x_data": [
                [
                    "Retailing",
                    "Oil and gas",
                    "Conglomerate",
                    "Banking",
                    "Automotive"
                ]
            ],
            "y_data": [
                [
                    1,
                    8,
                    2,
                    7,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Industry"
        },
        "nl_queries": [
            "Bar chart x axis industry y axis the number of industry, order by the Industry from high to low.",
            "Return a bar chart about the number of companies for each industry, list from high to low by the bars please."
        ],
        "record_name": "682@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "pets_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Fname",
            "y_name": "Age",
            "x_data": [
                [
                    "Tracy",
                    "Linda"
                ]
            ],
            "y_data": [
                [
                    19,
                    18
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What are the different first names and ages of the students who do have pets Visualize by bar chart, and display Y from high to low order.",
            "Give me a histogram for what are the different first names and ages of the students who do have pets?, could you sort by the Y-axis in desc?",
            "Draw a bar chart for what are the different first names and ages of the students who do have pets?, and order by the Y in desc.",
            "Find the first name and age of students who have a pet, display Age from high to low order."
        ],
        "record_name": "2563@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT distance , Elevation FROM roller_coaster",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "roller_coaster_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "distance",
            "y_name": "Elevation",
            "x_data": [
                [
                    3236,
                    3914,
                    4726,
                    2900,
                    1574,
                    6442
                ]
            ],
            "y_data": [
                [
                    96,
                    105,
                    136,
                    120,
                    50,
                    163
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Return a scatter on what are the lengths and heights of roller coasters?",
            " what are the lengths and heights of roller coasters?",
            "What are the lengths and heights of roller coasters. Show scatter chart.",
            "Scatter plot to show length on x axis and height on y axis."
        ],
        "record_name": "2684"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" ORDER BY title ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" ORDER BY title ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "movie_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "title",
            "y_name": "stars",
            "x_data": [
                [
                    "Avatar",
                    "Gone with the Wind",
                    "Raiders of the Lost Ark",
                    "The Sound of Music"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Ignore movies whose director is NULL For each director, what are the titles and ratings for all the movies they reviewed? Show the result by a bar chart, and I want to display X from low to high order please."
        ],
        "record_name": "2392@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ,  skill_description ORDER BY skill_description ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ,  skill_description ORDER BY skill_description ASC"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "assets_maintenance_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "skill_description",
            "y_name": "COUNT(skill_description)",
            "x_data": [
                [
                    "Electrical",
                    "Mechanical",
                    "TV, Video"
                ]
            ],
            "y_data": [
                [
                    9,
                    6,
                    4
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "classify": [
                "",
                "Skilled"
            ],
            "describe": "GROUP BY other_details, GROUP BY skill_description"
        },
        "nl_queries": [
            "A stacked bar chart showing the number of engineers for different skill description The x-axis is skill description and group by other deteails, I want to show by the X from low to high."
        ],
        "record_name": "129@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Location , COUNT(Location) FROM player GROUP BY Location HAVING avg(score) >= 20",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM player GROUP BY Location HAVING avg(score) >= 20"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "sports_competition_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Location",
            "y_name": "COUNT(Location)",
            "x_data": [
                [
                    "Full Back",
                    "Hooker",
                    "Loose Forward",
                    "Prop",
                    "Right Centre",
                    "Right Wing",
                    "Scrum Half",
                    "Second Row",
                    "Stand Off"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Position"
        },
        "nl_queries": [
            "List the positions of players whose average number of points scored by that position is larger than 20, compare the number of positions.",
            "List the positions of players whose average number of points scored by that position is larger than 20, give me a bar chart showing the number of different positions.",
            "Bar chart x axis position y axis how many position"
        ],
        "record_name": "2821"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "assets_maintenance_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "asset_make",
            "y_name": "COUNT(asset_make)",
            "x_data": [
                [
                    "CN",
                    "DE",
                    "FR",
                    "GB",
                    "IE",
                    "IN",
                    "IT",
                    "PT",
                    "RU"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    2,
                    1,
                    1,
                    2,
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY asset_make"
        },
        "nl_queries": [
            "Show the number of assets and group by asset make in a bar chart.",
            "Bar graph to show how many asset make from different asset make"
        ],
        "record_name": "140"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID  ORDER BY COUNT(date_moved_in) DESC",
                "binning": "BIN date_moved_in BY YEAR"
            },
            "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "local_govt_and_lot_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_moved_in",
            "y_name": "COUNT(date_moved_in)",
            "x_data": [
                [
                    "2015",
                    "2016"
                ]
            ],
            "y_data": [
                [
                    9,
                    4
                ]
            ],
            "classify": [],
            "describe": "BIN date_moved_in BY YEAR"
        },
        "nl_queries": [
            "Please use a bar chart to compare the number of customers of each customer's move in date, note that you should bin move in date into Year interval, and list total number in descending order.",
            "What is the proportion of each customer's move in date? You can show me a bar chart that bins move in date into Year interval, sort from high to low by the the number of date moved in."
        ],
        "record_name": "2097@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tvshow_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Pixel_aspect_ratio_PAR",
            "y_name": "COUNT(Pixel_aspect_ratio_PAR)",
            "x_data": [
                [
                    "16:9",
                    "4:3 / 16:9",
                    "4:3"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    6
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Pixel_aspect_ratio_PAR"
        },
        "nl_queries": [
            "Give me a bar chart showing the comparison of the pixel aspect ratio and the nation of the tv channels that do not use English, show by the total number in asc.",
            "What are the pixel aspect ratio and country of origin for all TV channels that do not use English? Show the comparison of the total number of pixel aspect ratio in a bar chart, order in ascending by the y axis.",
            "Find the pixel aspect ratio and the nation of the tv channels that do not use English Show the number of different pixel aspect ratios with a bar chart\n\n\n\n, list in ascending by the Y."
        ],
        "record_name": "3062@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "loan_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "bname",
            "y_name": "sum(amount)",
            "x_data": [
                [
                    "broadway",
                    "downtown",
                    "morningside"
                ]
            ],
            "y_data": [
                [
                    5000,
                    3000,
                    2050
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the total amount of loans offered by each bank branch. ",
            "Return a bar chart on what are the names of the different bank branches, and what are their total loan amounts?",
            "What are the names of the different bank branches, and what are their total loan amounts. Show bar chart."
        ],
        "record_name": "2072"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT many_details , COUNT(many_details) FROM LOTS GROUP BY many_details ORDER BY COUNT(many_details) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT many_details , COUNT(many_details) FROM LOTS GROUP BY many_details ORDER BY COUNT(many_details) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "tracking_share_transactions_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "many_details",
            "y_name": "COUNT(many_details)",
            "x_data": [
                [
                    "z",
                    "d",
                    "s",
                    "m",
                    "h",
                    "x",
                    "r",
                    "q"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY lot_details"
        },
        "nl_queries": [
            "A bar chart groups the lot details, and computes the number of each lot details, and list by the how many lot details in desc.",
            "Bar chart x axis lot details y axis the number of lot details, and list by the Y-axis in desc please.",
            "Return the lot details, group the lot details, and compute the number of each lot details, list in desc by the y-axis please."
        ],
        "record_name": "2993@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT department_name , COUNT(department_name) FROM instructor GROUP BY department_name ORDER BY wage",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT department_name , COUNT(department_name) FROM instructor GROUP BY department_name ORDER BY wage"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "college_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "department_name",
            "y_name": "COUNT(department_name)",
            "x_data": [
                [
                    "Accounting",
                    "Astronomy",
                    "Athletics",
                    "Biology",
                    "Comp. Sci.",
                    "Cybernetics",
                    "Elec. Eng.",
                    "English",
                    "Finance",
                    "Geology",
                    "Languages",
                    "Marketing",
                    "Mech. Eng.",
                    "Physics",
                    "Pol. Sci.",
                    "Psychology",
                    "Statistics"
                ]
            ],
            "y_data": [
                [
                    4,
                    1,
                    5,
                    2,
                    2,
                    4,
                    4,
                    4,
                    1,
                    1,
                    3,
                    4,
                    2,
                    2,
                    3,
                    2,
                    6
                ]
            ],
            "classify": [],
            "describe": "GROUP BY dept_name"
        },
        "nl_queries": [
            "Return a bar chart about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name.",
            "Draw a bar chart about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name.",
            "Find  dept_name and the amount of dept_name , and group by attribute dept_name, and visualize them by a bar chart.",
            "Show me about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name in a bar chart.",
            "A bar chart shows the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name."
        ],
        "record_name": "613"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "ship_mission_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Category",
            "y_name": "COUNT(Category)",
            "x_data": [
                [
                    "Battle ship",
                    "Cargo ship"
                ]
            ],
            "y_data": [
                [
                    3,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Type"
        },
        "nl_queries": [
            "What is the total number of each ship type? Give me a pie chart.",
            "Give me the proportion of the total number of every ship type.",
            "Show me a pie chart showing the total number of each ship type.",
            "I want to know the proportion of each type."
        ],
        "record_name": "2757"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalistID = t2.journalistID GROUP BY t2.Work_Type ORDER BY Work_Type ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalistID = t2.journalistID GROUP BY t2.Work_Type ORDER BY Work_Type ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "news_report_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Work_Type",
            "y_name": "avg(t1.age)",
            "x_data": [
                [
                    "Host",
                    "Music",
                    "Screening"
                ]
            ],
            "y_data": [
                [
                    43,
                    35.5,
                    30.33333333333333
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the average age of journalists working on different role type, show the result with a bar chart, and list by the x-axis from low to high."
        ],
        "record_name": "2475@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE year = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE year = 2008 GROUP BY title ORDER BY COUNT(title) DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "college_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "title",
            "y_name": "COUNT(title)",
            "x_data": [
                [
                    "Elastic Structures",
                    "World History",
                    "Transaction Processing",
                    "Surfing",
                    "Race Car Driving",
                    "Networking",
                    "Marine Mammals",
                    "Embedded Systems",
                    "Animal Behavior"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY title"
        },
        "nl_queries": [
            "How many instructors for every course in 2008? Show me a bar chart grouping by course title, and rank by the y axis in desc.",
            "List the number of instructors for each course in year 2008 with a bar chart, order by the y-axis in desc."
        ],
        "record_name": "653@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Height FROM people",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Height FROM people"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "candidate_poll_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Height",
            "x_data": [
                [
                    "Hubert Henno",
                    "Dominique Daquin",
                    "St\u00e9phane Antiga",
                    "Laurent Capet",
                    "Frantz Granvorka",
                    "Vincent Montm\u00e9at",
                    "Lo\u00efc De Kergret",
                    "Philippe Bar\u00e7a-Cysique",
                    "Guillaume Samica"
                ]
            ],
            "y_data": [
                [
                    188,
                    197,
                    200,
                    202,
                    195,
                    196,
                    193,
                    194,
                    196
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Draw a bar chart about the distribution of  Name and  Height .",
            "Find  Name and  Height , and visualize them by a bar chart.",
            "Return a bar chart about the distribution of  Name and  Height .",
            "Give me the comparison about  Height over the  Name  by a bar chart.",
            "A bar chart shows the distribution of  Name and  Height .",
            "Draw a bar chart of name versus height"
        ],
        "record_name": "394"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "AVG(Manager_ID)",
            "x_data": [
                [
                    "AC_ACCOUNT",
                    "AC_MGR",
                    "AD_ASST",
                    "AD_PRES",
                    "AD_VP",
                    "FI_ACCOUNT",
                    "FI_MGR",
                    "IT_PROG",
                    "MK_MAN",
                    "MK_REP",
                    "PR_REP",
                    "PU_CLERK",
                    "PU_MAN",
                    "SA_MAN",
                    "SA_REP",
                    "SH_CLERK",
                    "ST_CLERK",
                    "ST_MAN"
                ]
            ],
            "y_data": [
                [
                    205,
                    101,
                    101,
                    0,
                    100,
                    108,
                    101,
                    102.8,
                    100,
                    201,
                    101,
                    114,
                    100,
                    100,
                    147,
                    122,
                    122,
                    100
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the average of manager_id , and group by attribute job_id in a bar chart, list from low to high by the X please.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, and rank in asc by the X-axis please.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, and list in asc by the X.",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart, and could you order bar in asc order?",
            "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the average of manager_id , and group by attribute job_id, and rank in asc by the X-axis please."
        ],
        "record_name": "1605@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Fname , T1.customer_ID FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_ID = T2.customer_ID ORDER BY T1.Fname ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Fname , T1.customer_ID FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_ID = T2.customer_ID ORDER BY T1.Fname ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "products_for_hire_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Fname",
            "y_name": "customer_ID",
            "x_data": [
                [
                    "Elinore",
                    "German",
                    "Jamir",
                    "Layne",
                    "Marilo",
                    "Maximilian",
                    "Rosalee"
                ]
            ],
            "y_data": [
                [
                    8,
                    9,
                    15,
                    10,
                    7,
                    11,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many bookings did each customer make? Show the customer id as the Y-axis and the first name as the X-axis in a bar chart, and could you sort by the X-axis from low to high?"
        ],
        "record_name": "2613@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Course_ID , teacher FROM COURSE ORDER BY Credits",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Course_ID , teacher FROM COURSE ORDER BY Credits"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "college_3_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Course_ID",
            "y_name": "teacher",
            "x_data": [
                [
                    600.1030000000001,
                    600.303,
                    600.601,
                    50.802,
                    550.79,
                    600.101,
                    600.107,
                    600.109,
                    600.113,
                    600.121,
                    600.211,
                    600.227,
                    600.232,
                    600.271,
                    600.315,
                    600.3330000000001,
                    600.337,
                    600.363,
                    600.415,
                    600.433,
                    600.437,
                    600.445,
                    600.461,
                    600.4630000000001,
                    600.465,
                    600.509,
                    600.6569999999999,
                    600.7869999999999,
                    500.20300000000003,
                    500.204,
                    500.205,
                    500.20599999999996,
                    550.62,
                    550.626,
                    550.631,
                    550.661,
                    550.6709999999999,
                    550.681,
                    550.721,
                    550.75,
                    520.137,
                    520.219,
                    520.325,
                    520.345,
                    520.349,
                    520.3530000000001,
                    520.401,
                    520.41,
                    520.419,
                    520.4209999999999,
                    520.432,
                    520.475,
                    520.49,
                    520.605,
                    520.609,
                    520.651,
                    50.102,
                    50.108999999999995,
                    50.325,
                    50.37,
                    50.381,
                    50.427,
                    50.67,
                    50.821000000000005,
                    550.111,
                    550.1709999999999,
                    550.2909999999999,
                    550.31,
                    550.361,
                    550.413,
                    550.42,
                    550.471,
                    520.2130000000001,
                    520.435,
                    520.6030000000001,
                    50.203
                ]
            ],
            "y_data": [
                [
                    4230,
                    9826,
                    6191,
                    9011,
                    2881,
                    6112,
                    1193,
                    4230,
                    6112,
                    6112,
                    6112,
                    1121,
                    9826,
                    9172,
                    2192,
                    1148,
                    8918,
                    7712,
                    2192,
                    1148,
                    8918,
                    7723,
                    8114,
                    7712,
                    7792,
                    1121,
                    8423,
                    1121,
                    9823,
                    9823,
                    8791,
                    8791,
                    2738,
                    8102,
                    6182,
                    9823,
                    8772,
                    6541,
                    8122,
                    9922,
                    8723,
                    9210,
                    6191,
                    1823,
                    9824,
                    6925,
                    6191,
                    6191,
                    2119,
                    7231,
                    9514,
                    6330,
                    8722,
                    9379,
                    7134,
                    9514,
                    4432,
                    6910,
                    4432,
                    6910,
                    8989,
                    4432,
                    4432,
                    5718,
                    2311,
                    8772,
                    6541,
                    8102,
                    2881,
                    1177,
                    2738,
                    8772,
                    9210,
                    8118,
                    9210,
                    9011
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Draw a scatter chart about the correlation between  CID and  Instructor .",
            "Return a scatter chart about the correlation between  CID and  Instructor .",
            "Visualize the relationship between  CID and  Instructor .",
            "A scatter chart shows the correlation between  CID and  Instructor .",
            "What is the relationship between  CID and  Instructor ?"
        ],
        "record_name": "671"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
                "binning": "BIN date_of_hire BY MONTH"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "SUM(Dept_ID)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    990,
                    1350,
                    2480,
                    1400,
                    110
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For those employees who did not have any job in the past, give me the comparison about the sum of department_id over the  hire_date bin hire_date by time by a bar chart.",
            "For those employees who did not have any job in the past, visualize a bar chart about the distribution of  hire_date and the sum of department_id bin hire_date by time.",
            "For those employees who did not have any job in the past, show me about the distribution of  hire_date and the sum of department_id bin hire_date by time in a bar chart.",
            "For those employees who did not have any job in the past, return a bar chart about the distribution of  hire_date and the sum of department_id bin hire_date by time.",
            "For those employees who did not have any job in the past, a bar chart shows the distribution of  hire_date and the sum of department_id bin hire_date by time."
        ],
        "record_name": "1718"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "chinook_1_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "FirstName",
            "y_name": "SupportRepId",
            "x_data": [
                [
                    "Puja",
                    "Diego",
                    "Luis"
                ]
            ],
            "y_data": [
                [
                    3,
                    4,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Return a pie on what are the first names and support rep ids for employees serving 10 or more customers?",
            "Draw a pie chart for what are the first names and support rep ids for employees serving 10 or more customers?",
            "What are the first names and support rep ids for employees serving 10 or more customers. Visualize by pie chart."
        ],
        "record_name": "436"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.ID = t2.visitor_ID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.ID = t2.visitor_ID"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "museum_visit_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Age",
            "x_data": [
                [
                    "Arjen Robben",
                    "Fernando Gago",
                    "Rafael van der Vaart"
                ]
            ],
            "y_data": [
                [
                    27,
                    36,
                    25
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show name and age for visitors who visited some museums more than once using a bar chart.",
            "histogram, X-axis is the name and the Y is the age for visitors who visited some museums more than 1 times."
        ],
        "record_name": "2412"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarter",
            "y_name": "AVG(income)",
            "x_data": [
                [
                    "Austin",
                    "Beijing",
                    "Los Angeles",
                    "Paris",
                    "Taiwan",
                    "Tokyo"
                ]
            ],
            "y_data": [
                [
                    100,
                    200,
                    50,
                    30,
                    130,
                    120
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, show me about the distribution of headquarter and the average of revenue , and group by attribute headquarter in a bar chart, show x-axis in asc order.",
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of headquarter and the average of revenue , and group by attribute headquarter, and I want to list from low to high by the Headquarter.",
            "For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the average of revenue , and group by attribute headquarter, list in asc by the x-axis.",
            "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the headquarter , and group by attribute headquarter, list in asc by the x-axis.",
            "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the average of revenue , and group by attribute headquarter, and I want to order by the Headquarter from low to high please."
        ],
        "record_name": "2225@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "ACC_regular_season",
            "y_name": "percentage_of_all_games",
            "x_data": [
                [
                    "14\u20132",
                    "13\u20133",
                    "10\u20136",
                    "9\u20137"
                ]
            ],
            "y_data": [
                [
                    0.946,
                    0.8240000000000001,
                    0.706,
                    0.6
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A pie chart shows the proportion of  ACC_Regular_Season and  All_Games_Percent.",
            "Draw a pie chart about the proportion of  ACC_Regular_Season and  All_Games_Percent.",
            "Show me about the proportion of  All_Games_Percent and  All_Games_Percent in a pie chart.",
            "Return a pie chart about the proportion of  ACC_Regular_Season and  All_Games_Percent.",
            "For the attribute  ACC_Regular_Season and  All_Games_Percent, show their proportion by a pie chart.",
            "Create a pie chart showing all_games_percent across acc regular season."
        ],
        "record_name": "3136"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Lname , wage FROM employees WHERE Fname LIKE '%m'",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Lname , wage FROM employees WHERE Fname LIKE '%m'"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Lname",
            "y_name": "wage",
            "x_data": [
                [
                    "Fripp",
                    "Kaufling",
                    "Smith",
                    "Gietz"
                ]
            ],
            "y_data": [
                [
                    8200,
                    7900,
                    7400,
                    8300
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those employees whose first name is ending with the letter m, just show the salary by the last name using a pie chart."
        ],
        "record_name": "1805"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarter",
            "y_name": "AVG(Code)",
            "x_data": [
                [
                    "Tokyo",
                    "Taiwan",
                    "Paris",
                    "Los Angeles",
                    "Beijing",
                    "Austin"
                ]
            ],
            "y_data": [
                [
                    1,
                    5,
                    6,
                    3,
                    4,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the headquarter , and group by attribute headquarter by a bar chart, and show in desc by the x-axis.",
            "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of headquarter and the average of code , and group by attribute headquarter, and rank by the names in descending.",
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of headquarter and the average of code , and group by attribute headquarter, and I want to rank Headquarter in descending order please.",
            "For those records from the products and each product's manufacturer, find headquarter and the average of code , and group by attribute headquarter, and visualize them by a bar chart, order by the x axis in desc please.",
            "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the average of code , and group by attribute headquarter, and could you show by the X from high to low?"
        ],
        "record_name": "2223@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "car_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "continent",
            "y_name": "count(*)",
            "x_data": [
                [
                    "america",
                    "asia",
                    "europe"
                ]
            ],
            "y_data": [
                [
                    4,
                    7,
                    11
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Draw a bar chart for how many car makers are there in each continents? List the continent name and the count.",
            "how many car makers are there in each continents? List the continent name and the count.",
            "How many car makers are there in each continents? List the continent name and the count by a bar chart.",
            "How many car makers are there in each continents? List the continent name and the count. Visualize by bar chart.",
            "A bar chart about what is the name of each continent and how many car makers are there in each one?",
            "Display a bar chart for what is the name of each continent and how many car makers are there in each one?",
            "What is the name of each continent and how many car makers are there in each one. Plot them as bar chart."
        ],
        "record_name": "434"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "election_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Committee",
            "y_name": "COUNT(Committee)",
            "x_data": [
                [
                    "Economic Matters",
                    "Environmental Matters",
                    "Environmental Matters (Vice-Chair)",
                    "Health and Government Operations",
                    "Ways and Means",
                    "Appropriations"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Committee"
        },
        "nl_queries": [
            "How many delegates in each committee? Return a bar chart, display in asc by the how many committee please.",
            "Show how many committee from each committee, sort from low to high by the y axis please.",
            "Show the number of delegates in each committee with a bar chart, and could you order y axis in ascending order please?"
        ],
        "record_name": "1320@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Manufacturer",
            "x_data": [
                [
                    "Memory",
                    "Floppy disk",
                    "Hard drive",
                    "DVD drive",
                    "ZIP drive",
                    "Toner cartridge",
                    "Printer",
                    "DVD burner",
                    "CD drive",
                    "Monitor"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    2,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    5,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    3,
                    0,
                    0,
                    3,
                    3,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    4,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    6,
                    6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Creative Labs",
                "Fujits",
                "Hewlett-Packard",
                "Iomega",
                "Sony",
                "Winchester"
            ],
            "describe": "GROUP BY Name, GROUP BY Name"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, show me about the distribution of name and manufacturer , and group by attribute name in a bar chart, and display Manufacturer in desc order.",
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and manufacturer , and group by attribute name, and order by the total number in desc.",
            "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and manufacturer , and group by attribute name, I want to sort Y-axis in desc order please.",
            "For those records from the products and each product's manufacturer, find name and manufacturer , and group by attribute name, and visualize them by a bar chart, sort Manufacturer in descending order.",
            "For those records from the products and each product's manufacturer, give me the comparison about manufacturer over the name , and group by attribute name by a bar chart, display from high to low by the Manufacturer."
        ],
        "record_name": "2239@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "news_report_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nationality",
            "y_name": "SUM(Age)",
            "x_data": [
                [
                    "England",
                    "Northern Ireland",
                    "Wales"
                ]
            ],
            "y_data": [
                [
                    308,
                    29,
                    27
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "What are the nationalities and the taotal ages of journalists Visualize by a bar chart, show from low to high by the X-axis.",
            "Bar chart of sum age from each nationality, could you rank X in asc order?",
            "Return a histogram on what are the nationalities and the total ages of journalists?, I want to rank X from low to high order please.",
            "Show me a bar chart for what are the nationalities and total ages of journalists?, I want to sort by the x-axis in asc."
        ],
        "record_name": "2487@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY LocationCode",
                "binning": "BIN Date_in_Location_From BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY LocationCode BIN Date_in_Location_From BY WEEKDAY"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Date_in_Location_From",
            "y_name": "COUNT(Date_in_Location_From)",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    0,
                    0,
                    1,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0
                ],
                [
                    0,
                    1,
                    0,
                    0,
                    3,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    2,
                    0,
                    1
                ]
            ],
            "classify": [
                "b",
                "c",
                "e",
                "n",
                "x"
            ],
            "describe": "GROUP BY Location_Code, BIN Date_in_Location_From BY WEEKDAY"
        },
        "nl_queries": [
            "Show the number of documents in different starting date. Bin starting date by weekday and group by location code with a stacked bar chart.",
            "Stacked bar chart of how many date in location from for with each Location_Code in each date in location from"
        ],
        "record_name": "777"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Budget_Type_Code",
            "y_name": "COUNT(Budget_Type_Code)",
            "x_data": [
                [
                    "GV",
                    "SF",
                    "ORG"
                ]
            ],
            "y_data": [
                [
                    6,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Budget_Type_Code"
        },
        "nl_queries": [
            "Return a bar chart to show how many documents for different budget type code, rank Y-axis from high to low order.",
            "Show the number of documents for different budget type code in a bar chart, show by the Y-axis in desc."
        ],
        "record_name": "832@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Snatch , Clean_Jerk FROM body_builder",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "body_builder_robust",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Snatch",
            "y_name": "Clean_Jerk",
            "x_data": [
                [
                    142.5,
                    137.5,
                    140,
                    137.5,
                    130
                ]
            ],
            "y_data": [
                [
                    175,
                    177.5,
                    175,
                    175,
                    162.5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize a scatter chart about the correlation between  Snatch and  Clean_Jerk .",
            "What is the relationship between  Snatch and  Clean_Jerk ?",
            "Visualize the relationship between  Snatch and  Clean_Jerk .",
            "Return a scatter chart about the correlation between  Snatch and  Clean_Jerk .",
            "Show me about the correlation between  Snatch and  Clean_Jerk  in a scatter chart.",
            "Scatter plot to show snatch on x axis and clean_jerk on y axis."
        ],
        "record_name": "356"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "flight_company_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "id",
            "x_data": [
                [
                    "Dragonair",
                    "Cathay Pacific Cargo",
                    "Vogue Laundry Service Limited"
                ]
            ],
            "y_data": [
                [
                    4,
                    5,
                    11
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Return a histogram on what are the ids and names of the companies that operated more than one flight?",
            "What are the ids and names of the companies that operated more than one flight. "
        ],
        "record_name": "1421"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "county_public_safety_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Police_force",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Abbotsford Police Department",
                    "Central Saanich Police",
                    "RCMP"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Pie chart. how many counties correspond to each police force?",
            "Return a pie chart on how many counties correspond to each police force?",
            "How many counties correspond to each police force. ",
            "I want to know the proportion of the number of counties for each police force."
        ],
        "record_name": "708"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "election_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "County_name",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Howard",
                    "Colony",
                    "Baltimore County",
                    "Mansfield"
                ]
            ],
            "y_data": [
                [
                    3,
                    2,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show the name of each county along with the corresponding number of delegates from that county Plot them as bar chart, and order Y in desc order.",
            "For each county, find the name of the county and the number of delegates from that county Show bar chart, could you order total number in desc order?",
            "Show the name of each county along with the corresponding number of delegates from that county with a bar chart, I want to rank by the Y from high to low."
        ],
        "record_name": "1315@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Manufacturer",
            "x_data": [
                [
                    "ZIP drive",
                    "Toner cartridge",
                    "Printer",
                    "Monitor",
                    "Memory",
                    "Hard drive",
                    "Floppy disk",
                    "DVD drive",
                    "DVD burner",
                    "CD drive"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    5,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    3,
                    3,
                    0,
                    0,
                    0,
                    0,
                    3,
                    0,
                    0
                ],
                [
                    4,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    6,
                    0,
                    6,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Creative Labs",
                "Fujits",
                "Hewlett-Packard",
                "Iomega",
                "Sony",
                "Winchester"
            ],
            "describe": "GROUP BY Name, GROUP BY Name"
        },
        "nl_queries": [
            "For those records from the products and each product's manufacturer, show me about the distribution of name and manufacturer , and group by attribute name in a bar chart, and sort in descending by the X.",
            "For those records from the products and each product's manufacturer, give me the comparison about manufacturer over the name , and group by attribute name by a bar chart, order names in descending order.",
            "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and manufacturer , and group by attribute name, and list by the names from high to low.",
            "For those records from the products and each product's manufacturer, find name and manufacturer , and group by attribute name, and visualize them by a bar chart, and sort in descending by the X.",
            "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and manufacturer , and group by attribute name, could you sort by the X-axis in desc?"
        ],
        "record_name": "2239@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "CD drive",
                    "DVD burner",
                    "DVD drive",
                    "Floppy disk",
                    "Hard drive",
                    "Memory",
                    "Monitor",
                    "Printer",
                    "Toner cartridge",
                    "ZIP drive"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Bar chart x axis name y axis the number of name, list by the X-axis in asc.",
            "A bar chart for what are the number of the names of all products?, and list by the X-axis in asc.",
            "What are the number of the names of all products?, rank x-axis from low to high order.",
            "What are the names of all products, and count them by a bar chart, rank X-axis from low to high order.",
            "Select the names of all the products in the store, and count them by a bar chart, could you order X-axis in asc order?"
        ],
        "record_name": "2180@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT EMPLOYEE_DOB , COUNT(EMPLOYEE_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMPLOYEE_NUM = T2.PROFESSOR_NUM WHERE COURSE_CODE = \"ACCT-211\"  ORDER BY COUNT(EMPLOYEE_DOB) DESC",
                "binning": "BIN EMPLOYEE_DOB BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT EMPLOYEE_DOB , COUNT(EMPLOYEE_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMPLOYEE_NUM = T2.PROFESSOR_NUM WHERE COURSE_CODE = \"ACCT-211\"  ORDER BY COUNT(EMPLOYEE_DOB) DESC BIN EMPLOYEE_DOB BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "college_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "EMPLOYEE_DOB",
            "y_name": "COUNT(EMPLOYEE_DOB)",
            "x_data": [
                [
                    "Thur",
                    "Wed",
                    "Tue",
                    "Sun",
                    "Sat",
                    "Mon",
                    "Fri"
                ]
            ],
            "y_data": [
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN EMP_DOB BY WEEKDAY"
        },
        "nl_queries": [
            "What is the weekday of birthdates of the professors in charge of ACCT-211? Visualize with a bar chart, and rank in desc by the Y-axis.",
            "What is the weekday of birth of professors teaching course ACCT-211? Show a bar chart, and rank total number from high to low order."
        ],
        "record_name": "546@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT city_code , avg(Age) FROM student GROUP BY city_code ORDER BY avg(Age) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT city_code , avg(Age) FROM student GROUP BY city_code ORDER BY avg(Age) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "dorm_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "city_code",
            "y_name": "avg(Age)",
            "x_data": [
                [
                    "LON",
                    "YYZ",
                    "WAS",
                    "SFO",
                    "NYC",
                    "ROC",
                    "CHI",
                    "ATL",
                    "PHL",
                    "PIT",
                    "BAL",
                    "NAR",
                    "LOS",
                    "HKG",
                    "DAL",
                    "BOS",
                    "PEK",
                    "HOU",
                    "DET"
                ]
            ],
            "y_data": [
                [
                    27,
                    22.5,
                    21.66666666666667,
                    21,
                    20.33333333333333,
                    20,
                    20,
                    20,
                    19.666666666666668,
                    19,
                    18.5,
                    18,
                    18,
                    18,
                    18,
                    18,
                    17,
                    17,
                    17
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Bar chart of mean age from each city code, sort y-axis from high to low order.",
            "What is the average age for each city and what are those cities Show bar chart, show by the Y-axis in descending please.",
            "Draw a bar chart for what is the average age for each city and what are those cities?, and show in desc by the Y-axis.",
            "A bar chart about what is the average age for each city and what are those cities?, and show by the Y-axis in descending please.",
            "Find the average age of all students living in the each city Show bar chart, show in desc by the Y-axis."
        ],
        "record_name": "1233@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "customers_and_products_contacts_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "state_province_county",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Colorado",
                    "District of Columbia",
                    "Idaho",
                    "Illinois",
                    "Kentucky",
                    "Louisiana",
                    "Maine",
                    "Maryland",
                    "Nevada",
                    "Oklahoma",
                    "Oregon",
                    "SouthDakota",
                    "Vermont",
                    "Virginia"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show each state and the number of addresses in each state by a bar chart.",
            "Show each state and the number of addresses in each state. Show bar chart.",
            "Show the total number from each state province county"
        ],
        "record_name": "1010"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Height FROM people ORDER BY Height DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "candidate_poll_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Height",
            "x_data": [
                [
                    "Laurent Capet",
                    "St\u00e9phane Antiga",
                    "Dominique Daquin",
                    "Vincent Montm\u00e9at",
                    "Guillaume Samica",
                    "Frantz Granvorka",
                    "Philippe Bar\u00e7a-Cysique",
                    "Lo\u00efc De Kergret",
                    "Hubert Henno"
                ]
            ],
            "y_data": [
                [
                    202,
                    200,
                    197,
                    196,
                    196,
                    195,
                    194,
                    193,
                    188
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Give me the comparison about Height over the Name by a bar chart, and could you rank y-axis in desc order please?",
            "Find Name and Height , and visualize them by a bar chart, and order by the y axis in desc.",
            "A bar chart shows the distribution of Name and Height , and I want to show by the y axis in descending.",
            "Draw a bar chart of name versus height, order by the y axis in desc.",
            "Draw a bar chart about the distribution of Name and Height , and rank y-axis in descending order.",
            "Return a bar chart about the distribution of Name and Height , and show Y-axis in descending order."
        ],
        "record_name": "394@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT LocationCode , COUNT(LocationCode) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT LocationCode , COUNT(LocationCode) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "LocationCode",
            "y_name": "COUNT(LocationCode)",
            "x_data": [
                [
                    "x",
                    "e",
                    "b",
                    "c",
                    "n"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Location_Code"
        },
        "nl_queries": [
            "Show the number of documents for each location code in a bar chart, and I want to rank by the y axis in desc.",
            "How many documents for different location code? Plot a bar chart to show the proportion, and show Y in desc order.",
            "Bar chart x axis location code y axis how many location code, display by the y-axis from high to low."
        ],
        "record_name": "769@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "ship_mission_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Category",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Battle ship",
                    "Cargo ship"
                ]
            ],
            "y_data": [
                [
                    3,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each type, how many ships are there Plot them as bar chart, list y-axis in asc order.",
            "Show different types of ships and the number of ships of each type Show bar chart, display in ascending by the the total number .",
            "Bar chart x axis type y axis the total number, and order Y in asc order.",
            "Show different types of ships and the number of ships of each type in a bar chart, and rank in asc by the total number."
        ],
        "record_name": "2762@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "journal_committee_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Gra\u017cyna Wolszczak",
                    "Kamila Porczyk",
                    "Marek Siudym",
                    "Maria G\u00f3ralczyk",
                    "Piotr Pr\u0119gowski",
                    "W\u0142adys\u0142aw Grzywna"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Group and count the name attribute for visualizing a bar chart.",
            "Bar chart x axis name y axis how many name"
        ],
        "record_name": "2055"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "e_learning_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "course_name",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "AI",
                    "Art history",
                    "Chinese Painting",
                    "French",
                    "Japanese",
                    "Spanish",
                    "Writing in French",
                    "advanced database",
                    "database",
                    "modern Arts"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    1,
                    3,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "List the name and the number of enrolled student for each course in a bar chart, show by the X from low to high.",
            "What is the name of each course and the corresponding number of student enrollment Show bar chart, could you show by the bar in asc?",
            "List the name and the number of enrolled student for each course Show bar chart, display x-axis from low to high order.",
            "Return a histogram on what is the name of each course and the corresponding number of student enrollment?, and sort X-axis in ascending order.",
            "Display a bar chart for what is the name of each course and the corresponding number of student enrollment?, and could you display in asc by the x-axis?"
        ],
        "record_name": "1273@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Document_Type_information , COUNT(Document_Type_information) FROM Ref_document_types GROUP BY Document_Type_information ORDER BY Document_Type_information ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Document_Type_information , COUNT(Document_Type_information) FROM Ref_document_types GROUP BY Document_Type_information ORDER BY Document_Type_information ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Docs_and_Epenses_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Document_Type_information",
            "y_name": "COUNT(Document_Type_information)",
            "x_data": [
                [
                    "excellent",
                    "fun",
                    "good",
                    "very good"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Document_Type_Description"
        },
        "nl_queries": [
            "Bar graph to show the number of document type description from different document type description, and show in ascending by the x-axis.",
            "How many document type for different document type description? Visualize with a bar chart, sort in asc by the x-axis.",
            "Show the number of document type for different document type description in a bar chart, and show in ascending by the x-axis."
        ],
        "record_name": "829@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_invoices_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "customer_Fname",
            "y_name": "customerID",
            "x_data": [
                [
                    "Meaghan",
                    "Kieran",
                    "Ruby"
                ]
            ],
            "y_data": [
                [
                    8,
                    13,
                    15
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show first name and id for all customers with at least 2 accounts in a bar chart, and show in asc by the total number.",
            "Visualize a bar chart for what are the first names and ids for customers who have two or more accounts?, could you rank in ascending by the customer_id?",
            "Return a histogram on what are the first names and ids for customers who have two or more accounts?, could you rank in ascending by the customer_id?",
            "What are the first names and ids for customers who have two or more accounts, and show by the y axis in asc please.",
            "Show first name and id for all customers with at least 2 accounts Show bar chart, order Y from low to high order."
        ],
        "record_name": "960@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "station_weather_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Time",
            "y_name": "Train_Number",
            "x_data": [
                [
                    "17:15",
                    "4:49"
                ]
            ],
            "y_data": [
                [
                    16724,
                    16128
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Give me the times and numbers of all trains that go to Chennai, ordered by time with a bar chart.",
            "Give me the times and numbers of all trains that go to Chennai, ordered by time. Show bar chart.",
            "Visualize a bar graph about the times and numbers of all trains that go to Chennai, ordered by time."
        ],
        "record_name": "2833"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT department_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY department_name ORDER BY department_name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT department_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY department_name ORDER BY department_name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_2_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "department_name",
            "y_name": "AVG(credits)",
            "x_data": [
                [
                    "Statistics",
                    "Psychology",
                    "Mech. Eng.",
                    "Marketing",
                    "History",
                    "Finance",
                    "English",
                    "Cybernetics",
                    "Comp. Sci.",
                    "Civil Eng.",
                    "Biology",
                    "Athletics"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    3,
                    3.5,
                    4,
                    3.5,
                    3,
                    3.5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY dept_name"
        },
        "nl_queries": [
            "What is the average of credit value of courses with more than one prerequisite for each department? Return a bar chart, list by the bar in descending please.",
            "Find the average of credits of courses that have more than one prerequisite for each department with a bar chart, list by the bar in descending please."
        ],
        "record_name": "633@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY schoolID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY schoolID DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "all_home",
            "y_name": "schoolID",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    5,
                    1,
                    0
                ],
                [
                    4,
                    0,
                    2
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home, GROUP BY All_Home"
        },
        "nl_queries": [
            "A bar chart shows the distribution of All_Home and School_ID , and group by attribute ACC_Home, order by the y axis from high to low please.",
            "Find All_Home and School_ID , and group by attribute ACC_Home, and visualize them by a bar chart, could you list in descending by the y-axis please?",
            "Show me about the distribution of All_Home and School_ID , and group by attribute ACC_Home in a bar chart, and sort by the y-axis from high to low.",
            "Return a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, and sort by the y-axis from high to low.",
            "Stack bar chart of school_id vs ACC_Home based on all home, list by the y-axis in descending.",
            "Visualize a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, and rank in descending by the Y-axis."
        ],
        "record_name": "3093@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "party_people_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "PartyName",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Convention Peoples Party",
                    "3",
                    "Progress Party"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Show party names and the number of events for each party in a bar chart, show in descending by the y-axis.",
            "How many events are there for each party, order by the the total number in desc please.",
            "Show party names and the number of events for each party, order by the the total number in desc please.",
            "Return a bar chart on how many events are there for each party?, and order in descending by the y axis.",
            "Give me a histogram for how many events are there for each party?, and list by the total number in descending."
        ],
        "record_name": "2509@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "ship_mission_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Category",
            "y_name": "avg(tonnage)",
            "x_data": [
                [
                    "Cargo ship",
                    "Battle ship"
                ]
            ],
            "y_data": [
                [
                    3932.2,
                    4845
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Give me a bar chart for mean tonnage of each type, show by the bar in desc.",
            "Show different types of ships and the average tonnage of ships of each type in a bar chart, and rank Type in descending order.",
            "Show different types of ships and the average tonnage of ships of each type Show bar chart, and could you show x axis from high to low order please?",
            "For each type, what is the average tonnage, and show X in desc order."
        ],
        "record_name": "2765@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "sports_competition_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nation",
            "y_name": "COUNT(Nation)",
            "x_data": [
                [
                    "Spain",
                    "Slovenia",
                    "Russia",
                    "Italy",
                    "Ireland",
                    "Australia"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    3,
                    2,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Country"
        },
        "nl_queries": [
            "A bar chart for how many competitions for each country, and display bars from high to low order.",
            "Show me the number of country by country in a histogram, and I want to sort in desc by the x axis.",
            "How many competitions for each country?, rank by the Country in desc.",
            "Compare the total number of competitions for each country, I want to sort in desc by the x axis."
        ],
        "record_name": "2816@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Record_Company , COUNT(*) FROM Orchestra GROUP BY Record_Company",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Record_Company , COUNT(*) FROM Orchestra GROUP BY Record_Company"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "orchestra_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Record_Company",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Columbia Masterworks",
                    "Decca Records",
                    "Delos Records",
                    "Deutsche Grammophon",
                    "EMI",
                    "Koch Records / Naxos Records",
                    "Kultur",
                    "Mercury Records",
                    "Philips",
                    "Philips Classics Records",
                    "RCA"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display a bar chart for how many orchestras does each record company manage?",
            "Visualize a bar chart for how many orchestras does each record company manage?",
            "How many orchestras does each record company manage. Show bar chart.",
            "Draw a bar chart of record company versus the total number "
        ],
        "record_name": "2494"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(employee_id) ASC",
                "binning": "BIN date_of_hire BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_hire",
            "y_name": "SUM(employee_id)",
            "x_data": [
                [
                    "Sun",
                    "Tue",
                    "Thur",
                    "Fri",
                    "Mon",
                    "Sat",
                    "Wed"
                ]
            ],
            "y_data": [
                [
                    424,
                    740,
                    834,
                    980,
                    1197,
                    1361,
                    1653
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY WEEKDAY"
        },
        "nl_queries": [
            "For all employees who have the letters D or S in their first name, find hire_date and the sum of employee_id bin hire_date by weekday, and visualize them by a bar chart, display by the Y in asc.",
            "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, could you order by the Y-axis in ascending?",
            "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of hire_date and the sum of employee_id bin hire_date by weekday, list by the Y in ascending.",
            "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, order by the y-axis from low to high.",
            "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the sum of employee_id bin hire_date by weekday in a bar chart, could you sort Y in ascending order?"
        ],
        "record_name": "1548@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT result_description , COUNT(result_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "tracking_grants_for_research_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "result_description",
            "y_name": "COUNT(result_description)",
            "x_data": [
                [
                    "Published Research Paper",
                    "Research Patent"
                ]
            ],
            "y_data": [
                [
                    10,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY outcome_description"
        },
        "nl_queries": [
            "List the description of the outcomes for all projects, and count them by a bar chart",
            "A bar chart for what are the number of the descriptions of all the project outcomes?",
            "What are the number of the descriptions of all the project outcomes?",
            "A bar chart for listing the number of the description of the outcomes for all projects.",
            "What are the descriptions of all the project outcomes, and count them by a bar chart",
            "List the number of the description of the outcomes for all projects."
        ],
        "record_name": "2959"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "election_robust",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Party",
            "y_name": "COUNT(Party)",
            "x_data": [
                [
                    "Democratic",
                    "Independence",
                    "Liberal",
                    "Working Families"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Party"
        },
        "nl_queries": [
            "Show the proportion of each party in a pie chart.",
            "Can you tell me the proportion of each party for the election?"
        ],
        "record_name": "1305"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "election_robust",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Party",
            "y_name": "COUNT(Party)",
            "x_data": [
                [
                    "Independence",
                    "Liberal",
                    "Working Families",
                    "Democratic"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Party"
        },
        "nl_queries": [
            "Please compare the number of names of parties using a bar chart, show by the y-axis in ascending please."
        ],
        "record_name": "1306@y_name@ASC"
    }
]