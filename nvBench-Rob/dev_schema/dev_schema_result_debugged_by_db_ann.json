[
    {
        "record_name": "375@y_name@ASC",
        "db_id": "browser_web_robust",
        "target": "Visualize BAR SELECT name , identification FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY identification ASC",
        "nlq": "Display a bar chart for what are the ids and names of the web accelerators that are compatible with two or more browsers?, and I want to sort y-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize BAR SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize PIE SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY name ASC"
    },
    {
        "record_name": "375@y_name@ASC",
        "db_id": "browser_web_robust",
        "target": "Visualize BAR SELECT name , identification FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY identification ASC",
        "nlq": "What are the ids and names of the web accelerators that are compatible with two or more browsers Visualize by bar chart, and order by the y axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY identification ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize BAR SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize PIE SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY name ASC"
    },
    {
        "record_name": "375@y_name@ASC",
        "db_id": "browser_web_robust",
        "target": "Visualize BAR SELECT name , identification FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY identification ASC",
        "nlq": "Visualize a bar chart for what are the ids and names of the web accelerators that are compatible with two or more browsers?, display Y-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize BAR SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize PIE SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , identification FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_identification = T1.identification ORDER BY name ASC"
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the sum of employee_id bin hire_date by time, and visualize them by a bar chart, display by the y axis in descending please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of employee_id over the hire_date bin hire_date by time by a bar chart, and could you display by the total number in desc?",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by time, rank Y in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of hire_date and the sum of employee_id bin hire_date by time in a bar chart, and list Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of employee_id over the hire_date bin hire_date by time, and list Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home",
        "nlq": "Visualize the relationship between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home"
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home",
        "nlq": "Draw a scatter chart about the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID, All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home"
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home",
        "nlq": "A scatter chart shows the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID, All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home"
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home",
        "nlq": "Show me about the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home in a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home"
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home",
        "nlq": "Return a scatter chart about the correlation between  Team_ID and  All_Games_Percent , and group by attribute ACC_Home.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home"
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home",
        "nlq": "Draw a scatterplot of team id vs all_games_percent where team id is on the x-axis and points are colored by ACC_Home",
        "predict_rag_nlq": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teamID , percentage_of_all_games FROM basketball_match GROUP BY ACC_Home"
    },
    {
        "record_name": "443@x_name@ASC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "nlq": "Bar graph to show the number of directed by from different directed by, show Directed_by in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC"
    },
    {
        "record_name": "443@x_name@ASC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "nlq": "Give me a bar chart showing the number of films for each director, and display bar in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC"
    },
    {
        "record_name": "443@x_name@ASC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "nlq": "What is the number of films of each director? Return a bar chart, order in ascending by the names.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC"
    },
    {
        "record_name": "3064@x_name@DESC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "nlq": "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, I want to rank names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC"
    },
    {
        "record_name": "3064@x_name@DESC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "nlq": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a bar chart, and I want to show from high to low by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT Network FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Network FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Network FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC"
    },
    {
        "record_name": "3064@x_name@DESC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "nlq": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a bar chart, and list by the bars from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC"
    },
    {
        "record_name": "3064@x_name@DESC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "nlq": "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, I want to rank names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC"
    },
    {
        "record_name": "780@y_name@ASC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "nlq": "Show the number of documents in different ending date Bin ending date by weekday and group by location code with a stacked bar chart, order by the Y in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY"
    },
    {
        "record_name": "780@y_name@ASC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "nlq": "Stacked bar of date in locaton to and the number of date in locaton to colored by Location_Code, order by the Y in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY"
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC",
        "nlq": "Count the number of captains younger than 50 of each rank by a bar chart, and rank by the y axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Level , COUNT(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC"
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC",
        "nlq": "Draw a bar chart for how many captains with younger than 50 are in each rank?, show by the Y-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Level , COUNT(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC"
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC",
        "nlq": "Count the number of captains younger than 50 of each rank, list by the y-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Level , COUNT(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC",
        "nlq": "Show me a bar chart for how many captains with younger than 50 are in each rank?, list by the y-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Level , COUNT(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY count(*) ASC",
        "nlq": "How many captains with younger than 50 are in each rank, display y axis in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM captain GROUP BY Rank ORDER BY Rank ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Level , count(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Level , COUNT(*) FROM captain WHERE Years < 50 GROUP BY Level ORDER BY Level ASC"
    },
    {
        "record_name": "2567",
        "db_id": "phone_market_robust",
        "target": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "nlq": "Show different carriers of phones together with the number of phones with each carrier by a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "rag_dvqs": [
            "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize PIE SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "predict_debugged_db_ann": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
    },
    {
        "record_name": "2567",
        "db_id": "phone_market_robust",
        "target": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "nlq": "Show different carriers of phones together with the number of phones with each carrier. ",
        "predict_rag_nlq": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "predict_debugged_db_ann": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
    },
    {
        "record_name": "2567",
        "db_id": "phone_market_robust",
        "target": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "nlq": "I want to know the proportion of the total number for each carrier.",
        "predict_rag_nlq": "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
        "rag_dvqs": [
            "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize PIE SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
        "predict_debugged_db_ann": "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier"
    },
    {
        "record_name": "26@x_name@ASC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.Fac_ID ORDER BY Fname ASC",
        "nlq": "A bar chart showing the first name of all the faculty members who participated in some activity, together with the number of activities they participated in, and could you sort in ascending by the x axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.Fac_ID = T2.Fac_ID GROUP BY T1.Fac_ID ORDER BY Fname ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) ASC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) ASC",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY Rank ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.Fac_ID = T2.Fac_ID GROUP BY T1.Fac_ID ORDER BY Fname ASC"
    },
    {
        "record_name": "26@x_name@ASC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.Fac_ID ORDER BY Fname ASC",
        "nlq": "What is the first name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in with a bar chart, list in ascending by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.Fac_ID = T2.Fac_ID GROUP BY T1.Fac_ID ORDER BY Fname ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) ASC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) ASC",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY Rank ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.Fac_ID = T2.Fac_ID GROUP BY T1.Fac_ID ORDER BY Fname ASC"
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer_robust",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "nlq": "Show all countries and the number of singers in each country Show bar chart, and I want to sort by the X in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC"
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer_robust",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "nlq": "Give me a histogram for how many singers are from each country?, and I want to sort in ascending by the names.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC"
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer_robust",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "nlq": "Draw a bar chart of country versus the total number, and rank from low to high by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC"
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer_robust",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "nlq": "Return a bar chart on how many singers are from each country?, and rank from low to high by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer_robust",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "nlq": "How many singers are from each country, I want to show by the bar from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC"
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer_robust",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "nlq": "Show all countries and the number of singers in each country in a bar chart, and I want to sort by the X in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC"
    },
    {
        "record_name": "1961",
        "db_id": "hr_1_robust",
        "target": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
        "nlq": "For all employees in the Finance department, show me the proportion of their job id using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize PIE SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE",
            "Visualize PIE SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID"
    },
    {
        "record_name": "1416@x_name@ASC",
        "db_id": "flight_4_robust",
        "target": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
        "nlq": "What is the altitude (or elevation) of the airports in the city of New York? Show me a bar chart, and I want to sort from low to high by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY x ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name DESC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation DESC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York'",
            "Visualize PIE SELECT name , elevation FROM airports WHERE city = 'New York'",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name ASC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance ASC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE CITY = 'New York' ORDER BY NAME ASC"
    },
    {
        "record_name": "1416@x_name@ASC",
        "db_id": "flight_4_robust",
        "target": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
        "nlq": "Find the altitude (or elevation) of the airports in the city of New York with a bar chart, could you display in asc by the X?",
        "predict_rag_nlq": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name DESC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation DESC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York'",
            "Visualize PIE SELECT name , elevation FROM airports WHERE city = 'New York'",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name ASC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance ASC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , ELEVATION FROM airports WHERE city = 'New York' ORDER BY name ASC"
    },
    {
        "record_name": "44@x_name@ASC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Last_Name , AVG(Age) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Last_Name ASC",
        "nlq": "Show the average age for all female students and group them by last name with a bar chart, and rank bar in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Last_Name , AVG(Age) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY AVG(Age) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname ASC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Last_Name , AVG(Age) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY AVG(Age) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Last_Name , AVG(Age) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY AVG(Age) ASC"
    },
    {
        "record_name": "1139@y_name@ASC",
        "db_id": "department_store_robust",
        "target": "Visualize BAR SELECT product_category_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplierID = 3 GROUP BY product_category_code ORDER BY AVG(product_price) ASC",
        "nlq": "Show the average of price supplied by supplier id 3 for different product type code in a bar chart, and order by the y axis in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT product_category_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_category_code ORDER BY AVG(product_price) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC",
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) DESC",
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code ASC",
            "Visualize BAR SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY SUM(product_price) ASC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_category_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_category_code ORDER BY AVG(product_price) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_category_code , AVG(product_price) FROM Product_Suppliers AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplierID = 3 GROUP BY product_category_code ORDER BY AVG(product_price) ASC"
    },
    {
        "record_name": "2462",
        "db_id": "network_2_robust",
        "target": "Visualize PIE SELECT job , min(Age) FROM Person GROUP BY job",
        "nlq": "Display a pie chart for what is minimum age for different job title?",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2462",
        "db_id": "network_2_robust",
        "target": "Visualize PIE SELECT job , min(Age) FROM Person GROUP BY job",
        "nlq": "Return a pie on what is minimum age for different job title?",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2462",
        "db_id": "network_2_robust",
        "target": "Visualize PIE SELECT job , min(Age) FROM Person GROUP BY job",
        "nlq": "What is minimum age for different job title. Show a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2462",
        "db_id": "network_2_robust",
        "target": "Visualize PIE SELECT job , min(Age) FROM Person GROUP BY job",
        "nlq": "Return a pie chart on how old is the youngest person for each job?",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2462",
        "db_id": "network_2_robust",
        "target": "Visualize PIE SELECT job , min(Age) FROM Person GROUP BY job",
        "nlq": "Pie chart. how old is the youngest person for each job?",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2462",
        "db_id": "network_2_robust",
        "target": "Visualize PIE SELECT job , min(Age) FROM Person GROUP BY job",
        "nlq": "How old is the youngest person for each job. Show the proportion.",
        "predict_rag_nlq": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , MIN(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2462",
        "db_id": "network_2_robust",
        "target": "Visualize PIE SELECT job , min(Age) FROM Person GROUP BY job",
        "nlq": "Create a pie chart showing minimal age across job.",
        "predict_rag_nlq": "Visualize A: Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2349@y_name@ASC",
        "db_id": "mountain_photos_robust",
        "target": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "nlq": "Group and count brand for each camera lens using a bar chart, and rank in asc by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) DESC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand ASC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand DESC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) DESC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) ASC",
            "Visualize PIE SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC"
    },
    {
        "record_name": "2349@y_name@ASC",
        "db_id": "mountain_photos_robust",
        "target": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "nlq": "Show the number of brand from each brand, order total number in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) DESC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand ASC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand DESC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) DESC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) ASC",
            "Visualize PIE SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC"
    },
    {
        "record_name": "771",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
        "nlq": "Show the number of documents in different starting date and bin starting date by year interval with a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations BIN Date_in_Location_From BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To ASC BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To DESC BIN Date_in_Locaton_To BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR"
    },
    {
        "record_name": "771",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
        "nlq": "How many documents in different starting date? Return a line chart binning starting date by year interval.",
        "predict_rag_nlq": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations BIN Date_in_Location_From BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To ASC BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To DESC BIN Date_in_Locaton_To BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR"
    },
    {
        "record_name": "771",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
        "nlq": "Can you draw the trend of how many date in location from over the date in location from?",
        "predict_rag_nlq": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From",
        "rag_dvqs": [
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From ORDER BY Date_in_Location_From ASC",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From ORDER BY Date_in_Location_From DESC",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To ASC",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To ASC",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From",
        "predict_debugged_db_ann": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From"
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Show me about the distribution of Nationality and the sum of ID , and group by attribute Nationality in a bar chart, and order from low to high by the X please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Draw a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality, order from low to high by the X please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY SUM(ID) ASC"
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Return a bar chart about the distribution of Nationality and the sum of ID , and group by attribute Nationality, could you show by the x-axis in ascending?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality, order by the Nationality in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Show total number of id from each nationality, order by the bar from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY SUM(ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY SUM(ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITIZENSHIP , SUM(ID) FROM swimmer GROUP BY CITIZENSHIP ORDER BY SUM(ID) ASC"
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Give me the comparison about the sum of ID over the Nationality , and group by attribute Nationality by a bar chart, order by the bar from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(ID) FROM swimmer GROUP BY citizenship ORDER BY SUM(ID) ASC"
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4_robust",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM Music_Festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "Return the categories of music festivals that have the result \"Awarded\", and count them by a bar chart, sort by the X in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4_robust",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM Music_Festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "A bar chart for returning the number of the categories of music festivals that have the result \"Awarded\", and rank Category in descending order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4_robust",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM Music_Festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "A bar chart for what are the number of the category of music festivals with result \"Awarded\"?, and I want to order by the X-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4_robust",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM Music_Festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "What are the number of the category of music festivals with result \"Awarded\"?, show in descending by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4_robust",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM Music_Festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "Return the number of the categories of music festivals that have the result \"Awarded\", show in descending by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category ASC"
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4_robust",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM Music_Festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "What are the category of music festivals with result \"Awarded\", and count them by a bar chart, and show by the x axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "2127@x_name@DESC",
        "db_id": "local_govt_in_alabama_robust",
        "target": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "nlq": "Please draw a histogram to show the total number of participants in each type code, and order in desc by the Participant_Type_Code.",
        "predict_rag_nlq": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) ASC",
            "Visualize PIE SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC"
    },
    {
        "record_name": "2127@x_name@DESC",
        "db_id": "local_govt_in_alabama_robust",
        "target": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "nlq": "Bar chart x axis participant type code y axis the number of participant type code, show by the bar in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC"
    },
    {
        "record_name": "2127@x_name@DESC",
        "db_id": "local_govt_in_alabama_robust",
        "target": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "nlq": "Compare the number of participants in each participant type code using a bar chart, order bars from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC"
    },
    {
        "record_name": "2498@y_name@ASC",
        "db_id": "party_host_robust",
        "target": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE PartyTheme = \"Spring\" OR PartyTheme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
        "nlq": "Show the total number of the first year of parties with the theme \"Spring\" or \"Teqnology\" with a bar chart, bin the first year into weekday interval and count the first year, and I want to display y axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC BIN First_year BY WEEKDAY",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN First_year BY WEEKDAY",
            "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
            "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC",
            "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year",
            "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE PartyTheme = \"Spring\" OR PartyTheme = \"Teqnology\" ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY"
    },
    {
        "record_name": "3075",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street",
        "nlq": "Give me a scatter chart that groups acc road, the x-axis is school id and the y-axis is acc percent.\n\n",
        "predict_rag_nlq": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street"
    },
    {
        "record_name": "3075",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street",
        "nlq": "Group by all acc road, show the school id and All_Games_Percent in a scatter plot.",
        "predict_rag_nlq": "Visualize SCATTER SELECT schoolID , percentage_of_all_games FROM basketball_match GROUP BY ACC_Street",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT schoolID , percentage_of_all_games FROM basketball_match GROUP BY ACC_Street",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_all_games FROM basketball_match GROUP BY ACC_Street"
    },
    {
        "record_name": "3075",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street",
        "nlq": "Draw a scatterplot of school id vs acc_percent where school id is on the x-axis and points are colored by ACC_Road",
        "predict_rag_nlq": "Visualize SCATTER SELECT schoolID, percentage_of_ACC FROM basketball_match GROUP BY ACC_Street",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY ACC_Street"
    },
    {
        "record_name": "2617@x_name@DESC",
        "db_id": "products_for_hire_robust",
        "target": "Visualize LINE SELECT date_paid , COUNT(date_paid) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY date_paid ORDER BY date_paid DESC",
        "nlq": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart, and show X from high to low order.",
        "predict_rag_nlq": "Visualize LINE SELECT date_paid , COUNT(date_paid) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY date_paid ORDER BY date_paid DESC",
        "rag_dvqs": [
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date ASC",
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date",
            "Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) DESC BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) ASC BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) DESC BIN payment_date BY WEEKDAY",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) ASC BIN payment_date BY WEEKDAY",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_paid , COUNT(date_paid) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY date_paid ORDER BY date_paid DESC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_paid , COUNT(date_paid) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY date_paid ORDER BY date_paid DESC"
    },
    {
        "record_name": "2617@x_name@DESC",
        "db_id": "products_for_hire_robust",
        "target": "Visualize LINE SELECT date_paid , COUNT(date_paid) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY date_paid ORDER BY date_paid DESC",
        "nlq": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check, and count them by a line chart, and display in descending by the payment_date.",
        "predict_rag_nlq": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "rag_dvqs": [
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date ASC",
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) DESC BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) DESC BIN payment_date BY WEEKDAY",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) ASC BIN payment_date BY MONTH",
            "Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) ASC BIN payment_date BY WEEKDAY",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_paid , COUNT(date_paid) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY date_paid ORDER BY date_paid DESC"
    },
    {
        "record_name": "1437@x_name@ASC",
        "db_id": "formula_1_robust",
        "target": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "nlq": "How many races are held in each year after 2014? Show me a bar chart, and list X-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC"
    },
    {
        "record_name": "1437@x_name@ASC",
        "db_id": "formula_1_robust",
        "target": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "nlq": "Show me a bar chart about the number of races held in each year after 2014, and rank from low to high by the names.",
        "predict_rag_nlq": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC"
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "nlq": "For those employees who was hired before 2002-06-21, draw a line chart about the change of salary over hire_date , sort x axis in asc order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "nlq": "For those employees who was hired before 2002-06-21, visualize a line chart about the change of salary over hire_date , and order x axis in asc order.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_hire, wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "nlq": "For those employees who was hired before 2002-06-21, return a line chart about the change of salary over hire_date , and could you rank by the X-axis from low to high?",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "nlq": "For those employees who was hired before 2002-06-21, show me about the change of salary over hire_date in a line chart, and could you rank by the X-axis from low to high?",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "nlq": "For those employees who was hired before 2002-06-21, a line chart shows the change of salary over hire_date, and list x-axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC",
        "nlq": "For those employees who was hired before 2002-06-21, show me the trend about salary over hire_date with a line chart, and rank in ascending by the HIRE_DATE please.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "327@y_name@ASC",
        "db_id": "bike_1_robust",
        "target": "Visualize BAR SELECT length , COUNT(length) FROM station  ORDER BY COUNT(length) ASC BIN length BY ZERO",
        "nlq": "Show me how many long by long in a histogram, could you rank from low to high by the y axis?",
        "predict_rag_nlq": "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "rag_dvqs": [
            "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
            "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) DESC BIN long BY ZERO",
            "Visualize BAR SELECT long , COUNT(long) FROM station BIN long BY ZERO",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "predict_debugged_db_ann": "Visualize BAR SELECT LENGTH , COUNT(LENGTH) FROM station ORDER BY COUNT(LENGTH) ASC BIN LENGTH BY ZERO"
    },
    {
        "record_name": "327@y_name@ASC",
        "db_id": "bike_1_robust",
        "target": "Visualize BAR SELECT length , COUNT(length) FROM station  ORDER BY COUNT(length) ASC BIN length BY ZERO",
        "nlq": "For each station, bin its longitude divided by zero as buckets, and count the frequency in each bucket, and I want to show by the Y in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "rag_dvqs": [
            "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
            "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) DESC BIN long BY ZERO",
            "Visualize BAR SELECT long , COUNT(long) FROM station BIN long BY ZERO",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "predict_debugged_db_ann": "Visualize BAR SELECT LENGTH , COUNT(LENGTH) FROM station ORDER BY COUNT(LENGTH) ASC BIN LENGTH BY ZERO"
    },
    {
        "record_name": "2749@x_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY class ASC",
        "nlq": "Give me a bar chart showing the total number of ships' classes that do not have a captain, display from low to high by the bars please.",
        "predict_rag_nlq": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY class ORDER BY COUNT(class) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain) GROUP BY class ORDER BY COUNT(class) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT class , COUNT(class) FROM Ship WHERE SHIP_ID NOT IN(SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY COUNT(class) ASC"
    },
    {
        "record_name": "2749@x_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY class ASC",
        "nlq": "For those ships that do not have a captain, tell me the total number of their classes using a pie chart, display from low to high by the bars please.",
        "predict_rag_nlq": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY class ORDER BY COUNT(class) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain) GROUP BY class ORDER BY COUNT(class) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT class , COUNT(class) FROM Ship WHERE SHIP_ID NOT IN(SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY COUNT(class) ASC"
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1_robust",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "What is the average rating of songs for each language Plot them as bar chart, and could you list from high to low by the total number?",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC"
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1_robust",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "Show me mean rating by languages in a histogram, order by the mean rating in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC"
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1_robust",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "Show me a bar chart for what is the average rating of songs for each language?, and could you sort total number in desc order?",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC"
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1_robust",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "Draw a bar chart for what is the average rating of songs for each language?, order by the mean rating in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC"
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1_robust",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "Show me a bar chart for what is the average song rating for each language?, could you sort total number in desc order?",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC"
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1_robust",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "What is the average song rating for each language Plot them as bar chart, could you list from high to low by the total number?",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC"
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1_robust",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC",
        "nlq": "How many patients do each physician take care of? List their names and number of patients they take care of in a bar chart, and show X-axis in asc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name, COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1_robust",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC",
        "nlq": "How many patients do each physician take care of? List their names and number of patients they take care of Show bar chart, sort in asc by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY count(*) ASC"
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1_robust",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC",
        "nlq": "Draw a bar chart for how many patients do each physician take care of? List their names and number of patients they take care of, and I want to display in asc by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY T1.Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY T1.Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC"
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1_robust",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC",
        "nlq": "Return the name of each physician and the number of patients he or she treats in a bar chart, and I want to sort in ascending by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY count(*) ASC"
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1_robust",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC",
        "nlq": "Return the name of each physician and the number of patients he or she treats, I want to sort by the bars in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY count(*) ASC"
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1_robust",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY T1.Name ASC",
        "nlq": "Return a bar chart on how many patients do each physician take care of? List their names and number of patients they take care of, and I want to sort by the bars in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.Employee_ID = T2.PCP GROUP BY T1.Employee_ID ORDER BY count(*) ASC"
    },
    {
        "record_name": "3043@x_name@ASC",
        "db_id": "train_station_robust",
        "target": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "nlq": "A bar chart shows how many locations, and order in ascending by the X-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC"
    },
    {
        "record_name": "3043@x_name@ASC",
        "db_id": "train_station_robust",
        "target": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "nlq": "Bar graph to show how many location from different location, order in ascending by the X-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC"
    },
    {
        "record_name": "3043@x_name@ASC",
        "db_id": "train_station_robust",
        "target": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "nlq": "How many locations? Draw a bar chart, and list by the X-axis in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position ORDER BY COUNT(Position) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM station GROUP BY Position ORDER BY Position ASC"
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  code and  manufacturer , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  code and  manufacturer , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  code and  manufacturer , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, visualize the relationship between  code and  manufacturer , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  manufacturer , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "582@y_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN course AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY CRS_DESCRIPTION ,  EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC",
        "nlq": "Show the number of courses each instructor taught in a stacked bar chart The x-axis is the instructor's first name and group by course description, could you order by the Y-axis in descending?",
        "predict_rag_nlq": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY CRS_DESCRIPTION ,  EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC",
            "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY CRS_DESCRIPTION , EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY CRS_DESCRIPTION , EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC"
    },
    {
        "record_name": "582@y_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN course AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY CRS_DESCRIPTION ,  EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC",
        "nlq": "How many courses each teacher taught? Show me a stacked bar chart The x-axis is the teacher's first name and group by course description, and rank from high to low by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME, COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE JOIN PROFESSOR AS T4 ON T2.EMPLOYEE_NUM = T4.EMPLOYEE_NUM GROUP BY CRS_DESCRIPTION, EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME",
            "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ORDER BY COUNT(CRS_DESCRIPTION) DESC",
            "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CRS_DESCRIPTION) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ,  CRS_DESCRIPTION ORDER BY CRS_DESCRIPTION DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE JOIN PROFESSOR AS T4 ON T2.EMPLOYEE_NUM = T4.EMPLOYEE_NUM GROUP BY CRS_DESCRIPTION , EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE JOIN PROFESSOR AS T4 ON T2.EMPLOYEE_NUM = T4.EMPLOYEE_NUM GROUP BY T3.CRS_DESCRIPTION , EMPLOYEE_FIRST_NAME ORDER BY COUNT(EMPLOYEE_FIRST_NAME) DESC"
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC",
        "nlq": "What is the number of professors for different school Plot them as bar chart, and show by the names from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC",
        "nlq": "Return a bar chart on what is the number of professors for different school?, and show by the names from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC",
        "nlq": "A bar chart about how many different professors are there for the different schools?, and I want to list from high to low by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC",
        "nlq": "How many different professors are there for the different schools Show bar chart, sort bars from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC",
        "nlq": "Return a bar chart on how many different professors are there for the different schools?, and sort x axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC",
        "nlq": "Give me a histogram for what is the number of professors for different school?, sort x axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC",
        "nlq": "What is the number of professors for different school Plot them as bar chart, display X-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC",
        "nlq": "Give me a histogram for what is the number of professors for different school?, could you order in asc by the x axis?",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC",
        "nlq": "A bar chart about how many different professors are there for the different schools?, and could you list by the bar from low to high?",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC",
        "nlq": "Return a bar chart on how many different professors are there for the different schools?, list in asc by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC",
        "nlq": "Return a bar chart on what is the number of professors for different school?, and could you list by the bar from low to high?",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC",
        "nlq": "How many different professors are there for the different schools Show bar chart, and show in asc by the SCHOOL_CODE.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY T1.SCHOOL_CODE ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC"
    },
    {
        "record_name": "401",
        "db_id": "candidate_poll_robust",
        "target": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate",
        "nlq": "A scatter showing the correlation between support and oppose rates for each candidate.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Consider_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Support_rate , Consider_rate FROM candidate",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize BAR SELECT Date , Vote_Percent FROM election",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Date , Vote_Percent FROM election"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate"
    },
    {
        "record_name": "401",
        "db_id": "candidate_poll_robust",
        "target": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate",
        "nlq": "What is the relationship between support and oppose rates of each candidate?",
        "predict_rag_nlq": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Consider_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Support_rate , Consider_rate FROM candidate",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize BAR SELECT Date , Vote_Percent FROM election",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Date , Vote_Percent FROM election"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate"
    },
    {
        "record_name": "401",
        "db_id": "candidate_poll_robust",
        "target": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate",
        "nlq": "Plot a scatter chart, support rate by oppose_rate.",
        "predict_rag_nlq": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Consider_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Support_rate , Consider_rate FROM candidate",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
            "Visualize SCATTER SELECT Advisor , count(*) FROM Student GROUP BY advisor"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT approval_rate , disapproval_rate FROM candidate"
    },
    {
        "record_name": "2396@y_name@DESC",
        "db_id": "movie_1_robust",
        "target": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" ORDER BY stars DESC",
        "nlq": "For each director, return the director's name together with the value of that rating and ignore movies whose director is NULL Could you plot the result with a bar chart?, rank by the total number in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director IS NOT NULL ORDER BY stars DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY director DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY director ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" ORDER BY stars DESC"
    },
    {
        "record_name": "130@y_name@ASC",
        "db_id": "assets_maintenance_robust",
        "target": "Visualize BAR SELECT other_info , COUNT(other_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ORDER BY COUNT(other_info) ASC",
        "nlq": "Show the number of engineers for different other details in a bar chart, and rank y-axis from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT other_info , COUNT(other_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ORDER BY COUNT(other_info) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC",
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) DESC",
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY other_details ASC",
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY other_details DESC",
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY COUNT(skill_description) ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY COUNT(skill_description) DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT other_info , COUNT(other_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ORDER BY COUNT(other_info) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT other_info , COUNT(other_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ORDER BY COUNT(other_info) ASC"
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the sum of code , and group by attribute name, could you show by the y-axis in descending?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, show in descending by the Y please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of code , and group by attribute name in a bar chart, and sort from high to low by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, and display in desc by the y-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, find name and the sum of code , and group by attribute name, and visualize them by a bar chart, and sort by the Y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC"
    },
    {
        "record_name": "1802",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname",
        "nlq": "For those employees whose first name is ending with the letter m, show the frequency of the first name using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) ASC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) DESC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC",
            "Visualize PIE SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM employee WHERE emp_jobcode = 'PROF' GROUP BY EMP_FNAME ORDER BY emp_dob",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname"
    },
    {
        "record_name": "1802",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname",
        "nlq": "For employees with first names that end with the letter m, groups and count the first name to visualize a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) ASC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) DESC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC",
            "Visualize PIE SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM employee WHERE emp_jobcode = 'PROF' GROUP BY EMP_FNAME ORDER BY emp_dob",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , COUNT(Fname) FROM employees WHERE Fname LIKE '%m' GROUP BY Fname"
    },
    {
        "record_name": "2931@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.ID = t2.Swimmer_ID JOIN event AS t3 ON t2.Incident_ID = t3.ID JOIN stadium AS t4 ON t4.ID = t3.stadium_id WHERE t1.citizenship = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "nlq": "Find the names of stadiums that some Australian swimmers have been to, and count them by a bar chart, could you display total number in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize PIE SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON stadium.id = event.stadium_id WHERE swimmer.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.citizenship = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC"
    },
    {
        "record_name": "2931@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.ID = t2.Swimmer_ID JOIN event AS t3 ON t2.Incident_ID = t3.ID JOIN stadium AS t4 ON t4.ID = t3.stadium_id WHERE t1.citizenship = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "nlq": "Find the number of the names of stadiums that some Australian swimmers have been to, and show in ascending by the the number of name.",
        "predict_rag_nlq": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize PIE SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON stadium.id = event.stadium_id WHERE swimmer.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.citizenship = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC"
    },
    {
        "record_name": "2931@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.ID = t2.Swimmer_ID JOIN event AS t3 ON t2.Incident_ID = t3.ID JOIN stadium AS t4 ON t4.ID = t3.stadium_id WHERE t1.citizenship = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "nlq": "A bar chart for finding the number of the names of stadiums that some Australian swimmers have been to, and could you display Y in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize PIE SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON stadium.id = event.stadium_id WHERE swimmer.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.citizenship = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC"
    },
    {
        "record_name": "438",
        "db_id": "chinook_1_robust",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "Show the album names and ids for albums that contain tracks with unit price bigger than 1 by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC"
    },
    {
        "record_name": "438",
        "db_id": "chinook_1_robust",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "Show the album names and ids for albums that contain tracks with unit price bigger than 1. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title, T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC"
    },
    {
        "record_name": "438",
        "db_id": "chinook_1_robust",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "Return a histogram on what are the titles and ids for albums containing tracks with unit price greater than 1?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC"
    },
    {
        "record_name": "438",
        "db_id": "chinook_1_robust",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "Show me a bar chart for what are the titles and ids for albums containing tracks with unit price greater than 1?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC"
    },
    {
        "record_name": "438",
        "db_id": "chinook_1_robust",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "What are the titles and ids for albums containing tracks with unit price greater than 1. ",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC"
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, and could you order in descending by the x-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the average of department_id , and group by attribute job_id, and visualize them by a bar chart, I want to sort by the x-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of department_id over the job_id , and group by attribute job_id, I want to sort by the x-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the average of department_id , and group by attribute job_id, show by the names in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(DEPT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPT_ID) DESC"
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of department_id over the job_id , and group by attribute job_id by a bar chart, and could you order in descending by the x-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(Department_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(Department_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "nlq": "Bar chart x axis role code y axis the total number, I want to display in descending by the Role_Code.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC"
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "nlq": "Show all role codes and the number of employees in each role Show bar chart, and could you show by the bars in desc please?",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "nlq": "Show all role codes and the number of employees in each role by a bar chart, display from high to low by the X-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "nlq": "What is the code of each role and the number of employees in each role Show bar chart, and I want to show by the x axis in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC"
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "nlq": "Return a histogram on what is the code of each role and the number of employees in each role?, sort x axis in desc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC"
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "nlq": "Give me a histogram for what is the code of each role and the number of employees in each role?, and sort x axis in desc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC"
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper_robust",
        "target": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "Show each author and the number of workshops they submitted to with a bar chart, and display in asc by the Y-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC"
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper_robust",
        "target": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "How many workshops did each author submit to? Return the author name and the number of workshops Plot them as bar chart, and I want to show by the y axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC"
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper_robust",
        "target": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "How many workshops did each author submit to? Return the author name and the number of workshops in a bar chart, rank Y-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC"
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper_robust",
        "target": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "Visualize a bar chart for how many workshops did each author submit to? Return the author name and the number of workshops, sort workshop_id) in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC"
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper_robust",
        "target": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "Show each author and the number of workshops they submitted to Show bar chart, show in asc by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID GROUP BY writer ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Writer , COUNT(Writer) FROM book GROUP BY Writer ORDER BY Writer ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID GROUP BY writer ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID GROUP BY writer ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC"
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper_robust",
        "target": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "Give me a histogram for how many workshops did each author submit to? Return the author name and the number of workshops, and show total number in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue ASC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY COUNT(Venue) DESC",
            "Visualize BAR SELECT Venue , COUNT(Venue) FROM workshop GROUP BY Venue ORDER BY Venue DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT writer , COUNT(DISTINCT T1.WorkshopID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.SubmissionID = T2.SubmissionID ORDER BY COUNT(DISTINCT T1.WorkshopID) ASC"
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC",
        "nlq": "Show the booking status code and the corresponding number of bookings Show bar chart, and rank by the names from high to low please.",
        "predict_rag_nlq": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC",
        "nlq": "Return a bar chart on how many bookings does each booking status have? List the booking status code and the number of corresponding bookings, rank by the booking_status_code from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC",
        "nlq": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings, order X from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC",
        "nlq": "Show the booking status code and the corresponding number of bookings in a bar chart, rank by the names from high to low please.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC",
        "nlq": "Show me a bar chart for how many bookings does each booking status have? List the booking status code and the number of corresponding bookings, could you rank booking_status_code from high to low order?",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC",
        "nlq": "Plot the total number by grouped by booking status code as a bar graph, rank by the names from high to low please.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY reservation_status_code DESC",
        "nlq": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings with a bar chart, order X from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "2096@y_name@ASC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "nlq": "Please use a bar chart to compare the number of customers of each customer's move in date, and rank by the total number from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY WEEKDAY",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
    },
    {
        "record_name": "2096@y_name@ASC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "nlq": "What is the proportion of each customer's move in date? Show me the bar chart, and show by the how many date moved in in asc please.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY WEEKDAY",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
    },
    {
        "record_name": "329@y_name@ASC",
        "db_id": "bike_1_robust",
        "target": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE minimum_dew_point_F < (SELECT min(minimum_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "nlq": "For days had a minimum dew point smaller than any day in zip code 94107, show the total number of such days using a bar chart, could you order how many date in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_F < (SELECT min(min_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date ASC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) DESC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date DESC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) BIN date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_F <(SELECT min(min_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE minimum_dew_point_F <(SELECT min(minimum_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC"
    },
    {
        "record_name": "329@y_name@ASC",
        "db_id": "bike_1_robust",
        "target": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE minimum_dew_point_F < (SELECT min(minimum_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "nlq": "Count those days and in which zip code was the min dew point lower than any day in zip code 94107 using a bar graph, and could you order in asc by the y axis please?",
        "predict_rag_nlq": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE minimum_dew_point_F < (SELECT MIN(minimum_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) DESC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date ASC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date DESC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) BIN date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE minimum_dew_point_F <(SELECT MIN(minimum_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE minimum_dew_point_F <(SELECT MIN(minimum_dew_point_F) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC"
    },
    {
        "record_name": "1843@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees  ORDER BY AVG(wage) ASC BIN date_of_hire BY MONTH",
        "nlq": "Compare the average salary by each hire date (bin it into month interval) of employees using a bar chart, and sort Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees BIN date_of_hire BY MONTH ORDER BY AVG(wage) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees BIN date_of_hire BY MONTH ORDER BY AVG(wage) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees BIN date_of_hire BY MONTH ORDER BY AVG(wage) ASC"
    },
    {
        "record_name": "1843@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees  ORDER BY AVG(wage) ASC BIN date_of_hire BY MONTH",
        "nlq": "Give me a bar chart for the average of salary of each hire date, and sort Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees BIN date_of_hire BY MONTH ORDER BY AVG(wage) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees BIN date_of_hire BY MONTH ORDER BY AVG(wage) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees BIN date_of_hire BY MONTH ORDER BY AVG(wage) ASC"
    },
    {
        "record_name": "1843@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees  ORDER BY AVG(wage) ASC BIN date_of_hire BY MONTH",
        "nlq": "Show the average salary by each hire date of employees, and please bin the hire date into the Month interval for showing a bar chart, rank by the Y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(wage) FROM employees BIN HIRE_DATE BY MONTH ORDER BY AVG(wage) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(wage) FROM employees BIN HIRE_DATE BY MONTH ORDER BY AVG(wage) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees BIN date_of_hire BY MONTH ORDER BY AVG(wage) ASC"
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) ASC",
        "nlq": "Show all template type codes and the number of documents using each type Visualize by bar chart, and could you display in asc by the y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code",
            "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) DESC",
            "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY Template_Type_Code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) ASC",
        "nlq": "What are the different template type codes, and how many documents use each type Plot them as bar chart, and could you order y axis from low to high order please?",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) ASC",
        "nlq": "Show all template type codes and the number of documents using each type with a bar chart, list from low to high by the Y please.",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) ASC",
        "nlq": "A bar chart about what are the different template type codes, and how many documents use each type?, and could you display in asc by the y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY count(*) ASC",
        "nlq": "what are the different template type codes, and how many documents use each type?, and could you display in asc by the y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "3008@x_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM TRANSACTIONS  ORDER BY transaction_date DESC BIN transaction_date BY YEAR",
        "nlq": "Bin all date of transactions into the weekday interval, and the total number of each bin, and then show me the trend, display by the date_of_transaction in desc.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY WEEKDAY",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM Transactions ORDER BY transaction_date DESC BIN transaction_date BY YEAR"
    },
    {
        "record_name": "3008@x_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM TRANSACTIONS  ORDER BY transaction_date DESC BIN transaction_date BY YEAR",
        "nlq": "Plot how many date of transaction over date of transaction in a line chart, and list X-axis from high to low order.",
        "predict_rag_nlq": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM Transactions  ORDER BY transaction_date DESC BIN transaction_date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\" BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000 BIN date_of_transaction BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM Transactions ORDER BY transaction_date DESC BIN transaction_date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM Transactions ORDER BY transaction_date DESC BIN transaction_date BY YEAR"
    },
    {
        "record_name": "3008@x_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM TRANSACTIONS  ORDER BY transaction_date DESC BIN transaction_date BY YEAR",
        "nlq": "Give me a line chart, that bins all date of transactions into the weekday interval, and the count for each bin, order in desc by the date_of_transaction.",
        "predict_rag_nlq": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM Transactions ORDER BY transaction_date DESC BIN transaction_date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY WEEKDAY",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM Transactions ORDER BY transaction_date DESC BIN transaction_date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT transaction_date , COUNT(transaction_date) FROM Transactions ORDER BY transaction_date DESC BIN transaction_date BY YEAR"
    },
    {
        "record_name": "610",
        "db_id": "college_2_robust",
        "target": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester",
        "nlq": "Find the number of courses offered by Psychology department in each semester with a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "rag_dvqs": [
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester",
            "Visualize BAR SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ,  year ORDER BY T1.title",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title BIN year BY YEAR",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize PIE SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
            "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY T3.Name",
            "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year ORDER BY year ASC",
            "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "predict_debugged_db_ann": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester ORDER BY T1.title"
    },
    {
        "record_name": "610",
        "db_id": "college_2_robust",
        "target": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester",
        "nlq": "How many courses are in the Psychology department for each semester? Return a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "rag_dvqs": [
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester",
            "Visualize BAR SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ,  year ORDER BY T1.title",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title BIN year BY YEAR",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize PIE SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
            "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY T3.Name",
            "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year ORDER BY year ASC",
            "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "predict_debugged_db_ann": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.department_name = 'Psychology' GROUP BY semester ORDER BY T1.title"
    },
    {
        "record_name": "9@y_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "nlq": "Show how many rank from each rank, rank by the Y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC"
    },
    {
        "record_name": "9@y_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "nlq": "Show the number of faculty members for each rank in a bar chart, rank by the Y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC"
    },
    {
        "record_name": "9@y_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "nlq": "What is the number of the faculty members for each rank? Visualize in bar chart, and show by the total number in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC"
    },
    {
        "record_name": "515@y_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "nlq": "Find the number of departments in each school Plot them as bar chart, and I want to show by the y axis from high to low please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT ORDER BY count(DISTINCT DEPARTMENT_NAME) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT ORDER BY count(DISTINCT DEPARTMENT_NAME) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPARTMENT_NAME) DESC"
    },
    {
        "record_name": "515@y_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "nlq": "How many departments are in each school Show bar chart, could you sort by the total number in descending?",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT GROUP BY SCHOOL_CODE ORDER BY count(DISTINCT DEPARTMENT_NAME) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT GROUP BY SCHOOL_CODE ORDER BY count(DISTINCT DEPARTMENT_NAME) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT GROUP BY SCHOOL_CODE ORDER BY COUNT(DISTINCT DEPARTMENT_NAME) DESC"
    },
    {
        "record_name": "515@y_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "nlq": "A bar chart about how many departments are in each school?, could you order in descending by the count(DISTINCTdept_name)?",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT ORDER BY count(DISTINCT DEPARTMENT_NAME) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPARTMENT_NAME) DESC"
    },
    {
        "record_name": "515@y_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "nlq": "Return a bar chart on how many departments are in each school?, and list by the total number in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT GROUP BY SCHOOL_CODE ORDER BY count(DISTINCT DEPARTMENT_NAME) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT GROUP BY SCHOOL_CODE ORDER BY count(DISTINCT DEPARTMENT_NAME) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPARTMENT_NAME) FROM DEPARTMENT GROUP BY SCHOOL_CODE ORDER BY COUNT(DISTINCT DEPARTMENT_NAME) DESC"
    },
    {
        "record_name": "1069@x_name@DESC",
        "db_id": "debate_robust",
        "target": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "nlq": "Show different parties of people along with the number of people in each party with a bar chart, and could you show by the X in desc?",
        "predict_rag_nlq": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY Party DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC"
    },
    {
        "record_name": "1069@x_name@DESC",
        "db_id": "debate_robust",
        "target": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "nlq": "Show different parties of people along with the number of people in each party Plot them as bar chart, display by the names in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY Party DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC"
    },
    {
        "record_name": "1069@x_name@DESC",
        "db_id": "debate_robust",
        "target": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "nlq": "Bar graph to show the total number from different party, rank by the x-axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY Party DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC"
    },
    {
        "record_name": "2818@x_name@DESC",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Location , count(*) FROM player WHERE score < 30 GROUP BY Location ORDER BY Location DESC",
        "nlq": "What is the number of players who have points less than 30 for each position Plot them as bar chart, and list by the names in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY Position ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , count(Position) FROM player WHERE points < 30 GROUP BY Position ORDER BY count(Position) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Location , COUNT(Location) FROM player WHERE score < 30 GROUP BY Location ORDER BY COUNT(Location) DESC"
    },
    {
        "record_name": "2818@x_name@DESC",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Location , count(*) FROM player WHERE score < 30 GROUP BY Location ORDER BY Location DESC",
        "nlq": "what is the number of players who have points less than 30 for each position?, and rank by the X in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , count(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , count(Position) FROM player WHERE Points < 30 GROUP BY Position ORDER BY count(Position) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM player WHERE score < 30 GROUP BY Position ORDER BY COUNT(Position) DESC"
    },
    {
        "record_name": "2818@x_name@DESC",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Location , count(*) FROM player WHERE score < 30 GROUP BY Location ORDER BY Location DESC",
        "nlq": "Give me a histogram for what is the number of players who have points less than 30 for each position?, and I want to sort bars in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY Position ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , count(Position) FROM player WHERE points < 30 GROUP BY Position ORDER BY count(Position) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM player WHERE score < 30 GROUP BY Position ORDER BY COUNT(Position) DESC"
    },
    {
        "record_name": "1016@y_name@DESC",
        "db_id": "customers_campaigns_ecommerce_robust",
        "target": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_category_code ,  premises_type ORDER BY COUNT(premises_type) DESC",
        "nlq": "Show the of customer addresses and group by premises type and address type code in a stacked bar chart The x-axis is premises type, and I want to sort in descending by the total number please.",
        "predict_rag_nlq": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code , premises_type ORDER BY COUNT(premises_type) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) DESC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY COUNT(premises_type) DESC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY premises_type DESC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) ASC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY COUNT(premises_type) ASC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY premises_type DESC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY premises_type ASC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY premises_type ASC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY COUNT(premises_type) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM Customer_Addresses AS T1 JOIN Premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY COUNT(premises_type) DESC"
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of first_name and commission_pct , sort from high to low by the COMMISSION_PCT.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of first_name and commission_pct , show total number in descending order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, find first_name and commission_pct , and visualize them by a bar chart, list from high to low by the Y.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of first_name and commission_pct in a bar chart, and sort by the Y-axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of first_name and commission_pct , I want to show by the Y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COMMISSION_PCT FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
    },
    {
        "record_name": "1542",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1542",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1542",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of  hire_date and the sum of salary bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1542",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, show me about the distribution of  hire_date and the sum of salary bin hire_date by time in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1542",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of  hire_date and the sum of salary bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "852@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.ProjectID = T2.ProjectID WHERE T2.Project_information = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
        "nlq": "Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by weekday and group by document name with a stacked bar chart, could you show from high to low by the Y?",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN Projects AS T2 ON T1.ProjectID = T2.ProjectID WHERE T2.Project_information = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"
    },
    {
        "record_name": "2337@y_name@ASC",
        "db_id": "mountain_photos_robust",
        "target": "Visualize BAR SELECT T1.name , T1.ID FROM mountain AS T1 JOIN photos AS T2 ON T1.ID = T2.mountain_ID ORDER BY T1.ID ASC",
        "nlq": "What are the id and name of the mountains that have at least 2 photos Show bar chart, order from low to high by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_ID ORDER BY T1.id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC",
            "Visualize PIE SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_ID ORDER BY T1.id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.ID FROM mountain AS T1 JOIN photos AS T2 ON T1.ID = T2.mountain_ID ORDER BY T1.ID ASC"
    },
    {
        "record_name": "2337@y_name@ASC",
        "db_id": "mountain_photos_robust",
        "target": "Visualize BAR SELECT T1.name , T1.ID FROM mountain AS T1 JOIN photos AS T2 ON T1.ID = T2.mountain_ID ORDER BY T1.ID ASC",
        "nlq": "Return a bar chart on what are the id and name of the mountains that have at least 2 photos?, I want to list by the y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize PIE SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_ID ORDER BY T1.id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.ID FROM mountain AS T1 JOIN photos AS T2 ON T1.ID = T2.mountain_ID ORDER BY T1.ID ASC"
    },
    {
        "record_name": "2337@y_name@ASC",
        "db_id": "mountain_photos_robust",
        "target": "Visualize BAR SELECT T1.name , T1.ID FROM mountain AS T1 JOIN photos AS T2 ON T1.ID = T2.mountain_ID ORDER BY T1.ID ASC",
        "nlq": "Draw a bar chart for what are the id and name of the mountains that have at least 2 photos?, I want to sort by the id in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_ID ORDER BY T1.id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC",
            "Visualize PIE SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_ID ORDER BY T1.id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.ID FROM mountain AS T1 JOIN photos AS T2 ON T1.ID = T2.mountain_ID ORDER BY T1.ID ASC"
    },
    {
        "record_name": "1000",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "nlq": "Compare the frequency of product names using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name"
    },
    {
        "record_name": "1000",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "nlq": "Show me a bar chart with the product name and their frequency.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name"
    },
    {
        "record_name": "1000",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "nlq": "Bar chart x axis product name y axis how many product name",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name"
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, and show from low to high by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC"
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of code , and group by attribute name in a bar chart, and could you list in asc by the Y?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC"
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For those records from the products and each product's manufacturer, find name and the sum of code , and group by attribute name, and visualize them by a bar chart, and order in ascending by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC"
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of code , and group by attribute name, sort total number of code in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC"
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, and show from low to high by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC"
    },
    {
        "record_name": "849",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY",
        "nlq": "How many documents are created in each day? Bin the document date by weekday and group by document type with a stacked bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date BIN Date_Stored BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY"
    },
    {
        "record_name": "849",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY",
        "nlq": "Show the number of documents created in each day and bin document date by weekday and group by document type with a stacked bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date BIN Date_Stored BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY"
    },
    {
        "record_name": "2080@y_name@DESC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT organization_information , COUNT(organization_information) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_ID = T2.organization_ID GROUP BY Type_of_Thing_Code ,  organization_information ORDER BY COUNT(organization_information) DESC",
        "nlq": "Give me a stacked bar chart to show how many things in different types of each thing, and the details of the organization that owns it, I want to show in descending by the Y-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Type_of_Thing_Code, COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details, Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY COUNT(organization_details) ASC",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY COUNT(organization_details) DESC",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY organization_details DESC",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY organization_details ASC",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details , Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_ID = T2.organization_ID GROUP BY organization_information , Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC"
    },
    {
        "record_name": "1709",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID",
        "nlq": "Visualize a scatter chart on what are total salaries and department id for each department that has more than 2 employees?",
        "predict_rag_nlq": "Visualize SCATTER SELECT SUM(salary) AS total_salaries, department_id FROM employees GROUP BY department_id HAVING COUNT(employee_id) > 2",
        "rag_dvqs": [
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary > ( SELECT AVG(salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID"
    },
    {
        "record_name": "1709",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID",
        "nlq": "plot scatter on what are total salaries and department id for each department that has more than 2 employees?",
        "predict_rag_nlq": "Visualize SCATTER SELECT SUM(salary) AS total_salaries, department_id FROM employees GROUP BY department_id HAVING COUNT(employee_id) > 2",
        "rag_dvqs": [
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary > ( SELECT AVG(salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT DEPT_ID , SUM(wage) FROM employees GROUP BY DEPT_ID",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID"
    },
    {
        "record_name": "1709",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID",
        "nlq": "What are total salaries and department id for each department that has more than 2 employees. Show scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT SUM(salary) , department_id FROM employees GROUP BY department_id HAVING COUNT(employee_id) > 2",
        "rag_dvqs": [
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT SUM(wage) , Dept_ID FROM employees GROUP BY Dept_ID",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT SUM(wage) , Dept_ID FROM employees GROUP BY Dept_ID"
    },
    {
        "record_name": "1709",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID",
        "nlq": "Scatter plot to show department id on x axis and sum salary on y axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID",
        "rag_dvqs": [
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT T1.SALARY , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT DEPT_ID , SUM(wage) FROM employees GROUP BY Dept_ID",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Dept_ID , SUM(wage) FROM employees GROUP BY Dept_ID"
    },
    {
        "record_name": "863@y_name@DESC",
        "db_id": "cre_Drama_Workshop_Groups_robust",
        "target": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "nlq": "Give me a bar chart for how many actual delivery date of each actual delivery date, and rank total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
            "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
            "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY"
    },
    {
        "record_name": "863@y_name@DESC",
        "db_id": "cre_Drama_Workshop_Groups_robust",
        "target": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "nlq": "Show all the actual delivery dates and bin by weekday in a bar chart, and sort in desc by the y-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
            "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
            "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY"
    },
    {
        "record_name": "2997@y_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize BAR SELECT T1.investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_class_code = \"SALE\" ORDER BY T1.investor_id DESC",
        "nlq": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" by a bar chart, list from high to low by the Y.",
        "predict_rag_nlq": "Visualize BAR SELECT investor_details, investor_id FROM investors AS i JOIN transactions AS t ON i.investor_id = t.investor_id WHERE t.transaction_type_code = \"SALE\" GROUP BY investor_details, investor_id ORDER BY investor_details DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id ASC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Investor_details , investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_class_code = \"SALE\" ORDER BY investor_id DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT INVESTOR_DETAILS , INVESTOR_ID FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_class_code = \"SALE\" ORDER BY INVESTOR_ID DESC"
    },
    {
        "record_name": "2997@y_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize BAR SELECT T1.investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_class_code = \"SALE\" ORDER BY T1.investor_id DESC",
        "nlq": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\" Plot them as bar chart, sort in desc by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.investor_details, T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" GROUP BY T1.investor_details, T1.investor_id HAVING COUNT(T1.investor_id) >= 2 ORDER BY T1.investor_id DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id ASC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\"",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_class_code = \"SALE\" ORDER BY T1.investor_id DESC"
    },
    {
        "record_name": "2581@x_name@ASC",
        "db_id": "phone_market_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.MarketID = T2.MarketID JOIN phone AS T3 ON T1.PhoneID = T3.PhoneID GROUP BY Name ORDER BY Name ASC",
        "nlq": "I want to compare the number of the names of phones by a bar chart, and list by the Name in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.MarketID = T2.MarketID JOIN phone AS T3 ON T1.PhoneID = T3.PhoneID GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.MarketID = T2.MarketID JOIN phone AS T3 ON T1.PhoneID = T3.PhoneID GROUP BY Name ORDER BY Name ASC"
    },
    {
        "record_name": "2581@x_name@ASC",
        "db_id": "phone_market_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.MarketID = T2.MarketID JOIN phone AS T3 ON T1.PhoneID = T3.PhoneID GROUP BY Name ORDER BY Name ASC",
        "nlq": "Show the number of names of phones in a bar chart, list by the Name in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.MarketID = T2.MarketID JOIN phone AS T3 ON T1.PhoneID = T3.PhoneID GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.MarketID = T2.MarketID JOIN phone AS T3 ON T1.PhoneID = T3.PhoneID GROUP BY Name ORDER BY Name ASC"
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company_robust",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "nlq": "Give me a histogram for how many books fall into each category?, list X-axis in desc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company_robust",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "nlq": "Show the total number from each category, I want to list in desc by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company_robust",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "nlq": "Show all book categories and the number of books in each category with a bar chart, and show by the names from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company_robust",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "nlq": "How many books fall into each category, I want to list in desc by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company_robust",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "nlq": "Show all book categories and the number of books in each category, I want to list in desc by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company_robust",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "nlq": "Visualize a bar chart for how many books fall into each category?, show by the names from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "3063",
        "db_id": "tvshow_robust",
        "target": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "nlq": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a pie chart",
        "predict_rag_nlq": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "rag_dvqs": [
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize PIE SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_debugged_db_ann": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option"
    },
    {
        "record_name": "3063",
        "db_id": "tvshow_robust",
        "target": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "nlq": "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT Network FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option"
    },
    {
        "record_name": "3063",
        "db_id": "tvshow_robust",
        "target": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "nlq": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a pie chart",
        "predict_rag_nlq": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "rag_dvqs": [
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize PIE SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_debugged_db_ann": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option"
    },
    {
        "record_name": "3063",
        "db_id": "tvshow_robust",
        "target": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "nlq": "A pie chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?",
        "predict_rag_nlq": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "rag_dvqs": [
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize PIE SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_debugged_db_ann": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option"
    },
    {
        "record_name": "1576",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "nlq": "For all employees who have the letters D or S in their first name, a scatter chart shows the correlation between  employee_id and  commission_pct .",
        "predict_rag_nlq": "Visualize SCATTER SELECT employee_id, commission_pct FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'"
    },
    {
        "record_name": "1576",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "nlq": "For all employees who have the letters D or S in their first name, what is the relationship between  employee_id and  commission_pct ?",
        "predict_rag_nlq": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT COMMISSION_PCT , DEPT_ID FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT COMMISSION_PCT , Dept_ID FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'"
    },
    {
        "record_name": "1576",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "nlq": "For all employees who have the letters D or S in their first name, draw a scatter chart about the correlation between  employee_id and  commission_pct .",
        "predict_rag_nlq": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'"
    },
    {
        "record_name": "1576",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "nlq": "For all employees who have the letters D or S in their first name, return a scatter chart about the correlation between  employee_id and  commission_pct .",
        "predict_rag_nlq": "Visualize SCATTER SELECT EMPLOYEE_ID, COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT COMMISSION_PCT , DEPT_ID FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT COMMISSION_PCT , Dept_ID FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'"
    },
    {
        "record_name": "1576",
        "db_id": "hr_1_robust",
        "target": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "nlq": "For all employees who have the letters D or S in their first name, visualize a scatter chart about the correlation between  employee_id and  commission_pct .",
        "predict_rag_nlq": "Visualize SCATTER SELECT employee_id, COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT employee_id , COMMISSION_PCT FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'"
    },
    {
        "record_name": "1899@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , Dept_ID FROM employees ORDER BY Dept_ID DESC",
        "nlq": "Use a histogram to show the department's id and corresponding employees' first name, and order by the y axis in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Dept_ID FROM employees ORDER BY Dept_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Dept_ID FROM employees ORDER BY Dept_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , Dept_ID FROM employees ORDER BY Dept_ID DESC"
    },
    {
        "record_name": "1899@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT Fname , Dept_ID FROM employees ORDER BY Dept_ID DESC",
        "nlq": "Show me department_id by first name in a histogram, and show by the y axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Dept_ID FROM employees ORDER BY Fname DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Dept_ID FROM employees ORDER BY Fname DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , Dept_ID FROM employees ORDER BY Lname DESC"
    },
    {
        "record_name": "583@x_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN course AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY EMPLOYEE_FIRST_NAME ORDER BY EMPLOYEE_FIRST_NAME ASC",
        "nlq": "How many courses each teacher taught? Show me a bar chart, I want to rank bars in ascending order please.",
        "predict_rag_nlq": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE JOIN PROFESSOR AS T4 ON T2.EMPLOYEE_NUM = T4.EMPLOYEE_NUM GROUP BY EMPLOYEE_FIRST_NAME ORDER BY EMPLOYEE_FIRST_NAME ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE JOIN PROFESSOR AS T4 ON T2.EMPLOYEE_NUM = T4.EMPLOYEE_NUM GROUP BY EMPLOYEE_FIRST_NAME ORDER BY EMPLOYEE_FIRST_NAME ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN COURSE AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE JOIN PROFESSOR AS T4 ON T2.EMPLOYEE_NUM = T4.EMPLOYEE_NUM GROUP BY T2.EMPLOYEE_FIRST_NAME ORDER BY T2.EMPLOYEE_FIRST_NAME ASC"
    },
    {
        "record_name": "583@x_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM JOIN course AS T3 ON T1.COURSE_CODE = T3.COURSE_CODE GROUP BY EMPLOYEE_FIRST_NAME ORDER BY EMPLOYEE_FIRST_NAME ASC",
        "nlq": "Show the number of courses each instructor taught in a bar chart, show in asc by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM GROUP BY EMPLOYEE_FIRST_NAME ORDER BY EMPLOYEE_FIRST_NAME ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMPLOYEE_FIRST_NAME , COUNT(EMPLOYEE_FIRST_NAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROFESSOR_NUM = T2.EMPLOYEE_NUM GROUP BY EMPLOYEE_FIRST_NAME ORDER BY EMPLOYEE_FIRST_NAME ASC"
    },
    {
        "record_name": "834",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code",
        "nlq": "Show the number of documents for different budget type code in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code"
    },
    {
        "record_name": "834",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code",
        "nlq": "Return a pie chart to show how many documents for different budget type code.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code"
    },
    {
        "record_name": "578@y_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM student AS T1 JOIN enroll AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC",
        "nlq": "Find the number of students who took some course and got A or C and group by last name in a bar chart, show by the y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY STU_LNAME ASC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) DESC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY STU_LNAME DESC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) ASC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) DESC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME DESC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME ASC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC"
    },
    {
        "record_name": "578@y_name@ASC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM student AS T1 JOIN enroll AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC",
        "nlq": "How many students taking a course who received an A or C? Group by students' last name with a bar chart, display in ascending by the the number of stu lname.",
        "predict_rag_nlq": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY STU_LNAME ASC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) DESC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY STU_LNAME DESC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) ASC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) DESC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME DESC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME ASC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT STUDENT_LAST_NAME , COUNT(STUDENT_LAST_NAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STUDENT_NUM = T2.STUDENT_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STUDENT_LAST_NAME ORDER BY COUNT(STUDENT_LAST_NAME) ASC"
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Visualize a scatter chart on what is the total amount of grants given by each organisations? Also list the organisation id.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.organisation_id , SUM(T1.grant_amount) AS total_grant_amount FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id"
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Scatter chart. what is the total amount of grants given by each organisations? Also list the organisation id.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.organisation_id, SUM(T1.grant_amount) AS total_grant_amount FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT organisation_id , SUM(grant_amount) FROM Grants GROUP BY organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT ORGANISATION_ID , SUM(grant_quantity) FROM Grants GROUP BY ORGANISATION_ID"
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "What is the total amount of grants given by each organisations? Also list the organisation id. ",
        "predict_rag_nlq": "Visualize BAR SELECT T2.organization_info, SUM(T1.grant_quantity) AS total_grant_amount, T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info, T1.organisation_id",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.organization_info , SUM(T1.grant_quantity) , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info , T1.organisation_id",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.organization_info , SUM(T1.grant_quantity) , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info , T1.organisation_id"
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Scatter chart. what is the total amount of grant money given to each organization and what is its id?",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.organization_info, SUM(T1.grant_quantity) AS total_grant_amount FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info, T2.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T2.organization_info , SUM(T1.grant_quantity) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info , T2.organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T2.organization_info , SUM(T1.grant_quantity) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info , T2.organisation_id"
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "plot scatter on what is the total amount of grant money given to each organization and what is its id?",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.organization_info , SUM(T1.grant_quantity) AS total_grant_amount FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info, T2.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T2.organization_info , SUM(T1.grant_quantity) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info , T2.organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T2.organization_info , SUM(T1.grant_quantity) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info , T2.organisation_id"
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "What is the total amount of grant money given to each organization and what is its id. Show the correlation.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.organization_info, T1.organisation_id, SUM(T1.grant_quantity) AS total_grant_amount FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info, T1.organisation_id",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.organization_info , T1.organisation_id , SUM(T1.grant_quantity) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info , T1.organisation_id",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.organization_info , T1.organisation_id , SUM(T1.grant_quantity) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organization_info , T1.organisation_id"
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize SCATTER SELECT sum(grant_quantity) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Plot a scatter chart, sum(grant amount) by organisation_id.",
        "predict_rag_nlq": "Visualize SCATTER SELECT organisation_id , sum(grant_amount) FROM Grants GROUP BY organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
            "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details",
            "Visualize PIE SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details",
            "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY organisation_details ASC",
            "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY organisation_details DESC",
            "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY COUNT(organisation_details) ASC",
            "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY COUNT(organisation_details) DESC",
            "Visualize SCATTER SELECT order_id , sum(product_quantity) FROM Order_items GROUP BY order_id",
            "Visualize SCATTER SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT organisation_id , sum(grant_amount) FROM Grants GROUP BY organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT organisation_id , SUM(grant_quantity) FROM Grants GROUP BY organisation_id"
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and the sum of code , and group by attribute name, order in descending by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, find name and the sum of code , and group by attribute name, and visualize them by a bar chart, and show total number of code from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the sum of code , and group by attribute name, could you list by the y axis in desc?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of name and the sum of code , and group by attribute name, could you display total number in desc order?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC"
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of name and the sum of code , and group by attribute name in a bar chart, and sort y-axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC"
    },
    {
        "record_name": "3002@y_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize BAR SELECT investor_details , COUNT(investor_details) FROM INVESTORS GROUP BY investor_details ORDER BY COUNT(investor_details) DESC",
        "nlq": "Show all investor details, and count them by a bar chart, I want to rank from high to low by the how many investor details please.",
        "predict_rag_nlq": "Visualize BAR SELECT investor_details, COUNT(investor_details) FROM Investors GROUP BY investor_details ORDER BY COUNT(investor_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT investor_details , COUNT(investor_details) FROM Investors GROUP BY investor_details ORDER BY COUNT(investor_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT INVESTOR_DETAILS , COUNT(INVESTOR_DETAILS) FROM Investors GROUP BY INVESTOR_DETAILS ORDER BY COUNT(INVESTOR_DETAILS) DESC"
    },
    {
        "record_name": "3002@y_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize BAR SELECT investor_details , COUNT(investor_details) FROM INVESTORS GROUP BY investor_details ORDER BY COUNT(investor_details) DESC",
        "nlq": "Plot the number of investor details by grouped by investor details as a bar graph, display Y from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT investor_details, COUNT(investor_details) FROM Investors GROUP BY investor_details ORDER BY COUNT(investor_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT investor_details , COUNT(investor_details) FROM Investors GROUP BY investor_details ORDER BY COUNT(investor_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT INVESTOR_DETAILS , COUNT(INVESTOR_DETAILS) FROM Investors GROUP BY INVESTOR_DETAILS ORDER BY COUNT(INVESTOR_DETAILS) DESC"
    },
    {
        "record_name": "1294@y_name@DESC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "nlq": "What is the date of enrollment of the course named \"Spanish\", and count them by a bar chart, and list by the total number in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"
    },
    {
        "record_name": "1294@y_name@DESC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "nlq": "Find the number of the the date of enrollment of the \"Spanish\" course, I want to show in desc by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"
    },
    {
        "record_name": "1294@y_name@DESC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "nlq": "Find the the date of enrollment of the \"Spanish\" course, and count them by a bar chart, and order Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"
    },
    {
        "record_name": "1294@y_name@DESC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "nlq": "A bar chart for finding the number of the the date of enrollment of the \"Spanish\" course, list by the total number in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"
    },
    {
        "record_name": "2698@x_name@DESC",
        "db_id": "school_bus_robust",
        "target": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY hometown_city DESC",
        "nlq": "Show the average age of drivers from the same home city using a bar graph, could you rank X from high to low order?",
        "predict_rag_nlq": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY AVG(years) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY COUNT(Home_city) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY AVG(years) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY AVG(years) DESC"
    },
    {
        "record_name": "2698@x_name@DESC",
        "db_id": "school_bus_robust",
        "target": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY hometown_city DESC",
        "nlq": "Plot the average of age by grouped by home city as a bar graph, could you sort by the bar from high to low?",
        "predict_rag_nlq": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY AVG(years) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY COUNT(Home_city) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY AVG(years) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY AVG(years) DESC"
    },
    {
        "record_name": "2698@x_name@DESC",
        "db_id": "school_bus_robust",
        "target": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY hometown_city DESC",
        "nlq": "Compare the average age of drivers from the same home city with a bar chart, sort in descending by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY hometown_city DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY COUNT(Home_city) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY hometown_city DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT hometown_city , AVG(years) FROM driver GROUP BY hometown_city ORDER BY hometown_city DESC"
    },
    {
        "record_name": "328",
        "db_id": "bike_1_robust",
        "target": "Visualize SCATTER SELECT length , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.identification = T2.start_station_identification GROUP BY T2.start_station_identification",
        "nlq": "For each station, just simply show its longitude and the average duration of trips that started from the station using a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT long , avg(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY long",
        "rag_dvqs": [
            "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
            "Visualize SCATTER SELECT lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY lat",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id",
            "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
            "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY Location",
            "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
            "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
            "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY Work_Type",
            "Visualize SCATTER SELECT T1.driverId , count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT length , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.identification = T2.start_station_identification GROUP BY T2.start_station_identification"
    },
    {
        "record_name": "328",
        "db_id": "bike_1_robust",
        "target": "Visualize SCATTER SELECT length , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.identification = T2.start_station_identification GROUP BY T2.start_station_identification",
        "nlq": "Please return a scatter chart to show each start station's longitude and the corresponding average duration of trips started there.",
        "predict_rag_nlq": "Visualize SCATTER SELECT long , AVG(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY long",
        "rag_dvqs": [
            "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
            "Visualize SCATTER SELECT lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY lat",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
            "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id",
            "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY Location",
            "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
            "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
            "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY Work_Type",
            "Visualize SCATTER SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT long , AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT lat , AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.identification = T2.start_station_identification GROUP BY T2.start_station_identification"
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC",
        "nlq": "Show me about the distribution of meter_700 and meter_100 in a bar chart, order by the Y-axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC"
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC",
        "nlq": "Bar graph to show meter_100 from different meter 700, and order by the meter_100 from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC"
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC",
        "nlq": "Give me the comparison about meter_100 over the meter_700 , and order by the meter_100 from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC"
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC",
        "nlq": "A bar chart shows the distribution of meter_700 and meter_100 , and show y axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC"
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC",
        "nlq": "Find meter_700 and meter_100 , and visualize them by a bar chart, I want to show meter_100 in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC"
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC",
        "nlq": "Visualize a bar chart about the distribution of meter_700 and meter_100 , and I want to show meter_100 in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_seven_hundred , meter_one_hundred FROM swimmer ORDER BY meter_one_hundred DESC"
    },
    {
        "record_name": "1518",
        "db_id": "gas_company_robust",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM Company GROUP BY Headquarters",
        "nlq": "Show the number of companies in each headquarter with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters"
    },
    {
        "record_name": "1518",
        "db_id": "gas_company_robust",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM Company GROUP BY Headquarters",
        "nlq": "How many companies in each headquarter? Plot a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters"
    },
    {
        "record_name": "1518",
        "db_id": "gas_company_robust",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM Company GROUP BY Headquarters",
        "nlq": "Bar chart of how many headquarters from each headquarters",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY Headquarters",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters"
    },
    {
        "record_name": "1204@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname ASC",
        "nlq": "List the number of dogs each owner has in a bar chart that groups by owner's last name, and sort x-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY COUNT(Lname) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY COUNT(Lname) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY COUNT(Lname) ASC"
    },
    {
        "record_name": "1204@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname ASC",
        "nlq": "How many dogs each owner has? Return a bar chart that groups by owner's last name, I want to show in ascending by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname ASC"
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC",
        "nlq": "Draw a bar chart about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and I want to show in ascending by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC"
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC",
        "nlq": "Draw a bar chart of is full time versus how many is full time, and I want to list in asc by the Is_full_time.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC"
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC",
        "nlq": "Return a bar chart about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and list by the X in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC"
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC",
        "nlq": "A bar chart shows the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time, and I want to display from low to high by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY COUNT(ss_full_time) ASC"
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC",
        "nlq": "Give me the comparison about the amount of Is_full_time over the Is_full_time , and group by attribute Is_full_time by a bar chart, list by the x-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC"
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC",
        "nlq": "Show me about the distribution of Is_full_time and the amount of Is_full_time , and group by attribute Is_full_time in a bar chart, I want to show in ascending by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , COUNT(ss_full_time) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time ASC"
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Show me about the distribution of All_Neutral and ACC_Percent in a bar chart, and could you list X in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "A bar chart shows the distribution of All_Neutral and ACC_Percent , and rank by the x-axis from low to high please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Bar chart of acc_percent from each all neutral, and could you show from low to high by the X please?",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY percentage_of_ACC ASC"
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Return a bar chart about the distribution of All_Neutral and ACC_Percent , could you list X in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY percentage_of_ACC ASC"
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Visualize a bar chart about the distribution of All_Neutral and ACC_Percent , and sort by the x-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Give me the comparison about ACC_Percent over the All_Neutral , and could you rank All_Neutral in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_ACC FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "2067",
        "db_id": "loan_1_robust",
        "target": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "nlq": "For each account type, find the average account balance of customers with credit score lower than 50. Show a pie chart.",
        "predict_rag_nlq": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type  BAR SELECT acc_type , avg acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type acc_type",
        "rag_dvqs": [
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_debugged_db_ann": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"
    },
    {
        "record_name": "2067",
        "db_id": "loan_1_robust",
        "target": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "nlq": "what is the average account balance of customers with credit score below 50 for the different account types?",
        "predict_rag_nlq": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "rag_dvqs": [
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC",
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_debugged_db_ann": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"
    },
    {
        "record_name": "2067",
        "db_id": "loan_1_robust",
        "target": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "nlq": "Show me a pie chart for what is the average account balance of customers with credit score below 50 for the different account types?",
        "predict_rag_nlq": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "rag_dvqs": [
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC",
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_debugged_db_ann": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"
    },
    {
        "record_name": "2067",
        "db_id": "loan_1_robust",
        "target": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "nlq": "What is the average account balance of customers with credit score below 50 for the different account types. Show the proportion.",
        "predict_rag_nlq": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "rag_dvqs": [
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC",
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_debugged_db_ann": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder",
        "nlq": "For those records from the products and each product's manufacturer, visualize the relationship between  code and  price , and group by attribute founder.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder"
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder",
        "nlq": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  code and  price , and group by attribute founder.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder"
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder",
        "nlq": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  code and  price , and group by attribute founder.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code, T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder"
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder",
        "nlq": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  code and  price , and group by attribute founder.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder"
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder",
        "nlq": "For those records from the products and each product's manufacturer, show me about the correlation between  code and  price , and group by attribute founder in a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder"
    },
    {
        "record_name": "3004",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM TRANSACTIONS GROUP BY transaction_class_code",
        "nlq": "Show the average transaction amount for different transaction types with a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM Transactions GROUP BY transaction_class_code",
        "rag_dvqs": [
            "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize PIE SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize PIE SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) DESC",
            "Visualize PIE SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code",
            "Visualize PIE SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM Transactions GROUP BY transaction_class_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT TRANSACTION_CLASS_CODE , avg(TRANSACTION_AMOUNT) FROM Transactions GROUP BY TRANSACTION_CLASS_CODE"
    },
    {
        "record_name": "3004",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM TRANSACTIONS GROUP BY transaction_class_code",
        "nlq": "Show the average transaction amount for different transaction types. Visualize by pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM TRANSACTIONS GROUP BY transaction_class_code",
        "rag_dvqs": [
            "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize PIE SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC",
            "Visualize PIE SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) DESC",
            "Visualize PIE SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code",
            "Visualize PIE SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM Transactions GROUP BY transaction_class_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT TRANSACTION_CLASS_CODE , avg(TRANSACTION_AMOUNT) FROM Transactions GROUP BY TRANSACTION_CLASS_CODE"
    },
    {
        "record_name": "3004",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM TRANSACTIONS GROUP BY transaction_class_code",
        "nlq": "Compute the total the average of amount of transaction across transaction type code as a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM Transactions GROUP BY transaction_class_code",
        "rag_dvqs": [
            "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize PIE SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize PIE SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) DESC",
            "Visualize PIE SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code",
            "Visualize PIE SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT transaction_class_code , avg(transaction_amount) FROM Transactions GROUP BY transaction_class_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT TRANSACTION_CLASS_CODE , avg(TRANSACTION_AMOUNT) FROM Transactions GROUP BY TRANSACTION_CLASS_CODE"
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a line chart about the change of commission_pct over hire_date , and sort X-axis from low to high order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a line chart shows the change of commission_pct over hire_date, and sort X-axis from low to high order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a line chart shows the trend of commission_pct over hire_date , show X-axis in ascending order please.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a line chart about the change of commission_pct over hire_date , show in asc by the X-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the change of commission_pct over hire_date in a line chart, order from low to high by the x-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a line chart about the change of commission_pct over hire_date , rank x axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , COMMISSION_PCT FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1002",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.productID = T2.productID GROUP BY T1.product_name",
        "nlq": "Show the product name and total order quantity for each product with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
            "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize BAR SELECT product_name , count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY product_name",
            "Visualize PIE SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT T3.product_name , AVG(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize PIE SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.productID = T2.productID GROUP BY T1.product_name"
    },
    {
        "record_name": "1002",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.productID = T2.productID GROUP BY T1.product_name",
        "nlq": "Show the product name and total order quantity for each product. Show bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
            "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize BAR SELECT product_name , count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY product_name",
            "Visualize PIE SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT T3.product_name , AVG(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize PIE SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.productID = T2.productID GROUP BY T1.product_name"
    },
    {
        "record_name": "2852",
        "db_id": "store_1_robust",
        "target": "Visualize BAR SELECT FName , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.Customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "nlq": "List the top 10 customers by total gross sales. Compare the total gross sales of customers by their first name.",
        "predict_rag_nlq": "Visualize BAR SELECT FName, SUM(total) AS total_gross_sales FROM customers JOIN invoices ON customers.id = invoices.Customer_id GROUP BY customers.id ORDER BY total_gross_sales DESC LIMIT 10",
        "rag_dvqs": [
            "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
            "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
            "Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY COUNT(customer_details) DESC",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY customer_details DESC",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY COUNT(customer_details) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) ASC",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY customer_details ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY customer_last_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FName , SUM(total) FROM customers AS T1 JOIN invoices AS T2 ON T2.Customer_id = T1.id GROUP BY T1.id ORDER BY SUM(total) DESC LIMIT 10",
        "predict_debugged_db_ann": "Visualize BAR SELECT FName , SUM(total) FROM customers AS T1 JOIN invoices AS T2 ON T2.Customer_id = T1.id GROUP BY T1.id ORDER BY SUM(total) DESC LIMIT 10"
    },
    {
        "record_name": "2852",
        "db_id": "store_1_robust",
        "target": "Visualize BAR SELECT FName , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.Customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "nlq": "What are the top 10 customers' first names with the highest gross sales, and also what are the sales?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FName , SUM(T2.Unit_Price * T2.Quantity) AS Gross_Sales FROM CUSTOMERS AS T1 JOIN INVOICES AS T2 ON T1.id = T2.Customer_id GROUP BY T1.FName ORDER BY Gross_Sales DESC LIMIT 10",
        "rag_dvqs": [
            "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FName , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.Customer_id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FName , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.Customer_id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10"
    },
    {
        "record_name": "2852",
        "db_id": "store_1_robust",
        "target": "Visualize BAR SELECT FName , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.Customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "nlq": "What are the top 10 customers' first names with the highest gross sales, and also what are the sales? Visualize the result with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FName , SUM(T2.Unit_Price * T2.amount) AS Gross_Sales FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.Customer_id GROUP BY T1.FName ORDER BY Gross_Sales DESC LIMIT 10",
        "rag_dvqs": [
            "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , sum(T2.Sales) FROM singer AS T1 JOIN song AS T2 ON T1.Singer_ID = T2.Singer_ID GROUP BY T1.Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FName , SUM(T2.Unit_Price * T2.amount) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.Customer_id GROUP BY T1.FName ORDER BY SUM(T2.Unit_Price * T2.amount) DESC LIMIT 10",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FName , SUM(T2.Unit_Price * T2.amount) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.Customer_id GROUP BY T1.FName ORDER BY SUM(T2.Unit_Price * T2.amount) DESC LIMIT 10"
    },
    {
        "record_name": "443@x_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
        "nlq": "Give me a bar chart showing the number of films for each director, and I want to display by the x-axis in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC"
    },
    {
        "record_name": "443@x_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
        "nlq": "What is the number of films of each director? Return a bar chart, and could you order from high to low by the x axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC"
    },
    {
        "record_name": "443@x_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
        "nlq": "Bar graph to show the number of directed by from different directed by, and I want to sort by the x axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC"
    },
    {
        "record_name": "1624@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "nlq": "Group and count the city attribute of the location table to visualize a bar chart, show by the names from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) ASC",
            "Visualize BAR SELECT STATE_PROVINCE , COUNT(STATE_PROVINCE) FROM locations GROUP BY STATE_PROVINCE ORDER BY COUNT(STATE_PROVINCE) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC"
    },
    {
        "record_name": "1624@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "nlq": "Give me a bar chart to compare the number of departments located in different cities, and rank in ascending by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City ASC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC"
    },
    {
        "record_name": "1624@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "nlq": "Create a bar chart showing the number of city across city, order in asc by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) ASC",
            "Visualize BAR SELECT STATE_PROVINCE , COUNT(STATE_PROVINCE) FROM locations GROUP BY STATE_PROVINCE ORDER BY COUNT(STATE_PROVINCE) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC"
    },
    {
        "record_name": "2749@y_name@DESC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY COUNT(class) DESC",
        "nlq": "Give me a bar chart showing the total number of ships' classes that do not have a captain, show Y in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY class ORDER BY COUNT(class) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain) GROUP BY class ORDER BY COUNT(class) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT class , COUNT(class) FROM Ship WHERE SHIP_ID NOT IN(SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY COUNT(class) DESC"
    },
    {
        "record_name": "2749@y_name@DESC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY COUNT(class) DESC",
        "nlq": "For those ships that do not have a captain, tell me the total number of their classes using a pie chart, and rank in desc by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY class ORDER BY COUNT(class) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT class , COUNT(class) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain) GROUP BY class ORDER BY COUNT(class) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT class , COUNT(class) FROM Ship WHERE SHIP_ID NOT IN(SELECT SHIP_ID FROM captain) GROUP BY class ORDER BY COUNT(class) DESC"
    },
    {
        "record_name": "2055@y_name@ASC",
        "db_id": "journal_committee_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "nlq": "Bar chart x axis name y axis how many name, and could you sort in ascending by the Y?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC"
    },
    {
        "record_name": "2055@y_name@ASC",
        "db_id": "journal_committee_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "nlq": "Group and count the name attribute for visualizing a bar chart, and display total number in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC"
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM student GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC",
        "nlq": "how many students are in each department?, and display X from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPARTMENT_CODE, COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPARTMENT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPARTMENT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM student GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC",
        "nlq": "Find the number of students for each department Plot them as bar chart, and display in desc by the names.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPARTMENT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC"
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM student GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC",
        "nlq": "Return a histogram on how many students are in each department?, and I want to order by the names from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPARTMENT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM student GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC",
        "nlq": "How many students are in each department Visualize by bar chart, and display X from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPARTMENT_CODE, COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPARTMENT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPARTMENT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM student GROUP BY DEPARTMENT_CODE ORDER BY DEPARTMENT_CODE DESC",
        "nlq": "Draw a bar chart of dept code versus the total number, rank by the bar in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPARTMENT_CODE , count(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPARTMENT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPARTMENT_CODE ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "3227",
        "db_id": "wine_1_robust",
        "target": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY Year",
        "nlq": "For those wines whose price is bigger than 100, count their total number of each year and sort by year in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR",
            "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , COUNT(Year) FROM wine WHERE Price > 100 GROUP BY Year ORDER BY Year"
    },
    {
        "record_name": "2569@x_name@ASC",
        "db_id": "phone_market_robust",
        "target": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "nlq": "Bar chart x axis carrier y axis the number of carrier, show by the X in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC"
    },
    {
        "record_name": "2569@x_name@ASC",
        "db_id": "phone_market_robust",
        "target": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "nlq": "What is the number of carriers of phones? Give me a bar chart, and sort X in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC"
    },
    {
        "record_name": "2569@x_name@ASC",
        "db_id": "phone_market_robust",
        "target": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "nlq": "Can you show a bar chart to visualize the number of carriers?, and I want to display in ascending by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC"
    },
    {
        "record_name": "160",
        "db_id": "baseball_1_robust",
        "target": "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
        "nlq": "Give me a bar chart that bins the year into day of the week interval, and return the average number of times the team Boston Red Stockings won in the postseasons.",
        "predict_rag_nlq": "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY AVG(count(*)) ASC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY AVG(count(*)) DESC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , SUM(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , SUM(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY SUM(count(*)) ASC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , SUM(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY SUM(count(*)) DESC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY COUNT(year) ASC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY COUNT(year) DESC BIN year BY WEEKDAY",
            "Visualize LINE SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT year , AVG(count(*) ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT year , AVG(COUNT(*) ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY"
    },
    {
        "record_name": "2694@y_name@DESC",
        "db_id": "school_bus_robust",
        "target": "Visualize BAR SELECT category , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY count(*) DESC",
        "nlq": "Show the type of school and the number of buses for each type in a bar chart, display y axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT category , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT category , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT category , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "2694@y_name@DESC",
        "db_id": "school_bus_robust",
        "target": "Visualize BAR SELECT category , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY count(*) DESC",
        "nlq": "Show the type of school and the number of buses for each type, and I want to list by the y axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT category , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT category , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT category , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.SchoolID = T2.SchoolID GROUP BY T2.category ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "2551@x_name@DESC",
        "db_id": "pets_1_robust",
        "target": "Visualize BAR SELECT Pet_ID , weight FROM pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
        "nlq": "A bar chart about what is the id and weight of every pet who is older than 1?, could you list by the names in descending?",
        "predict_rag_nlq": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY LName DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
            "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY Pet_ID DESC"
    },
    {
        "record_name": "2551@x_name@DESC",
        "db_id": "pets_1_robust",
        "target": "Visualize BAR SELECT Pet_ID , weight FROM pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
        "nlq": "What is the id and weight of every pet who is older than 1, and show by the bars in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC",
            "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC"
    },
    {
        "record_name": "2551@x_name@DESC",
        "db_id": "pets_1_robust",
        "target": "Visualize BAR SELECT Pet_ID , weight FROM pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
        "nlq": "Visualize a bar chart for what is the id and weight of every pet who is older than 1?, and I want to list in desc by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
            "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY Pet_ID DESC"
    },
    {
        "record_name": "2551@x_name@DESC",
        "db_id": "pets_1_robust",
        "target": "Visualize BAR SELECT Pet_ID , weight FROM pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
        "nlq": "Find the id and weight of all pets whose age is older than 1 Visualize by bar chart, sort in descending by the names.",
        "predict_rag_nlq": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY LName DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1",
            "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY Pet_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pet_ID , weight FROM Pets WHERE pet_age > 1 ORDER BY Pet_ID DESC"
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_home ,  ACC_Street ORDER BY teamID DESC",
        "nlq": "Find ACC_Road and Team_ID , and group by attribute ACC_Home, and visualize them by a bar chart, and list from high to low by the Team_ID.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_Home , ACC_Street ORDER BY teamID DESC"
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_home ,  ACC_Street ORDER BY teamID DESC",
        "nlq": "A bar chart shows the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home, and list from high to low by the Team_ID.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_Home , ACC_Street ORDER BY teamID DESC"
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_home ,  ACC_Street ORDER BY teamID DESC",
        "nlq": "Give me the comparison about Team_ID over the ACC_Road , and group by attribute ACC_Home, and display Y in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_Home , ACC_Street ORDER BY teamID DESC"
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_home ,  ACC_Street ORDER BY teamID DESC",
        "nlq": "Stacked bar chart of team_id for with each ACC_Home in each acc road, display Y in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_Home , ACC_Street ORDER BY teamID DESC"
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_home ,  ACC_Street ORDER BY teamID DESC",
        "nlq": "Draw a bar chart about the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home, list Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_Home , ACC_Street ORDER BY teamID DESC"
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_home ,  ACC_Street ORDER BY teamID DESC",
        "nlq": "Show me about the distribution of ACC_Road and Team_ID , and group by attribute ACC_Home in a bar chart, list from high to low by the Team_ID.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , teamID FROM basketball_match GROUP BY ACC_Home , ACC_Street ORDER BY teamID DESC"
    },
    {
        "record_name": "2760@y_name@ASC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "nlq": "What is the total number of different nationalities of all ships? Give me a bar graph, and I want to list by the Y from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC"
    },
    {
        "record_name": "2760@y_name@ASC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "nlq": "Return a bar chart showing the total number of ships' nationalities, display from low to high by the how many nationality.",
        "predict_rag_nlq": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC"
    },
    {
        "record_name": "2760@y_name@ASC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "nlq": "Show me the comparison of the total number of all ships' nationalities with a bar graph, and display from low to high by the how many nationality.",
        "predict_rag_nlq": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC"
    },
    {
        "record_name": "2760@y_name@ASC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "nlq": "Bar graph to show how many nationality from different nationality, display from low to high by the how many nationality.",
        "predict_rag_nlq": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Nationality ,  Type ORDER BY COUNT(Type) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , COUNT(citizenship) FROM ship GROUP BY citizenship ORDER BY COUNT(citizenship) ASC"
    },
    {
        "record_name": "1116@y_name@DESC",
        "db_id": "department_store_robust",
        "target": "Visualize BAR SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "nlq": "What is the highest price of product, grouped by product type? Show a bar chart, list by the maximal product price in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_category_code , max(product_price) FROM Products GROUP BY product_category_code ORDER BY max(product_price) DESC"
    },
    {
        "record_name": "1116@y_name@DESC",
        "db_id": "department_store_robust",
        "target": "Visualize BAR SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "nlq": "Bar chart of maximal product price from each product type code, show in desc by the maximal product price please.",
        "predict_rag_nlq": "Visualize BAR SELECT product_category_code , max(product_price) FROM Products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_category_code , max(product_price) FROM Products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_category_code , max(product_price) FROM Products GROUP BY product_category_code ORDER BY max(product_price) DESC"
    },
    {
        "record_name": "1116@y_name@DESC",
        "db_id": "department_store_robust",
        "target": "Visualize BAR SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "nlq": "Give the maximum product price for each product type in a bar chart, order in descending by the maximal product price please.",
        "predict_rag_nlq": "Visualize BAR SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_category_code , max(product_price) FROM products GROUP BY product_category_code ORDER BY max(product_price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_category_code , max(product_price) FROM Products GROUP BY product_category_code ORDER BY max(product_price) DESC"
    },
    {
        "record_name": "1155",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "nlq": "List the number of the treatments for each dog of the rarest breed in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize PIE SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY date_departed DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1) GROUP BY name",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY name"
    },
    {
        "record_name": "1155",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "nlq": "How many treatments for each dog of the rarest breed? Give me a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize PIE SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY date_departed DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1)"
    },
    {
        "record_name": "2735@x_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT banner , COUNT(banner) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain WHERE rank = 'Midshipman') GROUP BY banner ORDER BY banner ASC",
        "nlq": "What is the total number of flags of ships that do not have a captain with the rank of Midshipman? Show the result using a bar chart, and display by the X in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT banner , COUNT(banner) FROM SHIP WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain WHERE Level = 'Midshipman') GROUP BY banner ORDER BY banner ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY COUNT(Flag) ASC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag DESC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY COUNT(Flag) DESC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT banner , COUNT(banner) FROM Ship WHERE SHIP_ID NOT IN(SELECT SHIP_ID FROM captain WHERE Level = 'Midshipman') GROUP BY banner ORDER BY banner ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT banner , COUNT(banner) FROM Ship WHERE SHIP_ID NOT IN(SELECT SHIP_ID FROM captain WHERE Level = 'Midshipman') GROUP BY banner ORDER BY banner ASC"
    },
    {
        "record_name": "2735@x_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT banner , COUNT(banner) FROM ship WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain WHERE rank = 'Midshipman') GROUP BY banner ORDER BY banner ASC",
        "nlq": "Show me the total number of the flag of ships that are not steered by any captain with Midshipman rank using a bar graph, show in ascending by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT banner , COUNT(banner) FROM SHIP WHERE SHIP_ID NOT IN (SELECT SHIP_ID FROM captain WHERE Level = 'Midshipman') GROUP BY banner ORDER BY banner ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY COUNT(Flag) ASC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag DESC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY COUNT(Flag) DESC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT banner , COUNT(banner) FROM Ship WHERE SHIP_ID NOT IN(SELECT SHIP_ID FROM captain WHERE Level = 'Midshipman') GROUP BY banner ORDER BY banner ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT banner , COUNT(banner) FROM Ship WHERE SHIP_ID NOT IN(SELECT SHIP_ID FROM captain WHERE Level = 'Midshipman') GROUP BY banner ORDER BY banner ASC"
    },
    {
        "record_name": "344@y_name@DESC",
        "db_id": "bike_1_robust",
        "target": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "nlq": "What is the total cloud cover rates of the dates (bin into year interval) that had the top 5 cloud cover rates? You can draw me a bar chart for this purpose, rank in descending by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR ORDER BY SUM(cloud_cover) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather BIN date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR"
    },
    {
        "record_name": "344@y_name@DESC",
        "db_id": "bike_1_robust",
        "target": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "nlq": "For those dates that have the 5 highest cloud cover rates, please bin the date into Year interval and compute their total cloud cover, and order in desc by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR ORDER BY SUM(cloud_cover) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather BIN date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR"
    },
    {
        "record_name": "344@y_name@DESC",
        "db_id": "bike_1_robust",
        "target": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "nlq": "Bar chart x axis date y axis total number of cloud cover, and show Y from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather BIN date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY"
    },
    {
        "record_name": "344@y_name@DESC",
        "db_id": "bike_1_robust",
        "target": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "nlq": "I want a bar chart to show the total cloud cover of the dates that have the 5 highest cloud cover rates each year, and rank in descending by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR"
    },
    {
        "record_name": "1962",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
        "nlq": "For all employees in the Finance department, compare the total number of different job id using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE ASC",
            "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID"
    },
    {
        "record_name": "1962",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
        "nlq": "Give me a bar chart that groups and count the job id for all employees in the Finance department.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE",
            "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
            "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID"
    },
    {
        "record_name": "1284@x_name@DESC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "nlq": "Find the dates of the tests taken with result \"Pass\", and count them by a bar chart, and rank names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC"
    },
    {
        "record_name": "1284@x_name@DESC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "nlq": "A bar chart for finding the number of the dates of the tests taken with result \"Pass\", show X-axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" ORDER BY date_test_taken DESC BIN date_test_taken BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken ASC BIN date_test_taken BY DAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY"
    },
    {
        "record_name": "1284@x_name@DESC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "nlq": "Find the number of the dates of the tests taken with result \"Pass\", and I want to list by the bars from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC"
    },
    {
        "record_name": "1284@x_name@DESC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "nlq": "Which tests have \"Pass\" results? Return the dates when the tests were taken, and count them by a bar chart, rank by the X in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY",
            "Visualize BAR SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC"
    },
    {
        "record_name": "3195@x_name@ASC",
        "db_id": "voter_1_robust",
        "target": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
        "nlq": "List the states of all votes, compute the total number of states, and compute the average of their vote id with a bar chart, and order by the x axis in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) DESC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) ASC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT STATE , AVG(VOTE_ID) FROM VOTES GROUP BY STATE ORDER BY STATE ASC"
    },
    {
        "record_name": "3195@x_name@ASC",
        "db_id": "voter_1_robust",
        "target": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
        "nlq": "Bar chart x axis state y axis the average of vote id, and list bar from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) DESC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) ASC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) DESC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY AVG(VOTE_ID) ASC"
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and sort by the bar from low to high please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Dept_ID) ASC"
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of department_id over the job_id , and group by attribute job_id, and I want to order x-axis in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Dept_ID) ASC"
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and display by the bar in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Dept_ID) ASC"
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the sum of department_id , and group by attribute job_id, and display by the bar in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Dept_ID) ASC"
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the sum of department_id , and group by attribute job_id, and could you order bars in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
    },
    {
        "record_name": "1566",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees who have the letters D or S in their first name, show me about the distribution of  job_id and the sum of department_id , and group by attribute job_id in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPT_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID"
    },
    {
        "record_name": "1566",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of department_id over the  job_id , and group by attribute job_id.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID"
    },
    {
        "record_name": "1566",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of  job_id and the sum of department_id , and group by attribute job_id.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPT_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID"
    },
    {
        "record_name": "1566",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of  job_id and the sum of department_id , and group by attribute job_id.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPT_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID"
    },
    {
        "record_name": "1566",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of  job_id and the sum of department_id , and group by attribute job_id.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPT_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(Dept_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' GROUP BY JOB_ID"
    },
    {
        "record_name": "2690@y_name@DESC",
        "db_id": "sakila_1_robust",
        "target": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "nlq": "List the genre name and genre id using a bar chart, list by the category_id in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC"
    },
    {
        "record_name": "2690@y_name@DESC",
        "db_id": "sakila_1_robust",
        "target": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "nlq": "What are the names and ids of the different categories? Show me the bar chart, list by the category_id in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.NAME , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC"
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\"  ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "nlq": "Return the number of the date of birth for all the guests with gender code \"Male\", and could you display by the x axis in asc?",
        "predict_rag_nlq": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY Visit_Date ASC BIN Visit_Date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR"
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\"  ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "nlq": "What are the number of dates of birth of all the guests whose gender is \"Male\"?, I want to show x axis in ascending order.",
        "predict_rag_nlq": "Visualize A: Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\"  ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR"
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\"  ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "nlq": "What are dates of birth of all the guests whose gender is \"Male\", and count them by a line chart, list date_of_birth in asc order.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR"
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\"  ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "nlq": "Return the date of birth for all the guests with gender code \"Male\", and count them by a line chart, I want to show x axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY Visit_Date ASC BIN Visit_Date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR"
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\"  ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "nlq": "A line chart for returning the number of the date of birth for all the guests with gender code \"Male\", I want to show x axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT Visit_Date , COUNT(Visit_Date) FROM VISITS  ORDER BY Visit_Date ASC BIN Visit_Date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT birthdate , COUNT(birthdate) FROM Guests WHERE sex_code = \"Male\" ORDER BY birthdate ASC BIN birthdate BY YEAR"
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "nlq": "Return the ids and details corresponding to projects for which there are more than two documents in a bar chart, show from high to low by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC"
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "nlq": "Return the ids and details corresponding to projects for which there are more than two documents Show bar chart, and show from high to low by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC"
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "nlq": "What is the project id and detail for the project with at least two documents Plot them as bar chart, and order by the y axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC"
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "nlq": "Show me a bar chart for what is the project id and detail for the project with at least two documents?, and order by the y axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC"
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "nlq": "A bar chart about what is the project id and detail for the project with at least two documents?, and list y-axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_information , T1.ProjectID FROM Projects AS T1 JOIN Documents AS T2 ON T1.ProjectID = T2.ProjectID ORDER BY T1.ProjectID DESC"
    },
    {
        "record_name": "2949@y_name@ASC",
        "db_id": "theme_gallery_robust",
        "target": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC",
        "nlq": "Find those themes and years for all exhibitions with ticket prices lower than 15, show me a stacked bar chart that groups by themes, counts year, and the x-axis is Year, show by the Y from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Year"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC"
    },
    {
        "record_name": "2949@y_name@ASC",
        "db_id": "theme_gallery_robust",
        "target": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC",
        "nlq": "Find those themes and years for all exhibitions with ticket prices lower than 15, group by themes, count year, and the x-axis is Year, show from low to high by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Year"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE price_of_ticket < 15 GROUP BY theme ORDER BY COUNT(Year) ASC"
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street ,  all_home ORDER BY all_home ASC",
        "nlq": "Find All_Home and School_ID , and group by attribute ACC_Road, and visualize them by a bar chart, sort bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street ,  all_home ORDER BY all_home ASC",
        "nlq": "Visualize a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Road, could you sort by the bar in asc please?",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street ,  all_home ORDER BY all_home ASC",
        "nlq": "Give me the comparison about School_ID over the All_Home , and group by attribute ACC_Road by a bar chart, and sort names in ascending order please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street , all_home ORDER BY schoolID ASC"
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street ,  all_home ORDER BY all_home ASC",
        "nlq": "Stack bar chart of school_id vs ACC_Road based on all home, and show bar in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , schoolID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , schoolID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street ,  all_home ORDER BY all_home ASC",
        "nlq": "Give me the comparison about School_ID over the All_Home , and group by attribute ACC_Road, and show bar in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street , all_home ORDER BY schoolID ASC"
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street ,  all_home ORDER BY all_home ASC",
        "nlq": "Draw a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Road, and sort bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_Street , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "2725",
        "db_id": "scientist_1_robust",
        "target": "Visualize PIE SELECT name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name",
        "nlq": "Find the number of scientists involved for the projects that require more than 300 hours. Show a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize PIE SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "predict_debugged_db_ann": "Visualize PIE SELECT name , COUNT(*) FROM projects AS T1 JOIN AssignedTo AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name"
    },
    {
        "record_name": "2725",
        "db_id": "scientist_1_robust",
        "target": "Visualize PIE SELECT name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name",
        "nlq": "Return a pie chart on what are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
        "predict_rag_nlq": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize PIE SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "predict_debugged_db_ann": "Visualize PIE SELECT name , COUNT(*) FROM projects AS T1 JOIN AssignedTo AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name"
    },
    {
        "record_name": "2725",
        "db_id": "scientist_1_robust",
        "target": "Visualize PIE SELECT name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name",
        "nlq": "A pie chart about what are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
        "predict_rag_nlq": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC",
            "Visualize PIE SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name"
    },
    {
        "record_name": "2725",
        "db_id": "scientist_1_robust",
        "target": "Visualize PIE SELECT name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name",
        "nlq": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each. ",
        "predict_rag_nlq": "Visualize BAR SELECT Name , count(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , count(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.code = T2.Project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY T1.name ASC"
    },
    {
        "record_name": "3251@y_name@DESC",
        "db_id": "wine_1_robust",
        "target": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "nlq": "Compare the average of maximum score of wines each year, bin the year into the weekday interval, and show by the Y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(max(Score) ) FROM WINE ORDER BY AVG(max(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(MAX(Score)) FROM wine ORDER BY AVG(MAX(Score)) DESC BIN Year BY WEEKDAY"
    },
    {
        "record_name": "3251@y_name@DESC",
        "db_id": "wine_1_robust",
        "target": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "nlq": "A bar chart about the average of maximum score of wines each year, bin the year into the weekday interval, and I want to show in descending by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(max(Score) ) FROM WINE ORDER BY AVG(max(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY"
    },
    {
        "record_name": "3251@y_name@DESC",
        "db_id": "wine_1_robust",
        "target": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "nlq": "Compare the average of maximum score of wines each year, bin the year into the weekday interval and draw a bar chart, and list Y from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(max(Score) ) FROM WINE ORDER BY AVG(max(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY"
    },
    {
        "record_name": "3251@y_name@DESC",
        "db_id": "wine_1_robust",
        "target": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "nlq": "Give me a bar chart for mean max(score) of each year, and show by the Y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(max(Score) ) FROM WINE ORDER BY AVG(max(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY"
    },
    {
        "record_name": "185@y_name@DESC",
        "db_id": "behavior_monitoring_robust",
        "target": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
        "nlq": "A bar chart for finding the number of the dates of assessment notes for students with first name \"Fanny\", and sort Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR"
    },
    {
        "record_name": "185@y_name@DESC",
        "db_id": "behavior_monitoring_robust",
        "target": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
        "nlq": "Find the dates of assessment notes for students with first name \"Fanny\", and count them by a bar chart, and I want to sort from high to low by the Y please.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR"
    },
    {
        "record_name": "185@y_name@DESC",
        "db_id": "behavior_monitoring_robust",
        "target": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
        "nlq": "Find the number of the dates of assessment notes for students with first name \"Fanny\", I want to sort from high to low by the Y please.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_identification = T2.student_identification WHERE T2.Fname = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR"
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "nlq": "Give me the comparison about the amount of Sex over the  Sex , and group by attribute Sex by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender"
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "nlq": "Return a bar chart about the distribution of  Sex and the amount of Sex , and group by attribute Sex.",
        "predict_rag_nlq": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender"
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "nlq": "Show me about the distribution of  Sex and the amount of Sex , and group by attribute Sex in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender"
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "nlq": "A bar chart shows the distribution of  Sex and the amount of Sex , and group by attribute Sex.",
        "predict_rag_nlq": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender"
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "nlq": "Find  Sex and the amount of Sex , and group by attribute Sex, and visualize them by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender"
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "nlq": "Bar chart x axis sex y axis how many sex",
        "predict_rag_nlq": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT gender , count(*) FROM dorm GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize BAR SELECT gender , COUNT(gender) FROM people GROUP BY gender"
    },
    {
        "record_name": "990",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT customer_Lname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
        "nlq": "Show the number of accounts for each customer in a bar chart grouping by customer's last name.",
        "predict_rag_nlq": "Visualize BAR SELECT customer_Lname , COUNT(accountID) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T2.customer_Lname",
        "rag_dvqs": [
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT customer_Lname , COUNT(customer_Lname) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customerID = T2.customerID GROUP BY customer_Lname",
        "predict_debugged_db_ann": "Visualize BAR SELECT customer_Lname , COUNT(customer_Lname) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customerID = T2.customerID GROUP BY customer_Lname"
    },
    {
        "record_name": "990",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT customer_Lname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
        "nlq": "How many accounts for each customer? Show a bar chart that groups by customer's last name.",
        "predict_rag_nlq": "Visualize BAR SELECT customer_Lname , COUNT(customer_Lname) FROM Customers GROUP BY customer_Lname",
        "rag_dvqs": [
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY customer_last_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) DESC",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY customer_details DESC",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY customer_details ASC",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY COUNT(customer_details) ASC",
            "Visualize BAR SELECT customer_details , COUNT(customer_details) FROM Customers GROUP BY customer_details ORDER BY COUNT(customer_details) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT customer_Lname , COUNT(customer_Lname) FROM Customers GROUP BY customer_Lname",
        "predict_debugged_db_ann": "Visualize BAR SELECT customer_Lname , COUNT(customer_Lname) FROM Customers GROUP BY customer_Lname"
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Manager_ID) DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the sum of manager_id over the job_id , and group by attribute job_id by a bar chart, display by the y axis in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Manager_ID) DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the sum of manager_id , and group by attribute job_id, and visualize them by a bar chart, I want to list Y-axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Manager_ID) DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the sum of manager_id , and group by attribute job_id, and display by the y axis in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Manager_ID) DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the sum of manager_id , and group by attribute job_id in a bar chart, and display by the y axis in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(Manager_ID) DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the sum of manager_id , and group by attribute job_id, I want to sort by the Y in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
    },
    {
        "record_name": "723",
        "db_id": "cre_Doc_Control_Systems_robust",
        "target": "Visualize BAR SELECT role_annotation , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "nlq": "Show a bar chart about how many employees does each role have?",
        "predict_rag_nlq": "Visualize BAR SELECT role_annotation , count(*) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T1.role_code",
        "rag_dvqs": [
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description ASC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code ASC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT role_annotation , count(*) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T1.role_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT role_annotation , COUNT(*) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T1.role_code ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2059",
        "db_id": "journal_committee_robust",
        "target": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name",
        "nlq": "Show the number of the names of editors that are on the committee of journals with sales bigger than 3000.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name"
    },
    {
        "record_name": "2059",
        "db_id": "journal_committee_robust",
        "target": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name",
        "nlq": "A pie chart for showing the number of the names of editors that are on the committee of journals with sales bigger than 3000.",
        "predict_rag_nlq": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_debugged_db_ann": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name"
    },
    {
        "record_name": "2059",
        "db_id": "journal_committee_robust",
        "target": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name",
        "nlq": "Show the names of editors that are on the committee of journals with sales bigger than 3000, and count them by a pie chart",
        "predict_rag_nlq": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_debugged_db_ann": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.EditorID = T2.EditorID JOIN journal AS T3 ON T1.JournalID = T3.JournalID WHERE T3.Sales > 3000 GROUP BY Name"
    },
    {
        "record_name": "1435",
        "db_id": "formula_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "Find the number of the names of Japanese constructors that have once earned more than 5 points?",
        "predict_rag_nlq": "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "rag_dvqs": [
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize PIE SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name",
            "Visualize PIE SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id",
            "Visualize PIE SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName",
            "Visualize PIE SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_debugged_db_ann": "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"
    },
    {
        "record_name": "1435",
        "db_id": "formula_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "What are the names of all the Japanese constructors that have earned more than 5 points, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT name, COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC",
            "Visualize SCATTER SELECT count(*) , constructorId FROM constructorStandings GROUP BY constructorid"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"
    },
    {
        "record_name": "1435",
        "db_id": "formula_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "A bar chart for what are the number of the names of all the Japanese constructors that have earned more than 5 points?",
        "predict_rag_nlq": "Visualize BAR SELECT name, COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"
    },
    {
        "record_name": "1435",
        "db_id": "formula_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "A bar chart for finding the number of the names of Japanese constructors that have once earned more than 5 points?",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"
    },
    {
        "record_name": "1435",
        "db_id": "formula_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "What are the number of the names of all the Japanese constructors that have earned more than 5 points?",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"
    },
    {
        "record_name": "1435",
        "db_id": "formula_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "Find the names of Japanese constructors that have once earned more than 5 points, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of  name and the amount of name , and group by attribute name in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name"
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
        "nlq": "For those records from the products and each product's manufacturer, give me the comparison about the amount of name over the  name , and group by attribute name.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name"
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
        "nlq": "For those records from the products and each product's manufacturer, find  name and the amount of name , and group by attribute name, and visualize them by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name"
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
        "nlq": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  name and the amount of name , and group by attribute name.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name"
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
        "nlq": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of  name and the amount of name , and group by attribute name.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name"
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name",
        "nlq": "What is the relationship between  School_ID and  ACC_Percent , and group by attribute Team_Name?",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name"
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name",
        "nlq": "A scatter chart shows the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name"
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name",
        "nlq": "Show me about the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name in a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name"
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name",
        "nlq": "Visualize a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name"
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name",
        "nlq": "Return a scatter chart about the correlation between  School_ID and  ACC_Percent , and group by attribute Team_Name.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name"
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball_robust",
        "target": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name",
        "nlq": "Show the relation between school id and acc_percent for each Team_Name using a scatter chart",
        "predict_rag_nlq": "Visualize SCATTER SELECT schoolID, percentage_of_ACC FROM basketball_match GROUP BY team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , percentage_of_ACC FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT schoolID , percentage_of_ACC FROM basketball_match GROUP BY team_Name"
    },
    {
        "record_name": "2780",
        "db_id": "soccer_1_robust",
        "target": "Visualize BAR SELECT birthdate , COUNT(birthdate) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY POTENTIAL DESC LIMIT 5 BIN birthdate BY WEEKDAY",
        "nlq": "For the top five players in terms of potential, bin their birthday into weekday interval, and show me the distribution of their birthday.",
        "predict_rag_nlq": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
            "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR",
            "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT birthdate , COUNT(birthdate) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY Player_Name ORDER BY POTENTIAL DESC LIMIT 5 BIN birthdate BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT birthdate , COUNT(birthdate) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY Player_Name ORDER BY POTENTIAL DESC LIMIT 5 BIN birthdate BY WEEKDAY"
    },
    {
        "record_name": "2780",
        "db_id": "soccer_1_robust",
        "target": "Visualize BAR SELECT birthdate , COUNT(birthdate) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY POTENTIAL DESC LIMIT 5 BIN birthdate BY WEEKDAY",
        "nlq": "For the top five players in terms of potential, bin their birthday into weekday interval count them using a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
            "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR",
            "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT birthdate , COUNT(birthdate) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY Player_Name ORDER BY POTENTIAL DESC LIMIT 5 BIN birthdate BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT birthdate , COUNT(birthdate) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY Player_Name ORDER BY POTENTIAL DESC LIMIT 5 BIN birthdate BY WEEKDAY"
    },
    {
        "record_name": "763@y_name@DESC",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "target": "Visualize BAR SELECT Document_information , COUNT(Document_information) FROM Documents GROUP BY Document_information ORDER BY COUNT(Document_information) DESC",
        "nlq": "How many documents for each document description? Show me a bar chart, I want to sort in descending by the the number of document description.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC"
    },
    {
        "record_name": "763@y_name@DESC",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "target": "Visualize BAR SELECT Document_information , COUNT(Document_information) FROM Documents GROUP BY Document_information ORDER BY COUNT(Document_information) DESC",
        "nlq": "List the number of documents for each document description in a bar chart, I want to sort in descending by the the number of document description.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC"
    },
    {
        "record_name": "763@y_name@DESC",
        "db_id": "cre_Doc_Template_Mgt_robust",
        "target": "Visualize BAR SELECT Document_information , COUNT(Document_information) FROM Documents GROUP BY Document_information ORDER BY COUNT(Document_information) DESC",
        "nlq": "Bar chart x axis document description y axis how many document description, and could you rank total number in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC"
    },
    {
        "record_name": "3064@y_name@ASC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "nlq": "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and order from low to high by the Y please.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC"
    },
    {
        "record_name": "3064@y_name@ASC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "nlq": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a bar chart, and rank by the total number in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC"
    },
    {
        "record_name": "3064@y_name@ASC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "nlq": "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and rank in ascending by the total number please.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC"
    },
    {
        "record_name": "3064@y_name@ASC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "nlq": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a bar chart, and rank by the total number in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC"
    },
    {
        "record_name": "3214",
        "db_id": "wedding_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age < (SELECT avg(Age) FROM people) GROUP BY Country",
        "nlq": "Show the number of countries for all people whose age is smaller than the average.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age < (SELECT AVG(Age) FROM people) GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT AVG(Age) FROM people) GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT AVG(Age) FROM people) GROUP BY Country"
    },
    {
        "record_name": "3214",
        "db_id": "wedding_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age < (SELECT avg(Age) FROM people) GROUP BY Country",
        "nlq": "A bar chart about the number of countries for all people whose age is smaller than the average.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age <(SELECT avg(age) FROM people) GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT avg(Age) FROM people) GROUP BY Country"
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC",
        "nlq": "A bar chart shows the distribution of ACC_Regular_Season and All_Games_Percent , and display from low to high by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY percentage_of_all_games ASC"
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC",
        "nlq": "Show me about the distribution of ACC_Regular_Season and All_Games_Percent in a bar chart, and could you order x-axis in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC"
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC",
        "nlq": "Create a bar chart showing all_games_percent across acc regular season, could you list ACC_Regular_Season in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC"
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC",
        "nlq": "Give me the comparison about All_Games_Percent over the ACC_Regular_Season , and display from low to high by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY percentage_of_all_games ASC"
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC",
        "nlq": "Give me the comparison about All_Games_Percent over the ACC_Regular_Season by a bar chart, show X from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY percentage_of_all_games ASC"
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC",
        "nlq": "Find ACC_Regular_Season and All_Games_Percent , and visualize them by a bar chart, and show X-axis in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match ORDER BY ACC_regular_season ASC"
    },
    {
        "record_name": "2798@x_name@ASC",
        "db_id": "soccer_2_robust",
        "target": "Visualize BAR SELECT College_Name , min(enr) FROM college GROUP BY province ORDER BY College_Name ASC",
        "nlq": "Bar graph to show minimal enr from different cname, I want to display by the X-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY College_Name ORDER BY College_Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY College_Name ORDER BY College_Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY College_Name ORDER BY College_Name ASC"
    },
    {
        "record_name": "2798@x_name@ASC",
        "db_id": "soccer_2_robust",
        "target": "Visualize BAR SELECT College_Name , min(enr) FROM college GROUP BY province ORDER BY College_Name ASC",
        "nlq": "Compare the smallest enrollment of schools in each state using a bar chart, and I want to display by the X-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY min(enr) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY min(enr) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY min(enr) ASC"
    },
    {
        "record_name": "2798@x_name@ASC",
        "db_id": "soccer_2_robust",
        "target": "Visualize BAR SELECT College_Name , min(enr) FROM college GROUP BY province ORDER BY College_Name ASC",
        "nlq": "What is the name of the school that has the smallest enrollment in each state?, I want to list x-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY College_Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY College_Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY College_Name ASC"
    },
    {
        "record_name": "2798@x_name@ASC",
        "db_id": "soccer_2_robust",
        "target": "Visualize BAR SELECT College_Name , min(enr) FROM college GROUP BY province ORDER BY College_Name ASC",
        "nlq": "Return a bar graph for the name of the school that has the smallest enrollment in each state, could you order by the x axis in asc please?",
        "predict_rag_nlq": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY College_Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY College_Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT College_Name , min(enr) FROM College GROUP BY province ORDER BY College_Name ASC"
    },
    {
        "record_name": "17@x_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "nlq": "How many faculty members do we have for each rank? Show bar chart, rank X-axis from high to low order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Rank ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Rank ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "17@x_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "nlq": "Show the number of faculty for each rank in a bar chart, and list X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC"
    },
    {
        "record_name": "17@x_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "nlq": "Bar chart of total number by each rank, and I want to display from high to low by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC"
    },
    {
        "record_name": "2936@y_name@DESC",
        "db_id": "theme_gallery_robust",
        "target": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Nation != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "nlq": "For artist names who are not from the United States, how many names in each year?, and I want to sort by the y axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) ASC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) ASC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Nation != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Nation != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC"
    },
    {
        "record_name": "2936@y_name@DESC",
        "db_id": "theme_gallery_robust",
        "target": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Nation != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "nlq": "For artist names who are not from United States, show me a stacked that the x-axis is the Year_Join and the group by name in Y, and order by the total number from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) ASC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) ASC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Nation != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Nation != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC"
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "nlq": "Show the booking status code and the corresponding number of bookings by a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE"
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "nlq": "Show the booking status code and the corresponding number of bookings. Show a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE"
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "nlq": "Pie chart. how many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE"
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "nlq": "Draw a pie chart for how many bookings does each booking status have? List the booking status code and the number of corresponding bookings.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE"
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "nlq": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE"
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "nlq": "How many bookings does each booking status have? List the booking status code and the number of corresponding bookings. Show a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE"
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals_robust",
        "target": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "nlq": "Give me a pie to show the total number from different booking status code.",
        "predict_rag_nlq": "Visualize PIE SELECT reservation_status_code , count(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT facility_code , COUNT(facility_code) FROM Apartment_Facilities AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id WHERE T2.bedroom_count > 4 GROUP BY facility_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT reservation_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY reservation_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT RESERVATION_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY RESERVATION_STATUS_CODE"
    },
    {
        "record_name": "3191",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association",
        "nlq": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type. Show bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT basic_conference , sum(Enrollment) FROM university WHERE established > 1850 GROUP BY basic_conference ORDER BY basic_conference ASC"
    },
    {
        "record_name": "3191",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association",
        "nlq": "A bar chart about what are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT basic_conference , SUM(Enrollment) FROM university WHERE established > 1850 GROUP BY basic_conference ORDER BY SUM(Enrollment) DESC"
    },
    {
        "record_name": "3191",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association",
        "nlq": "Show me a bar chart for what are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT basic_conference , SUM(Enrollment) FROM university WHERE established > 1850 GROUP BY basic_conference ORDER BY SUM(Enrollment) ASC"
    },
    {
        "record_name": "3191",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association",
        "nlq": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation",
        "predict_debugged_db_ann": "Visualize BAR SELECT basic_conference , sum(Enrollment) FROM university WHERE established > 1850 GROUP BY basic_conference"
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of founder and the sum of code , and group by attribute founder, and I want to sort by the Y-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of founder and the sum of code , and group by attribute founder, I want to sort by the Y-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of founder and the sum of code , and group by attribute founder, display total number of code from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, give me the comparison about the sum of code over the founder , and group by attribute founder by a bar chart, and show Y in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of founder and the sum of code , and group by attribute founder in a bar chart, and show Y in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC"
    },
    {
        "record_name": "466",
        "db_id": "cinema_robust",
        "target": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
        "nlq": "Show how many cinemas open for each year in a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY COUNT(Openning_year) ASC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR"
    },
    {
        "record_name": "466",
        "db_id": "cinema_robust",
        "target": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
        "nlq": "Plot openning year by how many openning year as a trend line",
        "predict_rag_nlq": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  BIN Openning_year BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR"
    },
    {
        "record_name": "451@x_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY Title ORDER BY Title DESC",
        "nlq": "Show the average price of each film in a bar chart, show names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY Title ORDER BY Title DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Title DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY Title ORDER BY Title DESC"
    },
    {
        "record_name": "3058",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "nlq": "List each language and the number of TV Channels using it in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "rag_dvqs": [
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGE , COUNT(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "record_name": "3058",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "nlq": "List each language and the number of TV Channels using it. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT LANGUAGE, COUNT(*) FROM TV_Channel GROUP BY LANGUAGE",
        "rag_dvqs": [
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LANGUAGE , COUNT(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGE , COUNT(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "record_name": "3058",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "nlq": "For each language, list the number of TV Channels that use it. Plot them as bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "rag_dvqs": [
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGE , COUNT(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "record_name": "3058",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT LANGUAGE , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "nlq": "Bar chart of the total number from each language",
        "predict_rag_nlq": "Visualize BAR SELECT LANGUAGE , COUNT(*) FROM TV_Channel GROUP BY LANGUAGE",
        "rag_dvqs": [
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LANGUAGE , COUNT(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGE , COUNT(*) FROM TV_Channel GROUP BY LANGUAGE"
    },
    {
        "record_name": "11@y_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
        "nlq": "Stacked bar chart of the total number for with each Sex in each rank, I want to show in desc by the the total number .",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "11@y_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
        "nlq": "Show all the ranks and the number of male and female faculty for each rank in a bar chart, I want to show in desc by the the total number .",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "11@y_name@DESC",
        "db_id": "activity_1_robust",
        "target": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
        "nlq": "How many faculty members do we have for each rank and gender? Plot them as bar chart, rank by the y-axis in descending please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "49",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE Stu_ID NOT IN (SELECT T1.Stu_ID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.Allergy_Type = \"food\") GROUP BY Last_Name",
        "nlq": "List the last name of the students who do not have any food type allergy and count them in a bart chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE Stu_ID NOT IN (SELECT T1.Stu_ID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\") GROUP BY Last_Name",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Stu_ID NOT IN(SELECT T1.Stu_ID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\") GROUP BY LName",
        "predict_debugged_db_ann": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE Stu_ID NOT IN(SELECT T1.Stu_ID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.Allergy_Type = \"food\") GROUP BY Last_Name"
    },
    {
        "record_name": "49",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE Stu_ID NOT IN (SELECT T1.Stu_ID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.Allergy_Type = \"food\") GROUP BY Last_Name",
        "nlq": "What is the last name of each student who is not allergic to any type of food? Count them with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE Stu_ID NOT IN (SELECT T1.Stu_ID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\") GROUP BY Last_Name",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE Stu_ID NOT IN(SELECT T1.Stu_ID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.Allergy_Type = \"food\") GROUP BY Last_Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT LAST_NAME , COUNT(LAST_NAME) FROM Student WHERE Stu_ID NOT IN(SELECT T1.Stu_ID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.Allergy_Type = \"food\") GROUP BY LAST_NAME"
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC",
        "nlq": "Visualize a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and could you rank in desc by the x axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time AS Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC"
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC",
        "nlq": "Show me about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time in a bar chart, list in descending by the x axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time AS Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC"
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC",
        "nlq": "Draw a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and list in descending by the x axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time AS Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC"
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC",
        "nlq": "Return a bar chart about the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and could you rank in desc by the x axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC"
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC",
        "nlq": "A bar chart shows the distribution of Is_full_time and the sum of Shop_ID , and group by attribute Is_full_time, and I want to list by the X from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY SUM(Shop_ID) DESC"
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY ss_full_time DESC",
        "nlq": "Bar chart of sum shop id from each is full time, and I want to list by the X from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY SUM(Shop_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY SUM(Shop_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ss_full_time , SUM(Shop_ID) FROM hiring GROUP BY ss_full_time ORDER BY SUM(Shop_ID) DESC"
    },
    {
        "record_name": "1654",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a line chart about the change of  department_id over  hire_date .",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1654",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me the trend about  department_id over  hire_date  with a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE MANAGER_ID BETWEEN 100 AND 200)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200 )",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200 )"
    },
    {
        "record_name": "1654",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a line chart about the change of  department_id over  hire_date .",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1654",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the trend of  department_id over  hire_date .",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1654",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the trend about  department_id over  hire_date .",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPT_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200 )",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200 )"
    },
    {
        "record_name": "1654",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, a line chart shows the change of  department_id over  hire_date ",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , Dept_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1222@x_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.StuID = T2.StuID JOIN dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "nlq": "What is the average age for each dorm and what are the names of each dorm Plot them as bar chart, could you rank by the dorm_name in descending?",
        "predict_rag_nlq": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY T3.dorm_name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.student_id JOIN Dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY T3.dorm_name DESC"
    },
    {
        "record_name": "1222@x_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.StuID = T2.StuID JOIN dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "nlq": "Find the average age of students living in each dorm and the name of dorm Plot them as bar chart, could you sort bar from high to low order please?",
        "predict_rag_nlq": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.student_id JOIN Dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC"
    },
    {
        "record_name": "1222@x_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.StuID = T2.StuID JOIN dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "nlq": "Visualize a bar chart for what is the average age for each dorm and what are the names of each dorm?, could you sort bar from high to low order please?",
        "predict_rag_nlq": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.student_id JOIN Dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.student_id JOIN Dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.student_id JOIN Dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC"
    },
    {
        "record_name": "1222@x_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.StuID = T2.StuID JOIN dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "nlq": "what is the average age for each dorm and what are the names of each dorm?, order from high to low by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.student_id JOIN Dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.student_id JOIN Dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.student_id JOIN Dorm AS T3 ON T3.dormitory_id = T2.dormitory_id GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC"
    },
    {
        "record_name": "365@y_name@ASC",
        "db_id": "book_2_robust",
        "target": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC",
        "nlq": "A bar chart showing the number of publication dates of books, and sort by the Y-axis in asc please.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date ASC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) DESC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date DESC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Price DESC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher ASC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC"
    },
    {
        "record_name": "365@y_name@ASC",
        "db_id": "book_2_robust",
        "target": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC",
        "nlq": "Bar chart x axis publication date y axis how many publication date, and show y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date ASC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) DESC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date DESC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Price DESC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher ASC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_publication , COUNT(date_of_publication) FROM publication GROUP BY date_of_publication ORDER BY COUNT(date_of_publication) ASC"
    },
    {
        "record_name": "2643@y_name@ASC",
        "db_id": "race_track_robust",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "nlq": "Create a bar chart showing how many class across class, sort y axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC"
    },
    {
        "record_name": "2643@y_name@ASC",
        "db_id": "race_track_robust",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "nlq": "Show me how many in each class of all races using a bar chart, and sort by the the number of class in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC"
    },
    {
        "record_name": "3064@y_name@DESC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "nlq": "find the package option of the tv channel that do not have any cartoon directed by Ben Jones, and count them by a bar chart, and list in descending by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC"
    },
    {
        "record_name": "3064@y_name@DESC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "nlq": "What are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and display total number in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC"
    },
    {
        "record_name": "3064@y_name@DESC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "nlq": "A bar chart for what are the number of the package options of all tv channels that are not playing any cartoons directed by Ben Jones?, and list in desc by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC"
    },
    {
        "record_name": "3064@y_name@DESC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "nlq": "What are the package options of all tv channels that are not playing any cartoons directed by Ben Jones, and count them by a bar chart, rank how many package option in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT id FROM Cartoon WHERE helmed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC"
    },
    {
        "record_name": "2459",
        "db_id": "network_2_robust",
        "target": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "nlq": "Visualize a bar chart for what is average age for different job title?",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , AVG(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2459",
        "db_id": "network_2_robust",
        "target": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "nlq": "A bar chart about what is average age for different job title?",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , AVG(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2459",
        "db_id": "network_2_robust",
        "target": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "nlq": "What is average age for different job title. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , AVG(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2459",
        "db_id": "network_2_robust",
        "target": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "nlq": "Return a histogram on how old is the average person for each job?",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2459",
        "db_id": "network_2_robust",
        "target": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "nlq": "Display a bar chart for how old is the average person for each job?",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY avg(age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2459",
        "db_id": "network_2_robust",
        "target": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "nlq": "How old is the average person for each job. Show bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2459",
        "db_id": "network_2_robust",
        "target": "Visualize BAR SELECT job , avg(Age) FROM Person GROUP BY job",
        "nlq": "Bar chart x axis job y axis the average of age",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , AVG(Age) FROM Person GROUP BY job"
    },
    {
        "record_name": "2387@y_name@ASC",
        "db_id": "movie_1_robust",
        "target": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(T1.stars) ASC",
        "nlq": "Please visualize a bar chart, that the X-axis is the director and the Y-axis is thier corresponding lowest rating among all movies, and I want to list in ascending by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(T1.stars) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(T1.stars) ASC"
    },
    {
        "record_name": "2387@y_name@ASC",
        "db_id": "movie_1_robust",
        "target": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(T1.stars) ASC",
        "nlq": "Show the director and their lowest rating among all movies in a bar chart, display by the stars in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC",
            "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(stars) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY MIN(stars) ASC"
    },
    {
        "record_name": "2387@y_name@ASC",
        "db_id": "movie_1_robust",
        "target": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(T1.stars) ASC",
        "nlq": "Compare the lowest rating among all movies by each director using a bar chart, and could you list Y-axis in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC",
            "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY min(stars) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY director ORDER BY MIN(stars) ASC"
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find job_id and the average of employee_id , and group by attribute job_id, and visualize them by a bar chart, could you display X in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, could you show in desc by the X-axis please?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, and list by the x-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of job_id and the average of employee_id , and group by attribute job_id, show X-axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the average of employee_id , and group by attribute job_id in a bar chart, and rank X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "2862@x_name@DESC",
        "db_id": "store_product_robust",
        "target": "Visualize BAR SELECT category , count(*) FROM store GROUP BY category ORDER BY category DESC",
        "nlq": "Find all types of store and number of them Visualize by bar chart, could you sort x axis in desc order please?",
        "predict_rag_nlq": "Visualize BAR SELECT category , COUNT(*) FROM store GROUP BY category ORDER BY category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT category , COUNT(*) FROM store GROUP BY category ORDER BY category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT category , COUNT(*) FROM store GROUP BY category ORDER BY category DESC"
    },
    {
        "record_name": "2862@x_name@DESC",
        "db_id": "store_product_robust",
        "target": "Visualize BAR SELECT category , count(*) FROM store GROUP BY category ORDER BY category DESC",
        "nlq": "Bar chart x axis type y axis the total number, and order in desc by the names.",
        "predict_rag_nlq": "Visualize BAR SELECT category , COUNT(*) FROM store GROUP BY category ORDER BY category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT category , COUNT(*) FROM store GROUP BY category ORDER BY category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT category , COUNT(*) FROM store GROUP BY category ORDER BY category DESC"
    },
    {
        "record_name": "2862@x_name@DESC",
        "db_id": "store_product_robust",
        "target": "Visualize BAR SELECT category , count(*) FROM store GROUP BY category ORDER BY category DESC",
        "nlq": "For each type of store, how many of them are there Plot them as bar chart, and display by the X from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT category , count(*) FROM store GROUP BY category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT category , count(*) FROM store GROUP BY category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT category , COUNT(*) FROM store GROUP BY category ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "659",
        "db_id": "college_3_robust",
        "target": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM STUDENT WHERE gender = \"F\" GROUP BY Last_Name ORDER BY Age DESC",
        "nlq": "A bar chart for what are the number of the last names of female students, ordered by age descending?",
        "predict_rag_nlq": "Visualize BAR SELECT Last_Name, COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC"
    },
    {
        "record_name": "659",
        "db_id": "college_3_robust",
        "target": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM STUDENT WHERE gender = \"F\" GROUP BY Last_Name ORDER BY Age DESC",
        "nlq": "Find the number of the last name of female (sex is F) students in the descending order of age.",
        "predict_rag_nlq": "Visualize BAR SELECT Last_Name, COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC"
    },
    {
        "record_name": "659",
        "db_id": "college_3_robust",
        "target": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM STUDENT WHERE gender = \"F\" GROUP BY Last_Name ORDER BY Age DESC",
        "nlq": "Find the last name of female (sex is F) students in the descending order of age, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC"
    },
    {
        "record_name": "659",
        "db_id": "college_3_robust",
        "target": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM STUDENT WHERE gender = \"F\" GROUP BY Last_Name ORDER BY Age DESC",
        "nlq": "What are the last names of female students, ordered by age descending, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT Last_Name, COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC"
    },
    {
        "record_name": "659",
        "db_id": "college_3_robust",
        "target": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM STUDENT WHERE gender = \"F\" GROUP BY Last_Name ORDER BY Age DESC",
        "nlq": "A bar chart for finding the number of the last name of female (sex is F) students in the descending order of age.",
        "predict_rag_nlq": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Age > 18 AND Major != 600 AND Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC"
    },
    {
        "record_name": "659",
        "db_id": "college_3_robust",
        "target": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM STUDENT WHERE gender = \"F\" GROUP BY Last_Name ORDER BY Age DESC",
        "nlq": "What are the number of the last names of female students, ordered by age descending?",
        "predict_rag_nlq": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Last_Name , COUNT(Last_Name) FROM Student WHERE gender = 'F' GROUP BY Last_Name ORDER BY Age DESC"
    },
    {
        "record_name": "437@y_name@DESC",
        "db_id": "chinook_1_robust",
        "target": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "nlq": "Draw a bar chart for what are the first names and support rep ids for employees serving 10 or more customers?, and could you list total number in descending order please?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC"
    },
    {
        "record_name": "437@y_name@DESC",
        "db_id": "chinook_1_robust",
        "target": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "nlq": "Show me a bar chart for what are the first names and support rep ids for employees serving 10 or more customers?, I want to rank from high to low by the Y please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC"
    },
    {
        "record_name": "437@y_name@DESC",
        "db_id": "chinook_1_robust",
        "target": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "nlq": "What are the first names and support rep ids for employees serving 10 or more customers, and could you list total number in descending order please?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC"
    },
    {
        "record_name": "2831@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "nlq": "Count the number of services by services, and display Y-axis from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities ASC"
    },
    {
        "record_name": "2831@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "nlq": "Give me a bar chart for the number of services of each services, could you display from low to high by the y axis?",
        "predict_rag_nlq": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC"
    },
    {
        "record_name": "2831@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "nlq": "Compare the number of services by services with a bar graph, I want to show Y in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT services, COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC"
    },
    {
        "record_name": "2831@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "nlq": "A bar graph listing the services and how many services provided by all stations\n\n, order in ascending by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) ASC"
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, draw a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time, and sort total number from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, find hire_date and the average of employee_id bin hire_date by time, and visualize them by a bar chart, display y axis in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, a bar chart shows the distribution of hire_date and the average of employee_id bin hire_date by time, and list by the Y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH ORDER BY AVG(EMPLOYEE_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of hire_date and the average of employee_id bin hire_date by time, and order Y-axis from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, show me about the distribution of hire_date and the average of employee_id bin hire_date by time in a bar chart, and list by the Y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(employee_id) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(employee_id) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of name and the amount of name , and group by attribute name in a bar chart, sort y axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC"
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For those records from the products and each product's manufacturer, give me the comparison about the amount of name over the name , and group by attribute name, and rank Y in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC"
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and the amount of name , and group by attribute name, rank by the y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC"
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of name and the amount of name , and group by attribute name, and could you order in asc by the y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC"
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For those records from the products and each product's manufacturer, find name and the amount of name , and group by attribute name, and visualize them by a bar chart, and rank by the y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC"
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Show the names and their average grades of each high schooler with a bar chart, and I want to rank by the bars in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC"
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Show the names and their average grades of each high schooler, and order in descending by the bar.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC"
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Bar graph to show mean grade from different name, and could you rank in descending by the names?",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Draw a bar chart for what are the names and the average grades for each high schooler?, and I want to rank by the bars in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "What are the names and the average grades for each high schooler Plot them as a bar chart, I want to show from high to low by the X please.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC"
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Display a bar chart for what are the names and the average grades for each high schooler?, and list X in desc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
    },
    {
        "record_name": "2574",
        "db_id": "phone_market_robust",
        "target": "Visualize PIE SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.PhoneID = T2.PhoneID GROUP BY T2.Name",
        "nlq": "For each phone, show its names and total number of stocks. ",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(stock_count) FROM phone_market AS T1 JOIN phone AS T2 ON T1.PhoneID = T2.PhoneID GROUP BY T2.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY sum(T1.Num_of_stock) ASC",
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY sum(T1.Num_of_stock) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(stock_count) FROM phone_market AS T1 JOIN phone AS T2 ON T1.PhoneID = T2.PhoneID GROUP BY T2.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(stock_count) FROM phone_market AS T1 JOIN phone AS T2 ON T1.PhoneID = T2.PhoneID GROUP BY T2.Name"
    },
    {
        "record_name": "3066@y_name@ASC",
        "db_id": "twitter_1_robust",
        "target": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
        "nlq": "Find the name and partition id for users who tweeted less than twice Show bar chart, and could you sort by the total number in ascending?",
        "predict_rag_nlq": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY name ASC",
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid DESC",
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY name DESC",
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY name ASC",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY name DESC",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC"
    },
    {
        "record_name": "2446@x_name@DESC",
        "db_id": "musical_robust",
        "target": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE prize = \"Tony Award\" OR prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "nlq": "Show the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", I want to sort x axis from high to low order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Prize = \"Bob Fosse\" OR Prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC"
    },
    {
        "record_name": "2446@x_name@DESC",
        "db_id": "musical_robust",
        "target": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE prize = \"Tony Award\" OR prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "nlq": "A bar chart for showing the number of the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", and display x-axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Prize = \"Bob Fosse\" OR Prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC"
    },
    {
        "record_name": "2446@x_name@DESC",
        "db_id": "musical_robust",
        "target": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE prize = \"Tony Award\" OR prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "nlq": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\", and count them by a bar chart, and could you list from high to low by the X-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Prize = \"Bob Fosse\" OR Prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC"
    },
    {
        "record_name": "2446@x_name@DESC",
        "db_id": "musical_robust",
        "target": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE prize = \"Tony Award\" OR prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "nlq": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards, and count them by a bar chart, display x-axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Prize = \"Bob Fosse\" OR Prize = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC"
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of hire_date and the average of manager_id bin hire_date by time in a bar chart, and display from low to high by the Y.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of hire_date and the average of manager_id bin hire_date by time, and order by the Y in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the hire_date bin hire_date by time, show by the y-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the average of manager_id bin hire_date by time, and order by the Y in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the hire_date bin hire_date by time by a bar chart, and could you list in asc by the y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY AVG(Manager_ID) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "920",
        "db_id": "customers_and_addresses_robust",
        "target": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customerID = t2.customerID WHERE t2.channelCode = 'Email' BIN active_from_date BY YEAR",
        "nlq": "Find the number of customers that use email as the contact channel for each year. Visualize with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM Customers AS t1 JOIN Customer_Contact_Channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM Customers JOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM Customers JOIN Customer_Contact_Channels ON Customers.customerID = Customer_Contact_Channels.customerID WHERE Customer_Contact_Channels.channelCode = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR"
    },
    {
        "record_name": "920",
        "db_id": "customers_and_addresses_robust",
        "target": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customerID = t2.customerID WHERE t2.channelCode = 'Email' BIN active_from_date BY YEAR",
        "nlq": "Return a bar chart showing how many customers whose contact channel code is email for each year.",
        "predict_rag_nlq": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers JOIN customer_contact_channels ON customers.customer_id = customer_contact_channels.customer_id WHERE customer_contact_channels.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers JOIN Customer_Contact_Channels ON customers.customerID = Customer_Contact_Channels.customerID WHERE Customer_Contact_Channels.channelCode = 'Email' GROUP BY customer_name BIN active_from_date BY YEAR"
    },
    {
        "record_name": "3236@x_name@ASC",
        "db_id": "wine_1_robust",
        "target": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "nlq": "Compare the number of winery of the wines whose price is bigger than 100, and could you order bar in asc order please?",
        "predict_rag_nlq": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC"
    },
    {
        "record_name": "3236@x_name@ASC",
        "db_id": "wine_1_robust",
        "target": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "nlq": "List the number of winery of the wines whose price is bigger than 100 in a bar chart, rank from low to high by the names please.",
        "predict_rag_nlq": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC"
    },
    {
        "record_name": "3236@x_name@ASC",
        "db_id": "wine_1_robust",
        "target": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "nlq": "Visualize a bar chart about the number of winery of the wines whose price is bigger than 100, and rank X in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC"
    },
    {
        "record_name": "459@y_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY SUM(Price) DESC",
        "nlq": "For each record in schedule, show sum of price for each day in a bar chart, and could you list y-axis in desc order?",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY SUM(Price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) DESC",
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC",
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) ASC",
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date ASC",
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date ASC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY SUM(Price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY SUM(Price) DESC"
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, list X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, show me about the distribution of job_id and the average of salary , and group by attribute job_id in a bar chart, display in descending by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, and show by the X-axis from high to low please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(wage) DESC"
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of job_id and the average of salary , and group by attribute job_id, I want to order bars in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(wage) DESC"
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, find job_id and the average of salary , and group by attribute job_id, and visualize them by a bar chart, and display in descending by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(wage) DESC"
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC",
        "nlq": "Give me the comparison about the sum of School_ID over the All_Home , and group by attribute All_Home, and display by the x-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC",
        "nlq": "Draw a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home, and order All_Home from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC",
        "nlq": "Find All_Home and the sum of School_ID , and group by attribute All_Home, and visualize them by a bar chart, could you order from low to high by the x-axis please?",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC",
        "nlq": "Give me a bar chart for total number of school id of each all home, and display in asc by the bars please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC",
        "nlq": "Return a bar chart about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home, and display in asc by the bars please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC",
        "nlq": "Show me about the distribution of All_Home and the sum of School_ID , and group by attribute All_Home in a bar chart, and display x axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , SUM(schoolID) FROM basketball_match GROUP BY all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "413@y_name@DESC",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "nlq": "Plot total number of avg weight by binning by year as a bar graph, and order in desc by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , avg(Weight) FROM cars_data BIN Year BY YEAR ORDER BY avg(Weight) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) ASC BIN Year BY WEEKDAY",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY Year DESC BIN Year BY YEAR",
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY WEEKDAY",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY Year ASC BIN Year BY YEAR",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY YEAR",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , avg(Weight) FROM cars_data BIN Year BY YEAR ORDER BY avg(Weight) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , avg(Weight) FROM cars_data BIN Year BY Year ORDER BY avg(Weight) DESC"
    },
    {
        "record_name": "413@y_name@DESC",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "nlq": "Compute average weight and bin year into weekday interval for a bar chart, sort in desc by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(Weight) FROM cars_data  ORDER BY AVG(Weight) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000 BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM CARS_DATA  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM CARS_DATA  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM CARS_DATA BIN Year BY WEEKDAY",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY Year DESC BIN Year BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(Weight) FROM cars_data ORDER BY AVG(Weight) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(Weight) FROM cars_data ORDER BY AVG(Weight) DESC BIN Year BY WEEKDAY"
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , Manager_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY Manager_ID DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of job_id and manager_id , and show in desc by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , Manager_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY Manager_ID DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of job_id and manager_id , could you sort total number in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , Manager_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY Manager_ID DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of job_id and manager_id , list by the Y from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC"
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , Manager_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY Manager_ID DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, give me the comparison about manager_id over the job_id , could you list from high to low by the y axis?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC"
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , Manager_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY Manager_ID DESC",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of job_id and manager_id in a bar chart, and could you show by the total number in desc?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1953",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY MONTH",
        "nlq": "when is the hire date for those employees whose first name does not containing the letter M, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1953",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY MONTH",
        "nlq": "On what dates were employees without the letter M in their first names hired, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname NOT LIKE '%M%' BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC",
        "nlq": "Visualize a bar chart about the distribution of Team_Name and School_ID , and display in desc by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT team_Name , SCHOOLID FROM basketball_match ORDER BY SCHOOLID DESC"
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC",
        "nlq": "Bar chart x axis team name y axis school_id, display in desc by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT team_Name , SCHOOLID FROM basketball_match ORDER BY SCHOOLID DESC"
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC",
        "nlq": "Give me the comparison about School_ID over the Team_Name , order by the total number in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC"
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC",
        "nlq": "A bar chart shows the distribution of Team_Name and School_ID , and rank total number from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC"
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC",
        "nlq": "Show me about the distribution of Team_Name and School_ID in a bar chart, and display in desc by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT team_Name , SCHOOLID FROM basketball_match ORDER BY SCHOOLID DESC"
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT team_Name , schoolID FROM basketball_match ORDER BY schoolID DESC",
        "nlq": "Return a bar chart about the distribution of Team_Name and School_ID , list by the Y in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT team_Name , SCHOOLID FROM basketball_match ORDER BY SCHOOLID DESC"
    },
    {
        "record_name": "1091",
        "db_id": "decoration_competition_robust",
        "target": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "nlq": "Show the different countries and the number of members from each with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT COUNTRY , COUNT(*) FROM member GROUP BY COUNTRY"
    },
    {
        "record_name": "1091",
        "db_id": "decoration_competition_robust",
        "target": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "nlq": "Show the different countries and the number of members from each. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country"
    },
    {
        "record_name": "1091",
        "db_id": "decoration_competition_robust",
        "target": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "nlq": "Plot the total number by grouped by country as a bar graph",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country"
    },
    {
        "record_name": "2096@x_name@ASC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "nlq": "What is the proportion of each customer's move in date? Show me the bar chart, sort X from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY date_moved_in ASC"
    },
    {
        "record_name": "2096@x_name@ASC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "nlq": "Please use a bar chart to compare the number of customers of each customer's move in date, and order by the bars from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY WEEKDAY",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home",
        "nlq": "Visualize a pie chart about the proportion of  All_Home and the amount of All_Home.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home"
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home",
        "nlq": "Give me a pie chart to reflect the proportion of  All_Home and the amount of All_Home.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , SUM(All_Home) FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize PIE SELECT All_Games , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , SUM(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT all_home , SUM(all_home) FROM basketball_match GROUP BY all_home"
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home",
        "nlq": "Show me about the proportion of the amount of All_Home and the amount of All_Home in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home"
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home",
        "nlq": "Draw a pie chart about the proportion of  All_Home and the amount of All_Home.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , SUM(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home"
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home",
        "nlq": "For the attribute  All_Home and the amount of All_Home, show their proportion by a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home"
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home",
        "nlq": "Give me a pie to show the number of all home from different all home.",
        "predict_rag_nlq": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT all_home , COUNT(all_home) FROM basketball_match GROUP BY all_home"
    },
    {
        "record_name": "2830@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "nlq": "Count the number of local authorities by the local authority, and order Y-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC"
    },
    {
        "record_name": "2830@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "nlq": "A bar graph listing the local authorities and how many local authorities provided by all stations, order in ascending by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC"
    },
    {
        "record_name": "2830@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "nlq": "Bar chart of how many local authority from each local authority, and order in ascending by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC"
    },
    {
        "record_name": "2830@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "nlq": "Compare the number of the local authority by the local authority, and could you show by the total number in ascending?",
        "predict_rag_nlq": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Local_Authority , COUNT(Local_Authority) FROM station GROUP BY Local_Authority ORDER BY COUNT(Local_Authority) ASC"
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "A line chart shows the change of the sum of Employee_ID over Start_from bin start_from by time, sort X-axis in asc order.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "Return a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time, and rank from low to high by the x-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "Visualize a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time, display in asc by the x-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "Draw a line chart about the change of the sum of Employee_ID over Start_from bin start_from by time, and display in asc by the x-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR ORDER BY Start_from ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "A line chart shows the trend of the sum of Employee_ID over Start_from bin start_from by time, I want to sort by the x-axis from low to high.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "Show me about the change of the sum of Employee_ID over Start_from bin start_from by time in a line chart, and sort Start_from in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "I want to see trend of sum employee id by start from, list by the x axis in ascending.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(EmployeeID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR"
    },
    {
        "record_name": "2087@y_name@ASC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "nlq": "Compare the number of items in the type of each thing using a bar chart, list in asc by the Y please.",
        "predict_rag_nlq": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC"
    },
    {
        "record_name": "2087@y_name@ASC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "nlq": "Show the number of type of thing code from each type of thing code, and I want to rank Y-axis in asc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC"
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home DESC",
        "nlq": "Return a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, sort X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home DESC"
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home DESC",
        "nlq": "Visualize a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, rank in desc by the bar.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home DESC"
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home DESC",
        "nlq": "Show me about the distribution of All_Home and School_ID , and group by attribute ACC_Home in a bar chart, and could you rank by the bars from high to low?",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home DESC"
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home DESC",
        "nlq": "A bar chart shows the distribution of All_Home and School_ID , and group by attribute ACC_Home, and sort X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY schoolID DESC"
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home DESC",
        "nlq": "Stack bar chart of school_id vs ACC_Home based on all home, and list from high to low by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , schoolID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home DESC"
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home DESC",
        "nlq": "Find All_Home and School_ID , and group by attribute ACC_Home, and visualize them by a bar chart, sort X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home DESC"
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home ASC",
        "nlq": "Draw a bar chart about the distribution of All_Home and Team_ID , and group by attribute ACC_Home, I want to rank All_Home in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home ASC",
        "nlq": "Find All_Home and Team_ID , and group by attribute ACC_Home, and visualize them by a bar chart, and display in asc by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home ASC",
        "nlq": "Show me about the distribution of All_Home and Team_ID , and group by attribute ACC_Home in a bar chart, and rank x-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home ASC",
        "nlq": "Give me the comparison about Team_ID over the All_Home , and group by attribute ACC_Home by a bar chart, and list from low to high by the All_Home please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home ASC",
        "nlq": "Stack bar chart of team_id vs ACC_Home based on all home, and display by the x axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY all_home ASC",
        "nlq": "Give me the comparison about Team_ID over the All_Home , and group by attribute ACC_Home, and I want to rank All_Home in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , teamID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home ASC"
    },
    {
        "record_name": "1746",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For those employees who did not have any job in the past, draw a line chart about the change of  salary over  hire_date .",
        "predict_rag_nlq": "Visualize LINE CHART SELECT HIRE_DATE, SALARY FROM employees WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )"
    },
    {
        "record_name": "1746",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For those employees who did not have any job in the past, return a line chart about the change of  salary over  hire_date .",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , wage FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY date_of_hire ASC"
    },
    {
        "record_name": "1746",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For those employees who did not have any job in the past, visualize a line chart about the change of  salary over  hire_date .",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )"
    },
    {
        "record_name": "1746",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For those employees who did not have any job in the past, show me about the change of  salary over  hire_date  in a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )"
    },
    {
        "record_name": "1746",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For those employees who did not have any job in the past, show me the trend about  salary over  hire_date  with a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , wage FROM employees WHERE date_of_hire < '2002-06-21'",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , wage FROM employees WHERE date_of_hire < '2002-06-21'",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , wage FROM employees WHERE date_of_hire < '2002-06-21'"
    },
    {
        "record_name": "1746",
        "db_id": "hr_1_robust",
        "target": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For those employees who did not have any job in the past, give me the trend about  salary over  hire_date .",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_hire , wage FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )"
    },
    {
        "record_name": "2385",
        "db_id": "movie_1_robust",
        "target": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID",
        "nlq": "Show the stars of each director by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
        "rag_dvqs": [
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID"
    },
    {
        "record_name": "2385",
        "db_id": "movie_1_robust",
        "target": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID",
        "nlq": "Please give me a bar chart to compare the stars by directors.",
        "predict_rag_nlq": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
        "rag_dvqs": [
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID"
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Return a bar chart on how many students have each different allergy?, rank by the x axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Show the total number from each allergy, order from low to high by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC"
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Show all allergies with number of students affected Show bar chart, and could you list by the X-axis in asc please?",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC"
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "How many students have each different allergy Show bar chart, could you list by the X-axis in asc please?",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC"
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Show all allergies with number of students affected with a bar chart, order from low to high by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC"
    },
    {
        "record_name": "2345",
        "db_id": "mountain_photos_robust",
        "target": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'",
        "nlq": "What are the correlation between the height and prominence of mountains which do not belong to the range 'Aberdare Range'? Plot the result by a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'"
    },
    {
        "record_name": "1969@y_name@DESC",
        "db_id": "inn_1_robust",
        "target": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "nlq": "Give me a bar chart for the average of baseprice of each decor, could you display Y-axis from high to low order?",
        "predict_rag_nlq": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) ASC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DECOR , AVG(basePrice) FROM Rooms GROUP BY DECOR ORDER BY AVG(basePrice) DESC"
    },
    {
        "record_name": "1969@y_name@DESC",
        "db_id": "inn_1_robust",
        "target": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "nlq": "What is the average price of the rooms for each different decor? Show me a bar chart!, and sort total number in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) ASC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DECOR , avg(basePrice) FROM Rooms GROUP BY DECOR ORDER BY avg(basePrice) DESC"
    },
    {
        "record_name": "1969@y_name@DESC",
        "db_id": "inn_1_robust",
        "target": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "nlq": "Show the average price of the rooms in different decor using a bar chart, and could you display Y-axis from high to low order?",
        "predict_rag_nlq": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) ASC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC"
    },
    {
        "record_name": "1969@y_name@DESC",
        "db_id": "inn_1_robust",
        "target": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "nlq": "Please use a bar chart to show the average price of the rooms in a different decor, and display Y-axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) ASC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC"
    },
    {
        "record_name": "3275",
        "db_id": "world_1_robust",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "Find the government form name and total population for each government form whose average life expectancy is longer than 72. ",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC"
    },
    {
        "record_name": "3275",
        "db_id": "world_1_robust",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "Give me a histogram for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC"
    },
    {
        "record_name": "3275",
        "db_id": "world_1_robust",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "Show me a bar chart for what are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72?",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC"
    },
    {
        "record_name": "3275",
        "db_id": "world_1_robust",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "What are the different government forms and what is the total population of each for government forms that have an average life expectancy greater than 72. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC"
    },
    {
        "record_name": "3275",
        "db_id": "world_1_robust",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "Bar graph to show total number of population from different governmentform",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm HAVING AVG(LifeExpectancy) < 72 ORDER BY SUM(Population) DESC"
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy_Type , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC",
        "nlq": "How many students are affected by each allergy type Visualize by bar chart, could you display total number in descending order please?",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy_Type , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy_Type , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC",
        "nlq": "Draw a bar chart for how many students are affected by each allergy type?, and could you display total number in descending order please?",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy_Type , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy_Type , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC",
        "nlq": "Show all allergy type with number of students affected with a bar chart, list the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy_Type , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy_Type , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC",
        "nlq": "Show all allergy type with number of students affected Visualize by bar chart, list the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy_Type , count(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy_Type , count(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy_Type , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1_robust",
        "target": "Visualize BAR SELECT Allergy_Type , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY count(*) DESC",
        "nlq": "A bar chart about how many students are affected by each allergy type?, and could you order in descending by the Y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy_Type , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy_Type ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "474@x_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Name , seating FROM cinema ORDER BY Name DESC",
        "nlq": "Create a bar chart showing capacity across name, order Name in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , seating FROM cinema ORDER BY Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location DESC",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location ASC",
            "Visualize BAR SELECT Name , sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id = T2.cinema_id GROUP BY T1.cinema_id ORDER BY Name DESC",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ,  Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , seating FROM cinema ORDER BY Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , seating FROM cinema ORDER BY Name DESC"
    },
    {
        "record_name": "474@x_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Name , seating FROM cinema ORDER BY Name DESC",
        "nlq": "Show the capacity for each cinema in a bar chart, list x axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , seating FROM cinema ORDER BY seating DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , seating FROM cinema ORDER BY seating DESC"
    },
    {
        "record_name": "1624@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "nlq": "Group and count the city attribute of the location table to visualize a bar chart, rank by the how many city in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC"
    },
    {
        "record_name": "1624@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "nlq": "Give me a bar chart to compare the number of departments located in different cities, and list y-axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC"
    },
    {
        "record_name": "1624@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "nlq": "Create a bar chart showing the number of city across city, and rank from high to low by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC"
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For those products with a price between 60 and 120, return a bar chart about the distribution of name and code , I want to sort from low to high by the Y.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC"
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For those products with a price between 60 and 120, draw a bar chart about the distribution of name and code , and rank by the y axis in asc please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC"
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For those products with a price between 60 and 120, a bar chart shows the distribution of name and code , list Y-axis in ascending order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC"
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For those products with a price between 60 and 120, visualize a bar chart about the distribution of name and code , I want to sort in ascending by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC"
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For those products with a price between 60 and 120, find name and code , and visualize them by a bar chart, list Y-axis in ascending order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC"
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, sort Y-axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the sum of manager_id bin hire_date by time, sort Y-axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of manager_id over the hire_date bin hire_date by time by a bar chart, and display by the total number in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY MONTH ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of hire_date and the sum of manager_id bin hire_date by time, and I want to sort by the Y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH",
        "nlq": "For all employees who have the letters D or S in their first name, give me the comparison about the sum of manager_id over the hire_date bin hire_date by time, and I want to order in desc by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Manager_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(Manager_ID) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "490",
        "db_id": "climbing_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "A bar chart for returning the number of the countries of the mountains that have a height larger than 5000.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country"
    },
    {
        "record_name": "490",
        "db_id": "climbing_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "What are the countries of mountains with height bigger than 5000, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC"
    },
    {
        "record_name": "490",
        "db_id": "climbing_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "Return the countries of the mountains that have a height larger than 5000, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM mountain WHERE Height > 5000 GROUP BY COUNTRY"
    },
    {
        "record_name": "490",
        "db_id": "climbing_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "Return the number of the countries of the mountains that have a height larger than 5000.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country"
    },
    {
        "record_name": "490",
        "db_id": "climbing_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "What are the number of the countries of mountains with height bigger than 5000?",
        "predict_rag_nlq": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize PIE SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM member GROUP BY Country",
            "Visualize PIE SELECT Country , COUNT(*) FROM member GROUP BY Country",
            "Visualize PIE SELECT Country , count(*) FROM people GROUP BY country"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country"
    },
    {
        "record_name": "490",
        "db_id": "climbing_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "A bar chart for what are the number of the countries of mountains with height bigger than 5000?",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country"
    },
    {
        "record_name": "1000@x_name@ASC",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "nlq": "Bar chart x axis product name y axis how many product name, and I want to display in asc by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC"
    },
    {
        "record_name": "1000@x_name@ASC",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "nlq": "Compare the frequency of product names using a bar chart, and list x-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC"
    },
    {
        "record_name": "1000@x_name@ASC",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "nlq": "Show me a bar chart with the product name and their frequency, sort in ascending by the names.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC"
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, visualize a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, could you show from low to high by the Y please?",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, a bar chart shows the distribution of hire_date and the sum of salary bin hire_date by weekday, could you rank from low to high by the total number?",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, return a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, and order from low to high by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, show me about the distribution of hire_date and the sum of salary bin hire_date by weekday in a bar chart, and display Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN (SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200)  ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees who do not work in departments with managers that have ids between 100 and 200, draw a bar chart about the distribution of hire_date and the sum of salary bin hire_date by weekday, and list by the Y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(wage) FROM employees WHERE Dept_ID NOT IN(SELECT Dept_ID FROM departments WHERE Manager_ID BETWEEN 100 AND 200) ORDER BY SUM(wage) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "855",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.ProjectID = T2.ProjectID WHERE T2.Project_information = 'Graph Database project' BIN Document_Date BY YEAR",
        "nlq": "Show the number of documents in each day for all documents on project with details 'Graph Database project' and bin document date by year interval with a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN Projects AS T2 ON T1.ProjectID = T2.ProjectID WHERE T2.Project_information = 'Graph Database project' BIN Document_Date BY YEAR"
    },
    {
        "record_name": "2845@y_name@ASC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.Station_id JOIN train AS t3 ON t2.Train_id = t3.id WHERE t1.Local_Authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
        "nlq": "Find names of trains that run through stations for the local authority Chiltern, compare the total number of name in a bar graph, and sort in asc by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.Local_Authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) ASC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time ASC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE station.Local_Authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM station JOIN route ON station.id = route.Station_id JOIN train ON route.Train_id = train.id WHERE station.Local_Authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC"
    },
    {
        "record_name": "1759",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of  hire_date and the average of salary bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1759",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of  hire_date and the average of salary bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE date_of_hire < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE date_of_hire < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1759",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, find  hire_date and the average of salary bin hire_date by time, and visualize them by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1759",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, give me the comparison about the average of salary over the  hire_date bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1759",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, show me about the distribution of  hire_date and the average of salary bin hire_date by time in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE date_of_hire < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE date_of_hire < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , AVG(wage) FROM employees WHERE date_of_hire < '2002-06-21' BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "460@y_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY AVG(Price) DESC",
        "nlq": "For each record in schedule, show average of the price for each day in a bar chart, rank by the Y-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY AVG(Price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date ASC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY AVG(Price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification JOIN cinema AS T3 ON T1.Cinema_Identification = T3.Cinema_Identification GROUP BY date ORDER BY AVG(Price) DESC"
    },
    {
        "record_name": "2451@y_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "nlq": "Bar graph to show the number of name from different name, display in descending by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC"
    },
    {
        "record_name": "2451@y_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "nlq": "Can you show me a bar chart to answer how many people with different names for each high schooler?, and I want to rank how many name from high to low order please.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC"
    },
    {
        "record_name": "2451@y_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "nlq": "Count the names of each high schooler using a bar chart, order in desc by the how many name.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC"
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match",
        "nlq": "Draw a bar chart about the distribution of  ACC_Regular_Season and  Team_ID .",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season, Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match ORDER BY ACC_regular_season ASC"
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match",
        "nlq": "Give me the comparison about  Team_ID over the  ACC_Regular_Season  by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season, Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match ORDER BY teamID ASC"
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match",
        "nlq": "Give me the comparison about  Team_ID over the  ACC_Regular_Season .",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season, Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match ORDER BY teamID ASC"
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match",
        "nlq": "Visualize a bar chart about the distribution of  ACC_Regular_Season and  Team_ID .",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match ORDER BY teamID ASC"
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match",
        "nlq": "A bar chart shows the distribution of  ACC_Regular_Season and  Team_ID .",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match ORDER BY teamID ASC"
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match",
        "nlq": "Show me team_id by acc regular season in a histogram",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season, Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_regular_season , teamID FROM basketball_match ORDER BY ACC_regular_season"
    },
    {
        "record_name": "3191@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association ORDER BY association ASC",
        "nlq": "Show me a bar chart for what are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?, and rank in asc by the bar.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT basic_conference , SUM(Enrollment) FROM university WHERE established > 1850 GROUP BY basic_conference ORDER BY SUM(Enrollment) ASC"
    },
    {
        "record_name": "3191@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association ORDER BY association ASC",
        "nlq": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type Show bar chart, I want to sort X-axis from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT basic_conference , SUM(Enrollment) FROM university WHERE established > 1850 GROUP BY basic_conference ORDER BY SUM(Enrollment) ASC"
    },
    {
        "record_name": "3191@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association ORDER BY association ASC",
        "nlq": "What are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type Visualize by bar chart, and could you list from low to high by the bars?",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT basic_conference , SUM(Enrollment) FROM university WHERE established > 1850 GROUP BY basic_conference ORDER BY SUM(Enrollment) ASC"
    },
    {
        "record_name": "3191@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT association , sum(registration) FROM university WHERE established > 1850 GROUP BY association ORDER BY association ASC",
        "nlq": "A bar chart about what are the different affiliations, and what is the total enrollment of schools founded after 1850 for each enrollment type?, I want to sort X-axis from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT basic_conference , SUM(Enrollment) FROM university WHERE established > 1850 GROUP BY basic_conference ORDER BY basic_conference ASC"
    },
    {
        "record_name": "1043",
        "db_id": "customers_card_transactions_robust",
        "target": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "nlq": "Show the number of cards in different card type code in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_Cards GROUP BY card_type_code",
        "rag_dvqs": [
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_Cards GROUP BY card_type_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(*) FROM Customers_Cards GROUP BY CARD_TYPE_CODE"
    },
    {
        "record_name": "1043",
        "db_id": "customers_card_transactions_robust",
        "target": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "nlq": "How many cards in different card type code? Plot a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_Cards GROUP BY card_type_code",
        "rag_dvqs": [
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_Cards GROUP BY card_type_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(CARD_TYPE_CODE) FROM Customers_Cards GROUP BY CARD_TYPE_CODE"
    },
    {
        "record_name": "1043",
        "db_id": "customers_card_transactions_robust",
        "target": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "nlq": "Show me the number of card type code by card type code in a histogram",
        "predict_rag_nlq": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_Cards GROUP BY card_type_code",
        "rag_dvqs": [
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_Cards GROUP BY card_type_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(CARD_TYPE_CODE) FROM Customers_Cards GROUP BY CARD_TYPE_CODE"
    },
    {
        "record_name": "1317@x_name@DESC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "nlq": "Which committees have delegates from the Democratic party, and count them by a bar chart, I want to rank x axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC"
    },
    {
        "record_name": "1317@x_name@DESC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "nlq": "Return all the committees that have delegates from Democratic party, and count them by a bar chart, display in desc by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC"
    },
    {
        "record_name": "2834@x_name@DESC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities DESC",
        "nlq": "Draw a bar chart of services versus the number of services, could you display by the names in desc?",
        "predict_rag_nlq": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities DESC"
    },
    {
        "record_name": "2834@x_name@DESC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities DESC",
        "nlq": "Group by services attribute in station table and compute the total number of services with a bar chart, display x-axis from high to low order please.",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) DESC"
    },
    {
        "record_name": "2834@x_name@DESC",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY amenities DESC",
        "nlq": "Give me a bar chart that the x-axis is the services and the Y is the count(services), list by the names from high to low please.",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT amenities , COUNT(amenities) FROM station GROUP BY amenities ORDER BY COUNT(amenities) DESC"
    },
    {
        "record_name": "2703",
        "db_id": "school_finance_robust",
        "target": "Visualize BAR SELECT Donator_name , sum(quantity) FROM endowment GROUP BY Donator_name ORDER BY sum(quantity) DESC",
        "nlq": "List each donator name and the amount of endowment in descending order of the amount of endowment by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Donator_name , SUM(quantity) FROM endowment GROUP BY Donator_name ORDER BY SUM(quantity) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY SUM(Price) DESC",
            "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Donator_name , SUM(quantity) FROM endowment GROUP BY Donator_name ORDER BY SUM(quantity) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Donator_name , SUM(quantity) FROM endowment GROUP BY Donator_name ORDER BY SUM(quantity) DESC"
    },
    {
        "record_name": "2703",
        "db_id": "school_finance_robust",
        "target": "Visualize BAR SELECT Donator_name , sum(quantity) FROM endowment GROUP BY Donator_name ORDER BY sum(quantity) DESC",
        "nlq": "List each donator name and the amount of endowment in descending order of the amount of endowment. Plot them as bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Donator_name , quantity FROM endowment ORDER BY quantity DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Level_of_membership DESC",
            "Visualize BAR SELECT Participant_Details , Participant_ID FROM Participants ORDER BY Participant_Details DESC",
            "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees ORDER BY SALARY DESC",
            "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Level_of_membership FROM visitor WHERE Level_of_membership > 4 ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Donator_name , SUM(quantity) FROM endowment GROUP BY Donator_name ORDER BY SUM(quantity) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Donator_name , SUM(quantity) FROM endowment GROUP BY Donator_name ORDER BY SUM(quantity) DESC"
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the amount of hire_date bin hire_date by weekday in a bar chart, and rank from high to low by the Y please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(date_of_hire) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, find hire_date and the amount of hire_date bin hire_date by weekday, and visualize them by a bar chart, and could you show in descending by the how many hire date?",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, give me the comparison about the amount of hire_date over the hire_date bin hire_date by weekday by a bar chart, sort by the y axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday, and show y axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by weekday, and rank total number from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY WEEKDAY ORDER BY COUNT(HIRE_DATE) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "2397",
        "db_id": "movie_1_robust",
        "target": "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" GROUP BY director",
        "nlq": "For each director, return the director's name together with  the highest rating among all of their movies and ignore movies whose director is NULL. Could you plot the result with a pie chart?",
        "predict_rag_nlq": "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"NULL\" GROUP BY director",
        "rag_dvqs": [
            "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
            "Visualize PIE SELECT title , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY title",
            "Visualize PIE SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize PIE SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize PIE SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
            "Visualize PIE SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
        "predict_debugged_db_ann": "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" GROUP BY director"
    },
    {
        "record_name": "1234",
        "db_id": "dorm_1_robust",
        "target": "Visualize PIE SELECT sex , count(*) FROM student WHERE Age > (SELECT avg(Age) FROM student) GROUP BY sex",
        "nlq": "Find the number of students whose age is older than the average age for each gender. Visualize by pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , count(*) FROM Student WHERE Age > (SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize PIE SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize PIE SELECT Sex , max(age) FROM student GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize PIE SELECT Sex , count(*) FROM Faculty GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , count(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT sex , count(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY sex"
    },
    {
        "record_name": "1234",
        "db_id": "dorm_1_robust",
        "target": "Visualize PIE SELECT sex , count(*) FROM student WHERE Age > (SELECT avg(Age) FROM student) GROUP BY sex",
        "nlq": "Draw a pie chart for how many students are older than average for each gender?",
        "predict_rag_nlq": "Visualize PIE SELECT sex , avg(age) FROM Student GROUP BY sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize PIE SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize PIE SELECT Sex , max(age) FROM student GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
            "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize PIE SELECT Sex , count(*) FROM Faculty GROUP BY Sex",
            "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT sex , avg(age) FROM Student GROUP BY sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT sex , avg(Age) FROM Student GROUP BY sex"
    },
    {
        "record_name": "1234",
        "db_id": "dorm_1_robust",
        "target": "Visualize PIE SELECT sex , count(*) FROM student WHERE Age > (SELECT avg(Age) FROM student) GROUP BY sex",
        "nlq": "Return a pie on how many students are older than average for each gender?",
        "predict_rag_nlq": "Visualize PIE SELECT sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize PIE SELECT Sex , max(age) FROM student GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC",
            "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT sex , count(*) FROM student WHERE age >(SELECT avg(age) FROM student) GROUP BY sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY sex"
    },
    {
        "record_name": "1234",
        "db_id": "dorm_1_robust",
        "target": "Visualize PIE SELECT sex , count(*) FROM student WHERE Age > (SELECT avg(Age) FROM student) GROUP BY sex",
        "nlq": "How many students are older than average for each gender. ",
        "predict_rag_nlq": "Visualize BAR SELECT sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY sex",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT sex , count(*) FROM student WHERE age >(SELECT avg(age) FROM student) GROUP BY sex",
        "predict_debugged_db_ann": "Visualize BAR SELECT sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY sex"
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll_robust",
        "target": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "nlq": "Show me about the proportion of the sum of Height and the sum of Height in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Poll_Source , SUM(Height) FROM people GROUP BY Poll_Source",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize PIE SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize PIE SELECT state , SUM(vote_id) FROM votes GROUP BY state",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize PIE SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Poll_Source , SUM(Height) FROM people GROUP BY Poll_Source",
        "predict_debugged_db_ann": "Visualize PIE SELECT Poll_Source , SUM(Height) FROM people GROUP BY Poll_Source"
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll_robust",
        "target": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "nlq": "For the attribute  Sex and the sum of Height, show their proportion by a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender",
            "Visualize PIE SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , count(*) FROM Faculty GROUP BY Sex",
            "Visualize PIE SELECT gender_code , COUNT(*) FROM Guests GROUP BY gender_code ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT gender , COUNT(gender) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize PIE SELECT gender , COUNT(gender) FROM people GROUP BY gender"
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll_robust",
        "target": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "nlq": "Visualize a pie chart about the proportion of  Sex and the sum of Height.",
        "predict_rag_nlq": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
            "Visualize PIE SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender"
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll_robust",
        "target": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "nlq": "A pie chart shows the proportion of  Sex and the sum of Height.",
        "predict_rag_nlq": "Visualize PIE SELECT gender , SUM(Height) FROM people",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
            "Visualize PIE SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender"
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll_robust",
        "target": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "nlq": "Return a pie chart about the proportion of  Sex and the sum of Height.",
        "predict_rag_nlq": "Visualize PIE SELECT gender , SUM(Height) FROM people",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
            "Visualize PIE SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender"
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll_robust",
        "target": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "nlq": "Create a pie chart showing sum height across sex.",
        "predict_rag_nlq": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT gender , avg(age) FROM Person GROUP BY gender",
            "Visualize PIE SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize PIE SELECT gender , count(*) FROM dorm GROUP BY gender"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender",
        "predict_debugged_db_ann": "Visualize PIE SELECT gender , SUM(Height) FROM people GROUP BY gender"
    },
    {
        "record_name": "988",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT customer_Fname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
        "nlq": "Show the number of accounts for each customer in a bar chart grouping by customer's first name.",
        "predict_rag_nlq": "Visualize BAR SELECT customer_Fname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
        "rag_dvqs": [
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT customer_Fname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
        "predict_debugged_db_ann": "Visualize BAR SELECT customer_Fname , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID"
    },
    {
        "record_name": "988",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT customer_Fname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
        "nlq": "How many accounts for each customer? Show a bar chart that groups by customer's first name.",
        "predict_rag_nlq": "Visualize BAR SELECT customer_Fname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
        "rag_dvqs": [
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT customer_Fname , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID",
        "predict_debugged_db_ann": "Visualize BAR SELECT customer_Fname , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID GROUP BY T1.customerID"
    },
    {
        "record_name": "116@y_name@ASC",
        "db_id": "assets_maintenance_robust",
        "target": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identifacation GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "nlq": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted in a bar chart, rank from low to high by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT staff_name, COUNT(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identification GROUP BY T1.staff_name ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identification GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identification GROUP BY staff_name ORDER BY COUNT(staff_name) ASC"
    },
    {
        "record_name": "116@y_name@ASC",
        "db_id": "assets_maintenance_robust",
        "target": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identifacation GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "nlq": "Return a bar chart on how many engineers did each staff contact? List both the contact staff name and number of engineers contacted, and could you order by the Y in asc please?",
        "predict_rag_nlq": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT staff_name , count(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identifacation GROUP BY staff_name ORDER BY count(staff_name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identification GROUP BY staff_name ORDER BY COUNT(staff_name) ASC"
    },
    {
        "record_name": "116@y_name@ASC",
        "db_id": "assets_maintenance_robust",
        "target": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identifacation GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "nlq": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted Plot them as bar chart, show the total number in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT staff_name, COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(engineer_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(engineer_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT staff_name , COUNT(engineer_identification) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identification GROUP BY T1.staff_name ORDER BY COUNT(engineer_identification) ASC"
    },
    {
        "record_name": "116@y_name@ASC",
        "db_id": "assets_maintenance_robust",
        "target": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identifacation GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "nlq": "Give me a histogram for how many engineers did each staff contact? List both the contact staff name and number of engineers contacted, could you order in ascending by the y axis?",
        "predict_rag_nlq": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identification GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identification GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT staff_name , COUNT(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_identification = T2.contact_staff_identification GROUP BY T1.staff_name ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "1112",
        "db_id": "department_management_robust",
        "target": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth",
        "nlq": "Show the average age of heads of departments born in each state with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth",
        "rag_dvqs": [
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state ASC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state DESC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) ASC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) DESC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY born_state ASC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY born_state DESC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) ASC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth",
        "predict_debugged_db_ann": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth"
    },
    {
        "record_name": "1112",
        "db_id": "department_management_robust",
        "target": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth",
        "nlq": "Show me mean age by born state in a histogram",
        "predict_rag_nlq": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth",
        "rag_dvqs": [
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state ASC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state DESC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) ASC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) DESC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY born_state ASC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY born_state DESC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) ASC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth",
        "predict_debugged_db_ann": "Visualize BAR SELECT state_of_birth , AVG(age) FROM head GROUP BY state_of_birth"
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "Show the names of high school students and their corresponding number of friends Plot them as bar chart, and rank in desc by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , AVG(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , AVG(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC"
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "A bar chart about what are the names of the high schoolers and how many friends does each have?, and display X-axis in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , SUM(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC"
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "Display a bar chart for what are the names of the high schoolers and how many friends does each have?, display by the bars in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , AVG(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , AVG(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC"
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "Show the names of high school students and their corresponding number of friends in a bar chart, and order in descending by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , SUM(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC"
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1_robust",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "What are the names of the high schoolers and how many friends does each have Show bar chart, and rank in desc by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , SUM(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC"
    },
    {
        "record_name": "1258",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Find  login_name and  author_id , and visualize them by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name"
    },
    {
        "record_name": "1258",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Visualize a bar chart about the distribution of  login_name and  author_id .",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name"
    },
    {
        "record_name": "1258",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Return a bar chart about the distribution of  login_name and  author_id .",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name"
    },
    {
        "record_name": "1258",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Show me about the distribution of  login_name and  author_id  in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name"
    },
    {
        "record_name": "1258",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Draw a bar chart about the distribution of  login_name and  author_id .",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT login_name , authorID FROM Course_Authors_and_Tutors ORDER BY personal_name"
    },
    {
        "record_name": "3050@x_name@ASC",
        "db_id": "train_station_robust",
        "target": "Visualize BAR SELECT Name , all_Passengers FROM station WHERE Position != 'London' ORDER BY Name ASC",
        "nlq": "Show the names and total passengers for all train stations not in London Visualize by bar chart, and I want to sort in ascending by the bars please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Position != 'London' ORDER BY Total_Passengers ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers DESC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
            "Visualize PIE SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location ASC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location DESC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) ASC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Position != 'London' ORDER BY Total_Passengers ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , all_Passengers FROM station WHERE Position != 'London' ORDER BY all_Passengers ASC"
    },
    {
        "record_name": "3050@x_name@ASC",
        "db_id": "train_station_robust",
        "target": "Visualize BAR SELECT Name , all_Passengers FROM station WHERE Position != 'London' ORDER BY Name ASC",
        "nlq": "Show the names and total passengers for all train stations not in London with a bar chart, and could you display by the x axis from low to high please?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers DESC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
            "Visualize PIE SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location ASC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) ASC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location DESC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , all_Passengers FROM station WHERE Position != 'London' ORDER BY all_Passengers ASC"
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, visualize a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, and could you order by the y axis in descending?",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, and display by the Y-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, find hire_date and the amount of hire_date bin hire_date by time, and visualize them by a bar chart, sort by the how many hire date in descending please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, show me about the distribution of hire_date and the amount of hire_date bin hire_date by time in a bar chart, sort in descending by the y-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH",
        "nlq": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of hire_date and the amount of hire_date bin hire_date by time, display Y in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE date_of_hire < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE date_of_hire < '2002-06-21' ORDER BY COUNT(date_of_hire) DESC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "553",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE",
        "nlq": "how many sections does each course has?",
        "predict_rag_nlq": "Visualize BAR SELECT COURSE_CODE, COUNT(*) FROM CLASS GROUP BY COURSE_CODE",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT COURSE_CODE , COUNT(*) FROM CLASS GROUP BY COURSE_CODE"
    },
    {
        "record_name": "553",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE",
        "nlq": "Visualize a bar chart for how many sections does each course has?",
        "predict_rag_nlq": "Visualize BAR SELECT COURSE_CODE, COUNT(*) FROM CLASS GROUP BY COURSE_CODE",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT COURSE_CODE , COUNT(*) FROM CLASS GROUP BY COURSE_CODE"
    },
    {
        "record_name": "553",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE",
        "nlq": "How many sections does each course has. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT COURSE_CODE, COUNT(*) FROM CLASS GROUP BY COURSE_CODE",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT COURSE_CODE , COUNT(*) FROM CLASS GROUP BY COURSE_CODE"
    },
    {
        "record_name": "553",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE",
        "nlq": "Draw a bar chart for how many sections does each course have?",
        "predict_rag_nlq": "Visualize BAR SELECT COURSE_CODE, COUNT(*) FROM CLASS GROUP BY COURSE_CODE",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT COURSE_CODE , COUNT(*) FROM CLASS GROUP BY COURSE_CODE"
    },
    {
        "record_name": "553",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE",
        "nlq": "Give me a histogram for how many sections does each course have?",
        "predict_rag_nlq": "Visualize BAR SELECT COURSE_CODE, COUNT(*) FROM CLASS GROUP BY COURSE_CODE ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY COUNT(course_name) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT COURSE_CODE , COUNT(*) FROM CLASS GROUP BY COURSE_CODE ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "553",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE",
        "nlq": "How many sections does each course have. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT COURSE_CODE, COUNT(*) FROM CLASS GROUP BY COURSE_CODE",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(course_name) FROM courses GROUP BY course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT COURSE_CODE , COUNT(*) FROM CLASS GROUP BY COURSE_CODE"
    },
    {
        "record_name": "553",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT COURSE_CODE , count(*) FROM CLASS GROUP BY COURSE_CODE",
        "nlq": "Bar chart x axis crs code y axis the total number ",
        "predict_rag_nlq": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE",
        "rag_dvqs": [
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE",
        "predict_debugged_db_ann": "Visualize BAR SELECT COURSE_CODE , COUNT(*) FROM CLASS GROUP BY COURSE_CODE"
    },
    {
        "record_name": "1311",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "nlq": "Show how many delegates in each party with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"
    },
    {
        "record_name": "1311",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "nlq": "For each party, use a bar chart to show the number of its delegates.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC"
    },
    {
        "record_name": "1380@x_name@DESC",
        "db_id": "epinions_1_robust",
        "target": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
        "nlq": "Find each target user's name and average trust score Visualize by bar chart, and sort by the x-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name ASC",
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY avg(trust) DESC",
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY avg(trust) ASC",
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id",
            "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY name DESC",
            "Visualize PIE SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id",
            "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY name ASC",
            "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY avg(T2.rating) DESC",
            "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY avg(T2.rating) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , avg(TRUST) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY NAME DESC"
    },
    {
        "record_name": "1394@x_name@ASC",
        "db_id": "film_rank_robust",
        "target": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY Title ORDER BY Title ASC",
        "nlq": "For each title, use a bar chart to show the number of films, list from low to high by the x axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY Title ORDER BY COUNT(Title) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY COUNT(Title) ASC",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY COUNT(Title) DESC",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title ORDER BY COUNT(Title) ASC",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title ORDER BY COUNT(Title) DESC",
            "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Type ,  Title"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY COUNT(Title) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.movie_ID = T2.movie_ID GROUP BY Title ORDER BY COUNT(Title) ASC"
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "Give me a bar chart for charge_amount of each charge type, could you list by the x axis in asc?",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC"
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "List each charge type and its amount Show bar chart, display bars in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC"
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "List each charge type and its amount in a bar chart, list in asc by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC"
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "Visualize a bar chart for how much does each charge type costs? List both charge type and amount, and rank charge_type in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC"
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "How much does each charge type costs? List both charge type and amount, could you list bar in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC"
    },
    {
        "record_name": "2902",
        "db_id": "student_transcripts_tracking_robust",
        "target": "Visualize BAR SELECT Description , COUNT(Description) FROM Sections GROUP BY Description",
        "nlq": "Count the section_description, and group by section_description with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "rag_dvqs": [
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT Description , COUNT(Description) FROM Sections GROUP BY Description"
    },
    {
        "record_name": "2902",
        "db_id": "student_transcripts_tracking_robust",
        "target": "Visualize BAR SELECT Description , COUNT(Description) FROM Sections GROUP BY Description",
        "nlq": "Show how many section description from each section description",
        "predict_rag_nlq": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
        "rag_dvqs": [
            "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
            "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description ASC",
            "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY Description DESC",
            "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) ASC",
            "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description ORDER BY COUNT(Description) DESC",
            "Visualize PIE SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
            "Visualize BAR SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft",
            "Visualize BAR SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft ORDER BY Aircraft ASC",
            "Visualize BAR SELECT Aircraft , COUNT(Aircraft) FROM aircraft AS T1 JOIN MATCH AS T2 ON T1.Aircraft_ID = T2.Winning_Aircraft GROUP BY Aircraft ORDER BY Aircraft DESC",
            "Visualize BAR SELECT name , count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.aid ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
        "predict_debugged_db_ann": "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description"
    },
    {
        "record_name": "1990",
        "db_id": "insurance_fnol_robust",
        "target": "Visualize BAR SELECT DateClosed , COUNT(DateClosed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.CustomerID = t2.CustomerID WHERE t1.CustomerName LIKE \"%Diana%\" BIN DateClosed BY WEEKDAY",
        "nlq": "Retrieve the close dates of all the policies associated with the customer whose name contains \"Diana\", bin the close dates into the day of week interval and count them for a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT DateClosed , COUNT(DateClosed) FROM Customers AS T1 JOIN Customers_Policies AS T2 ON T1.CustomerID = T2.CustomerID WHERE T1.CustomerName LIKE \"%Diana%\" BIN DateClosed BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY",
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Closed) ASC BIN Date_Closed BY WEEKDAY",
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Closed) DESC BIN Date_Closed BY WEEKDAY",
            "Visualize BAR SELECT Date_Opened , COUNT(Date_Opened) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Opened BY WEEKDAY",
            "Visualize BAR SELECT Date_Opened , COUNT(Date_Opened) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Opened) ASC BIN Date_Opened BY WEEKDAY",
            "Visualize BAR SELECT Date_Opened , COUNT(Date_Opened) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Opened) DESC BIN Date_Opened BY WEEKDAY",
            "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\" BIN InvoiceDate BY WEEKDAY",
            "Visualize BAR SELECT order_date , COUNT(order_date) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\" GROUP BY customer_name BIN order_date BY WEEKDAY",
            "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"  ORDER BY COUNT(InvoiceDate) ASC BIN InvoiceDate BY WEEKDAY",
            "Visualize BAR SELECT InvoiceDate , COUNT(InvoiceDate) FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId = T2.CustomerId WHERE T1.FirstName = \"Astrid\" AND LastName = \"Gruber\"  ORDER BY COUNT(InvoiceDate) DESC BIN InvoiceDate BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DateClosed , COUNT(DateClosed) FROM Customers JOIN Customers_Policies ON Customers.CustomerID = Customers_Policies.CustomerID WHERE Customers.CustomerName LIKE \"%Diana%\" BIN DateClosed BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT DateClosed , COUNT(DateClosed) FROM Customers JOIN Customers_Policies ON Customers.CustomerID = Customers_Policies.CustomerID WHERE Customers.CustomerName LIKE \"%Diana%\" BIN DateClosed BY WEEKDAY"
    },
    {
        "record_name": "3019",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize PIE SELECT T1.investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "nlq": "Show the id and details for the investors who have the top 3 number of transactions in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT investor_details, investor_id FROM investors WHERE investor_id IN (SELECT investor_id FROM transactions GROUP BY investor_id ORDER BY COUNT(*) DESC LIMIT 3)",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
            "Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize PIE SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.investor_details , T1.investor_id FROM investors AS T1 JOIN transactions AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "record_name": "3019",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize PIE SELECT T1.investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "nlq": "Show the id and details for the investors who have the top 3 number of transactions. Show the proportion.",
        "predict_rag_nlq": "Visualize BAR SELECT investor_details, COUNT(transaction_id) FROM investors AS T1 JOIN transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY investor_details ORDER BY COUNT(transaction_id) DESC LIMIT 3",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Investor_details , COUNT(transaction_id) FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY Investor_details ORDER BY COUNT(transaction_id) DESC LIMIT 3",
        "predict_debugged_db_ann": "Visualize BAR SELECT INVESTOR_DETAILS , COUNT(TRANSACTION_ID) FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY INVESTOR_DETAILS ORDER BY COUNT(TRANSACTION_ID) DESC LIMIT 3"
    },
    {
        "record_name": "525",
        "db_id": "college_1_robust",
        "target": "Visualize PIE SELECT DEPARTMENT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.DEPARTMENT_CODE ORDER BY count(*) DESC LIMIT 3",
        "nlq": "Find the number of students in each department that has the top 3 highest number of students with a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT DEPARTMENT_NAME , count(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.DEPARTMENT_CODE ORDER BY count(*) DESC LIMIT 3",
        "rag_dvqs": [
            "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize BAR SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize PIE SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT T1.dept_name , count(DISTINCT T2.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY count(DISTINCT T2.id) DESC",
            "Visualize BAR SELECT T1.dept_name , count(DISTINCT T2.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY T1.dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT DEPARTMENT_NAME , count(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.DEPARTMENT_CODE ORDER BY count(*) DESC LIMIT 3",
        "predict_debugged_db_ann": "Visualize PIE SELECT DEPARTMENT_NAME , COUNT(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T2.DEPARTMENT_NAME ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "record_name": "525",
        "db_id": "college_1_robust",
        "target": "Visualize PIE SELECT DEPARTMENT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.DEPARTMENT_CODE ORDER BY count(*) DESC LIMIT 3",
        "nlq": "Which departments have the top 3 highest number of students? Show the department name and number of students with a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT DEPARTMENT_NAME , count(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.DEPARTMENT_CODE ORDER BY count(*) DESC LIMIT 3",
        "rag_dvqs": [
            "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize BAR SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize PIE SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT T1.dept_name , count(DISTINCT T2.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY count(DISTINCT T2.id) DESC",
            "Visualize BAR SELECT T1.dept_name , count(DISTINCT T2.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY T1.dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT DEPARTMENT_NAME , count(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T1.DEPARTMENT_CODE ORDER BY count(*) DESC LIMIT 3",
        "predict_debugged_db_ann": "Visualize PIE SELECT DEPARTMENT_NAME , COUNT(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPARTMENT_CODE = T2.DEPARTMENT_CODE GROUP BY T2.DEPARTMENT_NAME ORDER BY COUNT(*) DESC LIMIT 3"
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY Budget_Type_Code",
        "nlq": "Show budget type codes and the number of documents in each budget type by a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code"
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY Budget_Type_Code",
        "nlq": "Show budget type codes and the number of documents in each budget type. Show the proportion.",
        "predict_rag_nlq": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code"
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY Budget_Type_Code",
        "nlq": "Display a pie chart for what are the different budget type codes, and how many documents are there for each?",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code"
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY Budget_Type_Code",
        "nlq": "Give the proportion of what are the different budget type codes, and how many documents are there for each?",
        "predict_rag_nlq": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code"
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY Budget_Type_Code",
        "nlq": "What are the different budget type codes, and how many documents are there for each. Show a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code"
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY Budget_Type_Code",
        "nlq": "Compute the total the total number across budget type code as a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code"
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , sum(income) FROM manufacturers GROUP BY Name",
        "nlq": "Find the total revenue for each manufacturer. Plot them as bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(income) FROM Manufacturers GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Income) FROM Manufacturers GROUP BY Name"
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , sum(income) FROM manufacturers GROUP BY Name",
        "nlq": "A bar chart about what is the total revenue of each manufacturer?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name DESC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(income) FROM Manufacturers GROUP BY Name ORDER BY Name ASC"
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , sum(income) FROM manufacturers GROUP BY Name",
        "nlq": "Return a bar chart on what is the total revenue of each manufacturer?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name DESC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(income) FROM Manufacturers GROUP BY Name ORDER BY Name ASC"
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , sum(income) FROM manufacturers GROUP BY Name",
        "nlq": "What is the total revenue of each manufacturer. ",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Income) FROM Manufacturers GROUP BY Name"
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , sum(income) FROM manufacturers GROUP BY Name",
        "nlq": "Bar graph to show sum revenue from different name",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Income) FROM Manufacturers GROUP BY Name"
    },
    {
        "record_name": "2646",
        "db_id": "race_track_robust",
        "target": "Visualize BAR SELECT Name , capacity FROM track WHERE Year_Opened > 2000 ORDER BY capacity",
        "nlq": "Show names and seatings, ordered by seating for all tracks opened after 2000 in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Capacity FROM track WHERE Year_Opened > 2000 ORDER BY Capacity"
    },
    {
        "record_name": "2646",
        "db_id": "race_track_robust",
        "target": "Visualize BAR SELECT Name , capacity FROM track WHERE Year_Opened > 2000 ORDER BY capacity",
        "nlq": "Show names and seatings, ordered by seating for all tracks opened after 2000. Plot them as bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Capacity FROM track WHERE Year_Opened > 2000 ORDER BY Capacity"
    },
    {
        "record_name": "2646",
        "db_id": "race_track_robust",
        "target": "Visualize BAR SELECT Name , capacity FROM track WHERE Year_Opened > 2000 ORDER BY capacity",
        "nlq": "Return a histogram on what are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Capacity FROM track WHERE Year_Opened > 2000 ORDER BY Capacity"
    },
    {
        "record_name": "2646",
        "db_id": "race_track_robust",
        "target": "Visualize BAR SELECT Name , capacity FROM track WHERE Year_Opened > 2000 ORDER BY capacity",
        "nlq": "Return a bar chart on what are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Capacity FROM track WHERE Year_Opened > 2000 ORDER BY Capacity"
    },
    {
        "record_name": "2646",
        "db_id": "race_track_robust",
        "target": "Visualize BAR SELECT Name , capacity FROM track WHERE Year_Opened > 2000 ORDER BY capacity",
        "nlq": "What are the names and seatings for all tracks opened after 2000, ordered by seating. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Capacity FROM track WHERE Year_Opened > 2000 ORDER BY Capacity"
    },
    {
        "record_name": "636@y_name@DESC",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "nlq": "Find the average of credits of courses that have more than one prerequisite for each title with a bar chart, I want to order in descending by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) DESC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) ASC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC"
    },
    {
        "record_name": "636@y_name@DESC",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "nlq": "What is the average of credit value of courses with more than one prerequisite for each title? Return a bar chart, rank by the total number in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) DESC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) ASC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC"
    },
    {
        "record_name": "2149@y_name@DESC",
        "db_id": "local_govt_in_alabama_robust",
        "target": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC",
        "nlq": "Give me a bar chart to show the number of event details of events that have more than one participant, and list from high to low by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY Event_Details DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) ASC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY Event_Details ASC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC"
    },
    {
        "record_name": "2149@y_name@DESC",
        "db_id": "local_govt_in_alabama_robust",
        "target": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC",
        "nlq": "For events that have more than one participant, count the event details for a bar chart, sort by the y axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY Event_Details DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) ASC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY Event_Details ASC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Event_Information , COUNT(Event_Information) FROM Events AS T1 JOIN Participants_in_Events AS T2 ON T1.EventID = T2.EventID GROUP BY Event_Information ORDER BY COUNT(Event_Information) DESC"
    },
    {
        "record_name": "709",
        "db_id": "county_public_safety_robust",
        "target": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Display a bar chart for how many counties correspond to each police force?",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC"
    },
    {
        "record_name": "709",
        "db_id": "county_public_safety_robust",
        "target": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Return a bar chart on how many counties correspond to each police force?",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "record_name": "709",
        "db_id": "county_public_safety_robust",
        "target": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "How many counties correspond to each police force. ",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "record_name": "709",
        "db_id": "county_public_safety_robust",
        "target": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Create a bar chart showing the total number across police force",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "record_name": "1580",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN HIRE_DATE BY TIME",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1580",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the amount of hire_date over the  hire_date bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY COUNT(date_of_hire) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1580",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of  hire_date and the amount of hire_date bin hire_date by time in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY COUNT(date_of_hire) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1580",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find  hire_date and the amount of hire_date bin hire_date by time, and visualize them by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1580",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 BIN date_of_hire BY MONTH",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of  hire_date and the amount of hire_date bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , COUNT(date_of_hire) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY COUNT(date_of_hire) ASC BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "2177@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
        "nlq": "What is the number of names for each product in the store?, and sort by the Name in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC"
    },
    {
        "record_name": "2177@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
        "nlq": "Give me a bar chart for how many name of each name, order by the bar from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC"
    },
    {
        "record_name": "2177@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
        "nlq": "Count the names of all the products in the store and return me a bar chart, could you sort X from high to low order?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC"
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT Manufacturer , income FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, draw a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Manufacturer, Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Manufacturer , T2.income FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Manufacturer , T2.Income FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT Manufacturer , income FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, return a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Manufacturer, Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Manufacturer , T2.income FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Manufacturer , T2.Income FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT Manufacturer , income FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, show me about the correlation between  manufacturer and  revenue , and group by attribute headquarter in a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Name AS Manufacturer , Income AS Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT Manufacturer , income FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, a scatter chart shows the correlation between  manufacturer and  revenue , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Manufacturer , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Name AS Manufacturer , Income AS Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1_robust",
        "target": "Visualize SCATTER SELECT Manufacturer , income FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, visualize a scatter chart about the correlation between  manufacturer and  revenue , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Manufacturer, income FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T2.Name , T2.income FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T2.Name , T2.income FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter"
    },
    {
        "record_name": "1481@y_name@ASC",
        "db_id": "game_injury_robust",
        "target": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE Injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
        "nlq": "How many injured players not suffering from injury of 'Knee problem' in each match? Show me a bar chart grouping by number of matches, and rank by the y axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) DESC",
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches DESC",
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY COUNT(Date) ASC",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY COUNT(Date) DESC",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY Date DESC",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY Date ASC",
            "Visualize BAR SELECT Season , COUNT(Season) FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id = T2.id JOIN injury_accident AS T3 ON T1.id = T3.game_id WHERE T3.injury = 'Foot injury' OR T3.injury = 'Knee problem'  ORDER BY COUNT(Season) ASC BIN Season BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE Injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC"
    },
    {
        "record_name": "1157",
        "db_id": "dog_kennels_robust",
        "target": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "nlq": "List the number of dogs of the rarest breed in each treatment day with a line chart that groups by date of treatment.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) GROUP BY date_of_treatment",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY DAY",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived ASC",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived DESC",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived",
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1) GROUP BY date_of_treatment",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY date_of_treatment"
    },
    {
        "record_name": "1157",
        "db_id": "dog_kennels_robust",
        "target": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "nlq": "How many dogs of the rarest breed in each treatment day? Draw a line chart that groups by date of treatment.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) GROUP BY date_of_treatment",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY DAY",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived ASC",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived DESC",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived",
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1) GROUP BY date_of_treatment",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY date_of_treatment"
    },
    {
        "record_name": "2629@y_name@ASC",
        "db_id": "protein_institute_robust",
        "target": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC",
        "nlq": "Let institution types as the X-axis and the number of institutions for each type as Y-axis, the visualization type is bar chart, rank from low to high by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT category , COUNT(*) FROM Institution GROUP BY category ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2629@y_name@ASC",
        "db_id": "protein_institute_robust",
        "target": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC",
        "nlq": "Please give me a bar chart showing institution types, along with the number of institutions for each type, could you show from low to high by the y axis?",
        "predict_rag_nlq": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT category , COUNT(*) FROM Institution GROUP BY category ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2629@y_name@ASC",
        "db_id": "protein_institute_robust",
        "target": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC",
        "nlq": "Draw a bar chart of type versus the total number, and order from low to high by the the total number .",
        "predict_rag_nlq": "Visualize BAR SELECT type , count(*) FROM institution GROUP BY type ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY Type ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT category , count(*) FROM Institution GROUP BY category ORDER BY count(*) ASC"
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of  headquarter and the average of manufacturer , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Income) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, give me the comparison about the average of manufacturer over the  headquarter , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of  headquarter and the average of manufacturer , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Code) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of  headquarter and the average of manufacturer , and group by attribute headquarter.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Code) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "nlq": "For those records from the products and each product's manufacturer, find  headquarter and the average of manufacturer , and group by attribute headquarter, and visualize them by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter"
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, a bar chart shows the distribution of job_id and the sum of employee_id , and group by attribute job_id, show by the X in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, find job_id and the sum of employee_id , and group by attribute job_id, and visualize them by a bar chart, could you order x-axis in desc order?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, draw a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, and show bars from high to low order please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, return a bar chart about the distribution of job_id and the sum of employee_id , and group by attribute job_id, I want to order in desc by the X-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For those employees who was hired before 2002-06-21, show me about the distribution of job_id and the sum of employee_id , and group by attribute job_id in a bar chart, show bars from high to low order please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(employee_id) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(employee_id) FROM employees WHERE date_of_hire < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(employee_id) DESC"
    },
    {
        "record_name": "1408",
        "db_id": "flight_1_robust",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "Show all destinations and the number of flights to each destination by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT destination , count(*) FROM flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT DESTINATION , COUNT(*) FROM flight GROUP BY DESTINATION"
    },
    {
        "record_name": "1408",
        "db_id": "flight_1_robust",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "Show all destinations and the number of flights to each destination. Plot them as bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT destination , count(*) FROM flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT DESTINATION , COUNT(*) FROM flight GROUP BY DESTINATION"
    },
    {
        "record_name": "1408",
        "db_id": "flight_1_robust",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "Draw a bar chart for what are the destinations and number of flights to each one?",
        "predict_rag_nlq": "Visualize BAR SELECT destination , count(*) FROM flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination"
    },
    {
        "record_name": "1408",
        "db_id": "flight_1_robust",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "A bar chart about what are the destinations and number of flights to each one?",
        "predict_rag_nlq": "Visualize BAR SELECT destination , count(*) FROM flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT DESTINATION , COUNT(*) FROM flight GROUP BY DESTINATION"
    },
    {
        "record_name": "1408",
        "db_id": "flight_1_robust",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "What are the destinations and number of flights to each one. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT destination , count(*) FROM flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT DESTINATION , COUNT(*) FROM flight GROUP BY DESTINATION"
    },
    {
        "record_name": "1408",
        "db_id": "flight_1_robust",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "Draw a bar chart of destination versus the total number ",
        "predict_rag_nlq": "Visualize BAR SELECT destination , count(*) FROM flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT DESTINATION , COUNT(*) FROM flight GROUP BY DESTINATION"
    },
    {
        "record_name": "850@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_information ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "nlq": "How many documents are created in each day? Bin the document date by year interval and group by document type description with a group line chart, and I want to show in ascending by the X-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored ASC BIN Date_Stored BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR"
    },
    {
        "record_name": "850@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_information ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "nlq": "Show the number of documents created in each day and bin document date by year interval and group by document type description with a group line chart, and order by the x axis from low to high.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored ASC BIN Date_Stored BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR"
    },
    {
        "record_name": "850@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_information ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "nlq": "Show the number of documents created in each day and bin document date by year interval and group by document type description with a group line chart, sort by the Document_Date in ascending.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored DESC BIN Date_Stored BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR"
    },
    {
        "record_name": "850@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_information ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "nlq": "How many documents are created in each day? Bin the document date by year interval and group by document type description with a group line chart, and show in asc by the X.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored ASC BIN Date_Stored BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR"
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring",
        "nlq": "A scatter chart shows the correlation between  Shop_ID and  Employee_ID .",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring"
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring",
        "nlq": "Draw a scatter chart about the correlation between  Shop_ID and  Employee_ID .",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring"
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring",
        "nlq": "Visualize the relationship between  Shop_ID and  Employee_ID .",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring"
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring",
        "nlq": "Return a scatter chart about the correlation between  Shop_ID and  Employee_ID .",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring"
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring",
        "nlq": "Visualize a scatter chart about the correlation between  Shop_ID and  Employee_ID .",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring"
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring",
        "nlq": "Scatter plot to show shop id on x axis and employee_id on y axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , EmployeeID FROM hiring"
    },
    {
        "record_name": "657@y_name@ASC",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "nlq": "How many departments whose budget is more than the average budget in each building? Show me a bar chart, list by the total number in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC"
    },
    {
        "record_name": "657@y_name@ASC",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "nlq": "Give the number of departments with greater than average budget in each building with a bar chart, and order the number of building from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC"
    },
    {
        "record_name": "619",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
        "nlq": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors. Plot them as bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT department_name, MIN(wage) FROM instructor GROUP BY department_name",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT department_name , MIN(wage) FROM instructor GROUP BY department_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPARTMENT_NAME , MIN(WAGE) FROM instructor GROUP BY DEPARTMENT_NAME"
    },
    {
        "record_name": "619",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
        "nlq": "Display a bar chart for what is the lowest salary in departments with average salary greater than the overall average.",
        "predict_rag_nlq": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name ORDER BY min(wage) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name ORDER BY min(wage) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , MIN(wage) FROM instructor GROUP BY department_name ORDER BY MIN(wage) ASC"
    },
    {
        "record_name": "619",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
        "nlq": "Give me a histogram for what is the lowest salary in departments with average salary greater than the overall average.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name ORDER BY min(wage) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , MIN(wage) FROM instructor GROUP BY department_name ORDER BY MIN(wage) DESC"
    },
    {
        "record_name": "619",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
        "nlq": "What is the lowest salary in departments with average salary greater than the overall average. Plot them as bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , MIN(wage) FROM instructor GROUP BY department_name"
    },
    {
        "record_name": "619",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
        "nlq": "Bar chart of minimal salary from each dept name",
        "predict_rag_nlq": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT department_name , min(wage) FROM instructor GROUP BY department_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , MIN(wage) FROM instructor GROUP BY department_name"
    },
    {
        "record_name": "471",
        "db_id": "cinema_robust",
        "target": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema BIN Openning_year BY YEAR",
        "nlq": "Tell me the average of capacity of cinemas open for each year in a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema  BIN Openning_year BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR"
    },
    {
        "record_name": "471",
        "db_id": "cinema_robust",
        "target": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema BIN Openning_year BY YEAR",
        "nlq": "Can you draw the trend of the average of capacity over the openning year?",
        "predict_rag_nlq": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Openning_year , AVG(seating) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR"
    },
    {
        "record_name": "672",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT teacher , Department_NO FROM COURSE ORDER BY Credits",
        "nlq": "Draw a scatter chart about the correlation between  Instructor and  DNO .",
        "predict_rag_nlq": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY teacher",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits"
    },
    {
        "record_name": "672",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT teacher , Department_NO FROM COURSE ORDER BY Credits",
        "nlq": "Return a scatter chart about the correlation between  Instructor and  DNO .",
        "predict_rag_nlq": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY teacher",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits"
    },
    {
        "record_name": "672",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT teacher , Department_NO FROM COURSE ORDER BY Credits",
        "nlq": "Visualize a scatter chart about the correlation between  Instructor and  DNO .",
        "predict_rag_nlq": "Visualize SCATTER SELECT teacher , Department_NO FROM Course",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits"
    },
    {
        "record_name": "672",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT teacher , Department_NO FROM COURSE ORDER BY Credits",
        "nlq": "Visualize the relationship between  Instructor and  DNO .",
        "predict_rag_nlq": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits"
    },
    {
        "record_name": "672",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT teacher , Department_NO FROM COURSE ORDER BY Credits",
        "nlq": "Show me about the correlation between  Instructor and  DNO  in a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY teacher",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits"
    },
    {
        "record_name": "1204@x_name@DESC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname DESC",
        "nlq": "List the number of dogs each owner has in a bar chart that groups by owner's last name, display by the last_name in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname DESC"
    },
    {
        "record_name": "1204@x_name@DESC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY Lname DESC",
        "nlq": "How many dogs each owner has? Return a bar chart that groups by owner's last name, display x axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY COUNT(Lname) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY COUNT(Lname) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Lname , COUNT(Lname) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY Lname ORDER BY COUNT(Lname) DESC"
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, visualize a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, order by the y-axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, find hire_date and the sum of employee_id bin hire_date by weekday, and visualize them by a bar chart, and sort in desc by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of hire_date and the sum of employee_id bin hire_date by weekday in a bar chart, sort by the Y-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, draw a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, and show by the Y in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40  ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, and list by the total number from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 ORDER BY SUM(employee_id) DESC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "2753@x_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC",
        "nlq": "What is the total number of captains with different classes?, show by the Class in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC"
    },
    {
        "record_name": "2753@x_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC",
        "nlq": "Plot how many class by grouped by class as a bar graph, order in asc by the Class.",
        "predict_rag_nlq": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC"
    },
    {
        "record_name": "2753@x_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC",
        "nlq": "Show me a bar chart comparing the total number of captains of different classes, and rank by the Class from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY COUNT(class) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY COUNT(class) ASC"
    },
    {
        "record_name": "2753@x_name@ASC",
        "db_id": "ship_1_robust",
        "target": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC",
        "nlq": "Compare the total number of captains with different classes using a bar graph, show by the Class in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT class , COUNT(class) FROM captain GROUP BY class ORDER BY class ASC"
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC",
        "nlq": "Visualize a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, sort by the Y-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC"
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC",
        "nlq": "Return a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and could you list by the total number from low to high?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC"
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC",
        "nlq": "Bar chart x axis nationality y axis sum meter 100, and rank from low to high by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC"
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC",
        "nlq": "Draw a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and I want to display by the total number in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC"
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC",
        "nlq": "Give me the comparison about the sum of meter_100 over the Nationality , and group by attribute Nationality, and list y axis in ascending order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC"
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC",
        "nlq": "Find Nationality and the sum of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and rank from low to high by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC"
    },
    {
        "record_name": "3269@x_name@DESC",
        "db_id": "world_1_robust",
        "target": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "nlq": "For each continent where the average life expectancy is shorter than 72, draw a bar chart to show their average life expectancy, and display by the Continent from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY avg(LifeExpectancy) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC"
    },
    {
        "record_name": "3269@x_name@DESC",
        "db_id": "world_1_robust",
        "target": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "nlq": "Draw a bar chart of continent versus mean lifeexpectancy, and rank in descending by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC"
    },
    {
        "record_name": "3269@x_name@DESC",
        "db_id": "world_1_robust",
        "target": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "nlq": "Return a bar chart showing average life expectancy of each continent where the average life expectancy is shorter than 72, and display in descending by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC"
    },
    {
        "record_name": "2657@y_name@DESC",
        "db_id": "railway_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "nlq": "A bar chart for showing the number of the countries that have managers of age above 50 or below 46, and list in descending by the Y.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize PIE SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC"
    },
    {
        "record_name": "2657@y_name@DESC",
        "db_id": "railway_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "nlq": "Show the number of the countries that have managers of age above 50 or below 46, and could you show from high to low by the total number?",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize PIE SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC"
    },
    {
        "record_name": "2657@y_name@DESC",
        "db_id": "railway_robust",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "nlq": "Show the countries that have managers of age above 50 or below 46, and count them by a bar chart, could you rank the number of country from high to low order please?",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize PIE SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC"
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC",
        "nlq": "Bar chart x axis acc road y axis the average of school id, and sort bar in asc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , AVG(School_ID) FROM basketball_match GROUP BY ACC_Street ORDER BY AVG(School_ID) ASC"
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC",
        "nlq": "Visualize a bar chart about the distribution of ACC_Road and the average of School_ID , and group by attribute ACC_Road, could you order in ascending by the names?",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC"
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC",
        "nlq": "A bar chart shows the distribution of ACC_Road and the average of School_ID , and group by attribute ACC_Road, and I want to show names from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC"
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC",
        "nlq": "Show me about the distribution of ACC_Road and the average of School_ID , and group by attribute ACC_Road in a bar chart, sort bar in asc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , AVG(SCHOOL_ID) FROM basketball_match GROUP BY ACC_Street ORDER BY AVG(SCHOOL_ID) ASC"
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC",
        "nlq": "Find ACC_Road and the average of School_ID , and group by attribute ACC_Road, and visualize them by a bar chart, I want to list by the bar from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , AVG(SCHOOL_ID) FROM basketball_match GROUP BY ACC_Street ORDER BY AVG(SCHOOL_ID) ASC"
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC",
        "nlq": "Give me the comparison about the average of School_ID over the ACC_Road , and group by attribute ACC_Road by a bar chart, and could you sort from low to high by the names?",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Street , AVG(schoolID) FROM basketball_match GROUP BY ACC_Street ORDER BY ACC_Street ASC"
    },
    {
        "record_name": "541",
        "db_id": "college_1_robust",
        "target": "Visualize SCATTER SELECT avg(STUDENT_GPA) , min(STUDENT_GPA) FROM student GROUP BY DEPARTMENT_CODE",
        "nlq": "Find the relationship between minimum and average gpa of all students in each department with a scatter chart grouping by department code.",
        "predict_rag_nlq": "Visualize SCATTER SELECT min(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "rag_dvqs": [
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student",
            "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize PIE SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT min(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT MIN(STUDENT_GPA) , AVG(STUDENT_GPA) FROM STUDENT GROUP BY DEPARTMENT_CODE"
    },
    {
        "record_name": "541",
        "db_id": "college_1_robust",
        "target": "Visualize SCATTER SELECT avg(STUDENT_GPA) , min(STUDENT_GPA) FROM student GROUP BY DEPARTMENT_CODE",
        "nlq": "What is the relationship between lowest and average student GPA for every department? Give me a scatter chart grouping by department code.",
        "predict_rag_nlq": "Visualize SCATTER SELECT min(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "rag_dvqs": [
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student",
            "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize PIE SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT min(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT MIN(STUDENT_GPA) , AVG(STUDENT_GPA) FROM STUDENT GROUP BY DEPARTMENT_CODE"
    },
    {
        "record_name": "541",
        "db_id": "college_1_robust",
        "target": "Visualize SCATTER SELECT avg(STUDENT_GPA) , min(STUDENT_GPA) FROM student GROUP BY DEPARTMENT_CODE",
        "nlq": "Scatterplot of minimal stu gpa vs avg(stu gpa) by DEPT_CODE",
        "predict_rag_nlq": "Visualize SCATTER SELECT min(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "rag_dvqs": [
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student",
            "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize PIE SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT min(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT MIN(STUDENT_GPA) , AVG(STUDENT_GPA) FROM STUDENT GROUP BY DEPARTMENT_CODE"
    },
    {
        "record_name": "683@x_name@DESC",
        "db_id": "company_employee_robust",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "nlq": "Show the number of headquarters from each headquarters, and I want to show by the X from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC"
    },
    {
        "record_name": "683@x_name@DESC",
        "db_id": "company_employee_robust",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "nlq": "What is the number of companies for each headquarter? Visualize by bar chart, could you sort by the Headquarters in desc?",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC"
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Return a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, I want to order bars in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Visualize a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and could you sort X-axis in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Give me the comparison about the sum of meter_100 over the Nationality , and group by attribute Nationality, and order x axis in asc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Draw a bar chart about the distribution of Nationality and the sum of meter_100 , and group by attribute Nationality, and I want to list bar from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY SUM(meter_one_hundred) ASC"
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Bar chart x axis nationality y axis sum meter 100, order x axis in asc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming_robust",
        "target": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC",
        "nlq": "Find Nationality and the sum of meter_100 , and group by attribute Nationality, and visualize them by a bar chart, and order by the x-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT citizenship , SUM(meter_one_hundred) FROM swimmer GROUP BY citizenship ORDER BY citizenship ASC"
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Create a bar chart showing all_games_percent across all neutral, I want to show bar in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY percentage_of_all_games ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY percentage_of_all_games ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY percentage_of_all_games ASC"
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Show me about the distribution of All_Neutral and All_Games_Percent in a bar chart, and list by the bars in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Give me the comparison about All_Games_Percent over the All_Neutral , and sort by the x-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Give me the comparison about All_Games_Percent over the All_Neutral by a bar chart, and order by the x axis in asc please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Return a bar chart about the distribution of All_Neutral and All_Games_Percent , rank by the X in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC",
        "nlq": "Find All_Neutral and All_Games_Percent , and visualize them by a bar chart, and I want to rank by the names from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT total_neutral , percentage_of_all_games FROM basketball_match ORDER BY total_neutral ASC"
    },
    {
        "record_name": "2594",
        "db_id": "poker_player_robust",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "what are different nationalities of people and the corresponding number of people from each nation?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "record_name": "2594",
        "db_id": "poker_player_robust",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Return a bar chart on what are different nationalities of people and the corresponding number of people from each nation?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "record_name": "2594",
        "db_id": "poker_player_robust",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "What are different nationalities of people and the corresponding number of people from each nation. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "record_name": "2594",
        "db_id": "poker_player_robust",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Draw a bar chart for how many people are there of each nationality?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "record_name": "2594",
        "db_id": "poker_player_robust",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Visualize a bar chart for how many people are there of each nationality?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "record_name": "2594",
        "db_id": "poker_player_robust",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "How many people are there of each nationality. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "record_name": "2594",
        "db_id": "poker_player_robust",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Draw a bar chart of nationality versus the total number ",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
    },
    {
        "record_name": "468@x_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Openning_year , SUM(seating) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
        "nlq": "Give me a bar chart for total number of capacity of each openning year, and sort bars in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Openning_year , SUM(seating) FROM cinema GROUP BY Openning_year ORDER BY SUM(seating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) ASC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY openning_year DESC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY COUNT(Openning_year) DESC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY COUNT(Openning_year) ASC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Openning_year , SUM(seating) FROM cinema GROUP BY Openning_year ORDER BY SUM(seating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Openning_year , SUM(seating) FROM cinema GROUP BY Openning_year ORDER BY SUM(seating) DESC"
    },
    {
        "record_name": "468@x_name@DESC",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Openning_year , SUM(seating) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
        "nlq": "A bar chart showing the sum of capacity of cinemas open for each year, could you sort in desc by the x-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) ASC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) DESC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY openning_year DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Openning_year , SUM(seating) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC"
    },
    {
        "record_name": "1182@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "nlq": "List the number of dogs departed in each day with a bar chart that groups by departed date, and could you show bars in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC"
    },
    {
        "record_name": "1182@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "nlq": "Show how many date departed from each date departed, and I want to order by the date_departed in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC"
    },
    {
        "record_name": "1182@x_name@ASC",
        "db_id": "dog_kennels_robust",
        "target": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "nlq": "How many dogs departed in each day? Visualize with a bar chart that groups by departed date, could you sort date_departed in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC"
    },
    {
        "record_name": "1510",
        "db_id": "gas_company_robust",
        "target": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM Company WHERE Company_ID NOT IN (SELECT Company_ID FROM station_company) GROUP BY Main_Industry",
        "nlq": "Show the number of companies without a gas station in each main industry with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "rag_dvqs": [
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY Main_Industry ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY Main_Industry DESC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC",
            "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN(SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "predict_debugged_db_ann": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) GROUP BY Main_Industry"
    },
    {
        "record_name": "1510",
        "db_id": "gas_company_robust",
        "target": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM Company WHERE Company_ID NOT IN (SELECT Company_ID FROM station_company) GROUP BY Main_Industry",
        "nlq": "How many companies without a gas station in each main industry? Draw a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "rag_dvqs": [
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY Main_Industry ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY Main_Industry DESC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC",
            "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN(SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "predict_debugged_db_ann": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) GROUP BY Main_Industry"
    },
    {
        "record_name": "447",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "nlq": "A bar chart about what are the title and maximum price of each film?",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title"
    },
    {
        "record_name": "447",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "nlq": "Return a bar chart on what are the title and maximum price of each film?",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title"
    },
    {
        "record_name": "447",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "nlq": "What are the title and maximum price of each film. ",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title"
    },
    {
        "record_name": "447",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "nlq": "Give me the title and highest price for each film in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title ORDER BY max(T1.price) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Price DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title ORDER BY max(T1.Price) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title ORDER BY max(Price) ASC"
    },
    {
        "record_name": "447",
        "db_id": "cinema_robust",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "nlq": "Give me the title and highest price for each film. Show bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.movie_Identification = T2.movie_Identification GROUP BY Title"
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "A line chart shows the change of the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and show by the x-axis from high to low please.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "Show me about the change of the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time in a line chart, and order by the X from high to low please.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "Show me the trend about the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time with a line chart, and sort in descending by the X-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "Give me the trend about the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, and display by the x-axis from high to low.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "Draw a line chart about the change of the average of Employee_ID over Start_from , and group by attribute Is_full_time and bin start_from by time, I want to sort Start_from in descending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "For the average of Employee_ID, Start_from, visualize the trend, and display by the x-axis from high to low.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR"
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation_robust",
        "target": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "I want to see trend mean employee id over start from by Is_full_time, sort by the x axis from high to low.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(EmployeeID) FROM hiring GROUP BY ss_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"
    },
    {
        "record_name": "2517@x_name@ASC",
        "db_id": "party_people_robust",
        "target": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE PartyName != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
        "nlq": "Which ministers are not a part of the Progress Party, and count them by a bar chart, list by the Minister from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE PartyName != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC"
    },
    {
        "record_name": "2517@x_name@ASC",
        "db_id": "party_people_robust",
        "target": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE PartyName != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
        "nlq": "Show all ministers who do not belong to Progress Party, and count them by a bar chart, rank in asc by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE PartyName != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC"
    },
    {
        "record_name": "1962@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "Give me a bar chart that groups and count the job id for all employees in the Finance department, and could you list by the bar in descending?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) DESC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE DESC",
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"
    },
    {
        "record_name": "1962@x_name@DESC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For all employees in the Finance department, compare the total number of different job id using a bar chart, and could you list by the bar in descending?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) DESC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE DESC",
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.Dept_ID = T2.Dept_ID WHERE T2.Dept_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC"
    },
    {
        "record_name": "682@x_name@DESC",
        "db_id": "company_employee_robust",
        "target": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "nlq": "Bar chart x axis industry y axis the number of industry, order by the Industry from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry ASC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) ASC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC"
    },
    {
        "record_name": "682@x_name@DESC",
        "db_id": "company_employee_robust",
        "target": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "nlq": "Return a bar chart about the number of companies for each industry, list from high to low by the bars please.",
        "predict_rag_nlq": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) ASC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC"
    },
    {
        "record_name": "2563@y_name@DESC",
        "db_id": "pets_1_robust",
        "target": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "nlq": "What are the different first names and ages of the students who do have pets Visualize by bar chart, and display Y from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC"
    },
    {
        "record_name": "2563@y_name@DESC",
        "db_id": "pets_1_robust",
        "target": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "nlq": "Give me a histogram for what are the different first names and ages of the students who do have pets?, could you sort by the Y-axis in desc?",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC"
    },
    {
        "record_name": "2563@y_name@DESC",
        "db_id": "pets_1_robust",
        "target": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "nlq": "Draw a bar chart for what are the different first names and ages of the students who do have pets?, and order by the Y in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY T1.Age DESC"
    },
    {
        "record_name": "2563@y_name@DESC",
        "db_id": "pets_1_robust",
        "target": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "nlq": "Find the first name and age of students who have a pet, display Age from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT LName , Age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy = \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy = \"Cat\") ORDER BY Age ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.Student_ID = T2.Student_ID ORDER BY T1.Age DESC"
    },
    {
        "record_name": "2684",
        "db_id": "roller_coaster_robust",
        "target": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster",
        "nlq": "Return a scatter on what are the lengths and heights of roller coasters?",
        "predict_rag_nlq": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT ID , meter_100 FROM swimmer",
            "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster"
    },
    {
        "record_name": "2684",
        "db_id": "roller_coaster_robust",
        "target": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster",
        "nlq": " what are the lengths and heights of roller coasters?",
        "predict_rag_nlq": "Visualize BAR SELECT Length , Height FROM roller_coaster",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name ORDER BY avg(T2.Speed) DESC",
            "Visualize BAR SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name ORDER BY avg(T2.Speed) ASC",
            "Visualize BAR SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Length , Height FROM roller_coaster",
        "predict_debugged_db_ann": "Visualize BAR SELECT distance , Elevation FROM roller_coaster"
    },
    {
        "record_name": "2684",
        "db_id": "roller_coaster_robust",
        "target": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster",
        "nlq": "What are the lengths and heights of roller coasters. Show scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT ID , meter_100 FROM swimmer",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster"
    },
    {
        "record_name": "2684",
        "db_id": "roller_coaster_robust",
        "target": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster",
        "nlq": "Scatter plot to show length on x axis and height on y axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT ID , meter_100 FROM swimmer",
            "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT mean_temperature_f , mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT distance , Elevation FROM roller_coaster"
    },
    {
        "record_name": "2392@x_name@ASC",
        "db_id": "movie_1_robust",
        "target": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" ORDER BY title ASC",
        "nlq": "Ignore movies whose director is NULL For each director, what are the titles and ratings for all the movies they reviewed? Show the result by a bar chart, and I want to display X from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"NULL\" ORDER BY title ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY director ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY director DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\""
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.movie_ID = T2.movie_ID WHERE director != \"null\" ORDER BY title ASC"
    },
    {
        "record_name": "129@x_name@ASC",
        "db_id": "assets_maintenance_robust",
        "target": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ,  skill_description ORDER BY skill_description ASC",
        "nlq": "A stacked bar chart showing the number of engineers for different skill description The x-axis is skill description and group by other deteails, I want to show by the X from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT skill_info , COUNT(skill_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY other_info ,  skill_info ORDER BY skill_info ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY skill_description ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY COUNT(skill_description) ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY skill_description DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY COUNT(skill_description) ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY COUNT(skill_description) DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY COUNT(skill_description) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT skill_info , COUNT(skill_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY skill_info ORDER BY skill_info ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT skill_info , COUNT(skill_info) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_identification = T2.engineer_identification JOIN Skills AS T3 ON T2.skill_identification = T3.skill_identification GROUP BY skill_info ORDER BY skill_info ASC"
    },
    {
        "record_name": "2821",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Location , COUNT(Location) FROM player GROUP BY Location HAVING avg(score) >= 20",
        "nlq": "List the positions of players whose average number of points scored by that position is larger than 20, compare the number of positions.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(score) >= 20"
    },
    {
        "record_name": "2821",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Location , COUNT(Location) FROM player GROUP BY Location HAVING avg(score) >= 20",
        "nlq": "List the positions of players whose average number of points scored by that position is larger than 20, give me a bar chart showing the number of different positions.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position",
        "predict_debugged_db_ann": "Visualize BAR SELECT Location , COUNT(Location) FROM player GROUP BY Location"
    },
    {
        "record_name": "2821",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Location , COUNT(Location) FROM player GROUP BY Location HAVING avg(score) >= 20",
        "nlq": "Bar chart x axis position y axis how many position",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM pilot GROUP BY Position",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
            "Visualize BAR SELECT Position , COUNT(*) FROM match_season GROUP BY POSITION ORDER BY Position ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position",
        "predict_debugged_db_ann": "Visualize BAR SELECT Location , COUNT(Location) FROM player GROUP BY Location"
    },
    {
        "record_name": "140",
        "db_id": "assets_maintenance_robust",
        "target": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "nlq": "Show the number of assets and group by asset make in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "rag_dvqs": [
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "predict_debugged_db_ann": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make"
    },
    {
        "record_name": "140",
        "db_id": "assets_maintenance_robust",
        "target": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "nlq": "Bar graph to show how many asset make from different asset make",
        "predict_rag_nlq": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "rag_dvqs": [
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "predict_debugged_db_ann": "Visualize BAR SELECT ASSET_MAKE , COUNT(ASSET_MAKE) FROM Assets GROUP BY ASSET_MAKE"
    },
    {
        "record_name": "2097@y_name@DESC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "nlq": "Please use a bar chart to compare the number of customers of each customer's move in date, note that you should bin move in date into Year interval, and list total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR"
    },
    {
        "record_name": "2097@y_name@DESC",
        "db_id": "local_govt_and_lot_robust",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "nlq": "What is the proportion of each customer's move in date? You can show me a bar chart that bins move in date into Year interval, sort from high to low by the the number of date moved in.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_ID = T2.customer_ID GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR"
    },
    {
        "record_name": "3062@y_name@ASC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "nlq": "Give me a bar chart showing the comparison of the pixel aspect ratio and the nation of the tv channels that do not use English, show by the total number in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC"
    },
    {
        "record_name": "3062@y_name@ASC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "nlq": "What are the pixel aspect ratio and country of origin for all TV channels that do not use English? Show the comparison of the total number of pixel aspect ratio in a bar chart, order in ascending by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC"
    },
    {
        "record_name": "3062@y_name@ASC",
        "db_id": "tvshow_robust",
        "target": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "nlq": "Find the pixel aspect ratio and the nation of the tv channels that do not use English Show the number of different pixel aspect ratios with a bar chart\n\n\n\n, list in ascending by the Y.",
        "predict_rag_nlq": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC"
    },
    {
        "record_name": "2072",
        "db_id": "loan_1_robust",
        "target": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname",
        "nlq": "Find the total amount of loans offered by each bank branch. ",
        "predict_rag_nlq": "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "rag_dvqs": [
            "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname DESC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC",
            "Visualize PIE SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize PIE SELECT Statement_Details , SUM(Account_Details) FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id = T2.statement_id GROUP BY Statement_Details",
            "Visualize PIE SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize PIE SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "predict_debugged_db_ann": "Visualize PIE SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname"
    },
    {
        "record_name": "2072",
        "db_id": "loan_1_robust",
        "target": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname",
        "nlq": "Return a bar chart on what are the names of the different bank branches, and what are their total loan amounts?",
        "predict_rag_nlq": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "rag_dvqs": [
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname DESC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC",
            "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "predict_debugged_db_ann": "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname"
    },
    {
        "record_name": "2072",
        "db_id": "loan_1_robust",
        "target": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname",
        "nlq": "What are the names of the different bank branches, and what are their total loan amounts. Show bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "rag_dvqs": [
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname DESC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC",
            "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "predict_debugged_db_ann": "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname"
    },
    {
        "record_name": "2993@y_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize BAR SELECT many_details , COUNT(many_details) FROM LOTS GROUP BY many_details ORDER BY COUNT(many_details) DESC",
        "nlq": "A bar chart groups the lot details, and computes the number of each lot details, and list by the how many lot details in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT many_details , COUNT(many_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.investor_details = \"l\" GROUP BY many_details ORDER BY COUNT(many_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT many_details , COUNT(many_details) FROM Investors AS T1 JOIN Lots AS T2 ON T1.investor_id = T2.investor_id WHERE T1.investor_details = \"l\" GROUP BY many_details ORDER BY COUNT(many_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT many_details , COUNT(many_details) FROM Investors AS T1 JOIN Lots AS T2 ON T1.investor_id = T2.investor_id WHERE T1.investor_details = \"l\" GROUP BY many_details ORDER BY COUNT(many_details) DESC"
    },
    {
        "record_name": "2993@y_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize BAR SELECT many_details , COUNT(many_details) FROM LOTS GROUP BY many_details ORDER BY COUNT(many_details) DESC",
        "nlq": "Bar chart x axis lot details y axis the number of lot details, and list by the Y-axis in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM Lots GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM Lots GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT many_details , COUNT(many_details) FROM Lots GROUP BY many_details ORDER BY COUNT(many_details) DESC"
    },
    {
        "record_name": "2993@y_name@DESC",
        "db_id": "tracking_share_transactions_robust",
        "target": "Visualize BAR SELECT many_details , COUNT(many_details) FROM LOTS GROUP BY many_details ORDER BY COUNT(many_details) DESC",
        "nlq": "Return the lot details, group the lot details, and compute the number of each lot details, list in desc by the y-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT many_details , COUNT(many_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.investor_details = \"l\" GROUP BY many_details ORDER BY COUNT(many_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT many_details , COUNT(many_details) FROM Investors AS T1 JOIN Lots AS T2 ON T1.investor_id = T2.investor_id WHERE T1.investor_details = \"l\" GROUP BY many_details ORDER BY COUNT(many_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT many_details , COUNT(many_details) FROM Investors AS T1 JOIN Lots AS T2 ON T1.investor_id = T2.investor_id WHERE T1.investor_details = \"l\" GROUP BY many_details ORDER BY COUNT(many_details) DESC"
    },
    {
        "record_name": "613",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , COUNT(department_name) FROM instructor GROUP BY department_name ORDER BY wage",
        "nlq": "Return a bar chart about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , SUM(wage) FROM instructor GROUP BY dept_name ORDER BY wage",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , SUM(wage) FROM instructor GROUP BY dept_name ORDER BY wage",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , SUM(wage) FROM instructor GROUP BY department_name ORDER BY SUM(wage)"
    },
    {
        "record_name": "613",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , COUNT(department_name) FROM instructor GROUP BY department_name ORDER BY wage",
        "nlq": "Draw a bar chart about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , SUM(wage) FROM instructor GROUP BY dept_name ORDER BY SUM(wage)",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , SUM(wage) FROM instructor GROUP BY dept_name ORDER BY SUM(wage )",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , SUM(wage) FROM instructor GROUP BY department_name ORDER BY SUM(wage)"
    },
    {
        "record_name": "613",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , COUNT(department_name) FROM instructor GROUP BY department_name ORDER BY wage",
        "nlq": "Find  dept_name and the amount of dept_name , and group by attribute dept_name, and visualize them by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT department_name , SUM(wage) FROM instructor GROUP BY department_name ORDER BY SUM(wage )",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , SUM(wage) FROM instructor GROUP BY department_name ORDER BY SUM(wage)"
    },
    {
        "record_name": "613",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , COUNT(department_name) FROM instructor GROUP BY department_name ORDER BY wage",
        "nlq": "Show me about the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , SUM(wage) FROM instructor GROUP BY department_name ORDER BY SUM(wage)"
    },
    {
        "record_name": "613",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , COUNT(department_name) FROM instructor GROUP BY department_name ORDER BY wage",
        "nlq": "A bar chart shows the distribution of  dept_name and the amount of dept_name , and group by attribute dept_name.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "predict_debugged_db_ann": "Visualize BAR SELECT department_name , SUM(wage) FROM instructor GROUP BY department_name ORDER BY SUM(wage)"
    },
    {
        "record_name": "2757",
        "db_id": "ship_mission_robust",
        "target": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "nlq": "What is the total number of each ship type? Give me a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "rag_dvqs": [
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
            "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
            "Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
            "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "predict_debugged_db_ann": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category"
    },
    {
        "record_name": "2757",
        "db_id": "ship_mission_robust",
        "target": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "nlq": "Give me the proportion of the total number of every ship type.",
        "predict_rag_nlq": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "rag_dvqs": [
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
            "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
            "Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
            "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "predict_debugged_db_ann": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category"
    },
    {
        "record_name": "2757",
        "db_id": "ship_mission_robust",
        "target": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "nlq": "Show me a pie chart showing the total number of each ship type.",
        "predict_rag_nlq": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "rag_dvqs": [
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
            "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
            "Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
            "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "predict_debugged_db_ann": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category"
    },
    {
        "record_name": "2757",
        "db_id": "ship_mission_robust",
        "target": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "nlq": "I want to know the proportion of each type.",
        "predict_rag_nlq": "Visualize PIE SELECT Category , COUNT(*) FROM ship GROUP BY Category",
        "rag_dvqs": [
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , COUNT(*) FROM music_festival GROUP BY Category",
            "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
            "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize PIE SELECT product_category , count(*) FROM mailshot_campaigns GROUP BY product_category",
            "Visualize PIE SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category",
        "predict_debugged_db_ann": "Visualize PIE SELECT Category , COUNT(Category) FROM ship GROUP BY Category"
    },
    {
        "record_name": "2475@x_name@ASC",
        "db_id": "news_report_robust",
        "target": "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalistID = t2.journalistID GROUP BY t2.Work_Type ORDER BY Work_Type ASC",
        "nlq": "Find the average age of journalists working on different role type, show the result with a bar chart, and list by the x-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalistID = t2.journalistID GROUP BY t2.Work_Type ORDER BY avg(t1.age) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(t1.age) ASC",
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(t1.age) DESC",
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type ASC",
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type DESC",
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(Years_working) ASC",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(Years_working) DESC",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type ASC",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type DESC",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Work_Type , avg(journalist.age) FROM journalist JOIN news_report ON journalist.journalistID = news_report.journalistID GROUP BY news_report.Work_Type ORDER BY avg(journalist.age) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Work_Type , avg(journalist.Age) FROM journalist JOIN news_report ON journalist.journalistID = news_report.journalistID GROUP BY news_report.Work_Type ORDER BY avg(journalist.Age) ASC"
    },
    {
        "record_name": "653@y_name@DESC",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE year = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "nlq": "How many instructors for every course in 2008? Show me a bar chart grouping by course title, and rank by the y axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) ASC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE T2.year = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY title ORDER BY COUNT(title) DESC"
    },
    {
        "record_name": "653@y_name@DESC",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE year = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "nlq": "List the number of instructors for each course in year 2008 with a bar chart, order by the y-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) ASC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY title ORDER BY COUNT(title) DESC"
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Draw a bar chart about the distribution of  Name and  Height .",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC"
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Find  Name and  Height , and visualize them by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC"
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Return a bar chart about the distribution of  Name and  Height .",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC"
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Give me the comparison about  Height over the  Name  by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC"
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "A bar chart shows the distribution of  Name and  Height .",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC"
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Draw a bar chart of name versus height",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC"
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, show me about the distribution of job_id and the average of manager_id , and group by attribute job_id in a bar chart, list from low to high by the X please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id, and rank in asc by the X-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, return a bar chart about the distribution of job_id and the average of manager_id , and group by attribute job_id, and list in asc by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, give me the comparison about the average of manager_id over the job_id , and group by attribute job_id by a bar chart, and could you order bar in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC"
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT JOB_ID , AVG(Manager_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For those employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40, a bar chart shows the distribution of job_id and the average of manager_id , and group by attribute job_id, and rank in asc by the X-axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE wage BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR Dept_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC"
    },
    {
        "record_name": "2613@x_name@ASC",
        "db_id": "products_for_hire_robust",
        "target": "Visualize BAR SELECT T1.Fname , T1.customer_ID FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_ID = T2.customer_ID ORDER BY T1.Fname ASC",
        "nlq": "How many bookings did each customer make? Show the customer id as the Y-axis and the first name as the X-axis in a bar chart, and could you sort by the X-axis from low to high?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Fname , T1.customer_ID FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_ID = T2.customer_ID ORDER BY T1.Fname ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name ASC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name ASC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Fname , T1.customer_ID FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_ID = T2.customer_ID ORDER BY T1.Fname ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Fname , T1.customer_ID FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_ID = T2.customer_ID ORDER BY T1.Fname ASC"
    },
    {
        "record_name": "671",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT Course_ID , teacher FROM COURSE ORDER BY Credits",
        "nlq": "Draw a scatter chart about the correlation between  CID and  Instructor .",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Course_ID , teacher FROM Course ORDER BY Credits"
    },
    {
        "record_name": "671",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT Course_ID , teacher FROM COURSE ORDER BY Credits",
        "nlq": "Return a scatter chart about the correlation between  CID and  Instructor .",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID , teacher FROM Course ORDER BY teacher",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT teacher , Department_NO FROM Course ORDER BY Credits"
    },
    {
        "record_name": "671",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT Course_ID , teacher FROM COURSE ORDER BY Credits",
        "nlq": "Visualize the relationship between  CID and  Instructor .",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY CID",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Course_ID , teacher FROM Course ORDER BY Credits"
    },
    {
        "record_name": "671",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT Course_ID , teacher FROM COURSE ORDER BY Credits",
        "nlq": "A scatter chart shows the correlation between  CID and  Instructor .",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Course_ID , teacher FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Course_ID , teacher FROM Course ORDER BY Credits"
    },
    {
        "record_name": "671",
        "db_id": "college_3_robust",
        "target": "Visualize SCATTER SELECT Course_ID , teacher FROM COURSE ORDER BY Credits",
        "nlq": "What is the relationship between  CID and  Instructor ?",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID, Instructor FROM Course ORDER BY CID",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Course_ID , teacher FROM Course ORDER BY Credits"
    },
    {
        "record_name": "1718",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, give me the comparison about the sum of department_id over the  hire_date bin hire_date by time by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1718",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, visualize a bar chart about the distribution of  hire_date and the sum of department_id bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1718",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, show me about the distribution of  hire_date and the sum of department_id bin hire_date by time in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1718",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, return a bar chart about the distribution of  hire_date and the sum of department_id bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "1718",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH",
        "nlq": "For those employees who did not have any job in the past, a bar chart shows the distribution of  hire_date and the sum of department_id bin hire_date by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(Dept_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN date_of_hire BY MONTH"
    },
    {
        "record_name": "436",
        "db_id": "chinook_1_robust",
        "target": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "nlq": "Return a pie on what are the first names and support rep ids for employees serving 10 or more customers?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC"
    },
    {
        "record_name": "436",
        "db_id": "chinook_1_robust",
        "target": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "nlq": "Draw a pie chart for what are the first names and support rep ids for employees serving 10 or more customers?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC"
    },
    {
        "record_name": "436",
        "db_id": "chinook_1_robust",
        "target": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "nlq": "What are the first names and support rep ids for employees serving 10 or more customers. Visualize by pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize PIE SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize PIE SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id",
            "Visualize PIE SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize PIE SELECT customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId"
    },
    {
        "record_name": "2412",
        "db_id": "museum_visit_robust",
        "target": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.ID = t2.visitor_ID",
        "nlq": "Show name and age for visitors who visited some museums more than once using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC",
            "Visualize SCATTER SELECT ID , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
            "Visualize SCATTER SELECT ID , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY Name",
            "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID",
            "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID",
            "Visualize BAR SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY T1.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.id = visit.visitor_id",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID"
    },
    {
        "record_name": "2412",
        "db_id": "museum_visit_robust",
        "target": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.ID = t2.visitor_ID",
        "nlq": "histogram, X-axis is the name and the Y is the age for visitors who visited some museums more than 1 times.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC",
            "Visualize SCATTER SELECT ID , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
            "Visualize SCATTER SELECT ID , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY Name",
            "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID",
            "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID",
            "Visualize BAR SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY T1.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.id = visit.visitor_id",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID"
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of headquarter and the average of revenue , and group by attribute headquarter in a bar chart, show x-axis in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC"
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of headquarter and the average of revenue , and group by attribute headquarter, and I want to list from low to high by the Headquarter.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC"
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For those records from the products and each product's manufacturer, a bar chart shows the distribution of headquarter and the average of revenue , and group by attribute headquarter, list in asc by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC"
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For those records from the products and each product's manufacturer, give me the comparison about the average of revenue over the headquarter , and group by attribute headquarter, list in asc by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC"
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Headquarter , AVG(income) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the average of revenue , and group by attribute headquarter, and I want to order by the Headquarter from low to high please.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC"
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match",
        "nlq": "A pie chart shows the proportion of  ACC_Regular_Season and  All_Games_Percent.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match"
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match",
        "nlq": "Draw a pie chart about the proportion of  ACC_Regular_Season and  All_Games_Percent.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , percentage_of_all_games FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , percentage_of_all_games FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match"
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match",
        "nlq": "Show me about the proportion of  All_Games_Percent and  All_Games_Percent in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , Team_ID FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Neutral , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT team_Name , percentage_of_all_games FROM basketball_match"
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match",
        "nlq": "Return a pie chart about the proportion of  ACC_Regular_Season and  All_Games_Percent.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match"
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match",
        "nlq": "For the attribute  ACC_Regular_Season and  All_Games_Percent, show their proportion by a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match"
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball_robust",
        "target": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match",
        "nlq": "Create a pie chart showing all_games_percent across acc regular season.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_regular_season , percentage_of_all_games FROM basketball_match"
    },
    {
        "record_name": "1805",
        "db_id": "hr_1_robust",
        "target": "Visualize PIE SELECT Lname , wage FROM employees WHERE Fname LIKE '%m'",
        "nlq": "For those employees whose first name is ending with the letter m, just show the salary by the last name using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE Fname LIKE '%m'",
        "rag_dvqs": [
            "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m'",
            "Visualize PIE SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m'",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY SALARY ASC",
            "Visualize PIE SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY SALARY DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%'",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE Fname LIKE '%m'",
        "predict_debugged_db_ann": "Visualize PIE SELECT Lname , wage FROM employees WHERE Fname LIKE '%m'"
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For those records from the products and each product's manufacturer, give me the comparison about the average of code over the headquarter , and group by attribute headquarter by a bar chart, and show in desc by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of headquarter and the average of code , and group by attribute headquarter, and rank by the names in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of headquarter and the average of code , and group by attribute headquarter, and I want to rank Headquarter in descending order please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For those records from the products and each product's manufacturer, find headquarter and the average of code , and group by attribute headquarter, and visualize them by a bar chart, order by the x axis in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For those records from the products and each product's manufacturer, draw a bar chart about the distribution of headquarter and the average of code , and group by attribute headquarter, and could you show by the X from high to low?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"
    },
    {
        "record_name": "434",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "nlq": "Draw a bar chart for how many car makers are there in each continents? List the continent name and the count.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent_ID JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "434",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "nlq": "how many car makers are there in each continents? List the continent name and the count.",
        "predict_rag_nlq": "Visualize PIE SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent_ID JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent"
    },
    {
        "record_name": "434",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "nlq": "How many car makers are there in each continents? List the continent name and the count by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent_ID JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent"
    },
    {
        "record_name": "434",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "nlq": "How many car makers are there in each continents? List the continent name and the count. Visualize by bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent_ID JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent"
    },
    {
        "record_name": "434",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "nlq": "A bar chart about what is the name of each continent and how many car makers are there in each one?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent_ID JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent"
    },
    {
        "record_name": "434",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "nlq": "Display a bar chart for what is the name of each continent and how many car makers are there in each one?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent ORDER BY T1.continent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent_ID JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent ORDER BY T1.continent ASC"
    },
    {
        "record_name": "434",
        "db_id": "car_1_robust",
        "target": "Visualize BAR SELECT T1.continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "nlq": "What is the name of each continent and how many car makers are there in each one. Plot them as bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.continent , count(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent ORDER BY T1.continent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.continent_ID = T2.continent_ID JOIN car_makers AS T3 ON T2.continent_ID = T3.Country GROUP BY T1.continent ORDER BY T1.continent ASC"
    },
    {
        "record_name": "1320@y_name@ASC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "nlq": "How many delegates in each committee? Return a bar chart, display in asc by the how many committee please.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC"
    },
    {
        "record_name": "1320@y_name@ASC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "nlq": "Show how many committee from each committee, sort from low to high by the y axis please.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC"
    },
    {
        "record_name": "1320@y_name@ASC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "nlq": "Show the number of delegates in each committee with a bar chart, and could you order y axis in ascending order please?",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC"
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of name and manufacturer , and group by attribute name in a bar chart, and display Manufacturer in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC"
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and manufacturer , and group by attribute name, and order by the total number in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC"
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and manufacturer , and group by attribute name, I want to sort Y-axis in desc order please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC"
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "For those records from the products and each product's manufacturer, find name and manufacturer , and group by attribute name, and visualize them by a bar chart, sort Manufacturer in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC"
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "For those records from the products and each product's manufacturer, give me the comparison about manufacturer over the name , and group by attribute name by a bar chart, display from high to low by the Manufacturer.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME , T1.NAME ORDER BY T1.Manufacturer DESC"
    },
    {
        "record_name": "2487@x_name@ASC",
        "db_id": "news_report_robust",
        "target": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "What are the nationalities and the taotal ages of journalists Visualize by a bar chart, show from low to high by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC"
    },
    {
        "record_name": "2487@x_name@ASC",
        "db_id": "news_report_robust",
        "target": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Bar chart of sum age from each nationality, could you rank X in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC"
    },
    {
        "record_name": "2487@x_name@ASC",
        "db_id": "news_report_robust",
        "target": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Return a histogram on what are the nationalities and the total ages of journalists?, I want to rank X from low to high order please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC"
    },
    {
        "record_name": "2487@x_name@ASC",
        "db_id": "news_report_robust",
        "target": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Show me a bar chart for what are the nationalities and total ages of journalists?, I want to sort by the x-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC"
    },
    {
        "record_name": "777",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY LocationCode BIN Date_in_Location_From BY WEEKDAY",
        "nlq": "Show the number of documents in different starting date. Bin starting date by weekday and group by location code with a stacked bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY"
    },
    {
        "record_name": "777",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY LocationCode BIN Date_in_Location_From BY WEEKDAY",
        "nlq": "Stacked bar chart of how many date in location from for with each Location_Code in each date in location from",
        "predict_rag_nlq": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY LocationCode BIN Date_in_Location_From BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY LocationCode BIN Date_in_Location_From BY WEEKDAY"
    },
    {
        "record_name": "832@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
        "nlq": "Return a bar chart to show how many documents for different budget type code, rank Y-axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_Expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY T1.Budget_Type_Code DESC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY T1.Budget_Type_Code ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_Expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_Expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC"
    },
    {
        "record_name": "832@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
        "nlq": "Show the number of documents for different budget type code in a bar chart, show by the Y-axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_Expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY T1.Budget_Type_Code DESC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY T1.Budget_Type_Code ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_Expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_Expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_Code = T2.Budget_Type_Code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC"
    },
    {
        "record_name": "356",
        "db_id": "body_builder_robust",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Visualize a scatter chart about the correlation between  Snatch and  Clean_Jerk .",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"
    },
    {
        "record_name": "356",
        "db_id": "body_builder_robust",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "What is the relationship between  Snatch and  Clean_Jerk ?",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"
    },
    {
        "record_name": "356",
        "db_id": "body_builder_robust",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Visualize the relationship between  Snatch and  Clean_Jerk .",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"
    },
    {
        "record_name": "356",
        "db_id": "body_builder_robust",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Return a scatter chart about the correlation between  Snatch and  Clean_Jerk .",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"
    },
    {
        "record_name": "356",
        "db_id": "body_builder_robust",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Show me about the correlation between  Snatch and  Clean_Jerk  in a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"
    },
    {
        "record_name": "356",
        "db_id": "body_builder_robust",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Scatter plot to show snatch on x axis and clean_jerk on y axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"
    },
    {
        "record_name": "1421",
        "db_id": "flight_company_robust",
        "target": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
        "nlq": "Return a histogram on what are the ids and names of the companies that operated more than one flight?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name DESC",
            "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY Type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id"
    },
    {
        "record_name": "1421",
        "db_id": "flight_company_robust",
        "target": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
        "nlq": "What are the ids and names of the companies that operated more than one flight. ",
        "predict_rag_nlq": "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name ASC",
            "Visualize PIE SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name DESC",
            "Visualize SCATTER SELECT T1.id , count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id JOIN airport AS T3 ON T2.airport_id = T3.id GROUP BY T3.id",
            "Visualize PIE SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
            "Visualize PIE SELECT T1.name , T1.id FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id"
    },
    {
        "record_name": "708",
        "db_id": "county_public_safety_robust",
        "target": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Pie chart. how many counties correspond to each police force?",
        "predict_rag_nlq": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize PIE SELECT County , count(*) FROM school GROUP BY county",
            "Visualize PIE SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize PIE SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name",
            "Visualize PIE SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "record_name": "708",
        "db_id": "county_public_safety_robust",
        "target": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Return a pie chart on how many counties correspond to each police force?",
        "predict_rag_nlq": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize PIE SELECT County , count(*) FROM school GROUP BY county",
            "Visualize PIE SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize PIE SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name",
            "Visualize PIE SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "record_name": "708",
        "db_id": "county_public_safety_robust",
        "target": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "How many counties correspond to each police force. ",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "record_name": "708",
        "db_id": "county_public_safety_robust",
        "target": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "I want to know the proportion of the number of counties for each police force.",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
    },
    {
        "record_name": "1315@y_name@DESC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "nlq": "Show the name of each county along with the corresponding number of delegates from that county Plot them as bar chart, and order Y in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.CountyID = T2.District GROUP BY T1.CountyID ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.CountyID = T2.District GROUP BY T1.CountyID ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "1315@y_name@DESC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "nlq": "For each county, find the name of the county and the number of delegates from that county Show bar chart, could you order total number in desc order?",
        "predict_rag_nlq": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.CountyID = T2.District GROUP BY T1.CountyID ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.CountyID = T2.District GROUP BY T1.CountyID ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "1315@y_name@DESC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "nlq": "Show the name of each county along with the corresponding number of delegates from that county with a bar chart, I want to rank by the Y from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.CountyID = T2.District GROUP BY T1.CountyID ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.CountyID = T2.District GROUP BY T1.CountyID ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "For those records from the products and each product's manufacturer, show me about the distribution of name and manufacturer , and group by attribute name in a bar chart, and sort in descending by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC"
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "For those records from the products and each product's manufacturer, give me the comparison about manufacturer over the name , and group by attribute name by a bar chart, order names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME , T1.NAME ORDER BY T1.NAME DESC"
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "For those records from the products and each product's manufacturer, return a bar chart about the distribution of name and manufacturer , and group by attribute name, and list by the names from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Code ORDER BY T1.Manufacturer DESC"
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "For those records from the products and each product's manufacturer, find name and manufacturer , and group by attribute name, and visualize them by a bar chart, and sort in descending by the X.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME , T1.NAME ORDER BY T1.NAME DESC"
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "For those records from the products and each product's manufacturer, visualize a bar chart about the distribution of name and manufacturer , and group by attribute name, could you sort by the X-axis in desc?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Revenue DESC",
            "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Revenue DESC",
            "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Revenue ASC",
            "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Revenue ASC",
            "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T2.Income FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC"
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "Bar chart x axis name y axis the number of name, list by the X-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "A bar chart for what are the number of the names of all products?, and list by the X-axis in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "What are the number of the names of all products?, rank x-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "What are the names of all products, and count them by a bar chart, rank X-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC"
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "Select the names of all the products in the store, and count them by a bar chart, could you order X-axis in asc order?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"
    },
    {
        "record_name": "546@y_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT EMPLOYEE_DOB , COUNT(EMPLOYEE_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMPLOYEE_NUM = T2.PROFESSOR_NUM WHERE COURSE_CODE = \"ACCT-211\"  ORDER BY COUNT(EMPLOYEE_DOB) DESC BIN EMPLOYEE_DOB BY WEEKDAY",
        "nlq": "What is the weekday of birthdates of the professors in charge of ACCT-211? Visualize with a bar chart, and rank in desc by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT EMPLOYEE_DOB , COUNT(EMPLOYEE_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMPLOYEE_NUM = T2.PROFESSOR_NUM WHERE COURSE_CODE = \"ACCT-211\" ORDER BY COUNT(EMPLOYEE_DOB) DESC BIN EMPLOYEE_DOB BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) ASC BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize LINE SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB DESC BIN EMP_DOB BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMPLOYEE_NUM = T2.PROFESSOR_NUM WHERE COURSE_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMPLOYEE_DOB , COUNT(EMPLOYEE_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMPLOYEE_NUM = T2.PROFESSOR_NUM WHERE COURSE_CODE = \"ACCT-211\" ORDER BY COUNT(EMPLOYEE_DOB) DESC BIN EMPLOYEE_DOB BY WEEKDAY"
    },
    {
        "record_name": "546@y_name@DESC",
        "db_id": "college_1_robust",
        "target": "Visualize BAR SELECT EMPLOYEE_DOB , COUNT(EMPLOYEE_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMPLOYEE_NUM = T2.PROFESSOR_NUM WHERE COURSE_CODE = \"ACCT-211\"  ORDER BY COUNT(EMPLOYEE_DOB) DESC BIN EMPLOYEE_DOB BY WEEKDAY",
        "nlq": "What is the weekday of birth of professors teaching course ACCT-211? Show a bar chart, and rank total number from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMPLOYEE_NUM = T2.EMPLOYEE_NUM JOIN CLASS AS T3 ON T2.EMPLOYEE_NUM = T3.PROFESSOR_NUM JOIN COURSE AS T4 ON T3.COURSE_CODE = T4.COURSE_CODE WHERE T4.COURSE_CODE = \"ACCT-211\" BIN EMP_DOB BY WEEKDAY ORDER BY COUNT(EMP_DOB) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) ASC BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMPLOYEE_NUM = T2.EMPLOYEE_NUM JOIN CLASS AS T3 ON T2.EMPLOYEE_NUM = T3.PROFESSOR_NUM JOIN COURSE AS T4 ON T3.COURSE_CODE = T4.COURSE_CODE WHERE T4.COURSE_CODE = \"ACCT-211\" BIN EMP_DOB BY WEEKDAY ORDER BY COUNT(EMP_DOB) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMPLOYEE_DOB , COUNT(EMPLOYEE_DOB) FROM EMPLOYEE AS T1 JOIN PROFESSOR AS T2 ON T1.EMPLOYEE_NUM = T2.EMPLOYEE_NUM JOIN CLASS AS T3 ON T2.EMPLOYEE_NUM = T3.PROFESSOR_NUM JOIN COURSE AS T4 ON T3.COURSE_CODE = T4.COURSE_CODE WHERE T4.COURSE_CODE = \"ACCT-211\" BIN EMPLOYEE_DOB BY WEEKDAY ORDER BY COUNT(EMPLOYEE_DOB) DESC"
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT city_code , avg(Age) FROM student GROUP BY city_code ORDER BY avg(Age) DESC",
        "nlq": "Bar chart of mean age from each city code, sort y-axis from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC"
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT city_code , avg(Age) FROM student GROUP BY city_code ORDER BY avg(Age) DESC",
        "nlq": "What is the average age for each city and what are those cities Show bar chart, show by the Y-axis in descending please.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM Student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM Student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC"
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT city_code , avg(Age) FROM student GROUP BY city_code ORDER BY avg(Age) DESC",
        "nlq": "Draw a bar chart for what is the average age for each city and what are those cities?, and show in desc by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM Student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM Student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC"
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT city_code , avg(Age) FROM student GROUP BY city_code ORDER BY avg(Age) DESC",
        "nlq": "A bar chart about what is the average age for each city and what are those cities?, and show by the Y-axis in descending please.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM Student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM Student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC"
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1_robust",
        "target": "Visualize BAR SELECT city_code , avg(Age) FROM student GROUP BY city_code ORDER BY avg(Age) DESC",
        "nlq": "Find the average age of all students living in the each city Show bar chart, show in desc by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM Student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM Student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC"
    },
    {
        "record_name": "1010",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "nlq": "Show each state and the number of addresses in each state by a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "rag_dvqs": [
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "predict_debugged_db_ann": "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county"
    },
    {
        "record_name": "1010",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "nlq": "Show each state and the number of addresses in each state. Show bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "rag_dvqs": [
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "predict_debugged_db_ann": "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county"
    },
    {
        "record_name": "1010",
        "db_id": "customers_and_products_contacts_robust",
        "target": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "nlq": "Show the total number from each state province county",
        "predict_rag_nlq": "Visualize BAR SELECT state_province_county , count(*) FROM Addresses GROUP BY state_province_county",
        "rag_dvqs": [
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "predict_debugged_db_ann": "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county"
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Give me the comparison about Height over the Name by a bar chart, and could you rank y-axis in desc order please?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Find Name and Height , and visualize them by a bar chart, and order by the y axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "A bar chart shows the distribution of Name and Height , and I want to show by the y axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Draw a bar chart of name versus height, order by the y axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Draw a bar chart about the distribution of Name and Height , and rank y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll_robust",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Return a bar chart about the distribution of Name and Height , and show Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
    },
    {
        "record_name": "769@y_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT LocationCode , COUNT(LocationCode) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC",
        "nlq": "Show the number of documents for each location code in a bar chart, and I want to rank by the y axis in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT LocationCode, COUNT(LocationCode) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LocationCode , COUNT(LocationCode) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC"
    },
    {
        "record_name": "769@y_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT LocationCode , COUNT(LocationCode) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC",
        "nlq": "How many documents for different location code? Plot a bar chart to show the proportion, and show Y in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT LocationCode, COUNT(LocationCode) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LocationCode , COUNT(LocationCode) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC"
    },
    {
        "record_name": "769@y_name@DESC",
        "db_id": "cre_Doc_Tracking_DB_robust",
        "target": "Visualize BAR SELECT LocationCode , COUNT(LocationCode) FROM Document_locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC",
        "nlq": "Bar chart x axis location code y axis how many location code, display by the y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT LocationCode , COUNT(LocationCode) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LocationCode , COUNT(LocationCode) FROM Document_Locations GROUP BY LocationCode ORDER BY COUNT(LocationCode) DESC"
    },
    {
        "record_name": "2762@y_name@ASC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "nlq": "For each type, how many ships are there Plot them as bar chart, list y-axis in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2762@y_name@ASC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "nlq": "Show different types of ships and the number of ships of each type Show bar chart, display in ascending by the the total number .",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2762@y_name@ASC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "nlq": "Bar chart x axis type y axis the total number, and order Y in asc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2762@y_name@ASC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT Category , COUNT(*) FROM ship GROUP BY Category ORDER BY COUNT(*) ASC",
        "nlq": "Show different types of ships and the number of ships of each type in a bar chart, and rank in asc by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM ship GROUP BY Category ORDER BY COUNT(Category) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM ship GROUP BY Category ORDER BY COUNT(Category) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM ship GROUP BY Category ORDER BY COUNT(Category) ASC"
    },
    {
        "record_name": "2055",
        "db_id": "journal_committee_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "nlq": "Group and count the name attribute for visualizing a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name"
    },
    {
        "record_name": "2055",
        "db_id": "journal_committee_robust",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "nlq": "Bar chart x axis name y axis how many name",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name"
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "List the name and the number of enrolled student for each course in a bar chart, show by the X from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "What is the name of each course and the corresponding number of student enrollment Show bar chart, could you show by the bar in asc?",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "List the name and the number of enrolled student for each course Show bar chart, display x-axis from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "Return a histogram on what is the name of each course and the corresponding number of student enrollment?, and sort X-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY T1.course_name ASC"
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning_robust",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "Display a bar chart for what is the name of each course and the corresponding number of student enrollment?, and could you display in asc by the x-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "829@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT Document_Type_information , COUNT(Document_Type_information) FROM Ref_document_types GROUP BY Document_Type_information ORDER BY Document_Type_information ASC",
        "nlq": "Bar graph to show the number of document type description from different document type description, and show in ascending by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_Document_Types GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC"
    },
    {
        "record_name": "829@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT Document_Type_information , COUNT(Document_Type_information) FROM Ref_document_types GROUP BY Document_Type_information ORDER BY Document_Type_information ASC",
        "nlq": "How many document type for different document type description? Visualize with a bar chart, sort in asc by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description",
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Type_Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_Document_Types GROUP BY Document_Type_Name ORDER BY COUNT(Document_Type_Name) ASC"
    },
    {
        "record_name": "829@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses_robust",
        "target": "Visualize BAR SELECT Document_Type_information , COUNT(Document_Type_information) FROM Ref_document_types GROUP BY Document_Type_information ORDER BY Document_Type_information ASC",
        "nlq": "Show the number of document type for different document type description in a bar chart, and show in ascending by the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_Document_Types GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC"
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "nlq": "Show first name and id for all customers with at least 2 accounts in a bar chart, and show in asc by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC"
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "nlq": "Visualize a bar chart for what are the first names and ids for customers who have two or more accounts?, could you rank in ascending by the customer_id?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC"
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "nlq": "Return a histogram on what are the first names and ids for customers who have two or more accounts?, could you rank in ascending by the customer_id?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC"
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "nlq": "What are the first names and ids for customers who have two or more accounts, and show by the y axis in asc please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC"
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices_robust",
        "target": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T1.customerID ASC",
        "nlq": "Show first name and id for all customers with at least 2 accounts Show bar chart, order Y from low to high order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.customer_Fname , T1.customerID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customerID = T2.customerID ORDER BY T2.customer_Fname ASC"
    },
    {
        "record_name": "2833",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time",
        "nlq": "Give me the times and numbers of all trains that go to Chennai, ordered by time with a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time",
        "rag_dvqs": [
            "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
            "Visualize PIE SELECT time , train_number FROM train WHERE destination = 'Chennai'",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival DESC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) ASC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time",
        "predict_debugged_db_ann": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time"
    },
    {
        "record_name": "2833",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time",
        "nlq": "Give me the times and numbers of all trains that go to Chennai, ordered by time. Show bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time",
        "rag_dvqs": [
            "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
            "Visualize PIE SELECT time , train_number FROM train WHERE destination = 'Chennai'",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival DESC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) ASC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time",
        "predict_debugged_db_ann": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time"
    },
    {
        "record_name": "2833",
        "db_id": "station_weather_robust",
        "target": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time",
        "nlq": "Visualize a bar graph about the times and numbers of all trains that go to Chennai, ordered by time.",
        "predict_rag_nlq": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY time",
        "rag_dvqs": [
            "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
            "Visualize PIE SELECT time , train_number FROM train WHERE destination = 'Chennai'",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) DESC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
        "predict_debugged_db_ann": "Visualize BAR SELECT Time , Train_Number FROM train WHERE Destination = 'Chennai' ORDER BY Time"
    },
    {
        "record_name": "633@x_name@DESC",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY department_name ORDER BY department_name DESC",
        "nlq": "What is the average of credit value of courses with more than one prerequisite for each department? Return a bar chart, list by the bar in descending please.",
        "predict_rag_nlq": "Visualize BAR SELECT department_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY department_name ORDER BY AVG(credits) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY SUM(credits) DESC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY SUM(credits) ASC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT department_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY department_name ORDER BY AVG(credits) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPARTMENT_NAME , AVG(CREDITS) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY DEPARTMENT_NAME ORDER BY AVG(CREDITS) DESC"
    },
    {
        "record_name": "633@x_name@DESC",
        "db_id": "college_2_robust",
        "target": "Visualize BAR SELECT department_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY department_name ORDER BY department_name DESC",
        "nlq": "Find the average of credits of courses that have more than one prerequisite for each department with a bar chart, list by the bar in descending please.",
        "predict_rag_nlq": "Visualize BAR SELECT department_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY department_name ORDER BY AVG(credits) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY SUM(credits) DESC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY SUM(credits) ASC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT department_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY department_name ORDER BY AVG(credits) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPARTMENT_NAME , AVG(CREDITS) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY DEPARTMENT_NAME ORDER BY AVG(CREDITS) DESC"
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY schoolID DESC",
        "nlq": "A bar chart shows the distribution of All_Home and School_ID , and group by attribute ACC_Home, order by the y axis from high to low please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home DESC"
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY schoolID DESC",
        "nlq": "Find All_Home and School_ID , and group by attribute ACC_Home, and visualize them by a bar chart, could you list in descending by the y-axis please?",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home DESC"
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY schoolID DESC",
        "nlq": "Show me about the distribution of All_Home and School_ID , and group by attribute ACC_Home in a bar chart, and sort by the y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY all_home DESC"
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY schoolID DESC",
        "nlq": "Return a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, and sort by the y-axis from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY schoolID DESC"
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY schoolID DESC",
        "nlq": "Stack bar chart of school_id vs ACC_Home based on all home, list by the y-axis in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY schoolID DESC"
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball_robust",
        "target": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home ,  all_home ORDER BY schoolID DESC",
        "nlq": "Visualize a bar chart about the distribution of All_Home and School_ID , and group by attribute ACC_Home, and rank in descending by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT all_home , schoolID FROM basketball_match GROUP BY ACC_home , all_home ORDER BY schoolID DESC"
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people_robust",
        "target": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "nlq": "Show party names and the number of events for each party in a bar chart, show in descending by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PartyName , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people_robust",
        "target": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "nlq": "How many events are there for each party, order by the the total number in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PartyName , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people_robust",
        "target": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "nlq": "Show party names and the number of events for each party, order by the the total number in desc please.",
        "predict_rag_nlq": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC"
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people_robust",
        "target": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "nlq": "Return a bar chart on how many events are there for each party?, and order in descending by the y axis.",
        "predict_rag_nlq": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC"
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people_robust",
        "target": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "nlq": "Give me a histogram for how many events are there for each party?, and list by the total number in descending.",
        "predict_rag_nlq": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PartyName , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PartyName , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.PartyID = T2.PartyID GROUP BY T1.PartyID ORDER BY COUNT(*) DESC"
    },
    {
        "record_name": "2765@x_name@DESC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
        "nlq": "Give me a bar chart for mean tonnage of each type, show by the bar in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "2765@x_name@DESC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
        "nlq": "Show different types of ships and the average tonnage of ships of each type in a bar chart, and rank Type in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC"
    },
    {
        "record_name": "2765@x_name@DESC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
        "nlq": "Show different types of ships and the average tonnage of ships of each type Show bar chart, and could you show x axis from high to low order please?",
        "predict_rag_nlq": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY avg(tonnage) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY avg(tonnage) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY avg(tonnage) DESC"
    },
    {
        "record_name": "2765@x_name@DESC",
        "db_id": "ship_mission_robust",
        "target": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY Category DESC",
        "nlq": "For each type, what is the average tonnage, and show X in desc order.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY avg(tonnage) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY avg(tonnage) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , avg(tonnage) FROM ship GROUP BY Category ORDER BY avg(tonnage) DESC"
    },
    {
        "record_name": "2816@x_name@DESC",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "nlq": "A bar chart for how many competitions for each country, and display bars from high to low order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY COUNT(Nation) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY COUNT(Nation) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY COUNT(Nation) DESC"
    },
    {
        "record_name": "2816@x_name@DESC",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "nlq": "Show me the number of country by country in a histogram, and I want to sort in desc by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC"
    },
    {
        "record_name": "2816@x_name@DESC",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "nlq": "How many competitions for each country?, rank by the Country in desc.",
        "predict_rag_nlq": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC"
    },
    {
        "record_name": "2816@x_name@DESC",
        "db_id": "sports_competition_robust",
        "target": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "nlq": "Compare the total number of competitions for each country, I want to sort in desc by the x axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nation , COUNT(Nation) FROM competition GROUP BY Nation ORDER BY Nation DESC"
    },
    {
        "record_name": "2494",
        "db_id": "orchestra_robust",
        "target": "Visualize BAR SELECT Record_Company , COUNT(*) FROM Orchestra GROUP BY Record_Company",
        "nlq": "Display a bar chart for how many orchestras does each record company manage?",
        "predict_rag_nlq": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2494",
        "db_id": "orchestra_robust",
        "target": "Visualize BAR SELECT Record_Company , COUNT(*) FROM Orchestra GROUP BY Record_Company",
        "nlq": "Visualize a bar chart for how many orchestras does each record company manage?",
        "predict_rag_nlq": "Visualize BAR SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC"
    },
    {
        "record_name": "2494",
        "db_id": "orchestra_robust",
        "target": "Visualize BAR SELECT Record_Company , COUNT(*) FROM Orchestra GROUP BY Record_Company",
        "nlq": "How many orchestras does each record company manage. Show bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "rag_dvqs": [
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
            "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company This Original DVQ already follows the style of the Reference DVQs and does not need any modifications .",
        "predict_debugged_db_ann": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "record_name": "2494",
        "db_id": "orchestra_robust",
        "target": "Visualize BAR SELECT Record_Company , COUNT(*) FROM Orchestra GROUP BY Record_Company",
        "nlq": "Draw a bar chart of record company versus the total number ",
        "predict_rag_nlq": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "rag_dvqs": [
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
            "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company The Original DVQ already follows the style of the Reference DVQs .",
        "predict_debugged_db_ann": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company"
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, find hire_date and the sum of employee_id bin hire_date by weekday, and visualize them by a bar chart, display by the Y in asc.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(employee_id) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, draw a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, could you order by the Y-axis in ascending?",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, a bar chart shows the distribution of hire_date and the sum of employee_id bin hire_date by weekday, list by the Y in ascending.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, visualize a bar chart about the distribution of hire_date and the sum of employee_id bin hire_date by weekday, order by the y-axis from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' BIN HIRE_DATE BY WEEKDAY ORDER BY SUM(EMPLOYEE_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1_robust",
        "target": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY",
        "nlq": "For all employees who have the letters D or S in their first name, show me about the distribution of hire_date and the sum of employee_id bin hire_date by weekday in a bar chart, could you sort Y in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(employee_id) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_hire , SUM(employee_id) FROM employees WHERE Fname LIKE '%D%' OR Fname LIKE '%S%' ORDER BY SUM(employee_id) ASC BIN date_of_hire BY WEEKDAY"
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "nlq": "List the description of the outcomes for all projects, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description"
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "nlq": "A bar chart for what are the number of the descriptions of all the project outcomes?",
        "predict_rag_nlq": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description"
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "nlq": "What are the number of the descriptions of all the project outcomes?",
        "predict_rag_nlq": "Visualize PIE SELECT result_description, COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "rag_dvqs": [
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description",
            "Visualize PIE SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
            "Visualize PIE SELECT Institution , count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id = T2.institution_id GROUP BY T1.institution_id",
            "Visualize PIE SELECT fault_description , COUNT(fault_description) FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id = T2.fault_log_entry_id GROUP BY fault_description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "predict_debugged_db_ann": "Visualize PIE SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description"
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "nlq": "A bar chart for listing the number of the description of the outcomes for all projects.",
        "predict_rag_nlq": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description"
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "nlq": "What are the descriptions of all the project outcomes, and count them by a bar chart",
        "predict_rag_nlq": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description"
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research_robust",
        "target": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "nlq": "List the number of the description of the outcomes for all projects.",
        "predict_rag_nlq": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT result_description , COUNT(result_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.result_code = T2.result_code GROUP BY result_description"
    },
    {
        "record_name": "1305",
        "db_id": "election_robust",
        "target": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "nlq": "Show the proportion of each party in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Party , COUNT(*) FROM representative GROUP BY Party",
        "rag_dvqs": [
            "Visualize PIE SELECT Party , COUNT(*) FROM representative GROUP BY Party",
            "Visualize PIE SELECT Party , COUNT(Party) FROM representative GROUP BY Party",
            "Visualize PIE SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize PIE SELECT Party , count(*) FROM driver GROUP BY party",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Party , COUNT(*) FROM representative GROUP BY Party",
        "predict_debugged_db_ann": "Visualize PIE SELECT Party , COUNT(*) FROM election GROUP BY Party"
    },
    {
        "record_name": "1305",
        "db_id": "election_robust",
        "target": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "nlq": "Can you tell me the proportion of each party for the election?",
        "predict_rag_nlq": "Visualize PIE SELECT Party , COUNT(*) FROM election GROUP BY Party",
        "rag_dvqs": [
            "Visualize PIE SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize PIE SELECT Party , COUNT(*) FROM representative GROUP BY Party",
            "Visualize PIE SELECT Party , count(*) FROM driver GROUP BY party",
            "Visualize PIE SELECT Party , COUNT(Party) FROM representative GROUP BY Party",
            "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize PIE SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize PIE SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor",
            "Visualize PIE SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize PIE SELECT Location , COUNT(Location) FROM party GROUP BY Location"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_debugged_db_ann": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"
    },
    {
        "record_name": "1306@y_name@ASC",
        "db_id": "election_robust",
        "target": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN Party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
        "nlq": "Please compare the number of names of parties using a bar chart, show by the y-axis in ascending please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC"
    }
]