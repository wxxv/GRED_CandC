{
    "academic": "Table author:\n- Contains information about authors.\n- Columns:\n  - aid: Unique identifier for each author.\n  - homepage: Author's homepage.\n  - name: Name of the author.\n  - oid: Identifier of the organization to which the author belongs.\n\nTable cite:\n- Represents citations between publications.\n- Columns:\n  - cited: Identifier of the cited publication.\n  - citing: Identifier of the citing publication.\n\nTable conference:\n- Stores details about conferences.\n- Columns:\n  - cid: Unique identifier for each conference.\n  - homepage: Conference homepage.\n  - name: Name of the conference.\n\nTable domain:\n- Contains information about domains.\n- Columns:\n  - did: Unique identifier for each domain.\n  - name: Name of the domain.\n\nTable domain_author:\n- Represents the relationship between authors and domains.\n- Columns:\n  - aid: Identifier of the author.\n  - did: Identifier of the domain.\n\nTable domain_conference:\n- Represents the relationship between domains and conferences.\n- Columns:\n  - cid: Identifier of the conference.\n  - did: Identifier of the domain.\n\nTable domain_journal:\n- Represents the relationship between domains and journals.\n- Columns:\n  - did: Identifier of the domain.\n  - jid: Identifier of the journal.\n\nTable domain_keyword:\n- Represents the relationship between domains and keywords.\n- Columns:\n  - did: Identifier of the domain.\n  - kid: Identifier of the keyword.\n\nTable domain_publication:\n- Represents the relationship between domains and publications.\n- Columns:\n  - did: Identifier of the domain.\n  - pid: Identifier of the publication.\n\nTable journal:\n- Contains information about journals.\n- Columns:\n  - homepage: Journal homepage.\n  - jid: Unique identifier for each journal.\n  - name: Name of the journal.\n\nTable keyword:\n- Stores keywords related to publications.\n- Columns:\n  - keyword: Keyword associated with the publication.\n  - kid: Unique identifier for each keyword.\n\nTable organization:\n- Stores details about organizations.\n- Columns:\n  - continent: Continent where the organization is located.\n  - homepage: Organization homepage.\n  - name: Name of the organization.\n  - oid: Unique identifier for each organization.\n\nTable publication:\n- Contains details about publications.\n- Columns:\n  - abstract: Summary of the publication.\n  - cid: Identifier of the conference where the publication was presented.\n  - citation_num: Number of citations for the publication.\n  - jid: Identifier of the journal where the publication was published.\n  - pid: Unique identifier for each publication.\n  - reference_num: Number of references in the publication.\n  - title: Title of the publication.\n  - year: Year of publication.\n\nTable publication_keyword:\n- Represents the relationship between publications and keywords.\n- Columns:\n  - pid: Identifier of the publication.\n  - kid: Identifier of the keyword.\n\nTable writes:\n- Represents the relationship between authors and publications.\n- Columns:\n  - aid: Identifier of the author.\n  - pid: Identifier of the publication.\n\nForeign Keys:\n- domain_author.did references domain.did, linking authors to specific domains.\n- domain_author.aid references author.aid, establishing a relationship between authors and domains.\n- domain_conference.did references domain.did, connecting domains to conferences.\n- domain_conference.cid references conference.cid, establishing a relationship between domains and conferences.\n- domain_journal.did references domain.did, linking domains to journals.\n- domain_journal.jid references journal.jid, establishing a relationship between domains and journals.\n- domain_keyword.did references domain.did, connecting domains to keywords.\n- domain_keyword.kid references keyword.kid, establishing a relationship between domains and keywords.\n- publication.cid references conference.cid, linking publications to conferences.\n- publication.jid references journal.jid, establishing a relationship between publications and journals.\n- domain_publication.did references domain.did, connecting domains to publications.\n- domain_publication.pid references publication.pid, establishing a relationship between domains and publications.\n- publication_keyword.kid references keyword.kid, linking publications to keywords.\n- publication_keyword.pid references publication.pid, establishing a relationship between publications and keywords.\n- writes.aid references author.aid, connecting authors to publications.\n- writes.pid references publication.pid, establishing a relationship between authors and publications.\n- cite.citing references publication.pid, linking citing publications.\n- cite.cited references publication.pid, linking cited publications.",
    "activity_1": "Table Activity:\n- Contains information about different activities.\n- Columns:\n  - actid: Unique identifier for each activity.\n  - activity_name: Name of the activity.\n\nTable Faculty:\n- Stores data related to faculty members.\n- Columns:\n  - FacID: Unique identifier for each faculty member.\n  - Lname: Last name of the faculty member.\n  - Fname: First name of the faculty member.\n  - Rank: Rank or position of the faculty member.\n  - Sex: Gender of the faculty member.\n  - Phone: Phone number of the faculty member.\n  - Room: Room number of the faculty member.\n  - Building: Building where the faculty member's office is located.\n\nTable Faculty_Participates_in:\n- Represents the participation of faculty members in activities.\n- Columns:\n  - FacID: Identifier of the faculty member.\n  - actid: Identifier of the activity in which the faculty member participates.\n\nTable Participates_in:\n- Contains data about student participation in activities.\n- Columns:\n  - stuid: Identifier of the student.\n  - actid: Identifier of the activity in which the student participates.\n\nTable Student:\n- Stores information about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Field of study for the student.\n  - Advisor: Advisor of the student.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Participates_in.actid references Activity.actid, establishing a relationship between participation and activities.\n- Participates_in.stuid references Student.StuID, linking student participation to specific students.\n- Faculty_Participates_in.actid references Activity.actid, connecting faculty participation to activities.\n- Faculty_Participates_in.FacID references Faculty.FacID, establishing a relationship between faculty participation and faculty members.",
    "aircraft": "Table aircraft:\n- Contains information about different aircraft.\n- Columns:\n  - Aircraft_ID: Unique identifier for each aircraft.\n  - Aircraft: Name or type of the aircraft.\n  - Description: Description of the aircraft.\n  - Max_Gross_Weight: Maximum gross weight the aircraft can carry.\n  - Total_disk_area: Total disc area of the aircraft.\n  - Max_disk_Loading: Maximum disc loading of the aircraft.\n\nTable airport:\n- Stores data related to airports.\n- Columns:\n  - Airport_ID: Unique identifier for each airport.\n  - Airport_Name: Name of the airport.\n  - Total_Passengers: Total number of passengers passing through the airport.\n  - %_Change_2007: Percentage change in passengers from 2007.\n  - International_Passengers: Number of international passengers.\n  - Domestic_Passengers: Number of domestic passengers.\n  - Transit_Passengers: Number of transit passengers.\n  - Aircraft_Movements: Number of aircraft movements at the airport.\n  - Freight_Metric_Tonnes: Amount of freight in metric tonnes handled by the airport.\n\nTable airport_aircraft:\n- Represents the relationship between airports and aircraft.\n- Columns:\n  - ID: Unique identifier for each record in the table.\n  - Airport_ID: Identifier of the airport.\n  - Aircraft_ID: Identifier of the aircraft.\n\nTable match:\n- Contains data about matches or competitions.\n- Columns:\n  - Round: Round of the match.\n  - Location: Location of the match.\n  - Country: Country where the match took place.\n  - Date: Date of the match.\n  - Fastest_Qualifying: Information about the fastest qualifying time.\n  - Winning_Pilot: Identifier of the winning pilot.\n  - Winning_Aircraft: Identifier of the winning aircraft.\n\nTable pilot:\n- Stores information about pilots.\n- Columns:\n  - Pilot_Id: Unique identifier for each pilot.\n  - Name: Name of the pilot.\n  - Age: Age of the pilot.\n\nForeign Keys:\n- match.Winning_Pilot references pilot.Pilot_Id, establishing a relationship between match winners and pilots.\n- match.Winning_Aircraft references aircraft.Aircraft_ID, linking match winners to the winning aircraft.\n- airport_aircraft.Aircraft_ID references aircraft.Aircraft_ID, connecting airport_aircraft to specific aircraft.\n- airport_aircraft.Airport_ID references airport.Airport_ID, linking airport_aircraft to specific airports.",
    "allergy_1": "Table Allergy_Type:\n- Contains information about different types of allergies.\n- Columns:\n  - Allergy: Name of the allergy.\n  - AllergyType: Type of the allergy.\n\nTable Has_Allergy:\n- Represents the relationship between students and their allergies.\n- Columns:\n  - StuID: Identifier of the student.\n  - Allergy: Name of the allergy the student has.\n\nTable Student:\n- Stores details about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Field of study for the student.\n  - Advisor: Name of the student's advisor.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Has_Allergy.Allergy references Allergy_Type.Allergy, establishing a relationship between allergies and their types.\n- Has_Allergy.StuID references Student.StuID, linking students to their respective allergies.",
    "apartment_rentals": "Table Apartment_Bookings:\n- Contains information about bookings made for apartments.\n- Columns:\n  - apt_booking_id: Unique identifier for each apartment booking.\n  - apt_id: Identifier of the apartment booked.\n  - guest_id: Identifier of the guest making the booking.\n  - booking_status_code: Code indicating the status of the booking.\n  - booking_start_date: Start date of the booking.\n  - booking_end_date: End date of the booking.\n\nTable Apartment_Buildings:\n- Stores details about different apartment buildings.\n- Columns:\n  - building_id: Unique identifier for each building.\n  - building_short_name: Short name of the building.\n  - building_full_name: Full name of the building.\n  - building_description: Description of the building.\n  - building_address: Address of the building.\n  - building_manager: Manager of the building.\n  - building_phone: Phone number of the building.\n\nTable Apartment_Facilities:\n- Contains information about facilities available in apartments.\n- Columns:\n  - apt_id: Identifier of the apartment.\n  - facility_code: Code representing a specific facility.\n\nTable Apartments:\n- Stores data related to individual apartments.\n- Columns:\n  - apt_id: Unique identifier for each apartment.\n  - building_id: Identifier of the building where the apartment is located.\n  - apt_type_code: Code indicating the type of apartment.\n  - apt_number: Number assigned to the apartment.\n  - bathroom_count: Number of bathrooms in the apartment.\n  - bedroom_count: Number of bedrooms in the apartment.\n  - room_count: Total number of rooms in the apartment.\n\nTable Guests:\n- Contains details about guests staying in the apartments.\n- Columns:\n  - guest_id: Unique identifier for each guest.\n  - gender_code: Code representing the gender of the guest.\n  - guest_first_name: First name of the guest.\n  - guest_last_name: Last name of the guest.\n  - date_of_birth: Date of birth of the guest.\n\nTable View_Unit_Status:\n- Stores the status of apartment units.\n- Columns:\n  - apt_id: Identifier of the apartment unit.\n  - apt_booking_id: Identifier of the booking associated with the unit.\n  - status_date: Date of the status.\n  - available_yn: Flag indicating if the unit is available.\n\nForeign Keys:\n- Apartments.building_id references Apartment_Buildings.building_id, establishing a relationship between apartments and buildings.\n- Apartment_Facilities.apt_id references Apartments.apt_id, linking apartment facilities to specific apartments.\n- Apartment_Bookings.guest_id references Guests.guest_id, connecting apartment bookings to guests.\n- Apartment_Bookings.apt_id references Apartments.apt_id, linking apartment bookings to specific apartments.\n- View_Unit_Status.apt_booking_id references Apartment_Bookings.apt_booking_id, establishing a relationship between unit status and apartment bookings.\n- View_Unit_Status.apt_id references Apartments.apt_id, connecting unit status to specific apartments.",
    "architecture": "Table architect:\n- Contains information about architects.\n- Columns:\n  - id: Unique identifier for each architect.\n  - name: Name of the architect.\n  - nationality: Nationality of the architect.\n  - gender: Gender of the architect.\n\nTable bridge:\n- Stores data related to bridges.\n- Columns:\n  - architect_id: Identifier of the architect who designed the bridge.\n  - id: Unique identifier for each bridge.\n  - name: Name of the bridge.\n  - location: Location where the bridge is situated.\n  - length_meters: Length of the bridge in meters.\n  - length_feet: Length of the bridge in feet.\n\nTable mill:\n- Contains details about mills.\n- Columns:\n  - architect_id: Identifier of the architect who designed the mill.\n  - id: Unique identifier for each mill.\n  - location: Location of the mill.\n  - name: Name of the mill.\n  - type: Type of the mill.\n  - built_year: Year when the mill was built.\n  - notes: Additional notes about the mill.\n\nForeign Keys:\n- bridge.architect_id references architect.id, establishing a relationship between bridges and architects.\n- mill.architect_id references architect.id, linking mills to the architects who designed them.",
    "assets_maintenance": "Table Asset_Parts:\n- Contains the relationship between assets and parts.\n- Columns:\n  - asset_id: Identifier of the asset.\n  - part_id: Identifier of the part associated with the asset.\n\nTable Assets:\n- Stores information about different assets.\n- Columns:\n  - asset_id: Unique identifier for each asset.\n  - maintenance_contract_id: Identifier of the maintenance contract associated with the asset.\n  - supplier_company_id: Identifier of the supplier company for the asset.\n  - asset_details: Details about the asset.\n  - asset_make: Make or manufacturer of the asset.\n  - asset_model: Model of the asset.\n  - asset_acquired_date: Date when the asset was acquired.\n  - asset_disposed_date: Date when the asset was disposed of.\n  - other_asset_details: Additional details about the asset.\n\nTable Engineer_Skills:\n- Contains the relationship between engineers and their skills.\n- Columns:\n  - engineer_id: Identifier of the engineer.\n  - skill_id: Identifier of the skill associated with the engineer.\n\nTable Engineer_Visits:\n- Stores information about visits made by engineers.\n- Columns:\n  - engineer_visit_id: Unique identifier for each visit.\n  - contact_staff_id: Identifier of the staff member contacted during the visit.\n  - engineer_id: Identifier of the engineer conducting the visit.\n  - fault_log_entry_id: Identifier of the fault log entry related to the visit.\n  - fault_status: Status of the fault during the visit.\n  - visit_start_datetime: Start date and time of the visit.\n  - visit_end_datetime: End date and time of the visit.\n  - other_visit_details: Additional details about the visit.\n\nTable Fault_Log:\n- Contains records of faults reported for assets.\n- Columns:\n  - fault_log_entry_id: Unique identifier for each fault log entry.\n  - asset_id: Identifier of the asset related to the fault.\n  - recorded_by_staff_id: Identifier of the staff member who recorded the fault.\n  - fault_log_entry_datetime: Date and time of the fault log entry.\n  - fault_description: Description of the fault.\n  - other_fault_details: Additional details about the fault.\n\nTable Fault_Log_Parts:\n- Stores information about parts associated with fault log entries.\n- Columns:\n  - fault_log_entry_id: Identifier of the fault log entry.\n  - part_fault_id: Identifier of the part fault.\n  - fault_status: Status of the fault related to the part.\n\nTable Maintenance_Contracts:\n- Contains details about maintenance contracts.\n- Columns:\n  - maintenance_contract_id: Unique identifier for each maintenance contract.\n  - maintenance_contract_company_id: Identifier of the company providing the maintenance contract.\n  - contract_start_date: Start date of the maintenance contract.\n  - contract_end_date: End date of the maintenance contract.\n  - other_contract_details: Additional details about the maintenance contract.\n\nTable Maintenance_Engineers:\n- Stores information about maintenance engineers.\n- Columns:\n  - engineer_id: Unique identifier for each engineer.\n  - company_id: Identifier of the company the engineer belongs to.\n  - first_name: First name of the engineer.\n  - last_name: Last name of the engineer.\n  - other_details: Additional details about the engineer.\n\nTable Part_Faults:\n- Contains details about faults associated with parts.\n- Columns:\n  - part_fault_id: Unique identifier for each part fault.\n  - part_id: Identifier of the part related to the fault.\n  - fault_short_name: Short name or code for the fault.\n  - fault_description: Description of the fault.\n  - other_fault_details: Additional details about the fault.\n\nTable Parts:\n- Stores information about different parts.\n- Columns:\n  - part_id: Unique identifier for each part.\n  - part_name: Name of the part.\n  - chargeable_yn: Indicates if the part is chargeable or not.\n  - chargeable_amount: Amount charged for the part.\n  - other_part_details: Additional details about the part.\n\nTable Skills:\n- Contains details about different skills.\n- Columns:\n  - skill_id: Unique identifier for each skill.\n  - skill_code: Code representing the skill.\n  - skill_description: Description of the skill.\n\nTable Skills_Required_To_Fix:\n- Represents the relationship between parts faults and skills required to fix them.\n- Columns:\n  - part_fault_id: Identifier of the part fault.\n  - skill_id: Identifier of the skill required to fix the part fault.\n\nTable Staff:\n- Stores information about staff members.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - staff_name: Name of the staff member.\n  - gender: Gender of the staff member.\n  - other_staff_details: Additional details about the staff member.\n\nTable Third_Party_Companies:\n- Contains details about third-party companies.\n- Columns:\n  - company_id: Unique identifier for each company.\n  - company_type: Type of the company.\n  - company_name: Name of the company.\n  - company_address: Address of the company.\n  - other_company_details: Additional details about the company.\n\nForeign Keys:\n- Maintenance_Contracts.maintenance_contract_company_id references Third_Party_Companies.company_id, linking maintenance contracts to third-party companies.\n- Assets.supplier_company_id references Third_Party_Companies.company_id, establishing a relationship between assets and supplier companies.\n- Assets.maintenance_contract_id references Maintenance_Contracts.maintenance_contract_id, connecting assets to maintenance contracts.\n- Asset_Parts.asset_id references Assets.asset_id, linking asset parts to assets.\n- Asset_Parts.part_id references Parts.part_id, establishing a relationship between asset parts and parts.\n- Maintenance_Engineers.company_id references Third_Party_Companies.company_id, connecting maintenance engineers to third-party companies.\n- Engineer_Skills.skill_id references Skills.skill_id, linking engineer skills to skills.\n- Engineer_Skills.engineer_id references Maintenance_Engineers.engineer_id, establishing a relationship between engineer skills and maintenance engineers.\n- Fault_Log.recorded_by_staff_id references Staff.staff_id, connecting fault logs to staff members.\n- Fault_Log.asset_id references Assets.asset_id, linking fault logs to assets.\n- Engineer_Visits.contact_staff_id references Staff.staff_id, establishing a relationship between engineer visits and staff members.\n- Engineer_Visits.engineer_id references Maintenance_Engineers.engineer_id, connecting engineer visits to maintenance engineers.\n- Engineer_Visits.fault_log_entry_id references Fault_Log.fault_log_entry_id, linking engineer visits to fault log entries.\n- Part_Faults.part_id references Parts.part_id, establishing a relationship between part faults and parts.\n- Fault_Log_Parts.fault_log_entry_id references Fault_Log.fault_log_entry_id, connecting fault log parts to fault logs.\n- Fault_Log_Parts.part_fault_id references Part_Faults.part_fault_id, linking fault log parts to part faults.\n- Skills_Required_To_Fix.skill_id references Skills.skill_id, establishing a relationship between skills required to fix and skills.\n- Skills_Required_To_Fix.part_fault_id references Part_Faults.part_fault_id, connecting skills required to fix to part faults.",
    "baseball_1": "Table all_star:\n- Contains information about players who have participated in all-star games.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the all-star game.\n  - game_num: Game number.\n  - game_id: Identifier for the game.\n  - team_id: Identifier of the team the player represented.\n  - league_id: Identifier of the league the player belongs to.\n  - gp: Games played.\n  - starting_pos: Starting position of the player.\n\nTable appearances:\n- Stores data related to player appearances in different years.\n- Columns:\n  - year: Year of the appearance.\n  - team_id: Identifier of the team the player appeared for.\n  - league_id: Identifier of the league the player belongs to.\n  - player_id: Identifier of the player.\n  - g_all: Total games played.\n  - gs: Games started.\n  - g_batting: Games played as a batter.\n  - g_defense: Games played in defense.\n  - Various positional columns indicating games played in different positions.\n\nTable batting:\n- Contains batting statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the statistics.\n  - stint: Stint of the player.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player belongs to.\n  - Various batting statistics columns such as runs, hits, home runs, etc.\n\nTable batting_postseason:\n- Stores postseason batting statistics of players.\n- Columns:\n  - year: Year of the postseason.\n  - round: Round of the postseason.\n  - player_id: Identifier of the player.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player belongs to.\n  - Various postseason batting statistics columns.\n\nTable college:\n- Contains information about colleges.\n- Columns:\n  - college_id: Unique identifier for each college.\n  - name_full: Full name of the college.\n  - city: City where the college is located.\n  - state: State where the college is located.\n  - country: Country where the college is located.\n\nTable fielding:\n- Stores fielding statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the statistics.\n  - stint: Stint of the player.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player belongs to.\n  - Various fielding statistics columns such as putouts, assists, errors, etc.\n\nTable fielding_outfield:\n- Contains outfield fielding statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the statistics.\n  - stint: Stint of the player.\n  - glf: Games played in left field.\n  - gcf: Games played in center field.\n  - grf: Games played in right field.\n\nTable fielding_postseason:\n- Stores postseason fielding statistics of players.\n- Columns:\n  - player_id: Identifier of the player.\n  - year: Year of the postseason.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player belongs to.\n  - round: Round of the postseason.\n  - Various postseason fielding statistics columns.\n\nTable hall_of_fame:\n- Contains information about players in the Hall of Fame.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - yearid: Year of induction.\n  - votedby: Method of voting.\n  - Various voting-related columns.\n\nTable home_game:\n- Stores data about home games.\n- Columns:\n  - year: Year of the game.\n  - league_id: Identifier of the league.\n  - team_id: Identifier of the team.\n  - park_id: Identifier of the park.\n  - Various game-related columns such as games played, attendance, etc.\n\nTable manager:\n- Contains information about managers.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of management.\n  - team_id: Identifier of the team managed.\n  - league_id: Identifier of the league managed in.\n  - Various managerial statistics columns.\n\nTable manager_award:\n- Stores awards received by managers.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - award_id: Identifier of the award.\n  - year: Year of the award.\n  - league_id: Identifier of the league the award was received in.\n  - Various award-related columns.\n\nTable manager_award_vote:\n- Contains votes received by managers for awards.\n- Columns:\n  - award_id: Identifier of the award.\n  - year: Year of the award.\n  - league_id: Identifier of the league the award was received in.\n  - player_id: Identifier of the player.\n  - Various voting-related columns.\n\nTable manager_half:\n- Stores managerial statistics for each half of the season.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of management.\n  - team_id: Identifier of the team managed.\n  - league_id: Identifier of the league managed in.\n  - Various half-season statistics columns.\n\nTable park:\n- Contains information about parks.\n- Columns:\n  - park_id: Unique identifier for each park.\n  - park_name: Name of the park.\n  - city: City where the park is located.\n  - state: State where the park is located.\n  - country: Country where the park is located.\n\nTable pitching:\n- Stores pitching statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the statistics.\n  - stint: Stint of the player.\n  - team_id: Identifier of the team the player pitched for.\n  - league_id: Identifier of the league the player belongs to.\n  - Various pitching statistics columns such as wins, losses, strikeouts, etc.\n\nTable pitching_postseason:\n- Contains postseason pitching statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the postseason.\n  - round: Round of the postseason.\n  - team_id: Identifier of the team the player pitched for.\n  - league_id: Identifier of the league the player belongs to.\n  - Various postseason pitching statistics columns.\n\nTable player:\n- Stores information about players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - Various player-related columns such as birth details, death details, name, physical attributes, etc.\n\nTable player_award:\n- Contains awards received by players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - award_id: Identifier of the award.\n  - year: Year of the award.\n  - league_id: Identifier of the league the award was received in.\n  - Various award-related columns.\n\nTable player_award_vote:\n- Stores votes received by players for awards.\n- Columns:\n  - award_id: Identifier of the award.\n  - year: Year of the award.\n  - league_id: Identifier of the league the award was received in.\n  - player_id: Identifier of the player.\n  - Various voting-related columns.\n\nTable player_college:\n- Contains information about players' colleges.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - college_id: Identifier of the college.\n  - year: Year of college attendance.\n\nTable postseason:\n- Stores information about postseason games.\n- Columns:\n  - year: Year of the postseason.\n  - round: Round of the postseason.\n  - team_id_winner: Identifier of the winning team.\n  - league_id_winner: Identifier of the winning team's league.\n  - team_id_loser: Identifier of the losing team.\n  - league_id_loser: Identifier of the losing team's league.\n  - Various game-related columns.\n\nTable salary:\n- Contains salary information of players.\n- Columns:\n  - year: Year of the salary.\n  - team_id: Identifier of the team the player belongs to.\n  - league_id: Identifier of the league the player belongs to.\n  - player_id: Identifier of the player.\n  - salary: Salary amount.\n\nTable team:\n- Stores information about teams.\n- Columns:\n  - year: Year of the team.\n  - league_id: Identifier of the league the team belongs to.\n  - team_id: Unique identifier for each team.\n  - Various team-related statistics columns.\n\nTable team_franchise:\n- Contains information about team franchises.\n- Columns:\n  - franchise_id: Unique identifier for each franchise.\n  - franchise_name: Name of the franchise.\n  - active: Indicates if the franchise is active.\n  - na_assoc: Association with North America.\n\nTable team_half:\n- Stores team statistics for each half of the season.\n- Columns:\n  - year: Year of the team.\n  - league_id: Identifier of the league the team belongs to.\n  - team_id: Identifier of the team.\n  - Various half-season statistics columns.\n\nForeign Keys:\n- Establish relationships between tables using player identifiers and team identifiers.",
    "battle_death": "Table battle:\n- Contains information about different battles.\n- Columns:\n  - id: Unique identifier for each battle.\n  - name: Name of the battle.\n  - date: Date when the battle took place.\n  - bulgarian_commander: Commander of the Bulgarian forces in the battle.\n  - latin_commander: Commander of the Latin forces in the battle.\n  - result: Outcome or result of the battle.\n\nTable death:\n- Stores data related to deaths caused by battles.\n- Columns:\n  - caused_by_ship_id: Identifier of the ship that caused the death.\n  - id: Unique identifier for each death record.\n  - note: Additional notes or details about the death.\n  - killed: Number of individuals killed.\n  - injured: Number of individuals injured.\n\nTable ship:\n- Contains details about ships involved in battles.\n- Columns:\n  - id: Unique identifier for each ship.\n  - name: Name of the ship.\n  - tonnage: Weight or tonnage of the ship.\n  - ship_type: Type or category of the ship.\n  - location: Location of the ship.\n  - disposition_of_ship: Status or condition of the ship.\n  - lost_in_battle: Identifier of the battle in which the ship was lost.\n\nForeign Keys:\n- ship.lost_in_battle references battle.id, linking ships to the battles in which they were lost.\n- death.caused_by_ship_id references ship.id, establishing a relationship between deaths and the ships that caused them.",
    "behavior_monitoring": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line_1: First line of the address.\n  - line_2: Second line of the address.\n  - line_3: Third line of the address.\n  - city: City of the address.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n  - other_address_details: Additional details about the address.\n\nTable Assessment_Notes:\n- Stores notes related to assessments.\n- Columns:\n  - notes_id: Unique identifier for each assessment note.\n  - student_id: Identifier of the student associated with the assessment.\n  - teacher_id: Identifier of the teacher who created the assessment note.\n  - date_of_notes: Date when the assessment note was created.\n  - text_of_notes: Content of the assessment note.\n  - other_details: Additional details related to the assessment note.\n\nTable Behavior_Incident:\n- Contains data about behavior incidents.\n- Columns:\n  - incident_id: Unique identifier for each behavior incident.\n  - incident_type_code: Code representing the type of incident.\n  - student_id: Identifier of the student involved in the incident.\n  - date_incident_start: Start date of the incident.\n  - date_incident_end: End date of the incident.\n  - incident_summary: Summary of the incident.\n  - recommendations: Recommendations following the incident.\n  - other_details: Additional details related to the behavior incident.\n\nTable Detention:\n- Stores information about detentions.\n- Columns:\n  - detention_id: Unique identifier for each detention.\n  - detention_type_code: Code representing the type of detention.\n  - teacher_id: Identifier of the teacher assigning the detention.\n  - datetime_detention_start: Start date and time of the detention.\n  - datetime_detention_end: End date and time of the detention.\n  - detention_summary: Summary of the detention.\n  - other_details: Additional details related to the detention.\n\nTable Ref_Address_Types:\n- Contains reference data for address types.\n- Columns:\n  - address_type_code: Code representing the address type.\n  - address_type_description: Description of the address type.\n\nTable Ref_Detention_Type:\n- Stores reference data for detention types.\n- Columns:\n  - detention_type_code: Code representing the detention type.\n  - detention_type_description: Description of the detention type.\n\nTable Ref_Incident_Type:\n- Contains reference data for incident types.\n- Columns:\n  - incident_type_code: Code representing the incident type.\n  - incident_type_description: Description of the incident type.\n\nTable Student_Addresses:\n- Stores information about addresses associated with students.\n- Columns:\n  - student_id: Identifier of the student.\n  - address_id: Identifier of the address.\n  - date_address_from: Start date of the address association.\n  - date_address_to: End date of the address association.\n  - monthly_rental: Monthly rental amount for the address.\n  - other_details: Additional details related to the student address.\n\nTable Students:\n- Contains details about students.\n- Columns:\n  - student_id: Unique identifier for each student.\n  - address_id: Identifier of the address associated with the student.\n  - first_name: First name of the student.\n  - middle_name: Middle name of the student.\n  - last_name: Last name of the student.\n  - cell_mobile_number: Cell or mobile number of the student.\n  - email_address: Email address of the student.\n  - date_first_rental: Date when the student first rented.\n  - date_left_university: Date when the student left the university.\n  - other_student_details: Additional details related to the student.\n\nTable Students_in_Detention:\n- Stores data about students in detention.\n- Columns:\n  - student_id: Identifier of the student.\n  - detention_id: Identifier of the detention.\n  - incident_id: Identifier of the incident associated with the detention.\n\nTable Teachers:\n- Contains information about teachers.\n- Columns:\n  - teacher_id: Unique identifier for each teacher.\n  - address_id: Identifier of the address associated with the teacher.\n  - first_name: First name of the teacher.\n  - middle_name: Middle name of the teacher.\n  - last_name: Last name of the teacher.\n  - gender: Gender of the teacher.\n  - cell_mobile_number: Cell or mobile number of the teacher.\n  - email_address: Email address of the teacher.\n  - other_details: Additional details related to the teacher.\n\nForeign Keys:\n- Students.address_id references Addresses.address_id, linking students to their addresses.\n- Teachers.address_id references Addresses.address_id, connecting teachers to their addresses.\n- Assessment_Notes.teacher_id references Teachers.teacher_id, establishing a relationship between assessment notes and teachers.\n- Assessment_Notes.student_id references Students.student_id, linking assessment notes to students.\n- Behavior_Incident.student_id references Students.student_id, connecting behavior incidents to students.\n- Behavior_Incident.incident_type_code references Ref_Incident_Type.incident_type_code, establishing a relationship between behavior incidents and incident types.\n- Detention.teacher_id references Teachers.teacher_id, linking detentions to teachers.\n- Detention.detention_type_code references Ref_Detention_Type.detention_type_code, connecting detentions to detention types.\n- Student_Addresses.student_id references Students.student_id, linking student addresses to students.\n- Student_Addresses.address_id references Addresses.address_id, establishing a relationship between student addresses and addresses.\n- Students_in_Detention.student_id references Students.student_id, connecting students in detention to students.\n- Students_in_Detention.detention_id references Detention.detention_id, linking students in detention to detentions.\n- Students_in_Detention.incident_id references Behavior_Incident.incident_id, establishing a relationship between students in detention and behavior incidents.",
    "bike_1": "Table station:\n- Contains information about different stations.\n- Columns:\n  - id: Unique identifier for each station.\n  - name: Name of the station.\n  - lat: Latitude coordinate of the station.\n  - long: Longitude coordinate of the station.\n  - dock_count: Number of docks available at the station.\n  - city: City where the station is located.\n  - installation_date: Date when the station was installed.\n\nTable status:\n- Stores real-time status information about stations.\n- Columns:\n  - station_id: Identifier of the station.\n  - bikes_available: Number of bikes available at the station.\n  - docks_available: Number of docks available at the station.\n  - time: Timestamp of the status update.\n\nTable trip:\n- Contains details about bike trips.\n- Columns:\n  - id: Unique identifier for each trip.\n  - duration: Duration of the trip.\n  - start_date: Start date of the trip.\n  - start_station_name: Name of the starting station.\n  - start_station_id: Identifier of the starting station.\n  - end_date: End date of the trip.\n  - end_station_name: Name of the ending station.\n  - end_station_id: Identifier of the ending station.\n  - bike_id: Identifier of the bike used for the trip.\n  - subscription_type: Type of subscription for the trip.\n  - zip_code: Zip code related to the trip.\n\nTable weather:\n- Stores weather data related to specific dates.\n- Columns:\n  - date: Date for the weather data.\n  - max_temperature_f: Maximum temperature in Fahrenheit.\n  - mean_temperature_f: Mean temperature in Fahrenheit.\n  - min_temperature_f: Minimum temperature in Fahrenheit.\n  - max_dew_point_f: Maximum dew point in Fahrenheit.\n  - mean_dew_point_f: Mean dew point in Fahrenheit.\n  - min_dew_point_f: Minimum dew point in Fahrenheit.\n  - max_humidity: Maximum humidity percentage.\n  - mean_humidity: Mean humidity percentage.\n  - min_humidity: Minimum humidity percentage.\n  - max_sea_level_pressure_inches: Maximum sea level pressure in inches.\n  - mean_sea_level_pressure_inches: Mean sea level pressure in inches.\n  - min_sea_level_pressure_inches: Minimum sea level pressure in inches.\n  - max_visibility_miles: Maximum visibility in miles.\n  - mean_visibility_miles: Mean visibility in miles.\n  - min_visibility_miles: Minimum visibility in miles.\n  - max_wind_speed_mph: Maximum wind speed in mph.\n  - mean_wind_speed_mph: Mean wind speed in mph.\n  - max_gust_speed_mph: Maximum gust speed in mph.\n  - precipitation_inches: Amount of precipitation in inches.\n  - cloud_cover: Cloud cover percentage.\n  - events: Weather events (e.g., rain, snow).\n  - wind_dir_degrees: Wind direction in degrees.\n  - zip_code: Zip code related to the weather data.\n\nForeign Keys:\n- status.station_id references station.id, establishing a relationship between status and stations.",
    "body_builder": "Table body_builder:\n- Contains data related to bodybuilders and their performance metrics.\n- Columns:\n  - Body_Builder_ID: Unique identifier for each bodybuilder.\n  - People_ID: Identifier of the person who is a bodybuilder.\n  - Snatch: Measurement of the snatch performance.\n  - Clean_Jerk: Measurement of the clean and jerk performance.\n  - Total: Total performance score of the bodybuilder.\n\nTable people:\n- Stores information about individuals.\n- Columns:\n  - People_ID: Unique identifier for each person.\n  - Name: Name of the individual.\n  - Height: Height of the person.\n  - Weight: Weight of the person.\n  - Birth_Date: Date of birth of the person.\n  - Birth_Place: Place of birth of the person.\n\nForeign Keys:\n- body_builder.People_ID references people.People_ID, establishing a relationship between bodybuilders and individuals in the people table.",
    "book_2": "Table book:\n- Contains information about books.\n- Columns:\n  - Book_ID: Unique identifier for each book.\n  - Title: Title of the book.\n  - Issues: Number of issues of the book.\n  - Writer: Writer of the book.\n\nTable publication:\n- Stores data related to book publications.\n- Columns:\n  - Publication_ID: Unique identifier for each publication.\n  - Book_ID: Identifier of the book being published, referencing the Book_ID in the book table.\n  - Publisher: Publisher of the book.\n  - Publication_Date: Date of publication of the book.\n  - Price: Price of the publication.\n\nForeign Keys:\n- publication.Book_ID references book.Book_ID, establishing a relationship between publications and books.",
    "browser_web": "Table Web_client_accelerator:\n- Contains information about web client accelerators.\n- Columns:\n  - id: Unique identifier for each web client accelerator.\n  - name: Name of the web client accelerator.\n  - Operating_system: Operating system used by the accelerator.\n  - Client: Client associated with the accelerator.\n  - Connection: Type of connection used by the accelerator.\n\nTable accelerator_compatible_browser:\n- Stores data about browsers compatible with accelerators.\n- Columns:\n  - accelerator_id: Identifier of the accelerator.\n  - browser_id: Identifier of the browser.\n  - compatible_since_year: Year since which the browser is compatible with the accelerator.\n\nTable browser:\n- Contains details about different browsers.\n- Columns:\n  - id: Unique identifier for each browser.\n  - name: Name of the browser.\n  - market_share: Market share of the browser.\n\nForeign Keys:\n- accelerator_compatible_browser.browser_id references browser.id, establishing a relationship between compatible browsers and browsers.\n- accelerator_compatible_browser.accelerator_id references Web_client_accelerator.id, linking compatible browsers to specific web client accelerators.",
    "candidate_poll": "Table candidate:\n- Contains information about candidates in a poll or election.\n- Columns:\n  - Candidate_ID: Unique identifier for each candidate.\n  - People_ID: Identifier of the person associated with the candidate.\n  - Poll_Source: Source of the poll data.\n  - Date: Date of the poll.\n  - Support_rate: Rate of support for the candidate.\n  - Consider_rate: Rate of consideration for the candidate.\n  - Oppose_rate: Rate of opposition to the candidate.\n  - Unsure_rate: Rate of uncertainty about the candidate.\n\nTable people:\n- Stores details about individuals.\n- Columns:\n  - People_ID: Unique identifier for each person.\n  - Sex: Gender of the person.\n  - Name: Name of the person.\n  - Date_of_Birth: Birthdate of the person.\n  - Height: Height of the person.\n  - Weight: Weight of the person.\n\nForeign Keys:\n- candidate.People_ID references people.People_ID, establishing a relationship between candidates and people.",
    "car_1": "Table car_makers:\n- Contains information about different car makers.\n- Columns:\n  - Id: Unique identifier for each car maker.\n  - Maker: Short name of the car maker.\n  - FullName: Full name of the car maker.\n  - Country: Country where the car maker is located.\n\nTable car_names:\n- Stores data related to car models and their respective makers.\n- Columns:\n  - MakeId: Identifier linking to the car maker in the car_makers table.\n  - Model: Name of the car model.\n  - Make: Name of the car maker.\n\nTable cars_data:\n- Contains detailed information about various car data.\n- Columns:\n  - Id: Unique identifier for each car data entry.\n  - MPG: Miles per gallon efficiency of the car.\n  - Cylinders: Number of cylinders in the car engine.\n  - Edispl: Engine displacement of the car.\n  - Horsepower: Power of the car engine in horsepower.\n  - Weight: Weight of the car.\n  - Accelerate: Acceleration performance of the car.\n  - Year: Year of the car model.\n\nTable continents:\n- Stores information about different continents.\n- Columns:\n  - ContId: Unique identifier for each continent.\n  - Continent: Name of the continent.\n\nTable countries:\n- Contains details about different countries.\n- Columns:\n  - CountryId: Unique identifier for each country.\n  - CountryName: Name of the country.\n  - Continent: Foreign key referencing the id of the continent in the continents table.\n\nTable model_list:\n- Stores a list of car models associated with their respective makers.\n- Columns:\n  - ModelId: Unique identifier for each car model.\n  - Maker: Name of the car maker.\n  - Model: Name of the car model.\n\nForeign Keys:\n- countries.Continent references continents.ContId, establishing a relationship between countries and continents.\n- car_makers.Country references countries.CountryId, linking car makers to specific countries.\n- model_list.Maker references car_makers.Id, connecting car models to their respective car makers.\n- car_names.Model references model_list.Model, linking car names to specific car models.\n- cars_data.Id references car_names.MakeId, establishing a relationship between car data and car names.",
    "chinook_1": "Table Album:\n- Contains information about albums.\n- Columns:\n  - AlbumId: Unique identifier for each album.\n  - Title: Title of the album.\n  - ArtistId: Identifier of the artist who created the album.\n\nTable Artist:\n- Stores details about artists.\n- Columns:\n  - ArtistId: Unique identifier for each artist.\n  - Name: Name of the artist.\n\nTable Customer:\n- Contains data related to customers.\n- Columns:\n  - CustomerId: Unique identifier for each customer.\n  - FirstName: First name of the customer.\n  - LastName: Last name of the customer.\n  - Company: Company name of the customer.\n  - Address: Address of the customer.\n  - City: City where the customer is located.\n  - State: State where the customer is located.\n  - Country: Country where the customer is located.\n  - PostalCode: Postal code of the customer.\n  - Phone: Phone number of the customer.\n  - Fax: Fax number of the customer.\n  - Email: Email address of the customer.\n  - SupportRepId: Identifier of the support representative assigned to the customer.\n\nTable Employee:\n- Stores information about employees.\n- Columns:\n  - EmployeeId: Unique identifier for each employee.\n  - LastName: Last name of the employee.\n  - FirstName: First name of the employee.\n  - Title: Job title of the employee.\n  - ReportsTo: Identifier of the employee to whom this employee reports.\n  - BirthDate: Birth date of the employee.\n  - HireDate: Date when the employee was hired.\n  - Address: Address of the employee.\n  - City: City where the employee is located.\n  - State: State where the employee is located.\n  - Country: Country where the employee is located.\n  - PostalCode: Postal code of the employee.\n  - Phone: Phone number of the employee.\n  - Fax: Fax number of the employee.\n  - Email: Email address of the employee.\n\nTable Genre:\n- Contains information about music genres.\n- Columns:\n  - GenreId: Unique identifier for each genre.\n  - Name: Name of the genre.\n\nTable Invoice:\n- Stores details about invoices.\n- Columns:\n  - InvoiceId: Unique identifier for each invoice.\n  - CustomerId: Identifier of the customer associated with the invoice.\n  - InvoiceDate: Date of the invoice.\n  - BillingAddress: Billing address for the invoice.\n  - BillingCity: Billing city for the invoice.\n  - BillingState: Billing state for the invoice.\n  - BillingCountry: Billing country for the invoice.\n  - BillingPostalCode: Billing postal code for the invoice.\n  - Total: Total amount on the invoice.\n\nTable InvoiceLine:\n- Contains information about individual invoice lines.\n- Columns:\n  - InvoiceLineId: Unique identifier for each invoice line.\n  - InvoiceId: Identifier of the invoice to which the line belongs.\n  - TrackId: Identifier of the track associated with the line.\n  - UnitPrice: Price per unit of the track.\n  - Quantity: Quantity of the track in the invoice line.\n\nTable MediaType:\n- Stores details about media types.\n- Columns:\n  - MediaTypeId: Unique identifier for each media type.\n  - Name: Name of the media type.\n\nTable Playlist:\n- Contains information about playlists.\n- Columns:\n  - PlaylistId: Unique identifier for each playlist.\n  - Name: Name of the playlist.\n\nTable PlaylistTrack:\n- Stores the relationship between playlists and tracks.\n- Columns:\n  - PlaylistId: Identifier of the playlist.\n  - TrackId: Identifier of the track in the playlist.\n\nTable Track:\n- Contains details about tracks.\n- Columns:\n  - TrackId: Unique identifier for each track.\n  - Name: Name of the track.\n  - AlbumId: Identifier of the album to which the track belongs.\n  - MediaTypeId: Identifier of the media type of the track.\n  - GenreId: Identifier of the genre of the track.\n  - Composer: Composer of the track.\n  - Milliseconds: Duration of the track in milliseconds.\n  - Bytes: Size of the track in bytes.\n  - UnitPrice: Price of the track.\n\nForeign Keys:\n- Album.ArtistId references Artist.ArtistId, establishing a relationship between albums and artists.\n- Customer.SupportRepId references Employee.EmployeeId, linking customers to their support representatives.\n- Employee.ReportsTo references Employee.EmployeeId, connecting employees to their respective supervisors.\n- Invoice.CustomerId references Customer.CustomerId, establishing a relationship between invoices and customers.\n- InvoiceLine.TrackId references Track.TrackId, linking invoice lines to specific tracks.\n- InvoiceLine.InvoiceId references Invoice.InvoiceId, connecting invoice lines to their respective invoices.\n- PlaylistTrack.TrackId references Track.TrackId, establishing a relationship between playlist tracks and tracks.\n- PlaylistTrack.PlaylistId references Playlist.PlaylistId, linking playlist tracks to their respective playlists.\n- Track.MediaTypeId references MediaType.MediaTypeId, connecting tracks to their media types.\n- Track.GenreId references Genre.GenreId, establishing a relationship between tracks and genres.\n- Track.AlbumId references Album.AlbumId, linking tracks to their respective albums.",
    "cinema": "Table cinema:\n- Contains information about different cinemas.\n- Columns:\n  - Cinema_ID: Unique identifier for each cinema.\n  - Name: Name of the cinema.\n  - Opening_year: Year when the cinema was opened.\n  - Capacity: Maximum number of seats in the cinema.\n  - Location: Location of the cinema.\n\nTable film:\n- Stores details about films.\n- Columns:\n  - Film_ID: Unique identifier for each film.\n  - Rank_in_series: Ranking of the film in a series.\n  - Number_in_season: Number of the film in a season.\n  - Title: Title of the film.\n  - Directed_by: Director of the film.\n  - Original_air_date: Original air date of the film.\n  - Production_code: Production code of the film.\n\nTable schedule:\n- Contains scheduling information for films in cinemas.\n- Columns:\n  - Cinema_ID: Identifier of the cinema.\n  - Film_ID: Identifier of the film.\n  - Date: Date of the scheduled show.\n  - Show_times_per_day: Number of show times per day for the film.\n  - Price: Price of the film ticket.\n\nForeign Keys:\n- schedule.Cinema_ID references cinema.Cinema_ID, establishing a relationship between schedule and cinemas.\n- schedule.Film_ID references film.Film_ID, linking schedule to specific films.",
    "city_record": "Table city:\n- Contains information about different cities.\n- Columns:\n  - City_ID: Unique identifier for each city.\n  - City: Name of the city.\n  - Hanzi: Chinese characters for the city name.\n  - Hanyu_Pinyin: Pinyin representation of the city name.\n  - Regional_Population: Population of the city in the region.\n  - GDP: Gross Domestic Product of the city.\n\nTable hosting_city:\n- Stores data about cities hosting events.\n- Columns:\n  - Year: Year of the event.\n  - Match_ID: Identifier for the match.\n  - Host_City: Identifier of the city hosting the event.\n\nTable match:\n- Contains details about matches.\n- Columns:\n  - Match_ID: Unique identifier for each match.\n  - Date: Date of the match.\n  - Venue: Location where the match took place.\n  - Score: Score of the match.\n  - Result: Result of the match.\n  - Competition: Type of competition for the match.\n\nTable temperature:\n- Stores temperature data for cities.\n- Columns:\n  - City_ID: Identifier of the city.\n  - Jan, Feb, Mar, Apr, Jun, Jul, Aug, Sep, Oct, Nov, Dec: Temperature data for each month.\n\nForeign Keys:\n- temperature.City_ID references city.City_ID, linking temperature data to specific cities.\n- hosting_city.Match_ID references match.Match_ID, establishing a relationship between hosting cities and matches.\n- hosting_city.Host_City references city.City_ID, connecting hosting cities to specific cities.",
    "climbing": "Table climber:\n- Contains information about climbers.\n- Columns:\n  - Climber_ID: Unique identifier for each climber.\n  - Name: Name of the climber.\n  - Country: Country of the climber.\n  - Time: Time related information.\n  - Points: Points associated with the climber.\n  - Mountain_ID: Identifier of the mountain associated with the climber.\n\nTable mountain:\n- Stores data related to mountains.\n- Columns:\n  - Mountain_ID: Unique identifier for each mountain.\n  - Name: Name of the mountain.\n  - Height: Height of the mountain.\n  - Prominence: Prominence of the mountain.\n  - Range: Mountain range where the mountain is located.\n  - Country: Country where the mountain is situated.\n\nForeign Keys:\n- climber.Mountain_ID references mountain.Mountain_ID, establishing a relationship between climbers and mountains.",
    "club_1": "Table Club:\n- Contains information about different clubs.\n- Columns:\n  - ClubID: Unique identifier for each club.\n  - ClubName: Name of the club.\n  - ClubDesc: Description of the club.\n  - ClubLocation: Location of the club.\n\nTable Member_of_club:\n- Stores data about the membership of students in clubs.\n- Columns:\n  - StuID: Identifier of the student.\n  - ClubID: Identifier of the club.\n  - Position: Position held by the student in the club.\n\nTable Student:\n- Contains details about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Major of the student.\n  - Advisor: Advisor of the student.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Member_of_club.ClubID references Club.ClubID, establishing a relationship between clubs and their members.\n- Member_of_club.StuID references Student.StuID, linking students to their club memberships.",
    "coffee_shop": "Table happy_hour:\n- Contains information about happy hour events.\n- Columns:\n  - HH_ID: Unique identifier for each happy hour event.\n  - Shop_ID: Identifier of the shop where the happy hour event takes place.\n  - Month: Month in which the happy hour event occurs.\n  - Num_of_staff_in_charge: Number of staff members in charge during the happy hour event.\n\nTable happy_hour_member:\n- Stores data about members participating in happy hour events.\n- Columns:\n  - HH_ID: Identifier of the happy hour event.\n  - Member_ID: Identifier of the member participating in the event.\n  - Total_amount: Total amount spent by the member during the happy hour event.\n\nTable member:\n- Contains details about members.\n- Columns:\n  - Member_ID: Unique identifier for each member.\n  - Name: Name of the member.\n  - Membership_card: Membership card details of the member.\n  - Age: Age of the member.\n  - Time_of_purchase: Time of purchase made by the member.\n  - Level_of_membership: Membership level of the member.\n  - Address: Address of the member.\n\nTable shop:\n- Stores information about shops.\n- Columns:\n  - Shop_ID: Unique identifier for each shop.\n  - Address: Address of the shop.\n  - Num_of_staff: Number of staff members working at the shop.\n  - Score: Score rating of the shop.\n  - Open_Year: Year when the shop was opened.\n\nForeign Keys:\n- happy_hour.Shop_ID references shop.Shop_ID, establishing a relationship between happy hour events and shops.\n- happy_hour_member.Member_ID references member.Member_ID, linking members to their participation in happy hour events.",
    "college_1": "Table CLASS:\n- Contains information about classes offered.\n- Columns:\n  - CLASS_CODE: Unique identifier for each class.\n  - CRS_CODE: Identifier of the course associated with the class.\n  - CLASS_SECTION: Section of the class.\n  - CLASS_TIME: Time schedule for the class.\n  - CLASS_ROOM: Room where the class is conducted.\n  - PROF_NUM: Identifier of the professor teaching the class.\n\nTable COURSE:\n- Stores details about different courses.\n- Columns:\n  - CRS_CODE: Unique identifier for each course.\n  - DEPT_CODE: Identifier of the department offering the course.\n  - CRS_DESCRIPTION: Description of the course.\n  - CRS_CREDIT: Credit hours assigned to the course.\n\nTable DEPARTMENT:\n- Contains information about various departments.\n- Columns:\n  - DEPT_CODE: Unique identifier for each department.\n  - DEPT_NAME: Name of the department.\n  - SCHOOL_CODE: Identifier of the school to which the department belongs.\n  - EMP_NUM: Number of employees in the department.\n  - DEPT_ADDRESS: Address of the department.\n  - DEPT_EXTENSION: Extension number for the department.\n\nTable EMPLOYEE:\n- Stores data related to employees.\n- Columns:\n  - EMP_NUM: Unique identifier for each employee.\n  - EMP_LNAME: Last name of the employee.\n  - EMP_FNAME: First name of the employee.\n  - EMP_INITIAL: Initial of the employee's middle name.\n  - EMP_JOBCODE: Job code of the employee.\n  - EMP_HIREDATE: Date when the employee was hired.\n  - EMP_DOB: Date of birth of the employee.\n\nTable ENROLL:\n- Contains enrollment information for students in classes.\n- Columns:\n  - CLASS_CODE: Identifier of the class.\n  - STU_NUM: Identifier of the student enrolled.\n  - ENROLL_GRADE: Grade received by the student in the class.\n\nTable PROFESSOR:\n- Stores details about professors.\n- Columns:\n  - EMP_NUM: Unique identifier for each professor.\n  - DEPT_CODE: Identifier of the department to which the professor belongs.\n  - PROF_OFFICE: Office location of the professor.\n  - PROF_EXTENSION: Extension number for the professor.\n  - PROF_HIGH_DEGREE: Highest degree attained by the professor.\n\nTable STUDENT:\n- Contains information about students.\n- Columns:\n  - STU_NUM: Unique identifier for each student.\n  - STU_LNAME: Last name of the student.\n  - STU_FNAME: First name of the student.\n  - STU_INIT: Initial of the student's middle name.\n  - STU_DOB: Date of birth of the student.\n  - STU_HRS: Total credit hours completed by the student.\n  - STU_CLASS: Class of the student.\n  - STU_GPA: Grade Point Average of the student.\n  - STU_TRANSFER: Indicates if the student is a transfer student.\n  - DEPT_CODE: Identifier of the department to which the student belongs.\n  - STU_PHONE: Phone number of the student.\n  - PROF_NUM: Identifier of the professor assigned to the student.\n\nForeign Keys:\n- CLASS.PROF_NUM references EMPLOYEE.EMP_NUM, linking classes to professors.\n- CLASS.CRS_CODE references COURSE.CRS_CODE, connecting classes to specific courses.\n- COURSE.DEPT_CODE references DEPARTMENT.DEPT_CODE, establishing a relationship between courses and departments.\n- DEPARTMENT.EMP_NUM references EMPLOYEE.EMP_NUM, linking departments to employees.\n- ENROLL.STU_NUM references STUDENT.STU_NUM, connecting enrollments to students.\n- ENROLL.CLASS_CODE references CLASS.CLASS_CODE, establishing a relationship between enrollments and classes.\n- PROFESSOR.DEPT_CODE references DEPARTMENT.DEPT_CODE, linking professors to departments.\n- PROFESSOR.EMP_NUM references EMPLOYEE.EMP_NUM, establishing a relationship between professors and employees.\n- STUDENT.DEPT_CODE references DEPARTMENT.DEPT_CODE, connecting students to departments.",
    "college_2": "Table advisor:\n- Contains information about advisors and their assigned students.\n- Columns:\n  - s_ID: Identifier of the student being advised.\n  - i_ID: Identifier of the instructor serving as the advisor.\n\nTable classroom:\n- Stores details about different classrooms.\n- Columns:\n  - building: Building where the classroom is located.\n  - room_number: Room number of the classroom.\n  - capacity: Maximum capacity of the classroom.\n\nTable course:\n- Contains data related to courses offered.\n- Columns:\n  - course_id: Unique identifier for each course.\n  - title: Title of the course.\n  - dept_name: Name of the department offering the course.\n  - credits: Number of credits associated with the course.\n\nTable department:\n- Stores information about different departments within the organization.\n- Columns:\n  - dept_name: Name of the department.\n  - building: Building where the department is located.\n  - budget: Budget allocated to the department.\n\nTable instructor:\n- Contains details about instructors.\n- Columns:\n  - ID: Unique identifier for each instructor.\n  - name: Name of the instructor.\n  - dept_name: Name of the department to which the instructor belongs.\n  - salary: Salary of the instructor.\n\nTable prereq:\n- Stores prerequisites for courses.\n- Columns:\n  - course_id: Identifier of the course.\n  - prereq_id: Identifier of the prerequisite course.\n\nTable section:\n- Contains information about course sections.\n- Columns:\n  - course_id: Identifier of the course.\n  - sec_id: Section identifier.\n  - semester: Semester in which the section is offered.\n  - year: Year in which the section is offered.\n  - building: Building where the section is conducted.\n  - room_number: Room number where the section is conducted.\n  - time_slot_id: Identifier of the time slot for the section.\n\nTable student:\n- Stores data related to students.\n- Columns:\n  - ID: Unique identifier for each student.\n  - name: Name of the student.\n  - dept_name: Name of the department to which the student belongs.\n  - tot_cred: Total credits earned by the student.\n\nTable takes:\n- Contains information about courses taken by students.\n- Columns:\n  - ID: Identifier of the student.\n  - course_id: Identifier of the course taken.\n  - sec_id: Section identifier of the course.\n  - semester: Semester when the course was taken.\n  - year: Year when the course was taken.\n  - grade: Grade obtained by the student in the course.\n\nTable teaches:\n- Stores data about instructors teaching specific course sections.\n- Columns:\n  - ID: Identifier of the instructor.\n  - course_id: Identifier of the course being taught.\n  - sec_id: Section identifier of the course being taught.\n  - semester: Semester when the course is being taught.\n  - year: Year when the course is being taught.\n\nTable time_slot:\n- Contains information about time slots for classes.\n- Columns:\n  - time_slot_id: Unique identifier for each time slot.\n  - day: Day of the week for the time slot.\n  - start_hr: Starting hour of the time slot.\n  - start_min: Starting minute of the time slot.\n  - end_hr: Ending hour of the time slot.\n  - end_min: Ending minute of the time slot.\n\nForeign Keys:\n- course.dept_name references department.dept_name, establishing a relationship between courses and departments.\n- instructor.dept_name references department.dept_name, linking instructors to their respective departments.\n- section.building references classroom.building, connecting sections to specific buildings.\n- section.room_number references classroom.room_number, linking sections to specific rooms.\n- section.course_id references course.course_id, establishing a relationship between sections and courses.\n- teaches.ID references instructor.ID, linking instructors to specific courses they teach.\n- teaches.course_id references section.course_id, connecting teaches to specific courses.\n- teaches.sec_id references section.sec_id, establishing a relationship between teaches and sections.\n- teaches.semester references section.semester, linking teaches to specific semesters.\n- teaches.year references section.year, connecting teaches to specific years.\n- student.dept_name references department.dept_name, establishing a relationship between students and departments.\n- takes.ID references student.ID, linking courses taken to specific students.\n- takes.course_id references section.course_id, connecting courses taken to specific sections.\n- takes.sec_id references section.sec_id, establishing a relationship between courses taken and sections.\n- takes.semester references section.semester, linking courses taken to specific semesters.\n- takes.year references section.year, connecting courses taken to specific years.\n- advisor.s_ID references student.ID, establishing a relationship between advisors and students.\n- advisor.i_ID references instructor.ID, linking advisors to specific instructors.\n- prereq.prereq_id references course.course_id, establishing a relationship between prerequisites and courses.\n- prereq.course_id references course.course_id, connecting prerequisites to specific courses.",
    "college_3": "Table Course:\n- Contains information about different courses offered.\n- Columns:\n  - CID: Unique identifier for each course.\n  - CName: Name of the course.\n  - Credits: Number of credits associated with the course.\n  - Instructor: Identifier of the instructor teaching the course.\n  - Days: Days on which the course is scheduled.\n  - Hours: Hours during which the course is conducted.\n  - DNO: Identifier of the department offering the course.\n\nTable Department:\n- Stores details about different departments within an educational institution.\n- Columns:\n  - DNO: Unique identifier for each department.\n  - Division: Division to which the department belongs.\n  - DName: Name of the department.\n  - Room: Room number associated with the department.\n  - Building: Building where the department is located.\n  - DPhone: Phone number of the department.\n\nTable Enrolled_in:\n- Contains data about students enrolled in courses.\n- Columns:\n  - StuID: Identifier of the student.\n  - CID: Identifier of the course in which the student is enrolled.\n  - Grade: Grade received by the student in the course.\n\nTable Faculty:\n- Stores information about faculty members.\n- Columns:\n  - FacID: Unique identifier for each faculty member.\n  - Lname: Last name of the faculty member.\n  - Fname: First name of the faculty member.\n  - Rank: Rank or position of the faculty member.\n  - Sex: Gender of the faculty member.\n  - Phone: Phone number of the faculty member.\n  - Room: Room number of the faculty member.\n  - Building: Building where the faculty member is located.\n\nTable Gradeconversion:\n- Contains the conversion of letter grades to grade points.\n- Columns:\n  - lettergrade: Letter grade.\n  - gradepoint: Corresponding grade point.\n\nTable Member_of:\n- Represents the association between faculty members and departments.\n- Columns:\n  - FacID: Identifier of the faculty member.\n  - DNO: Identifier of the department to which the faculty member belongs.\n  - Appt_Type: Type of appointment of the faculty member.\n\nTable Minor_in:\n- Stores data about students and their minor departments.\n- Columns:\n  - StuID: Identifier of the student.\n  - DNO: Identifier of the minor department chosen by the student.\n\nTable Student:\n- Contains details about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Major field of study for the student.\n  - Advisor: Advisor assigned to the student.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Member_of.DNO references Department.DNO, establishing a relationship between faculty department associations.\n- Member_of.FacID references Faculty.FacID, linking faculty members to their respective departments.\n- Course.DNO references Department.DNO, connecting courses to the departments offering them.\n- Course.Instructor references Faculty.FacID, linking courses to the instructors teaching them.\n- Minor_in.DNO references Department.DNO, establishing a relationship between minor departments and students.\n- Minor_in.StuID references Student.StuID, linking minor departments to the respective students.\n- Enrolled_in.Grade references Gradeconversion.lettergrade, mapping grades to grade points.\n- Enrolled_in.CID references Course.CID, connecting enrolled students to the courses they are taking.\n- Enrolled_in.StuID references Student.StuID, establishing a relationship between enrolled students and their details.",
    "company_1": "Table department:\n- Contains information about different departments within an organization.\n- Columns:\n  - Dname: Name of the department.\n  - Dnumber: Unique identifier for each department.\n  - Mgr_ssn: Social security number of the department manager.\n  - Mgr_start_date: Start date of the manager in the department.\n\nTable dependent:\n- Stores details about dependents of employees.\n- Columns:\n  - Essn: Employee's social security number.\n  - Dependent_name: Name of the dependent.\n  - Sex: Gender of the dependent.\n  - Bdate: Birth date of the dependent.\n  - Relationship: Relationship of the dependent with the employee.\n\nTable dept_locations:\n- Contains information about the locations of departments.\n- Columns:\n  - Dnumber: Identifier of the department.\n  - Dlocation: Location of the department.\n\nTable employee:\n- Stores data related to employees.\n- Columns:\n  - Fname: First name of the employee.\n  - Minit: Middle initial of the employee.\n  - Lname: Last name of the employee.\n  - Ssn: Social security number of the employee.\n  - Bdate: Birth date of the employee.\n  - Address: Address of the employee.\n  - Sex: Gender of the employee.\n  - Salary: Salary of the employee.\n  - Super_ssn: Social security number of the employee's supervisor.\n  - Dno: Department number to which the employee belongs.\n\nTable project:\n- Contains information about projects within the organization.\n- Columns:\n  - Pname: Name of the project.\n  - Pnumber: Unique identifier for each project.\n  - Plocation: Location of the project.\n  - Dnum: Department number to which the project is associated.\n\nTable works_on:\n- Stores data about employees working on projects.\n- Columns:\n  - Essn: Employee's social security number.\n  - Pno: Project number.\n  - Hours: Number of hours the employee works on the project.\n\nForeign Keys: (Missing in the provided information)",
    "company_employee": "Table company:\n- Contains information about different companies.\n- Columns:\n  - Company_ID: Unique identifier for each company.\n  - Name: Name of the company.\n  - Headquarters: Location of the company's headquarters.\n  - Industry: Industry to which the company belongs.\n  - Sales_in_Billion: Sales amount in billion for the company.\n  - Profits_in_Billion: Profits amount in billion for the company.\n  - Assets_in_Billion: Assets amount in billion for the company.\n  - Market_Value_in_Billion: Market value amount in billion for the company.\n\nTable employment:\n- Stores data related to employment history.\n- Columns:\n  - Company_ID: Identifier of the company.\n  - People_ID: Identifier of the person employed.\n  - Year_working: Number of years the person has been working at the company.\n\nTable people:\n- Contains details about individuals.\n- Columns:\n  - People_ID: Unique identifier for each individual.\n  - Age: Age of the individual.\n  - Name: Name of the individual.\n  - Nationality: Nationality of the individual.\n  - Graduation_College: College from which the individual graduated.\n\nForeign Keys:\n- employment.People_ID references people.People_ID, establishing a relationship between employment and people.\n- employment.Company_ID references company.Company_ID, linking employment to specific companies.",
    "company_office": "Table Companies:\n- Contains information about different companies.\n- Columns:\n  - id: Unique identifier for each company.\n  - name: Name of the company.\n  - Headquarters: Location of the company's headquarters.\n  - Industry: Industry to which the company belongs.\n  - Sales_billion: Sales revenue in billion for the company.\n  - Profits_billion: Profits in billion for the company.\n  - Assets_billion: Total assets in billion for the company.\n  - Market_Value_billion: Market value in billion for the company.\n\nTable Office_locations:\n- Stores data related to office locations of companies.\n- Columns:\n  - building_id: Identifier of the building where the office is located.\n  - company_id: Identifier of the company to which the office belongs.\n  - move_in_year: Year when the office was moved into.\n\nTable buildings:\n- Contains details about different buildings.\n- Columns:\n  - id: Unique identifier for each building.\n  - name: Name of the building.\n  - City: City where the building is located.\n  - Height: Height of the building.\n  - Stories: Number of stories in the building.\n  - Status: Status of the building.\n\nForeign Keys:\n- Office_locations.company_id references Companies.id, linking office locations to specific companies.\n- Office_locations.building_id references buildings.id, establishing a relationship between office locations and buildings.",
    "concert_singer": "Table concert:\n- Contains information about different concerts.\n- Columns:\n  - concert_ID: Unique identifier for each concert.\n  - concert_Name: Name of the concert.\n  - Theme: Theme of the concert.\n  - Stadium_ID: Identifier of the stadium where the concert takes place.\n  - Year: Year in which the concert was held.\n\nTable singer:\n- Stores details about singers.\n- Columns:\n  - Singer_ID: Unique identifier for each singer.\n  - Name: Name of the singer.\n  - Country: Country of origin of the singer.\n  - Song_Name: Name of the song associated with the singer.\n  - Song_release_year: Year when the song was released.\n  - Age: Age of the singer.\n  - Is_male: Boolean indicating if the singer is male.\n\nTable singer_in_concert:\n- Represents the relationship between singers and concerts.\n- Columns:\n  - concert_ID: Identifier of the concert.\n  - Singer_ID: Identifier of the singer performing in the concert.\n\nTable stadium:\n- Contains information about stadiums.\n- Columns:\n  - Stadium_ID: Unique identifier for each stadium.\n  - Location: Location of the stadium.\n  - Name: Name of the stadium.\n  - Capacity: Maximum capacity of the stadium.\n  - Highest: Highest recorded attendance at the stadium.\n  - Lowest: Lowest recorded attendance at the stadium.\n  - Average: Average attendance at the stadium.\n\nForeign Keys:\n- concert.Stadium_ID references stadium.Stadium_ID, establishing a relationship between concerts and stadiums.\n- singer_in_concert.Singer_ID references singer.Singer_ID, linking singers to specific concerts.\n- singer_in_concert.concert_ID references concert.concert_ID, connecting singers to the concerts they perform in.",
    "county_public_safety": "Table city:\n- Contains information about different cities.\n- Columns:\n  - City_ID: Unique identifier for each city.\n  - County_ID: Identifier of the county to which the city belongs.\n  - Name: Name of the city.\n  - White: Population count of White residents in the city.\n  - Black: Population count of Black residents in the city.\n  - Amerindian: Population count of Amerindian residents in the city.\n  - Asian: Population count of Asian residents in the city.\n  - Multiracial: Population count of Multiracial residents in the city.\n  - Hispanic: Population count of Hispanic residents in the city.\n\nTable county_public_safety:\n- Stores data related to public safety in different counties.\n- Columns:\n  - County_ID: Unique identifier for each county.\n  - Name: Name of the county.\n  - Population: Total population of the county.\n  - Police_officers: Number of police officers in the county.\n  - Residents_per_officer: Average number of residents per police officer.\n  - Case_burden: Workload or number of cases handled by the police force.\n  - Crime_rate: Rate of crime in the county.\n  - Police_force: Details about the police force in the county.\n  - Location: Location details of the county.\n\nForeign Keys:\n- city.County_ID references county_public_safety.County_ID, establishing a relationship between cities and public safety data of counties.",
    "course_teach": "Table course:\n- Contains information about different courses.\n- Columns:\n  - Course_ID: Unique identifier for each course.\n  - Starting_Date: Date when the course starts.\n  - Course: Name or title of the course.\n\nTable course_arrange:\n- Stores data related to the arrangement of courses.\n- Columns:\n  - Course_ID: Identifier of the course.\n  - Teacher_ID: Identifier of the teacher assigned to the course.\n  - Grade: Grade associated with the course arrangement.\n\nTable teacher:\n- Contains details about teachers.\n- Columns:\n  - Teacher_ID: Unique identifier for each teacher.\n  - Name: Name of the teacher.\n  - Age: Age of the teacher.\n  - Hometown: Hometown of the teacher.\n\nForeign Keys:\n- course_arrange.Teacher_ID references teacher.Teacher_ID, establishing a relationship between course arrangements and teachers.\n- course_arrange.Course_ID references course.Course_ID, linking course arrangements to specific courses.",
    "cre_Docs_and_Epenses": "Table Accounts:\n- Contains information about different accounts.\n- Columns:\n  - Account_ID: Unique identifier for each account.\n  - Statement_ID: Identifier referencing the statement related to the account.\n  - Account_Details: Details of the account.\n\nTable Documents:\n- Stores data related to various documents.\n- Columns:\n  - Document_ID: Unique identifier for each document.\n  - Document_Type_Code: Code representing the type of document.\n  - Project_ID: Identifier of the project associated with the document.\n  - Document_Date: Date of the document.\n  - Document_Name: Name of the document.\n  - Document_Description: Description of the document.\n  - Other_Details: Additional details of the document.\n\nTable Documents_with_Expenses:\n- Contains documents with associated expenses.\n- Columns:\n  - Document_ID: Identifier of the document.\n  - Budget_Type_Code: Code representing the type of budget associated with the document.\n  - Document_Details: Details of the document with expenses.\n\nTable Projects:\n- Stores information about different projects.\n- Columns:\n  - Project_ID: Unique identifier for each project.\n  - Project_Details: Details of the project.\n\nTable Ref_Budget_Codes:\n- Contains reference data for budget codes.\n- Columns:\n  - Budget_Type_Code: Code representing the type of budget.\n  - Budget_Type_Description: Description of the budget type.\n\nTable Ref_Document_Types:\n- Contains reference data for document types.\n- Columns:\n  - Document_Type_Code: Code representing the type of document.\n  - Document_Type_Name: Name of the document type.\n  - Document_Type_Description: Description of the document type.\n\nTable Statements:\n- Stores details about different statements.\n- Columns:\n  - Statement_ID: Unique identifier for each statement.\n  - Statement_Details: Details of the statement.\n\nForeign Keys:\n- Documents.Project_ID references Projects.Project_ID, establishing a relationship between documents and projects.\n- Documents.Document_Type_Code references Ref_Document_Types.Document_Type_Code, linking documents to specific document types.\n- Statements.Statement_ID references Documents.Document_ID, connecting statements to documents.\n- Documents_with_Expenses.Document_ID references Documents.Document_ID, establishing a relationship between documents with expenses and documents.\n- Documents_with_Expenses.Budget_Type_Code references Ref_Budget_Codes.Budget_Type_Code, linking documents with expenses to budget codes.\n- Accounts.Statement_ID references Statements.Statement_ID, connecting accounts to statements.",
    "cre_Doc_Control_Systems": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - address_details: Details of the address.\n\nTable Circulation_History:\n- Stores the circulation history of documents.\n- Columns:\n  - document_id: Identifier of the document.\n  - draft_number: Number of the draft.\n  - copy_number: Number of the copy.\n  - employee_id: Identifier of the employee involved in the circulation.\n\nTable Document_Drafts:\n- Contains details about different drafts of documents.\n- Columns:\n  - document_id: Identifier of the document.\n  - draft_number: Number of the draft.\n  - draft_details: Details of the draft.\n\nTable Documents:\n- Stores information about various documents.\n- Columns:\n  - document_id: Unique identifier for each document.\n  - document_status_code: Code representing the status of the document.\n  - document_type_code: Code representing the type of the document.\n  - shipping_agent_code: Code representing the shipping agent for the document.\n  - receipt_date: Date of receipt of the document.\n  - receipt_number: Number associated with the receipt of the document.\n  - other_details: Additional details about the document.\n\nTable Documents_Mailed:\n- Contains data about documents that have been mailed.\n- Columns:\n  - document_id: Identifier of the document.\n  - mailed_to_address_id: Identifier of the address to which the document was mailed.\n  - mailing_date: Date when the document was mailed.\n\nTable Draft_Copies:\n- Stores information about copies of document drafts.\n- Columns:\n  - document_id: Identifier of the document.\n  - draft_number: Number of the draft.\n  - copy_number: Number of the copy.\n\nTable Employees:\n- Contains details about employees involved in document circulation.\n- Columns:\n  - employee_id: Unique identifier for each employee.\n  - role_code: Code representing the role of the employee.\n  - employee_name: Name of the employee.\n  - other_details: Additional details about the employee.\n\nTable Ref_Document_Status:\n- Provides reference data for document status codes.\n- Columns:\n  - document_status_code: Code representing the status of the document.\n  - document_status_description: Description of the document status.\n\nTable Ref_Document_Types:\n- Contains reference data for document type codes.\n- Columns:\n  - document_type_code: Code representing the type of the document.\n  - document_type_description: Description of the document type.\n\nTable Ref_Shipping_Agents:\n- Stores reference data for shipping agents.\n- Columns:\n  - shipping_agent_code: Code representing the shipping agent.\n  - shipping_agent_name: Name of the shipping agent.\n  - shipping_agent_description: Description of the shipping agent.\n\nTable Roles:\n- Contains information about different roles.\n- Columns:\n  - role_code: Code representing the role.\n  - role_description: Description of the role.\n\nForeign Keys:\n- Documents.shipping_agent_code references Ref_Shipping_Agents.shipping_agent_code, linking documents to shipping agents.\n- Documents.document_status_code references Ref_Document_Status.document_status_code, establishing a relationship between documents and document statuses.\n- Documents.document_type_code references Ref_Document_Types.document_type_code, connecting documents to document types.\n- Employees.role_code references Roles.role_code, linking employees to their roles.\n- Document_Drafts.document_id references Documents.document_id, establishing a relationship between document drafts and documents.\n- Draft_Copies.document_id references Document_Drafts.document_id, connecting draft copies to document drafts.\n- Draft_Copies.draft_number references Document_Drafts.draft_number, linking draft copies to document drafts.\n- Circulation_History.employee_id references Employees.employee_id, establishing a relationship between circulation history and employees.\n- Circulation_History.document_id references Draft_Copies.document_id, linking circulation history to documents.\n- Circulation_History.draft_number references Draft_Copies.draft_number, connecting circulation history to draft copies.\n- Circulation_History.copy_number references Draft_Copies.copy_number, establishing a relationship between circulation history and draft copies.\n- Documents_Mailed.mailed_to_address_id references Addresses.address_id, linking documents mailed to specific addresses.\n- Documents_Mailed.document_id references Documents.document_id, connecting documents mailed to documents.",
    "cre_Doc_Template_Mgt": "Table Documents:\n- Contains information about various documents.\n- Columns:\n  - Document_ID: Unique identifier for each document.\n  - Template_ID: Identifier of the template associated with the document.\n  - Document_Name: Name of the document.\n  - Document_Description: Description of the document.\n  - Other_Details: Additional details related to the document.\n\nTable Paragraphs:\n- Stores paragraphs related to documents.\n- Columns:\n  - Paragraph_ID: Unique identifier for each paragraph.\n  - Document_ID: Identifier of the document to which the paragraph belongs.\n  - Paragraph_Text: Text content of the paragraph.\n  - Other_Details: Additional details related to the paragraph.\n\nTable Ref_Template_Types:\n- Contains reference data for different template types.\n- Columns:\n  - Template_Type_Code: Unique code for each template type.\n  - Template_Type_Description: Description of the template type.\n\nTable Templates:\n- Stores information about templates used for documents.\n- Columns:\n  - Template_ID: Unique identifier for each template.\n  - Version_Number: Version number of the template.\n  - Template_Type_Code: Code referencing the type of template.\n  - Date_Effective_From: Start date of template effectiveness.\n  - Date_Effective_To: End date of template effectiveness.\n  - Template_Details: Additional details about the template.\n\nForeign Keys:\n- Templates.Template_Type_Code references Ref_Template_Types.Template_Type_Code, establishing a relationship between templates and template types.\n- Documents.Template_ID references Templates.Template_ID, linking documents to specific templates.\n- Paragraphs.Document_ID references Documents.Document_ID, connecting paragraphs to their respective documents.",
    "cre_Doc_Tracking_DB": "Table All_Documents:\n- Contains information about all documents stored in the system.\n- Columns:\n  - Document_ID: Unique identifier for each document.\n  - Date_Stored: Date when the document was stored.\n  - Document_Type_Code: Code representing the type of document.\n  - Document_Name: Name of the document.\n  - Document_Description: Description of the document.\n  - Other_Details: Additional details related to the document.\n\nTable Document_Locations:\n- Stores data about the locations of documents.\n- Columns:\n  - Document_ID: Identifier of the document.\n  - Location_Code: Code representing the location of the document.\n  - Date_in_Location_From: Start date when the document was in the location.\n  - Date_in_Location_To: End date when the document was in the location.\n\nTable Documents_to_be_Destroyed:\n- Contains details about documents that are planned to be destroyed.\n- Columns:\n  - Document_ID: Identifier of the document.\n  - Destruction_Authorised_by_Employee_ID: Employee ID who authorized the destruction.\n  - Destroyed_by_Employee_ID: Employee ID who destroyed the document.\n  - Planned_Destruction_Date: Date when the destruction is planned.\n  - Actual_Destruction_Date: Actual date of document destruction.\n  - Other_Details: Additional details related to the document destruction process.\n\nTable Employees:\n- Stores information about employees in the organization.\n- Columns:\n  - Employee_ID: Unique identifier for each employee.\n  - Role_Code: Code representing the role of the employee.\n  - Employee_Name: Name of the employee.\n  - Gender_MFU: Gender of the employee.\n  - Date_of_Birth: Birthdate of the employee.\n  - Other_Details: Additional details related to the employee.\n\nTable Ref_Calendar:\n- Contains reference data related to calendar dates.\n- Columns:\n  - Calendar_Date: Date in the calendar.\n  - Day_Number: Number representing the day in the calendar.\n\nTable Ref_Document_Types:\n- Stores reference information about different document types.\n- Columns:\n  - Document_Type_Code: Code representing the document type.\n  - Document_Type_Name: Name of the document type.\n  - Document_Type_Description: Description of the document type.\n\nTable Ref_Locations:\n- Contains reference data about different locations.\n- Columns:\n  - Location_Code: Code representing the location.\n  - Location_Name: Name of the location.\n  - Location_Description: Description of the location.\n\nTable Roles:\n- Stores information about different roles within the organization.\n- Columns:\n  - Role_Code: Code representing the role.\n  - Role_Name: Name of the role.\n  - Role_Description: Description of the role.\n\nForeign Keys:\n- All_Documents.Date_Stored references Ref_Calendar.Calendar_Date, linking document storage dates to calendar dates.\n- All_Documents.Document_Type_Code references Ref_Document_Types.Document_Type_Code, establishing a relationship between document types and documents.\n- Employees.Role_Code references Roles.Role_Code, connecting employees to their respective roles.\n- Document_Locations.Document_ID references All_Documents.Document_ID, linking document locations to specific documents.\n- Document_Locations.Date_in_Location_To and Date_in_Location_From reference Ref_Calendar.Calendar_Date, establishing relationships between document locations and calendar dates.\n- Document_Locations.Location_Code references Ref_Locations.Location_Code, linking document locations to specific locations.\n- Documents_to_be_Destroyed.Document_ID references All_Documents.Document_ID, connecting documents to be destroyed to specific documents.\n- Documents_to_be_Destroyed.Actual_Destruction_Date and Planned_Destruction_Date reference Ref_Calendar.Calendar_Date, establishing relationships between destruction dates and calendar dates.\n- Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID and Destroyed_by_Employee_ID reference Employees.Employee_ID, linking document destruction actions to employees.",
    "cre_Drama_Workshop_Groups": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - Address_ID: Unique identifier for each address.\n  - Line_1: First line of the address.\n  - Line_2: Second line of the address.\n  - City_Town: City or town of the address.\n  - State_County: State or county of the address.\n  - Other_Details: Additional details about the address.\n\nTable Bookings:\n- Stores data related to bookings made by customers.\n- Columns:\n  - Booking_ID: Unique identifier for each booking.\n  - Customer_ID: Identifier of the customer making the booking.\n  - Workshop_Group_ID: Identifier of the workshop group for the booking.\n  - Status_Code: Code indicating the status of the booking.\n  - Store_ID: Identifier of the store where the booking was made.\n  - Order_Date: Date when the booking was placed.\n  - Planned_Delivery_Date: Planned delivery date for the booking.\n  - Actual_Delivery_Date: Actual delivery date for the booking.\n  - Other_Order_Details: Additional details related to the booking.\n\nTable Bookings_Services:\n- Contains the mapping of services to bookings.\n- Columns:\n  - Order_ID: Identifier of the order.\n  - Product_ID: Identifier of the product associated with the booking.\n\nTable Clients:\n- Stores information about clients.\n- Columns:\n  - Client_ID: Unique identifier for each client.\n  - Address_ID: Identifier of the address associated with the client.\n  - Customer_Email_Address: Email address of the client.\n  - Customer_Name: Name of the client.\n  - Customer_Phone: Phone number of the client.\n  - Other_Details: Additional details about the client.\n\nTable Customer_Orders:\n- Contains details about customer orders.\n- Columns:\n  - Order_ID: Unique identifier for each order.\n  - Customer_ID: Identifier of the customer placing the order.\n  - Store_ID: Identifier of the store where the order was placed.\n  - Order_Date: Date when the order was placed.\n  - Planned_Delivery_Date: Planned delivery date for the order.\n  - Actual_Delivery_Date: Actual delivery date for the order.\n  - Other_Order_Details: Additional details related to the order.\n\nTable Customers:\n- Contains information about customers.\n- Columns:\n  - Customer_ID: Unique identifier for each customer.\n  - Address_ID: Identifier of the address associated with the customer.\n  - Customer_Name: Name of the customer.\n  - Customer_Phone: Phone number of the customer.\n  - Customer_Email_Address: Email address of the customer.\n  - Other_Details: Additional details about the customer.\n\nTable Drama_Workshop_Groups:\n- Stores data related to drama workshop groups.\n- Columns:\n  - Workshop_Group_ID: Unique identifier for each workshop group.\n  - Address_ID: Identifier of the address associated with the workshop group.\n  - Currency_Code: Code for the currency used.\n  - Marketing_Region_Code: Code for the marketing region.\n  - Store_Name: Name of the store.\n  - Store_Phone: Phone number of the store.\n  - Store_Email_Address: Email address of the store.\n  - Other_Details: Additional details about the workshop group.\n\nTable Invoice_Items:\n- Contains details about items in an invoice.\n- Columns:\n  - Invoice_Item_ID: Unique identifier for each invoice item.\n  - Invoice_ID: Identifier of the invoice.\n  - Order_ID: Identifier of the order.\n  - Order_Item_ID: Identifier of the order item.\n  - Product_ID: Identifier of the product.\n  - Order_Quantity: Quantity of the product in the order.\n  - Other_Item_Details: Additional details about the item.\n\nTable Invoices:\n- Stores information about invoices.\n- Columns:\n  - Invoice_ID: Unique identifier for each invoice.\n  - Order_ID: Identifier of the order associated with the invoice.\n  - payment_method_code: Code for the payment method.\n  - Product_ID: Identifier of the product.\n  - Order_Quantity: Quantity of the product in the order.\n  - Other_Item_Details: Additional details about the invoice.\n  - Order_Item_ID: Identifier of the order item.\n\nTable Marketing_Regions:\n- Contains data about marketing regions.\n- Columns:\n  - Marketing_Region_Code: Unique code for each marketing region.\n  - Marketing_Region_Name: Name of the marketing region.\n  - Marketing_Region_Description: Description of the marketing region.\n  - Other_Details: Additional details about the marketing region.\n\nTable Order_Items:\n- Stores information about order items.\n- Columns:\n  - Order_Item_ID: Unique identifier for each order item.\n  - Order_ID: Identifier of the order.\n  - Product_ID: Identifier of the product in the order.\n  - Order_Quantity: Quantity of the product in the order.\n  - Other_Item_Details: Additional details about the order item.\n\nTable Performers:\n- Contains details about performers.\n- Columns:\n  - Performer_ID: Unique identifier for each performer.\n  - Address_ID: Identifier of the address associated with the performer.\n  - Customer_Name: Name of the performer.\n  - Customer_Phone: Phone number of the performer.\n  - Customer_Email_Address: Email address of the performer.\n  - Other_Details: Additional details about the performer.\n\nTable Performers_in_Bookings:\n- Represents the relationship between performers and bookings.\n- Columns:\n  - Order_ID: Identifier of the order.\n  - Performer_ID: Identifier of the performer.\n\nTable Products:\n- Contains information about products.\n- Columns:\n  - Product_ID: Unique identifier for each product.\n  - Product_Name: Name of the product.\n  - Product_Price: Price of the product.\n  - Product_Description: Description of the product.\n  - Other_Product_Service_Details: Additional details about the product or service.\n\nTable Ref_Payment_Methods:\n- Stores reference data for payment methods.\n- Columns:\n  - payment_method_code: Code for the payment method.\n  - payment_method_description: Description of the payment method.\n\nTable Ref_Service_Types:\n- Contains reference data for service types.\n- Columns:\n  - Service_Type_Code: Unique code for each service type.\n  - Parent_Service_Type_Code: Code for the parent service type.\n  - Service_Type_Description: Description of the service type.\n\nTable Services:\n- Stores information about services.\n- Columns:\n  - Service_ID: Unique identifier for each service.\n  - Service_Type_Code: Code for the service type.\n  - Workshop_Group_ID: Identifier of the workshop group.\n  - Product_Description: Description of the product.\n  - Product_Name: Name of the product.\n  - Product_Price: Price of the product.\n  - Other_Product_Service_Details: Additional details about the product or service.\n\nTable Stores:\n- Contains data related to stores.\n- Columns:\n  - Store_ID: Unique identifier for each store.\n  - Address_ID: Identifier of the address associated with the store.\n  - Marketing_Region_Code: Code for the marketing region.\n  - Store_Name: Name of the store.\n  - Store_Phone: Phone number of the store.\n  - Store_Email_Address: Email address of the store.\n  - Other_Details: Additional details about the store.\n\nForeign Keys:\n- Clients.Address_ID references Addresses.Address_ID, establishing a relationship between clients and addresses.\n- Drama_Workshop_Groups.Address_ID references Addresses.Address_ID, linking drama workshop groups to addresses.\n- Performers.Address_ID references Addresses.Address_ID, connecting performers to addresses.\n- Customers.Address_ID references Addresses.Address_ID, establishing a relationship between customers and addresses.\n- Stores.Marketing_Region_Code references Marketing_Regions.Marketing_Region_Code, linking stores to marketing regions.\n- Stores.Address_ID references Addresses.Address_ID, connecting stores to addresses.\n- Bookings.Workshop_Group_ID references Drama_Workshop_Groups.Workshop_Group_ID, establishing a relationship between bookings and workshop groups.\n- Bookings.Customer_ID references Clients.Client_ID, linking bookings to clients.\n- Performers_in_Bookings.Order_ID references Bookings.Booking_ID, establishing a relationship between performers in bookings and bookings.\n- Performers_in_Bookings.Performer_ID references Performers.Performer_ID, linking performers in bookings to performers.\n- Customer_Orders.Store_ID references Stores.Store_ID, connecting customer orders to stores.\n- Customer_Orders.Customer_ID references Customers.Customer_ID, establishing a relationship between customer orders and customers.\n- Order_Items.Product_ID references Products.Product_ID, linking order items to products.\n- Order_Items.Order_ID references Customer_Orders.Order_ID, connecting order items to customer orders.\n- Invoices.payment_method_code references Ref_Payment_Methods.payment_method_code, establishing a relationship between invoices and payment methods.\n- Invoices.Order_ID references Bookings.Booking_ID and Customer_Orders.Order_ID, linking invoices to bookings and customer orders.\n- Services.Service_Type_Code references Ref_Service_Types.Service_Type_Code, connecting services to service types.\n- Services.Workshop_Group_ID references Drama_Workshop_Groups.Workshop_Group_ID, establishing a relationship between services and workshop groups.\n- Bookings_Services.Product_ID references Services.Service_ID, linking bookings services to services.\n- Bookings_Services.Order_ID references Bookings.Booking_ID, connecting bookings services to bookings.\n- Invoice_Items.Order_ID, Invoice_Items.Product_ID, Invoice_Items.Invoice_ID, and Invoice_Items.Order_Item_ID establish relationships between invoice items, bookings services, invoices, and order items.",
    "cre_Theme_park": "Table Features:\n- Contains details about different features.\n- Columns:\n  - Feature_ID: Unique identifier for each feature.\n  - Feature_Details: Description or details of the feature.\n\nTable Hotels:\n- Stores information about various hotels.\n- Columns:\n  - hotel_id: Unique identifier for each hotel.\n  - star_rating_code: Code representing the star rating of the hotel.\n  - pets_allowed_yn: Indicator for whether pets are allowed in the hotel.\n  - price_range: Range of prices for the hotel.\n  - other_hotel_details: Additional details about the hotel.\n\nTable Locations:\n- Contains data related to different locations.\n- Columns:\n  - Location_ID: Unique identifier for each location.\n  - Location_Name: Name of the location.\n  - Address: Address of the location.\n  - Other_Details: Additional details about the location.\n\nTable Museums:\n- Stores information about various museums.\n- Columns:\n  - Museum_ID: Unique identifier for each museum.\n  - Museum_Details: Details or description of the museum.\n\nTable Photos:\n- Contains details about photos related to tourist attractions.\n- Columns:\n  - Photo_ID: Unique identifier for each photo.\n  - Tourist_Attraction_ID: Identifier of the tourist attraction associated with the photo.\n  - Name: Name of the photo.\n  - Description: Description of the photo.\n  - Filename: File name of the photo.\n  - Other_Details: Additional details about the photo.\n\nTable Ref_Attraction_Types:\n- Contains reference data for different attraction types.\n- Columns:\n  - Attraction_Type_Code: Code representing the attraction type.\n  - Attraction_Type_Description: Description of the attraction type.\n\nTable Ref_Hotel_Star_Ratings:\n- Stores reference data for hotel star ratings.\n- Columns:\n  - star_rating_code: Code representing the star rating.\n  - star_rating_description: Description of the star rating.\n\nTable Royal_Family:\n- Contains information about royal families.\n- Columns:\n  - Royal_Family_ID: Unique identifier for each royal family.\n  - Royal_Family_Details: Details or description of the royal family.\n\nTable Shops:\n- Stores details about various shops.\n- Columns:\n  - Shop_ID: Unique identifier for each shop.\n  - Shop_Details: Description or details of the shop.\n\nTable Staff:\n- Contains information about staff members at tourist attractions.\n- Columns:\n  - Staff_ID: Unique identifier for each staff member.\n  - Tourist_Attraction_ID: Identifier of the tourist attraction where the staff member works.\n  - Name: Name of the staff member.\n  - Other_Details: Additional details about the staff member.\n\nTable Street_Markets:\n- Stores data related to street markets.\n- Columns:\n  - Market_ID: Unique identifier for each street market.\n  - Market_Details: Details or description of the street market.\n\nTable Theme_Parks:\n- Contains information about different theme parks.\n- Columns:\n  - Theme_Park_ID: Unique identifier for each theme park.\n  - Theme_Park_Details: Details or description of the theme park.\n\nTable Tourist_Attraction_Features:\n- Stores the relationship between tourist attractions and features.\n- Columns:\n  - Tourist_Attraction_ID: Identifier of the tourist attraction.\n  - Feature_ID: Identifier of the feature associated with the tourist attraction.\n\nTable Tourist_Attractions:\n- Contains details about various tourist attractions.\n- Columns:\n  - Tourist_Attraction_ID: Unique identifier for each tourist attraction.\n  - Attraction_Type_Code: Code representing the type of attraction.\n  - Location_ID: Identifier of the location where the attraction is situated.\n  - How_to_Get_There: Information on how to reach the attraction.\n  - Name: Name of the tourist attraction.\n  - Description: Description of the tourist attraction.\n  - Opening_Hours: Operating hours of the tourist attraction.\n  - Other_Details: Additional details about the tourist attraction.\n\nTable Visitors:\n- Stores information about visitors or tourists.\n- Columns:\n  - Tourist_ID: Unique identifier for each visitor.\n  - Tourist_Details: Details or description of the visitor.\n\nTable Visits:\n- Contains data about visits made by tourists to attractions.\n- Columns:\n  - Visit_ID: Unique identifier for each visit.\n  - Tourist_Attraction_ID: Identifier of the tourist attraction visited.\n  - Tourist_ID: Identifier of the visitor.\n  - Visit_Date: Date of the visit.\n  - Visit_Details: Additional details about the visit.\n\nForeign Keys:\n- Hotels.star_rating_code references Ref_Hotel_Star_Ratings.star_rating_code, linking hotels to their star ratings.\n- Tourist_Attractions.Attraction_Type_Code references Ref_Attraction_Types.Attraction_Type_Code, establishing a relationship between attraction types and tourist attractions.\n- Tourist_Attractions.Location_ID references Locations.Location_ID, connecting tourist attractions to their respective locations.\n- Street_Markets.Market_ID references Tourist_Attractions.Tourist_Attraction_ID, linking street markets to tourist attractions.\n- Shops.Shop_ID references Tourist_Attractions.Tourist_Attraction_ID, establishing a relationship between shops and tourist attractions.\n- Museums.Museum_ID references Tourist_Attractions.Tourist_Attraction_ID, linking museums to tourist attractions.\n- Royal_Family.Royal_Family_ID references Tourist_Attractions.Tourist_Attraction_ID, connecting royal families to tourist attractions.\n- Theme_Parks.Theme_Park_ID references Tourist_Attractions.Tourist_Attraction_ID, linking theme parks to tourist attractions.\n- Visits.Tourist_ID references Visitors.Tourist_ID, establishing a relationship between visits and visitors.\n- Visits.Tourist_Attraction_ID references Tourist_Attractions.Tourist_Attraction_ID, connecting visits to tourist attractions.\n- Photos.Tourist_Attraction_ID references Tourist_Attractions.Tourist_Attraction_ID, linking photos to tourist attractions.\n- Staff.Tourist_Attraction_ID references Tourist_Attractions.Tourist_Attraction_ID, establishing a relationship between staff and tourist attractions.\n- Tourist_Attraction_Features.Feature_ID references Features.Feature_ID, linking features to tourist attractions.\n- Tourist_Attraction_Features.Tourist_Attraction_ID references Tourist_Attractions.Tourist_Attraction_ID, connecting features to tourist attractions.",
    "csu_1": "Table Campuses:\n- Contains information about different campuses.\n- Columns:\n  - Id: Unique identifier for each campus.\n  - Campus: Name of the campus.\n  - Location: Location of the campus.\n  - County: County where the campus is situated.\n  - Year: Year associated with the data.\n\nTable csu_fees:\n- Stores data related to fees at CSU campuses.\n- Columns:\n  - Campus: Identifier of the campus.\n  - Year: Year associated with the fee data.\n  - CampusFee: Fee amount for the campus.\n\nTable degrees:\n- Contains information about degrees offered at campuses.\n- Columns:\n  - Year: Year associated with the degree data.\n  - Campus: Identifier of the campus offering the degree.\n  - Degrees: Types of degrees offered.\n\nTable discipline_enrollments:\n- Stores enrollment data based on disciplines at campuses.\n- Columns:\n  - Campus: Identifier of the campus.\n  - Discipline: Discipline or field of study.\n  - Year: Year associated with the enrollment data.\n  - Undergraduate: Number of undergraduate students enrolled.\n  - Graduate: Number of graduate students enrolled.\n\nTable enrollments:\n- Contains information about total enrollments at campuses.\n- Columns:\n  - Campus: Identifier of the campus.\n  - Year: Year associated with the enrollment data.\n  - TotalEnrollment_AY: Total enrollment for the academic year.\n  - FTE_AY: Full-time equivalent enrollment for the academic year.\n\nTable faculty:\n- Stores data related to faculty at campuses.\n- Columns:\n  - Campus: Identifier of the campus.\n  - Year: Year associated with the faculty data.\n  - Faculty: Number of faculty members at the campus.\n\nForeign Keys:\n- csu_fees.Campus references Campuses.Id, establishing a relationship between CSU fees and campuses.\n- degrees.Campus references Campuses.Id, linking degrees to specific campuses.\n- discipline_enrollments.Campus references Campuses.Id, connecting discipline enrollments to campuses.\n- enrollments.Campus references Campuses.Id, linking enrollments to specific campuses.\n- faculty.Campus references Campuses.Id, establishing a relationship between faculty and campuses.",
    "culture_company": "Table book_club:\n- Contains information about different book clubs.\n- Columns:\n  - book_club_id: Unique identifier for each book club.\n  - Year: Year of the book club.\n  - Author_or_Editor: Author or editor of the book club.\n  - Book_Title: Title of the book club.\n  - Publisher: Publisher of the book club.\n  - Category: Category of the book club.\n  - Result: Result of the book club.\n\nTable culture_company:\n- Stores data related to cultural companies.\n- Columns:\n  - Company_name: Name of the cultural company.\n  - Type: Type of the cultural company.\n  - Incorporated_in: Location where the company is incorporated.\n  - Group_Equity_Shareholding: Equity shareholding within the group.\n  - book_club_id: Identifier of the book club associated with the company.\n  - movie_id: Identifier of the movie associated with the company.\n\nTable movie:\n- Contains details about different movies.\n- Columns:\n  - movie_id: Unique identifier for each movie.\n  - Title: Title of the movie.\n  - Year: Year of the movie.\n  - Director: Director of the movie.\n  - Budget_million: Budget of the movie in million.\n  - Gross_worldwide: Worldwide gross revenue of the movie.\n\nForeign Keys:\n- culture_company.movie_id references movie.movie_id, linking cultural companies to specific movies.\n- culture_company.book_club_id references book_club.book_club_id, connecting cultural companies to specific book clubs.",
    "customers_and_addresses": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - address_content: Content of the address.\n  - city: City of the address.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n  - other_address_details: Additional details related to the address.\n\nTable Customer_Addresses:\n- Stores data related to customer addresses.\n- Columns:\n  - customer_id: Identifier of the customer.\n  - address_id: Identifier of the address.\n  - date_address_from: Start date of the address association.\n  - address_type: Type of the address.\n  - date_address_to: End date of the address association.\n\nTable Customer_Contact_Channels:\n- Contains information about customer contact channels.\n- Columns:\n  - customer_id: Identifier of the customer.\n  - channel_code: Code representing the contact channel.\n  - active_from_date: Start date of the channel activity.\n  - active_to_date: End date of the channel activity.\n  - contact_number: Contact number associated with the channel.\n\nTable Customer_Orders:\n- Stores details about customer orders.\n- Columns:\n  - order_id: Unique identifier for each order.\n  - customer_id: Identifier of the customer who placed the order.\n  - order_status: Status of the order.\n  - order_date: Date when the order was placed.\n  - order_details: Additional details related to the order.\n\nTable Customers:\n- Contains information about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - payment_method: Method of payment preferred by the customer.\n  - customer_name: Name of the customer.\n  - date_became_customer: Date when the customer became a customer.\n  - other_customer_details: Additional details related to the customer.\n\nTable Order_Items:\n- Stores details about items included in orders.\n- Columns:\n  - order_id: Identifier of the order.\n  - product_id: Identifier of the product included in the order.\n  - order_quantity: Quantity of the product in the order.\n\nTable Products:\n- Contains information about different products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_details: Details about the product.\n\nForeign Keys:\n- Customer_Addresses.customer_id references Customers.customer_id, linking customer addresses to customers.\n- Customer_Addresses.address_id references Addresses.address_id, establishing a relationship between customer addresses and addresses.\n- Customer_Contact_Channels.customer_id references Customers.customer_id, connecting customer contact channels to customers.\n- Customer_Orders.customer_id references Customers.customer_id, linking customer orders to customers.\n- Order_Items.order_id references Customer_Orders.order_id, establishing a relationship between order items and customer orders.\n- Order_Items.product_id references Products.product_id, connecting order items to products.",
    "customers_and_invoices": "Table Accounts:\n- Contains information about accounts.\n- Columns:\n  - account_id: Unique identifier for each account.\n  - customer_id: Identifier of the customer associated with the account.\n  - date_account_opened: Date when the account was opened.\n  - account_name: Name of the account.\n  - other_account_details: Additional details related to the account.\n\nTable Customers:\n- Stores data related to customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - customer_first_name: First name of the customer.\n  - customer_middle_initial: Middle initial of the customer.\n  - customer_last_name: Last name of the customer.\n  - gender: Gender of the customer.\n  - email_address: Email address of the customer.\n  - login_name: Login name of the customer.\n  - login_password: Password for customer login.\n  - phone_number: Phone number of the customer.\n  - town_city: City or town where the customer resides.\n  - state_county_province: State, county, or province where the customer resides.\n  - country: Country where the customer resides.\n\nTable Financial_Transactions:\n- Contains details about financial transactions.\n- Columns:\n  - transaction_id: Unique identifier for each transaction.\n  - account_id: Identifier of the account associated with the transaction.\n  - invoice_number: Number of the invoice related to the transaction.\n  - transaction_type: Type of the transaction.\n  - transaction_date: Date of the transaction.\n  - transaction_amount: Amount involved in the transaction.\n  - transaction_comment: Comment related to the transaction.\n  - other_transaction_details: Additional details about the transaction.\n\nTable Invoice_Line_Items:\n- Stores line items of an invoice.\n- Columns:\n  - order_item_id: Unique identifier for each order item.\n  - invoice_number: Number of the invoice.\n  - product_id: Identifier of the product in the line item.\n  - product_title: Title of the product.\n  - product_quantity: Quantity of the product.\n  - product_price: Price of the product.\n  - derived_product_cost: Calculated cost of the product.\n  - derived_vat_payable: VAT payable for the product.\n  - derived_total_cost: Total cost of the product.\n\nTable Invoices:\n- Contains information about invoices.\n- Columns:\n  - invoice_number: Unique identifier for each invoice.\n  - order_id: Identifier of the order associated with the invoice.\n  - invoice_date: Date of the invoice.\n\nTable Order_Items:\n- Stores details about order items.\n- Columns:\n  - order_item_id: Unique identifier for each order item.\n  - order_id: Identifier of the order.\n  - product_id: Identifier of the product in the order item.\n  - product_quantity: Quantity of the product.\n  - other_order_item_details: Additional details about the order item.\n\nTable Orders:\n- Contains data related to orders.\n- Columns:\n  - order_id: Unique identifier for each order.\n  - customer_id: Identifier of the customer who placed the order.\n  - date_order_placed: Date when the order was placed.\n  - order_details: Details of the order.\n\nTable Product_Categories:\n- Stores information about product categories.\n- Columns:\n  - production_type_code: Code for the production type.\n  - product_type_description: Description of the product type.\n  - vat_rating: VAT rating for the product category.\n\nTable Products:\n- Contains details about products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - parent_product_id: Identifier of the parent product.\n  - production_type_code: Code for the production type of the product.\n  - unit_price: Price per unit of the product.\n  - product_name: Name of the product.\n  - product_color: Color of the product.\n  - product_size: Size of the product.\n\nForeign Keys:\n- Orders.customer_id references Customers.customer_id, linking orders to customers.\n- Invoices.order_id references Orders.order_id, connecting invoices to orders.\n- Accounts.customer_id references Customers.customer_id, establishing a relationship between accounts and customers.\n- Products.production_type_code references Product_Categories.production_type_code, linking products to product categories.\n- Financial_Transactions.account_id references Accounts.account_id, connecting financial transactions to accounts.\n- Financial_Transactions.invoice_number references Invoices.invoice_number, establishing a relationship between financial transactions and invoices.\n- Order_Items.order_id references Orders.order_id, linking order items to orders.\n- Order_Items.product_id references Products.product_id, connecting order items to products.\n- Invoice_Line_Items.product_id references Products.product_id, linking invoice line items to products.\n- Invoice_Line_Items.invoice_number references Invoices.invoice_number, connecting invoice line items to invoices.\n- Invoice_Line_Items.order_item_id references Order_Items.order_item_id, establishing a relationship between invoice line items and order items.",
    "customers_and_products_contacts": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line_1_number_building: Line 1 number or building information of the address.\n  - city: City where the address is located.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country where the address is situated.\n\nTable Contacts:\n- Stores contact details of customers.\n- Columns:\n  - contact_id: Unique identifier for each contact.\n  - customer_id: Identifier of the customer associated with the contact.\n  - gender: Gender of the contact.\n  - first_name: First name of the contact.\n  - last_name: Last name of the contact.\n  - contact_phone: Phone number of the contact.\n\nTable Customer_Address_History:\n- Contains historical data of customer addresses.\n- Columns:\n  - customer_id: Identifier of the customer.\n  - address_id: Identifier of the address.\n  - date_from: Start date of the address association.\n  - date_to: End date of the address association.\n\nTable Customer_Orders:\n- Stores information about customer orders.\n- Columns:\n  - order_id: Unique identifier for each order.\n  - customer_id: Identifier of the customer who placed the order.\n  - order_date: Date when the order was placed.\n  - order_status_code: Status code of the order.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - payment_method_code: Code for the payment method used by the customer.\n  - customer_number: Customer number or identifier.\n  - customer_name: Name of the customer.\n  - customer_address: Address of the customer.\n  - customer_phone: Phone number of the customer.\n  - customer_email: Email address of the customer.\n\nTable Order_Items:\n- Stores information about items included in orders.\n- Columns:\n  - order_item_id: Unique identifier for each order item.\n  - order_id: Identifier of the order to which the item belongs.\n  - product_id: Identifier of the product included in the order.\n  - order_quantity: Quantity of the product in the order.\n\nTable Products:\n- Contains details about different products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_type_code: Code for the type of product.\n  - product_name: Name of the product.\n  - product_price: Price of the product.\n\nForeign Keys:\n- Customer_Address_History.address_id references Addresses.address_id, linking customer address history to specific addresses.\n- Customer_Address_History.customer_id references Customers.customer_id, connecting customer address history to customers.\n- Customer_Orders.customer_id references Customers.customer_id, establishing a relationship between customer orders and customers.\n- Order_Items.order_id references Customer_Orders.order_id, linking order items to specific orders.\n- Order_Items.product_id references Products.product_id, connecting order items to products.",
    "customers_campaigns_ecommerce": "Table Customer_Addresses:\n- Contains information about customer addresses.\n- Columns:\n  - customer_id: Identifier of the customer associated with the address.\n  - premise_id: Identifier of the premise.\n  - date_address_from: Start date of the address validity.\n  - address_type_code: Code indicating the type of address.\n  - date_address_to: End date of the address validity.\n\nTable Customer_Orders:\n- Stores data related to customer orders.\n- Columns:\n  - order_id: Unique identifier for each order.\n  - customer_id: Identifier of the customer who placed the order.\n  - order_status_code: Code indicating the status of the order.\n  - shipping_method_code: Code representing the shipping method for the order.\n  - order_placed_datetime: Date and time when the order was placed.\n  - order_delivered_datetime: Date and time when the order was delivered.\n  - order_shipping_charges: Charges for shipping the order.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - payment_method: Method of payment used by the customer.\n  - customer_name: Name of the customer.\n  - customer_phone: Phone number of the customer.\n  - customer_email: Email address of the customer.\n  - customer_address: Address of the customer.\n  - customer_login: Login information of the customer.\n  - customer_password: Password of the customer.\n\nTable Mailshot_Campaigns:\n- Stores information about mailshot campaigns.\n- Columns:\n  - mailshot_id: Unique identifier for each mailshot campaign.\n  - product_category: Category of products targeted in the campaign.\n  - mailshot_name: Name of the mailshot campaign.\n  - mailshot_start_date: Start date of the campaign.\n  - mailshot_end_date: End date of the campaign.\n\nTable Mailshot_Customers:\n- Contains data about customers targeted in mailshot campaigns.\n- Columns:\n  - mailshot_id: Identifier of the mailshot campaign.\n  - customer_id: Identifier of the customer targeted in the campaign.\n  - outcome_code: Code indicating the outcome of the mailshot.\n  - mailshot_customer_date: Date of interaction with the mailshot.\n\nTable Order_Items:\n- Stores details about items in orders.\n- Columns:\n  - item_id: Unique identifier for each item.\n  - order_item_status_code: Code indicating the status of the order item.\n  - order_id: Identifier of the order to which the item belongs.\n  - product_id: Identifier of the product in the item.\n  - item_status_code: Code indicating the status of the item.\n  - item_delivered_datetime: Date and time when the item was delivered.\n  - item_order_quantity: Quantity of the item ordered.\n\nTable Premises:\n- Contains information about premises.\n- Columns:\n  - premise_id: Unique identifier for each premise.\n  - premises_type: Type of premises.\n  - premise_details: Details about the premises.\n\nTable Products:\n- Stores data related to products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_category: Category to which the product belongs.\n  - product_name: Name of the product.\n\nForeign Keys:\n- Customer_Addresses.customer_id references Customers.customer_id, linking customer addresses to customers.\n- Customer_Addresses.premise_id references Premises.premise_id, establishing a relationship between customer addresses and premises.\n- Customer_Orders.customer_id references Customers.customer_id, connecting customer orders to customers.\n- Mailshot_Customers.mailshot_id references Mailshot_Campaigns.mailshot_id, linking mailshot customers to mailshot campaigns.\n- Mailshot_Customers.customer_id references Customers.customer_id, establishing a relationship between mailshot customers and customers.\n- Order_Items.order_id references Customer_Orders.order_id, connecting order items to orders.\n- Order_Items.product_id references Products.product_id, linking order items to products.",
    "customers_card_transactions": "Table Accounts:\n- Contains information about different accounts.\n- Columns:\n  - account_id: Unique identifier for each account.\n  - customer_id: Identifier of the customer associated with the account.\n  - account_name: Name of the account.\n  - other_account_details: Additional details related to the account.\n\nTable Customers:\n- Stores data related to customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - customer_first_name: First name of the customer.\n  - customer_last_name: Last name of the customer.\n  - customer_address: Address of the customer.\n  - customer_phone: Phone number of the customer.\n  - customer_email: Email address of the customer.\n  - other_customer_details: Additional details related to the customer.\n\nTable Customers_Cards:\n- Contains information about customer cards.\n- Columns:\n  - card_id: Unique identifier for each card.\n  - customer_id: Identifier of the customer associated with the card.\n  - card_type_code: Code representing the type of card.\n  - card_number: Number of the card.\n  - date_valid_from: Validity start date of the card.\n  - date_valid_to: Validity end date of the card.\n  - other_card_details: Additional details related to the card.\n\nTable Financial_Transactions:\n- Stores data related to financial transactions.\n- Columns:\n  - transaction_id: Unique identifier for each transaction.\n  - previous_transaction_id: Identifier of the previous transaction.\n  - account_id: Identifier of the account involved in the transaction.\n  - card_id: Identifier of the card used in the transaction.\n  - transaction_type: Type of the transaction.\n  - transaction_date: Date of the transaction.\n  - transaction_amount: Amount involved in the transaction.\n  - transaction_comment: Comment related to the transaction.\n  - other_transaction_details: Additional details related to the transaction.\n\nForeign Keys:\n- Financial_Transactions.account_id references Accounts.account_id, establishing a relationship between financial transactions and accounts.\n- Financial_Transactions.card_id references Customers_Cards.card_id, linking financial transactions to customer cards.",
    "customer_complaints": "Table Complaints:\n- Contains information about customer complaints.\n- Columns:\n  - complaint_id: Unique identifier for each complaint.\n  - product_id: Identifier of the product related to the complaint.\n  - customer_id: Identifier of the customer who raised the complaint.\n  - complaint_outcome_code: Code indicating the outcome of the complaint.\n  - complaint_status_code: Code representing the status of the complaint.\n  - complaint_type_code: Code specifying the type of complaint.\n  - date_complaint_raised: Date when the complaint was raised.\n  - date_complaint_closed: Date when the complaint was closed.\n  - staff_id: Identifier of the staff member handling the complaint.\n\nTable Customers:\n- Stores details about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - customer_type_code: Code indicating the type of customer.\n  - address_line_1: First line of the customer's address.\n  - address_line_2: Second line of the customer's address.\n  - town_city: City or town where the customer is located.\n  - state: State where the customer is located.\n  - email_address: Email address of the customer.\n  - phone_number: Phone number of the customer.\n\nTable Products:\n- Contains information about products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - parent_product_id: Identifier of the parent product if applicable.\n  - product_category_code: Code specifying the category of the product.\n  - date_product_first_available: Date when the product was first available.\n  - date_product_discontinued: Date when the product was discontinued.\n  - product_name: Name of the product.\n  - product_description: Description of the product.\n  - product_price: Price of the product.\n\nTable Staff:\n- Stores details about staff members.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - gender: Gender of the staff member.\n  - first_name: First name of the staff member.\n  - last_name: Last name of the staff member.\n  - email_address: Email address of the staff member.\n  - phone_number: Phone number of the staff member.\n\nForeign Keys:\n- Complaints.customer_id references Customers.customer_id, establishing a relationship between complaints and customers.\n- Complaints.product_id references Products.product_id, linking complaints to specific products.\n- Complaints.staff_id references Staff.staff_id, connecting complaints to staff members.",
    "customer_deliveries": "Table Actual_Order_Products:\n- Contains the mapping between actual orders and products.\n- Columns:\n  - actual_order_id: Identifier for each actual order.\n  - product_id: Identifier for each product associated with the actual order.\n\nTable Actual_Orders:\n- Stores information about actual orders.\n- Columns:\n  - actual_order_id: Unique identifier for each actual order.\n  - order_status_code: Code indicating the status of the order.\n  - regular_order_id: Identifier of the regular order associated with the actual order.\n  - actual_order_date: Date of the actual order.\n\nTable Addresses:\n- Contains details about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - address_details: Details of the address.\n  - city: City of the address.\n  - zip_postcode: Postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Customer_Addresses:\n- Stores the relationship between customers and addresses.\n- Columns:\n  - customer_id: Identifier for each customer.\n  - address_id: Identifier for each address.\n  - date_from: Start date of the address association.\n  - address_type: Type of address.\n  - date_to: End date of the address association.\n\nTable Customers:\n- Contains information about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - payment_method: Payment method used by the customer.\n  - customer_name: Name of the customer.\n  - customer_phone: Phone number of the customer.\n  - customer_email: Email address of the customer.\n  - date_became_customer: Date when the customer became a customer.\n\nTable Delivery_Route_Locations:\n- Stores details about locations on delivery routes.\n- Columns:\n  - location_code: Code for each location.\n  - route_id: Identifier for each route.\n  - location_address_id: Identifier of the address for the location.\n  - location_name: Name of the location.\n\nTable Delivery_Routes:\n- Contains information about delivery routes.\n- Columns:\n  - route_id: Unique identifier for each route.\n  - route_name: Name of the route.\n  - other_route_details: Additional details about the route.\n\nTable Employees:\n- Stores data related to employees.\n- Columns:\n  - employee_id: Unique identifier for each employee.\n  - employee_address_id: Identifier of the address for the employee.\n  - employee_name: Name of the employee.\n  - employee_phone: Phone number of the employee.\n\nTable Order_Deliveries:\n- Contains details about order deliveries.\n- Columns:\n  - location_code: Code for each location.\n  - actual_order_id: Identifier for each actual order.\n  - delivery_status_code: Code indicating the status of the delivery.\n  - driver_employee_id: Identifier of the employee driving the delivery.\n  - truck_id: Identifier of the truck used for the delivery.\n  - delivery_date: Date of the delivery.\n\nTable Products:\n- Contains information about products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_name: Name of the product.\n  - product_price: Price of the product.\n  - product_description: Description of the product.\n\nTable Regular_Order_Products:\n- Stores the mapping between regular orders and products.\n- Columns:\n  - regular_order_id: Identifier for each regular order.\n  - product_id: Identifier for each product associated with the regular order.\n\nTable Regular_Orders:\n- Contains information about regular orders.\n- Columns:\n  - regular_order_id: Unique identifier for each regular order.\n  - distributer_id: Identifier of the customer who is the distributor for the order.\n\nTable Trucks:\n- Stores details about trucks.\n- Columns:\n  - truck_id: Unique identifier for each truck.\n  - truck_licence_number: License number of the truck.\n  - truck_details: Additional details about the truck.\n\nForeign Keys:\n- Regular_Orders.distributer_id references Customers.customer_id, linking regular orders to customers who are distributors.\n- Regular_Order_Products.regular_order_id references Regular_Orders.regular_order_id, establishing a relationship between regular orders and products.\n- Regular_Order_Products.product_id references Products.product_id, linking regular order products to products.\n- Actual_Orders.regular_order_id references Regular_Orders.regular_order_id, connecting actual orders to regular orders.\n- Actual_Order_Products.actual_order_id references Actual_Orders.actual_order_id, establishing a relationship between actual order products and actual orders.\n- Actual_Order_Products.product_id references Products.product_id, linking actual order products to products.\n- Customer_Addresses.address_id references Addresses.address_id, establishing a relationship between customer addresses and addresses.\n- Customer_Addresses.customer_id references Customers.customer_id, connecting customer addresses to customers.\n- Delivery_Route_Locations.route_id references Delivery_Routes.route_id, linking delivery route locations to delivery routes.\n- Delivery_Route_Locations.location_address_id references Addresses.address_id, establishing a relationship between delivery route locations and addresses.\n- Employees.employee_address_id references Addresses.address_id, connecting employee addresses to addresses.\n- Order_Deliveries.driver_employee_id references Employees.employee_id, linking delivery drivers to employees.\n- Order_Deliveries.location_code references Delivery_Route_Locations.location_code, establishing a relationship between order deliveries and delivery route locations.\n- Order_Deliveries.actual_order_id references Actual_Orders.actual_order_id, connecting order deliveries to actual orders.\n- Order_Deliveries.truck_id references Trucks.truck_id, linking order deliveries to trucks.",
    "debate": "Table debate:\n- Contains information about debates.\n- Columns:\n  - Debate_ID: Unique identifier for each debate.\n  - Date: Date of the debate.\n  - Venue: Location where the debate took place.\n  - Num_of_Audience: Number of audience members present during the debate.\n\nTable debate_people:\n- Stores details about people involved in debates.\n- Columns:\n  - Debate_ID: Identifier of the debate.\n  - Affirmative: Identifier of the person representing the affirmative side in the debate.\n  - Negative: Identifier of the person representing the negative side in the debate.\n  - If_Affirmative_Win: Indicates whether the affirmative side won the debate.\n\nTable people:\n- Contains information about individuals participating in debates.\n- Columns:\n  - People_ID: Unique identifier for each individual.\n  - District: District associated with the individual.\n  - Name: Name of the individual.\n  - Party: Political party affiliation of the individual.\n  - Age: Age of the individual.\n\nForeign Keys:\n- debate_people.Negative references people.People_ID, linking negative side participants to individuals.\n- debate_people.Affirmative references people.People_ID, linking affirmative side participants to individuals.\n- debate_people.Debate_ID references debate.Debate_ID, establishing a relationship between debate_people and debates.",
    "decoration_competition": "Table college:\n- Contains information about different colleges.\n- Columns:\n  - College_ID: Unique identifier for each college.\n  - Name: Name of the college.\n  - Leader_Name: Name of the leader of the college.\n  - College_Location: Location of the college.\n\nTable member:\n- Stores data related to members associated with colleges.\n- Columns:\n  - Member_ID: Unique identifier for each member.\n  - Name: Name of the member.\n  - Country: Country of the member.\n  - College_ID: Identifier of the college to which the member belongs. \n\nTable round:\n- Contains details about rounds in a competition.\n- Columns:\n  - Round_ID: Unique identifier for each round.\n  - Member_ID: Identifier of the member participating in the round.\n  - Decoration_Theme: Theme of decoration for the round.\n  - Rank_in_Round: Rank achieved by the member in the round.\n\nForeign Keys:\n- member.College_ID references college.College_ID, establishing a relationship between members and colleges.\n- round.Member_ID references member.Member_ID, linking rounds to specific members.",
    "department_management": "Table department:\n- Contains information about different departments.\n- Columns:\n  - Department_ID: Unique identifier for each department.\n  - Name: Name of the department.\n  - Creation: Date of creation of the department.\n  - Ranking: Ranking of the department.\n  - Budget_in_Billions: Budget of the department in billions.\n  - Num_Employees: Number of employees in the department.\n\nTable head:\n- Stores data related to department heads.\n- Columns:\n  - head_ID: Unique identifier for each department head.\n  - name: Name of the department head.\n  - born_state: State where the department head was born.\n  - age: Age of the department head.\n\nTable management:\n- Contains information about the management structure.\n- Columns:\n  - department_ID: Identifier of the department.\n  - head_ID: Identifier of the department head.\n  - temporary_acting: Indicates if the head is temporarily acting.\n\nForeign Keys:\n- management.head_ID references head.head_ID, establishing a relationship between management and head tables based on the head identifier.\n- management.department_ID references department.Department_ID, linking management to specific departments based on the department identifier.",
    "department_store": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - address_details: Details of the address.\n\nTable Customer_Addresses:\n- Stores the relationship between customers and addresses.\n- Columns:\n  - customer_id: Identifier of the customer.\n  - address_id: Identifier of the address.\n  - date_from: Start date of the address association.\n  - date_to: End date of the address association.\n\nTable Customer_Orders:\n- Contains details about customer orders.\n- Columns:\n  - order_id: Unique identifier for each order.\n  - customer_id: Identifier of the customer who placed the order.\n  - order_status_code: Code indicating the status of the order.\n  - order_date: Date when the order was placed.\n\nTable Customers:\n- Stores information about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - payment_method_code: Code for the payment method used by the customer.\n  - customer_code: Code assigned to the customer.\n  - customer_name: Name of the customer.\n  - customer_address: Address of the customer.\n  - customer_phone: Phone number of the customer.\n  - customer_email: Email address of the customer.\n\nTable Department_Store_Chain:\n- Contains data related to department store chains.\n- Columns:\n  - dept_store_chain_id: Unique identifier for each department store chain.\n  - dept_store_chain_name: Name of the department store chain.\n\nTable Department_Stores:\n- Stores information about department stores.\n- Columns:\n  - dept_store_id: Unique identifier for each department store.\n  - dept_store_chain_id: Identifier of the department store chain to which the store belongs.\n  - store_name: Name of the store.\n  - store_address: Address of the store.\n  - store_phone: Phone number of the store.\n  - store_email: Email address of the store.\n\nTable Departments:\n- Contains details about different departments within the organization.\n- Columns:\n  - department_id: Unique identifier for each department.\n  - dept_store_id: Identifier of the department store to which the department belongs.\n  - department_name: Name of the department.\n\nTable Order_Items:\n- Stores information about items included in orders.\n- Columns:\n  - order_item_id: Unique identifier for each order item.\n  - order_id: Identifier of the order.\n  - product_id: Identifier of the product in the order.\n\nTable Product_Suppliers:\n- Contains data about product suppliers.\n- Columns:\n  - product_id: Identifier of the product.\n  - supplier_id: Identifier of the supplier.\n  - date_supplied_from: Start date of the product supply.\n  - date_supplied_to: End date of the product supply.\n  - total_amount_purchased: Total quantity of the product purchased.\n  - total_value_purchased: Total value of the product purchased.\n\nTable Products:\n- Stores information about products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_type_code: Code indicating the type of the product.\n  - product_name: Name of the product.\n  - product_price: Price of the product.\n\nTable Staff:\n- Contains details about staff members.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - staff_gender: Gender of the staff member.\n  - staff_name: Name of the staff member.\n\nTable Staff_Department_Assignments:\n- Stores the assignments of staff members to departments.\n- Columns:\n  - staff_id: Identifier of the staff member.\n  - department_id: Identifier of the department to which the staff member is assigned.\n  - date_assigned_from: Start date of the assignment.\n  - job_title_code: Code indicating the job title of the staff member.\n  - date_assigned_to: End date of the assignment.\n\nTable Supplier_Addresses:\n- Contains information about addresses of suppliers.\n- Columns:\n  - supplier_id: Identifier of the supplier.\n  - address_id: Identifier of the address.\n  - date_from: Start date of the address association.\n  - date_to: End date of the address association.\n\nTable Suppliers:\n- Stores details about suppliers.\n- Columns:\n  - supplier_id: Unique identifier for each supplier.\n  - supplier_name: Name of the supplier.\n  - supplier_phone: Phone number of the supplier.\n\nForeign Keys:\n- Supplier_Addresses.supplier_id references Suppliers.supplier_id, establishing a relationship between supplier addresses and suppliers.\n- Supplier_Addresses.address_id references Addresses.address_id, linking supplier addresses to specific addresses.\n- Customer_Addresses.customer_id references Customers.customer_id, connecting customer addresses to customers.\n- Customer_Addresses.address_id references Addresses.address_id, establishing a relationship between customer addresses and addresses.\n- Customer_Orders.customer_id references Customers.customer_id, linking customer orders to customers.\n- Department_Stores.dept_store_chain_id references Department_Store_Chain.dept_store_chain_id, connecting department stores to department store chains.\n- Departments.dept_store_id references Department_Stores.dept_store_id, establishing a relationship between departments and department stores.\n- Order_Items.product_id references Products.product_id, linking order items to products.\n- Order_Items.order_id references Customer_Orders.order_id, connecting order items to customer orders.\n- Product_Suppliers.product_id references Products.product_id, linking product suppliers to products.\n- Product_Suppliers.supplier_id references Suppliers.supplier_id, establishing a relationship between product suppliers and suppliers.\n- Staff_Department_Assignments.staff_id references Staff.staff_id, connecting staff department assignments to staff.\n- Staff_Department_Assignments.department_id references Departments.department_id, linking staff department assignments to departments.",
    "device": "Table device:\n- Contains information about different devices.\n- Columns:\n  - Device_ID: Unique identifier for each device.\n  - Device: Name or type of the device.\n  - Carrier: Carrier associated with the device.\n  - Package_Version: Version of the device package.\n  - Applications: Applications available on the device.\n  - Software_Platform: Platform on which the device operates.\n\nTable shop:\n- Stores data related to different shops.\n- Columns:\n  - Shop_ID: Unique identifier for each shop.\n  - Shop_Name: Name of the shop.\n  - Location: Location of the shop.\n  - Open_Date: Date when the shop was opened.\n  - Open_Year: Year when the shop was opened.\n\nTable stock:\n- Contains information about the stock of devices in each shop.\n- Columns:\n  - Shop_ID: Identifier of the shop.\n  - Device_ID: Identifier of the device in stock.\n  - Quantity: Number of devices available in stock.\n\nForeign Keys:\n- stock.Device_ID references device.Device_ID, establishing a relationship between stock and devices.\n- stock.Shop_ID references shop.Shop_ID, linking stock to specific shops.",
    "document_management": "Table Document_Functional_Areas:\n- Contains information about the functional areas of documents.\n- Columns:\n  - document_code: Unique identifier for each document.\n  - functional_area_code: Identifier for the functional area of the document.\n\nTable Document_Sections:\n- Stores details about different sections within documents.\n- Columns:\n  - section_id: Unique identifier for each section.\n  - document_code: Identifier of the document to which the section belongs.\n  - section_sequence: Sequence of the section within the document.\n  - section_code: Code for the section.\n  - section_title: Title of the section.\n\nTable Document_Sections_Images:\n- Contains the mapping between document sections and images.\n- Columns:\n  - section_id: Identifier of the section.\n  - image_id: Identifier of the image associated with the section.\n\nTable Document_Structures:\n- Stores information about the structure of documents.\n- Columns:\n  - document_structure_code: Unique identifier for each document structure.\n  - parent_document_structure_code: Identifier of the parent document structure.\n  - document_structure_description: Description of the document structure.\n\nTable Documents:\n- Contains details about different documents.\n- Columns:\n  - document_code: Unique identifier for each document.\n  - document_structure_code: Identifier of the document structure.\n  - document_type_code: Code for the type of document.\n  - access_count: Number of times the document has been accessed.\n  - document_name: Name of the document.\n\nTable Functional_Areas:\n- Stores information about different functional areas.\n- Columns:\n  - functional_area_code: Unique identifier for each functional area.\n  - parent_functional_area_code: Identifier of the parent functional area.\n  - functional_area_description: Description of the functional area.\n\nTable Images:\n- Contains details about images used in documents.\n- Columns:\n  - image_id: Unique identifier for each image.\n  - image_alt_text: Alternative text for the image.\n  - image_name: Name of the image.\n  - image_url: URL of the image.\n\nTable Roles:\n- Stores information about different roles.\n- Columns:\n  - role_code: Unique identifier for each role.\n  - role_description: Description of the role.\n\nTable Users:\n- Contains details about users.\n- Columns:\n  - user_id: Unique identifier for each user.\n  - role_code: Identifier of the role assigned to the user.\n  - user_name: Name of the user.\n  - user_login: Login information of the user.\n  - password: Password of the user.\n\nForeign Keys:\n- Users.role_code references Roles.role_code, establishing a relationship between users and roles.\n- Documents.document_structure_code references Document_Structures.document_structure_code, linking documents to their structures.\n- Document_Functional_Areas.functional_area_code references Functional_Areas.functional_area_code, connecting document functional areas to functional areas.\n- Document_Functional_Areas.document_code references Documents.document_code, establishing a relationship between document functional areas and documents.\n- Document_Sections.document_code references Documents.document_code, linking document sections to documents.\n- Document_Sections_Images.image_id references Images.image_id, connecting document sections to images.\n- Document_Sections_Images.section_id references Document_Sections.section_id, establishing a relationship between document section images and document sections.",
    "dog_kennels": "Table Breeds:\n- Contains information about different dog breeds.\n- Columns:\n  - breed_code: Unique code for each breed.\n  - breed_name: Name of the breed.\n\nTable Charges:\n- Stores details about various charges.\n- Columns:\n  - charge_id: Unique identifier for each charge.\n  - charge_type: Type of charge.\n  - charge_amount: Amount of the charge.\n\nTable Dogs:\n- Holds data related to dogs.\n- Columns:\n  - dog_id: Unique identifier for each dog.\n  - owner_id: Identifier of the owner of the dog.\n  - abandoned_yn: Indicator if the dog has been abandoned.\n  - breed_code: Code referencing the breed of the dog.\n  - size_code: Code referencing the size of the dog.\n  - name: Name of the dog.\n  - age: Age of the dog.\n  - date_of_birth: Date of birth of the dog.\n  - gender: Gender of the dog.\n  - weight: Weight of the dog.\n  - date_arrived: Date when the dog arrived.\n  - date_adopted: Date when the dog was adopted.\n  - date_departed: Date when the dog departed.\n\nTable Owners:\n- Contains information about dog owners.\n- Columns:\n  - owner_id: Unique identifier for each owner.\n  - first_name: First name of the owner.\n  - last_name: Last name of the owner.\n  - street: Street address of the owner.\n  - city: City where the owner resides.\n  - state: State where the owner resides.\n  - zip_code: Zip code of the owner's location.\n  - email_address: Email address of the owner.\n  - home_phone: Home phone number of the owner.\n  - cell_number: Cell phone number of the owner.\n\nTable Professionals:\n- Stores data about professionals involved in dog-related services.\n- Columns:\n  - professional_id: Unique identifier for each professional.\n  - role_code: Code representing the role of the professional.\n  - first_name: First name of the professional.\n  - last_name: Last name of the professional.\n  - street: Street address of the professional.\n  - city: City where the professional is located.\n  - state: State where the professional is located.\n  - zip_code: Zip code of the professional's location.\n  - email_address: Email address of the professional.\n  - home_phone: Home phone number of the professional.\n  - cell_number: Cell phone number of the professional.\n\nTable Sizes:\n- Contains information about different sizes of dogs.\n- Columns:\n  - size_code: Code representing the size category.\n  - size_description: Description of the size category.\n\nTable Treatment_Types:\n- Stores details about different types of treatments.\n- Columns:\n  - treatment_type_code: Code for each treatment type.\n  - treatment_type_description: Description of the treatment type.\n\nTable Treatments:\n- Holds data related to treatments given to dogs.\n- Columns:\n  - treatment_id: Unique identifier for each treatment.\n  - dog_id: Identifier of the dog receiving the treatment.\n  - professional_id: Identifier of the professional administering the treatment.\n  - treatment_type_code: Code referencing the type of treatment.\n  - date_of_treatment: Date when the treatment was administered.\n  - cost_of_treatment: Cost of the treatment.\n\nForeign Keys:\n- Dogs.owner_id references Owners.owner_id, establishing a relationship between dogs and owners.\n- Dogs.size_code references Sizes.size_code, linking dogs to their respective sizes.\n- Dogs.breed_code references Breeds.breed_code, connecting dogs to their breeds.\n- Treatments.dog_id references Dogs.dog_id, linking treatments to specific dogs.\n- Treatments.professional_id references Professionals.professional_id, establishing a relationship between treatments and professionals.\n- Treatments.treatment_type_code references Treatment_Types.treatment_type_code, connecting treatments to specific treatment types.",
    "dorm_1": "Table Dorm:\n- Contains information about different dormitories.\n- Columns:\n  - dormid: Unique identifier for each dormitory.\n  - dorm_name: Name of the dormitory.\n  - student_capacity: Maximum capacity of students that can be accommodated in the dormitory.\n  - gender: Indicates the gender accommodation type of the dormitory.\n\nTable Dorm_amenity:\n- Stores details about various amenities available in dormitories.\n- Columns:\n  - amenid: Unique identifier for each amenity.\n  - amenity_name: Name of the amenity provided in the dormitory.\n\nTable Has_amenity:\n- Represents the relationship between dormitories and amenities they offer.\n- Columns:\n  - dormid: Identifier of the dormitory.\n  - amenid: Identifier of the amenity available in the dormitory.\n\nTable Lives_in:\n- Contains data about students living in dormitories.\n- Columns:\n  - stuid: Identifier of the student.\n  - dormid: Identifier of the dormitory where the student lives.\n  - room_number: Room number where the student resides in the dormitory.\n\nTable Student:\n- Stores information about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Field of study or major of the student.\n  - Advisor: Advisor assigned to the student.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Has_amenity.amenid references Dorm_amenity.amenid, establishing a relationship between dorm amenities and their identifiers.\n- Has_amenity.dormid references Dorm.dormid, linking dorm amenities to specific dormitories.\n- Lives_in.dormid references Dorm.dormid, connecting student residence information to dormitories.\n- Lives_in.stuid references Student.StuID, establishing a relationship between students and their dormitory residence.",
    "driving_school": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line_1_number_building: Line 1 number or building information of the address.\n  - city: City of the address.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Customer_Payments:\n- Stores data related to payments made by customers.\n- Columns:\n  - customer_id: Identifier of the customer making the payment.\n  - datetime_payment: Date and time of the payment.\n  - payment_method_code: Code representing the payment method used.\n  - amount_payment: Amount of the payment made.\n\nTable Customers:\n- Contains details about customers of the organization.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - customer_address_id: Identifier of the address associated with the customer.\n  - customer_status_code: Code indicating the status of the customer.\n  - date_became_customer: Date when the customer became a customer.\n  - date_of_birth: Date of birth of the customer.\n  - first_name: First name of the customer.\n  - last_name: Last name of the customer.\n  - amount_outstanding: Outstanding amount to be paid by the customer.\n  - email_address: Email address of the customer.\n  - phone_number: Phone number of the customer.\n  - cell_mobile_phone_number: Mobile phone number of the customer.\n\nTable Lessons:\n- Stores information about lessons provided by the organization.\n- Columns:\n  - lesson_id: Unique identifier for each lesson.\n  - customer_id: Identifier of the customer taking the lesson.\n  - lesson_status_code: Code indicating the status of the lesson.\n  - staff_id: Identifier of the staff member conducting the lesson.\n  - vehicle_id: Identifier of the vehicle used in the lesson.\n  - lesson_date: Date of the lesson.\n  - lesson_time: Time of the lesson.\n  - price: Price of the lesson.\n\nTable Staff:\n- Contains details about staff members of the organization.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - staff_address_id: Identifier of the address associated with the staff member.\n  - nickname: Nickname of the staff member.\n  - first_name: First name of the staff member.\n  - middle_name: Middle name of the staff member.\n  - last_name: Last name of the staff member.\n  - date_of_birth: Date of birth of the staff member.\n  - date_joined_staff: Date when the staff member joined the organization.\n  - date_left_staff: Date when the staff member left the organization.\n\nTable Vehicles:\n- Contains information about vehicles used in lessons.\n- Columns:\n  - vehicle_id: Unique identifier for each vehicle.\n  - vehicle_details: Details about the vehicle.\n\nForeign Keys:\n- Staff.staff_address_id references Addresses.address_id, linking staff members to their addresses.\n- Customers.customer_address_id references Addresses.address_id, connecting customers to their addresses.\n- Customer_Payments.customer_id references Customers.customer_id, establishing a relationship between payments and customers.\n- Lessons.customer_id references Customers.customer_id, linking lessons to specific customers.\n- Lessons.staff_id references Staff.staff_id, connecting lessons to staff members.\n- Lessons.vehicle_id references Vehicles.vehicle_id, establishing a relationship between lessons and vehicles.",
    "election": "Table county:\n- Contains information about different counties.\n- Columns:\n  - County_Id: Unique identifier for each county.\n  - County_name: Name of the county.\n  - Population: Population of the county.\n  - Zip_code: Zip code of the county.\n\nTable election:\n- Stores data related to elections.\n- Columns:\n  - Election_ID: Unique identifier for each election.\n  - Counties_Represented: Counties represented in the election.\n  - District: Identifier of the district for the election.\n  - Delegate: Delegate involved in the election.\n  - Party: Political party associated with the election.\n  - First_Elected: Date when the delegate was first elected.\n  - Committee: Committee related to the election.\n\nTable party:\n- Contains information about political parties.\n- Columns:\n  - Party_ID: Unique identifier for each political party.\n  - Year: Year of the party information.\n  - Party: Name of the political party.\n  - Governor: Governor affiliated with the party.\n  - Lieutenant_Governor: Lieutenant Governor affiliated with the party.\n  - Comptroller: Comptroller affiliated with the party.\n  - Attorney_General: Attorney General affiliated with the party.\n  - US_Senate: U.S. Senate affiliation of the party.\n\nForeign Keys:\n- election.District references county.County_Id, establishing a relationship between elections and counties.\n- election.Party references party.Party_ID, linking elections to specific political parties.",
    "election_representative": "Table election:\n- Contains information about elections.\n- Columns:\n  - Election_ID: Unique identifier for each election.\n  - Representative_ID: Identifier of the representative involved in the election.\n  - Date: Date of the election.\n  - Votes: Total number of votes received.\n  - Vote_Percent: Percentage of votes received.\n  - Seats: Number of seats won.\n  - Place: Location where the election took place.\n\nTable representative:\n- Stores details about representatives.\n- Columns:\n  - Representative_ID: Unique identifier for each representative.\n  - Name: Name of the representative.\n  - State: State the representative belongs to.\n  - Party: Political party affiliation of the representative.\n  - Lifespan: Lifespan of the representative.\n\nForeign Keys:\n- election.Representative_ID references representative.Representative_ID, establishing a relationship between elections and representatives.",
    "employee_hire_evaluation": "Table employee:\n- Contains information about employees.\n- Columns:\n  - Employee_ID: Unique identifier for each employee.\n  - Name: Name of the employee.\n  - Age: Age of the employee.\n  - City: City where the employee resides.\n\nTable evaluation:\n- Stores data related to employee evaluations.\n- Columns:\n  - Employee_ID: Identifier of the employee being evaluated.\n  - Year_awarded: Year in which the evaluation was awarded.\n  - Bonus: Bonus amount awarded during the evaluation.\n\nTable hiring:\n- Contains details about the hiring process of employees.\n- Columns:\n  - Shop_ID: Identifier of the shop where the employee is hired.\n  - Employee_ID: Identifier of the hired employee.\n  - Start_from: Start date of the employee in the shop.\n  - Is_full_time: Indicates whether the employee is hired as a full-time employee.\n\nTable shop:\n- Stores information about different shops.\n- Columns:\n  - Shop_ID: Unique identifier for each shop.\n  - Name: Name of the shop.\n  - Location: Location of the shop.\n  - District: District where the shop is situated.\n  - Number_products: Number of products available in the shop.\n  - Manager_name: Name of the manager of the shop.\n\nForeign Keys:\n- hiring.Employee_ID references employee.Employee_ID, establishing a relationship between hiring and employees.\n- hiring.Shop_ID references shop.Shop_ID, linking hiring to specific shops.\n- evaluation.Employee_ID references employee.Employee_ID, connecting evaluations to employees.",
    "entertainment_awards": "Table artwork:\n- Contains information about different artworks.\n- Columns:\n  - Artwork_ID: Unique identifier for each artwork.\n  - Type: Type or category of the artwork.\n  - Name: Name of the artwork.\n\nTable festival_detail:\n- Stores details about various festivals.\n- Columns:\n  - Festival_ID: Unique identifier for each festival.\n  - Festival_Name: Name of the festival.\n  - Chair_Name: Name of the chairperson associated with the festival.\n  - Location: Location where the festival takes place.\n  - Year: Year in which the festival is held.\n  - Num_of_Audience: Number of audience members attending the festival.\n\nTable nomination:\n- Contains data related to nominations of artworks in festivals.\n- Columns:\n  - Artwork_ID: Identifier of the artwork being nominated.\n  - Festival_ID: Identifier of the festival where the nomination takes place.\n  - Result: Outcome or result of the nomination.\n\nForeign Keys:\n- nomination.Festival_ID references festival_detail.Festival_ID, establishing a relationship between nominations and festival details.\n- nomination.Artwork_ID references artwork.Artwork_ID, linking nominations to specific artworks.",
    "entrepreneur": "Table entrepreneur:\n- Contains information about entrepreneurs seeking investments.\n- Columns:\n  - Entrepreneur_ID: Unique identifier for each entrepreneur.\n  - People_ID: Identifier linking to the corresponding entry in the people table.\n  - Company: Name of the entrepreneur's company.\n  - Money_Requested: Amount of money requested by the entrepreneur.\n  - Investor: Name of the investor associated with the entrepreneur.\n\nTable people:\n- Stores details about individuals.\n- Columns:\n  - People_ID: Unique identifier for each individual.\n  - Name: Name of the person.\n  - Height: Height of the person.\n  - Weight: Weight of the person.\n  - Date_of_Birth: Birthdate of the person.\n\nForeign Keys:\n- entrepreneur.People_ID references people.People_ID, establishing a relationship between entrepreneurs and individuals in the people table.",
    "epinions_1": "Table item:\n- Contains information about different items.\n- Columns:\n  - i_id: Unique identifier for each item.\n  - title: Title of the item.\n\nTable review:\n- Stores reviews given by users for items.\n- Columns:\n  - a_id: Unique identifier for each review.\n  - u_id: Identifier of the user who gave the review.\n  - i_id: Identifier of the item being reviewed.\n  - rating: Rating given by the user for the item.\n  - rank: Rank of the review.\n\nTable trust:\n- Contains data about trust relationships between users.\n- Columns:\n  - source_u_id: Identifier of the user who trusts another user.\n  - target_u_id: Identifier of the user being trusted.\n  - trust: Level of trust between the source user and the target user.\n\nTable useracct:\n- Stores information about user accounts.\n- Columns:\n  - u_id: Unique identifier for each user account.\n  - name: Name of the user.\n\nForeign Keys:\n- review.i_id references item.i_id, linking reviews to specific items.\n- review.u_id references useracct.u_id, connecting reviews to the users who gave them.\n- trust.target_u_id references useracct.u_id, establishing a trust relationship between users.\n- trust.source_u_id references useracct.u_id, linking the source user to the target user in the trust table.",
    "e_government": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line_1_number_building: First line of the address specifying building number.\n  - town_city: City or town of the address.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Forms:\n- Stores details related to various forms.\n- Columns:\n  - form_id: Unique identifier for each form.\n  - form_type_code: Code representing the type of form.\n  - service_id: Identifier of the service associated with the form.\n  - form_number: Number assigned to the form.\n  - form_name: Name of the form.\n  - form_description: Description of the form.\n\nTable Individuals:\n- Contains information about individual persons.\n- Columns:\n  - individual_id: Unique identifier for each individual.\n  - individual_first_name: First name of the individual.\n  - individual_middle_name: Middle name of the individual.\n  - individual_phone: Phone number of the individual.\n  - individual_email: Email address of the individual.\n  - individual_address: Address of the individual.\n  - individual_last_name: Last name of the individual.\n\nTable Organization_Contact_Individuals:\n- Stores data about contacts between organizations and individuals.\n- Columns:\n  - individual_id: Identifier of the individual contact.\n  - organization_id: Identifier of the organization involved.\n  - date_contact_from: Start date of the contact.\n  - date_contact_to: End date of the contact.\n\nTable Organizations:\n- Contains details about different organizations.\n- Columns:\n  - organization_id: Unique identifier for each organization.\n  - date_formed: Date when the organization was formed.\n  - organization_name: Name of the organization.\n  - uk_vat_number: VAT number of the organization in the UK.\n\nTable Parties:\n- Stores information about different parties.\n- Columns:\n  - party_id: Unique identifier for each party.\n  - payment_method_code: Code representing the payment method used by the party.\n  - party_phone: Phone number of the party.\n  - party_email: Email address of the party.\n\nTable Party_Addresses:\n- Contains details about addresses associated with parties.\n- Columns:\n  - party_id: Identifier of the party.\n  - address_id: Identifier of the address.\n  - date_address_from: Start date of the address association.\n  - address_type_code: Code representing the type of address.\n  - date_address_to: End date of the address association.\n\nTable Party_Forms:\n- Stores information about forms associated with parties.\n- Columns:\n  - party_id: Identifier of the party.\n  - form_id: Identifier of the form.\n  - date_completion_started: Date when form completion started.\n  - form_status_code: Code representing the status of the form.\n  - date_fully_completed: Date when the form was fully completed.\n\nTable Party_Services:\n- Contains data about services booked by parties.\n- Columns:\n  - booking_id: Identifier of the booking.\n  - customer_id: Identifier of the customer (party).\n  - service_id: Identifier of the service booked.\n  - service_datetime: Date and time of the service.\n  - booking_made_date: Date when the booking was made.\n\nTable Services:\n- Stores details about different services.\n- Columns:\n  - service_id: Unique identifier for each service.\n  - service_type_code: Code representing the type of service.\n  - service_name: Name of the service.\n  - service_description: Description of the service.\n\nForeign Keys:\n- Forms.service_id references Services.service_id, linking forms to specific services.\n- Organization_Contact_Individuals.individual_id references Individuals.individual_id, connecting organization contacts to individuals.\n- Organization_Contact_Individuals.organization_id references Organizations.organization_id, establishing a relationship between organization contacts and organizations.\n- Party_Addresses.party_id references Parties.party_id, linking party addresses to parties.\n- Party_Addresses.address_id references Addresses.address_id, connecting party addresses to addresses.\n- Party_Forms.form_id references Forms.form_id, establishing a relationship between party forms and forms.\n- Party_Forms.party_id references Parties.party_id, linking party forms to parties.\n- Party_Services.customer_id references Parties.party_id, connecting party services to customers (parties).\n- Party_Services.service_id references Services.service_id, linking party services to services.",
    "e_learning": "Table Course_Authors_and_Tutors:\n- Contains information about authors and tutors of courses.\n- Columns:\n  - author_id: Unique identifier for each author/tutor.\n  - author_tutor_ATB: Author/Tutor's designation.\n  - login_name: Login name for the author/tutor.\n  - password: Password for the author/tutor.\n  - personal_name: Author/Tutor's personal first name.\n  - middle_name: Author/Tutor's middle name.\n  - family_name: Author/Tutor's family name.\n  - gender_mf: Gender of the author/tutor.\n  - address_line_1: Address of the author/tutor.\n\nTable Courses:\n- Stores details about different courses offered.\n- Columns:\n  - course_id: Unique identifier for each course.\n  - author_id: Identifier of the author/tutor of the course.\n  - subject_id: Identifier of the subject to which the course belongs.\n  - course_name: Name of the course.\n  - course_description: Description of the course.\n\nTable Student_Course_Enrolment:\n- Contains information about student enrollment in courses.\n- Columns:\n  - registration_id: Unique identifier for each enrollment registration.\n  - student_id: Identifier of the student enrolled.\n  - course_id: Identifier of the course in which the student is enrolled.\n  - date_of_enrolment: Date when the student enrolled in the course.\n  - date_of_completion: Date when the student completed the course.\n\nTable Student_Tests_Taken:\n- Stores data about tests taken by students.\n- Columns:\n  - registration_id: Identifier of the enrollment registration for the test.\n  - date_test_taken: Date when the test was taken.\n  - test_result: Result of the test taken by the student.\n\nTable Students:\n- Contains details about students.\n- Columns:\n  - student_id: Unique identifier for each student.\n  - date_of_registration: Date when the student registered.\n  - date_of_latest_logon: Date of the student's latest login.\n  - login_name: Login name for the student.\n  - password: Password for the student.\n  - personal_name: Student's personal first name.\n  - middle_name: Student's middle name.\n  - family_name: Student's family name.\n\nTable Subjects:\n- Stores information about different subjects.\n- Columns:\n  - subject_id: Unique identifier for each subject.\n  - subject_name: Name of the subject.\n\nForeign Keys:\n- Courses.subject_id references Subjects.subject_id, linking courses to specific subjects.\n- Courses.author_id references Course_Authors_and_Tutors.author_id, connecting courses to their respective authors/tutors.\n- Student_Course_Enrolment.student_id references Students.student_id, establishing a relationship between students and course enrollments.\n- Student_Course_Enrolment.course_id references Courses.course_id, linking student enrollments to specific courses.\n- Student_Tests_Taken.registration_id references Student_Course_Enrolment.registration_id, connecting test results to course enrollments.",
    "farm": "Table city:\n- Contains information about different cities.\n- Columns:\n  - City_ID: Unique identifier for each city.\n  - Official_Name: Official name of the city.\n  - Status: Status of the city.\n  - Area_km_2: Area of the city in square kilometers.\n  - Population: Population of the city.\n  - Census_Ranking: Ranking of the city in terms of population based on census data.\n\nTable competition_record:\n- Stores records of competitions related to farms.\n- Columns:\n  - Competition_ID: Unique identifier for each competition.\n  - Farm_ID: Identifier of the farm participating in the competition.\n  - Rank: Rank achieved by the farm in the competition.\n\nTable farm:\n- Contains data about different farms.\n- Columns:\n  - Farm_ID: Unique identifier for each farm.\n  - Year: Year of the farm data.\n  - Total_Horses: Total number of horses on the farm.\n  - Working_Horses: Number of working horses on the farm.\n  - Total_Cattle: Total number of cattle on the farm.\n  - Oxen: Number of oxen on the farm.\n  - Bulls: Number of bulls on the farm.\n  - Cows: Number of cows on the farm.\n  - Pigs: Number of pigs on the farm.\n  - Sheep_and_Goats: Number of sheep and goats on the farm.\n\nTable farm_competition:\n- Stores information about farm competitions.\n- Columns:\n  - Competition_ID: Unique identifier for each competition.\n  - Year: Year of the competition.\n  - Theme: Theme of the competition.\n  - Host_city_ID: Identifier of the city hosting the competition.\n  - Hosts: Details about the hosts of the competition.\n\nForeign Keys:\n- farm_competition.Host_city_ID references city.City_ID, establishing a relationship between farm competitions and cities.\n- competition_record.Farm_ID references farm.Farm_ID, linking competition records to specific farms.\n- competition_record.Competition_ID references farm_competition.Competition_ID, connecting competition records to farm competitions.",
    "film_rank": "Table film:\n- Contains information about different films.\n- Columns:\n  - Film_ID: Unique identifier for each film.\n  - Title: Title of the film.\n  - Studio: Studio producing the film.\n  - Director: Director of the film.\n  - Gross_in_dollar: Gross revenue generated by the film in dollars.\n\nTable film_market_estimation:\n- Stores market estimations related to films.\n- Columns:\n  - Estimation_ID: Unique identifier for each estimation.\n  - Low_Estimate: Low estimate of market performance.\n  - High_Estimate: High estimate of market performance.\n  - Film_ID: Identifier of the film.\n  - Type: Type of market estimation.\n  - Market_ID: Identifier of the market.\n  - Year: Year of the estimation.\n\nTable market:\n- Contains details about different markets.\n- Columns:\n  - Market_ID: Unique identifier for each market.\n  - Country: Country where the market is located.\n  - Number_cities: Number of cities covered by the market.\n\nForeign Keys:\n- film_market_estimation.Market_ID references market.Market_ID, establishing a relationship between film market estimations and markets.\n- film_market_estimation.Film_ID references film.Film_ID, linking film market estimations to specific films.",
    "flight_1": "Table aircraft:\n- Contains information about different aircraft.\n- Columns:\n  - aid: Unique identifier for each aircraft.\n  - name: Name of the aircraft.\n  - distance: Distance covered by the aircraft.\n\nTable certificate:\n- Stores data related to certificates held by employees for specific aircraft.\n- Columns:\n  - eid: Identifier of the employee holding the certificate.\n  - aid: Identifier of the aircraft for which the certificate is held.\n\nTable employee:\n- Contains details about employees.\n- Columns:\n  - eid: Unique identifier for each employee.\n  - name: Name of the employee.\n  - salary: Salary of the employee.\n\nTable flight:\n- Stores information about flights.\n- Columns:\n  - flno: Flight number.\n  - origin: Origin of the flight.\n  - destination: Destination of the flight.\n  - distance: Distance of the flight.\n  - departure_date: Date of departure for the flight.\n  - arrival_date: Date of arrival for the flight.\n  - price: Price of the flight.\n  - aid: Identifier of the aircraft used for the flight.\n\nForeign Keys:\n- flight.aid references aircraft.aid, establishing a relationship between flights and aircraft.\n- certificate.aid references aircraft.aid, linking certificates to specific aircraft.\n- certificate.eid references employee.eid, connecting certificates to employees.",
    "flight_2": "Table airlines:\n- Contains information about different airlines.\n- Columns:\n  - uid: Unique identifier for each airline.\n  - Airline: Name of the airline.\n  - Abbreviation: Abbreviation of the airline name.\n  - Country: Country where the airline is based.\n\nTable airports:\n- Stores data related to various airports.\n- Columns:\n  - City: City where the airport is located.\n  - AirportCode: Code assigned to the airport.\n  - AirportName: Name of the airport.\n  - Country: Country where the airport is situated.\n  - CountryAbbrev: Abbreviation of the country where the airport is located.\n\nTable flights:\n- Contains details about flights operated by airlines.\n- Columns:\n  - Airline: Name of the airline operating the flight.\n  - FlightNo: Flight number assigned to the flight.\n  - SourceAirport: Code of the airport from where the flight originates.\n  - DestAirport: Code of the airport where the flight is destined.\n\nForeign Keys:\n- flights.DestAirport references airports.AirportCode, establishing a relationship between flights and destination airports.\n- flights.SourceAirport references airports.AirportCode, linking flights to the source airports.",
    "flight_4": "Table airlines:\n- Contains information about different airlines.\n- Columns:\n  - alid: Unique identifier for each airline.\n  - name: Name of the airline.\n  - iata: IATA code of the airline.\n  - icao: ICAO code of the airline.\n  - callsign: Callsign of the airline.\n  - country: Country where the airline is based.\n  - active: Indicates if the airline is currently active.\n\nTable airports:\n- Stores data related to various airports.\n- Columns:\n  - apid: Unique identifier for each airport.\n  - name: Name of the airport.\n  - city: City where the airport is located.\n  - country: Country where the airport is situated.\n  - x: X-coordinate of the airport location.\n  - y: Y-coordinate of the airport location.\n  - elevation: Elevation of the airport.\n  - iata: IATA code of the airport.\n  - icao: ICAO code of the airport.\n\nTable routes:\n- Contains information about flight routes between airports.\n- Columns:\n  - rid: Unique identifier for each route.\n  - dst_apid: Identifier of the destination airport.\n  - dst_ap: Name of the destination airport.\n  - src_apid: Identifier of the source airport.\n  - src_ap: Name of the source airport.\n  - alid: Identifier of the airline operating the route.\n  - airline: Name of the airline operating the route.\n  - codeshare: Indicates if the route is a codeshare flight.\n\nForeign Keys:\n- routes.alid references airlines.alid, establishing a relationship between routes and airlines.\n- routes.src_apid references airports.apid, linking routes to the source airport.\n- routes.dst_apid references airports.apid, linking routes to the destination airport.",
    "flight_company": "Table airport:\n- Contains information about airports.\n- Columns:\n  - id: Unique identifier for each airport.\n  - City: City where the airport is located.\n  - Country: Country where the airport is situated.\n  - IATA: International Air Transport Association code for the airport.\n  - ICAO: International Civil Aviation Organization code for the airport.\n  - name: Name of the airport.\n\nTable flight:\n- Stores data related to flights.\n- Columns:\n  - id: Unique identifier for each flight.\n  - Vehicle_Flight_number: Flight number of the vehicle.\n  - Date: Date of the flight.\n  - Pilot: Pilot of the flight.\n  - Velocity: Velocity of the flight.\n  - Altitude: Altitude of the flight.\n  - airport_id: Identifier of the airport associated with the flight.\n  - company_id: Identifier of the operating company for the flight.\n\nTable operate_company:\n- Contains details about operating companies.\n- Columns:\n  - id: Unique identifier for each operating company.\n  - name: Name of the company.\n  - Type: Type of the company.\n  - Principal_activities: Main activities of the company.\n  - Incorporated_in: Location where the company is incorporated.\n  - Group_Equity_Shareholding: Information about equity shareholding within the company.\n\nForeign Keys:\n- flight.company_id references operate_company.id, linking flights to their operating companies.\n- flight.airport_id references airport.id, establishing a relationship between flights and airports.",
    "formula_1": "Table circuits:\n- Contains information about racing circuits.\n- Columns:\n  - circuitId: Unique identifier for each circuit.\n  - circuitRef: Reference code for the circuit.\n  - name: Name of the circuit.\n  - location: Location of the circuit.\n  - country: Country where the circuit is located.\n  - lat: Latitude coordinate of the circuit.\n  - lng: Longitude coordinate of the circuit.\n  - alt: Altitude of the circuit.\n  - url: URL link for more information about the circuit.\n\nTable constructorResults:\n- Stores results of constructors in races.\n- Columns:\n  - constructorResultsId: Unique identifier for each constructor result.\n  - raceId: Identifier of the race.\n  - constructorId: Identifier of the constructor.\n  - points: Points earned by the constructor in the race.\n  - status: Status of the constructor in the race.\n\nTable constructorStandings:\n- Contains standings of constructors in races.\n- Columns:\n  - constructorStandingsId: Unique identifier for each constructor standing.\n  - raceId: Identifier of the race.\n  - constructorId: Identifier of the constructor.\n  - points: Total points of the constructor.\n  - position: Position of the constructor in the standings.\n  - positionText: Textual representation of the position.\n  - wins: Number of wins by the constructor.\n\nTable constructors:\n- Stores information about racing constructors.\n- Columns:\n  - constructorId: Unique identifier for each constructor.\n  - constructorRef: Reference code for the constructor.\n  - name: Name of the constructor.\n  - nationality: Nationality of the constructor.\n  - url: URL link for more information about the constructor.\n\nTable driverStandings:\n- Contains standings of drivers in races.\n- Columns:\n  - driverStandingsId: Unique identifier for each driver standing.\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - points: Total points of the driver.\n  - position: Position of the driver in the standings.\n  - positionText: Textual representation of the position.\n  - wins: Number of wins by the driver.\n\nTable drivers:\n- Contains information about racing drivers.\n- Columns:\n  - driverId: Unique identifier for each driver.\n  - driverRef: Reference code for the driver.\n  - number: Racing number of the driver.\n  - code: Code representing the driver.\n  - forename: First name of the driver.\n  - surname: Last name of the driver.\n  - dob: Date of birth of the driver.\n  - nationality: Nationality of the driver.\n  - url: URL link for more information about the driver.\n\nTable lapTimes:\n- Stores lap time data for drivers in races.\n- Columns:\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - lap: Lap number.\n  - position: Position of the driver in the lap.\n  - time: Lap time.\n  - milliseconds: Lap time in milliseconds.\n\nTable pitStops:\n- Contains pit stop data for drivers in races.\n- Columns:\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - stop: Pit stop number.\n  - lap: Lap number of the pit stop.\n  - time: Time of the pit stop.\n  - duration: Duration of the pit stop.\n  - milliseconds: Duration of the pit stop in milliseconds.\n\nTable qualifying:\n- Stores qualifying data for drivers in races.\n- Columns:\n  - qualifyId: Unique identifier for each qualifying record.\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - constructorId: Identifier of the constructor.\n  - number: Qualifying number.\n  - position: Qualifying position.\n  - q1: Qualifying time for Q1 session.\n  - q2: Qualifying time for Q2 session.\n  - q3: Qualifying time for Q3 session.\n\nTable races:\n- Contains information about racing events.\n- Columns:\n  - raceId: Unique identifier for each race.\n  - year: Year of the race.\n  - round: Round number of the race.\n  - circuitId: Identifier of the circuit where the race took place.\n  - name: Name of the race.\n  - date: Date of the race.\n  - time: Time of the race.\n  - url: URL link for more information about the race.\n\nTable results:\n- Stores results of drivers in races.\n- Columns:\n  - resultId: Unique identifier for each race result.\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - constructorId: Identifier of the constructor.\n  - number: Racing number of the driver.\n  - grid: Starting grid position of the driver.\n  - position: Final position of the driver.\n  - positionText: Textual representation of the position.\n  - positionOrder: Order of the position.\n  - points: Points earned by the driver.\n  - laps: Number of laps completed.\n  - time: Total race time.\n  - milliseconds: Total race time in milliseconds.\n  - fastestLap: Fastest lap number.\n  - rank: Rank of the driver.\n  - fastestLapTime: Time of the fastest lap.\n  - fastestLapSpeed: Speed of the fastest lap.\n  - statusId: Identifier of the status.\n\nTable seasons:\n- Contains information about racing seasons.\n- Columns:\n  - year: Year of the season.\n  - url: URL link for more information about the season.\n\nTable status:\n- Stores status information for races.\n- Columns:\n  - statusId: Unique identifier for each status.\n  - status: Status description.\n\nForeign Keys:\n- races.circuitId references circuits.circuitId, linking races to specific circuits.\n- constructorStandings.raceId references races.raceId, linking constructor standings to races.\n- constructorStandings.constructorId references constructors.constructorId, connecting constructor standings to constructors.\n- results.driverId references drivers.driverId, linking results to drivers.\n- results.raceId references races.raceId, connecting results to races.\n- results.constructorId references constructors.constructorId, establishing a relationship between results and constructors.\n- driverStandings.driverId references drivers.driverId, linking driver standings to drivers.\n- driverStandings.raceId references races.raceId, connecting driver standings to races.\n- constructorResults.raceId references races.raceId, linking constructor results to races.\n- constructorResults.constructorId references constructors.constructorId, establishing a relationship between constructor results and constructors.\n- qualifying.driverId references drivers.driverId, linking qualifying data to drivers.\n- qualifying.raceId references races.raceId, connecting qualifying data to races.\n- qualifying.constructorId references constructors.constructorId, establishing a relationship between qualifying data and constructors.\n- pitStops.driverId references drivers.driverId, linking pit stop data to drivers.\n- pitStops.raceId references races.raceId, connecting pit stop data to races.\n- lapTimes.driverId references drivers.driverId, linking lap time data to drivers.\n- lapTimes.raceId references races.raceId, connecting lap time data to races.",
    "game_1": "Table Plays_Games:\n- Contains data related to students playing games.\n- Columns:\n  - StuID: Identifier of the student playing the game.\n  - GameID: Identifier of the game being played.\n  - Hours_Played: Number of hours the student played the game.\n\nTable SportsInfo:\n- Stores information about sports activities of students.\n- Columns:\n  - StuID: Identifier of the student involved in sports.\n  - SportName: Name of the sport the student participates in.\n  - HoursPerWeek: Number of hours per week the student dedicates to the sport.\n  - GamesPlayed: Number of games played by the student.\n  - OnScholarship: Indicates if the student is on a sports scholarship.\n\nTable Student:\n- Contains details about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Field of study of the student.\n  - Advisor: Advisor assigned to the student.\n  - city_code: Code representing the city where the student resides.\n\nTable Video_Games:\n- Stores information about different video games.\n- Columns:\n  - GameID: Unique identifier for each video game.\n  - GName: Name of the video game.\n  - GType: Type or genre of the video game.\n\nForeign Keys:\n- Plays_Games.StuID references Student.StuID, establishing a relationship between students and games they play.\n- Plays_Games.GameID references Video_Games.GameID, linking games played by students to specific video games.\n- SportsInfo.StuID references Student.StuID, connecting sports information to respective students.",
    "game_injury": "Table game:\n- Contains information about different games.\n- Columns:\n  - stadium_id: Identifier of the stadium where the game took place.\n  - id: Unique identifier for each game.\n  - Season: Season in which the game was played.\n  - Date: Date of the game.\n  - Home_team: Name of the home team.\n  - Away_team: Name of the away team.\n  - Score: Score of the game.\n  - Competition: Type of competition the game was part of.\n\nTable injury_accident:\n- Stores data related to injuries or accidents during games.\n- Columns:\n  - game_id: Identifier of the game where the injury or accident occurred.\n  - id: Unique identifier for each injury or accident record.\n  - Player: Name of the player involved in the injury or accident.\n  - Injury: Description of the injury.\n  - Number_of_matches: Number of matches the player missed due to the injury.\n  - Source: Source of information about the injury or accident.\n\nTable stadium:\n- Contains details about different stadiums.\n- Columns:\n  - id: Unique identifier for each stadium.\n  - name: Name of the stadium.\n  - Home_Games: Number of home games played at the stadium.\n  - Average_Attendance: Average attendance at the stadium.\n  - Total_Attendance: Total attendance at the stadium.\n  - Capacity_Percentage: Percentage of stadium capacity utilized.\n\nForeign Keys:\n- game.stadium_id references stadium.id, linking games to the respective stadiums.\n- injury_accident.game_id references game.id, establishing a relationship between injury records and the games they occurred in.",
    "gas_company": "Table company:\n- Contains information about different companies.\n- Columns:\n  - Company_ID: Unique identifier for each company.\n  - Rank: Ranking of the company.\n  - Company: Name of the company.\n  - Headquarters: Location of the company's headquarters.\n  - Main_Industry: Primary industry of the company.\n  - Sales_billion: Sales amount in billion for the company.\n  - Profits_billion: Profits amount in billion for the company.\n  - Assets_billion: Assets amount in billion for the company.\n  - Market_Value: Market value of the company.\n\nTable gas_station:\n- Stores data related to gas stations.\n- Columns:\n  - Station_ID: Unique identifier for each gas station.\n  - Open_Year: Year when the gas station was opened.\n  - Location: Location of the gas station.\n  - Manager_Name: Name of the manager of the gas station.\n  - Vice_Manager_Name: Name of the vice manager of the gas station.\n  - Representative_Name: Name of the representative of the gas station.\n\nTable station_company:\n- Represents the relationship between gas stations and companies.\n- Columns:\n  - Station_ID: Identifier of the gas station.\n  - Company_ID: Identifier of the company associated with the gas station.\n  - Rank_of_the_Year: Rank of the company for the specific year.\n\nForeign Keys:\n- station_company.Company_ID references company.Company_ID, linking gas stations to specific companies.\n- station_company.Station_ID references gas_station.Station_ID, establishing a relationship between gas stations and the station_company table.",
    "geo": "Table border_info:\n- Contains information about borders between states.\n- Columns:\n  - state_name: Name of the state.\n  - border: Name of the state that shares a border with the state specified.\n\nTable city:\n- Stores data related to cities.\n- Columns:\n  - city_name: Name of the city.\n  - population: Population of the city.\n  - country_name: Name of the country where the city is located.\n  - state_name: Name of the state where the city is situated.\n\nTable highlow:\n- Contains data about the highest and lowest points in states.\n- Columns:\n  - state_name: Name of the state.\n  - highest_elevation: Highest elevation point in the state.\n  - lowest_point: Lowest point in the state.\n  - highest_point: Name of the location with the highest elevation.\n  - lowest_elevation: Elevation of the lowest point.\n\nTable lake:\n- Stores information about lakes.\n- Columns:\n  - lake_name: Name of the lake.\n  - area: Area covered by the lake.\n  - country_name: Name of the country where the lake is located.\n  - state_name: Name of the state where the lake is situated.\n\nTable mountain:\n- Contains details about mountains.\n- Columns:\n  - mountain_name: Name of the mountain.\n  - mountain_altitude: Altitude of the mountain.\n  - country_name: Name of the country where the mountain is located.\n  - state_name: Name of the state where the mountain is situated.\n\nTable river:\n- Stores data related to rivers.\n- Columns:\n  - river_name: Name of the river.\n  - length: Length of the river.\n  - country_name: Name of the country where the river is located.\n  - traverse: Name of the state through which the river traverses.\n\nTable state:\n- Contains information about states.\n- Columns:\n  - state_name: Name of the state.\n  - population: Population of the state.\n  - area: Area of the state.\n  - country_name: Name of the country where the state is located.\n  - capital: Capital city of the state.\n  - density: Population density of the state.\n\nForeign Keys:\n- city.state_name references state.state_name, establishing a relationship between cities and states.\n- border_info.border references state.state_name, linking border information to specific states.\n- border_info.state_name references state.state_name, connecting border information to states.\n- highlow.state_name references state.state_name, linking high and low points data to specific states.\n- mountain.state_name references state.state_name, establishing a relationship between mountains and states.\n- river.traverse references state.state_name, connecting rivers to the states they traverse through.",
    "gymnast": "Table gymnast:\n- Contains information about gymnasts and their performance points in different exercises.\n- Columns:\n  - Gymnast_ID: Unique identifier for each gymnast.\n  - Floor_Exercise_Points: Points scored by the gymnast in floor exercise.\n  - Pommel_Horse_Points: Points scored by the gymnast in pommel horse exercise.\n  - Rings_Points: Points scored by the gymnast in rings exercise.\n  - Vault_Points: Points scored by the gymnast in vault exercise.\n  - Parallel_Bars_Points: Points scored by the gymnast in parallel bars exercise.\n  - Horizontal_Bar_Points: Points scored by the gymnast in horizontal bar exercise.\n  - Total_Points: Total points scored by the gymnast across all exercises.\n\nTable people:\n- Stores general information about individuals, including gymnasts.\n- Columns:\n  - People_ID: Unique identifier for each individual.\n  - Name: Name of the person.\n  - Age: Age of the person.\n  - Height: Height of the person.\n  - Hometown: Hometown of the person.\n\nForeign Keys:\n- gymnast.Gymnast_ID references people.People_ID, establishing a relationship between gymnasts and individuals in the people table.",
    "hospital_1": "Table Affiliated_With:\n- Contains information about the affiliation of physicians with departments.\n- Columns:\n  - Physician: Identifier of the physician.\n  - Department: Identifier of the department.\n  - PrimaryAffiliation: Indicates if the affiliation is primary.\n\nTable Appointment:\n- Stores details about appointments between patients, physicians, and nurses.\n- Columns:\n  - AppointmentID: Unique identifier for each appointment.\n  - Patient: Identifier of the patient.\n  - PrepNurse: Identifier of the nurse preparing for the appointment.\n  - Physician: Identifier of the physician conducting the appointment.\n  - Start: Start time of the appointment.\n  - End: End time of the appointment.\n  - ExaminationRoom: Room where the examination takes place.\n\nTable Block:\n- Contains information about blocks within a facility.\n- Columns:\n  - BlockFloor: Floor number of the block.\n  - BlockCode: Code identifying the block.\n\nTable Department:\n- Stores data related to different departments.\n- Columns:\n  - DepartmentID: Unique identifier for each department.\n  - Name: Name of the department.\n  - Head: Identifier of the head physician of the department.\n\nTable Medication:\n- Contains details about medications.\n- Columns:\n  - Code: Unique identifier for each medication.\n  - Name: Name of the medication.\n  - Brand: Brand of the medication.\n  - Description: Description of the medication.\n\nTable Nurse:\n- Contains information about nurses.\n- Columns:\n  - EmployeeID: Unique identifier for each nurse.\n  - Name: Name of the nurse.\n  - Position: Position of the nurse.\n  - Registered: Indicates if the nurse is registered.\n  - SSN: Social Security Number of the nurse.\n\nTable On_Call:\n- Stores data about nurses on call.\n- Columns:\n  - Nurse: Identifier of the nurse on call.\n  - BlockFloor: Floor number of the block.\n  - BlockCode: Code identifying the block.\n  - OnCallStart: Start time of the on-call shift.\n  - OnCallEnd: End time of the on-call shift.\n\nTable Patient:\n- Contains details about patients.\n- Columns:\n  - SSN: Social Security Number of the patient.\n  - Name: Name of the patient.\n  - Address: Address of the patient.\n  - Phone: Phone number of the patient.\n  - InsuranceID: Identifier of the patient's insurance.\n  - PCP: Identifier of the patient's primary care physician.\n\nTable Physician:\n- Stores information about physicians.\n- Columns:\n  - EmployeeID: Unique identifier for each physician.\n  - Name: Name of the physician.\n  - Position: Position of the physician.\n  - SSN: Social Security Number of the physician.\n\nTable Prescribes:\n- Contains data about physicians prescribing medications to patients during appointments.\n- Columns:\n  - Physician: Identifier of the prescribing physician.\n  - Patient: Identifier of the patient receiving the prescription.\n  - Medication: Identifier of the prescribed medication.\n  - Date: Date of the prescription.\n  - Appointment: Identifier of the appointment.\n  - Dose: Dosage of the medication.\n\nTable Procedures:\n- Stores information about medical procedures.\n- Columns:\n  - Code: Unique identifier for each procedure.\n  - Name: Name of the procedure.\n  - Cost: Cost of the procedure.\n\nTable Room:\n- Contains details about rooms within a facility.\n- Columns:\n  - RoomNumber: Number identifying the room.\n  - RoomType: Type of the room.\n  - BlockFloor: Floor number of the block where the room is located.\n  - BlockCode: Code identifying the block.\n  - Unavailable: Indicates if the room is unavailable.\n\nTable Stay:\n- Stores data about patient stays in rooms.\n- Columns:\n  - StayID: Unique identifier for each stay.\n  - Patient: Identifier of the patient staying.\n  - Room: Identifier of the room where the patient stays.\n  - StayStart: Start date of the stay.\n  - StayEnd: End date of the stay.\n\nTable Trained_In:\n- Contains information about physicians trained in specific treatments.\n- Columns:\n  - Physician: Identifier of the trained physician.\n  - Treatment: Code identifying the treatment.\n  - CertificationDate: Date of certification.\n  - CertificationExpires: Date when the certification expires.\n\nTable Undergoes:\n- Stores data about patients undergoing medical procedures.\n- Columns:\n  - Patient: Identifier of the patient undergoing the procedure.\n  - Procedures: Code identifying the procedure.\n  - Stay: Identifier of the stay during the procedure.\n  - DateUndergoes: Date when the procedure is undergone.\n  - Physician: Identifier of the physician performing the procedure.\n  - AssistingNurse: Identifier of the nurse assisting in the procedure.\n\nForeign Keys:\n- Department.Head references Physician.EmployeeID, linking department heads to physicians.\n- Affiliated_With.Department references Department.DepartmentID, establishing a relationship between affiliations and departments.\n- Affiliated_With.Physician references Physician.EmployeeID, connecting affiliations to physicians.\n- Trained_In.Treatment references Procedures.Code, linking trained treatments to procedures.\n- Trained_In.Physician references Physician.EmployeeID, establishing a relationship between trained physicians and physicians.\n- Patient.PCP references Physician.EmployeeID, connecting patients to their primary care physicians.\n- Appointment.Physician references Physician.EmployeeID, linking appointments to physicians.\n- Appointment.PrepNurse references Nurse.EmployeeID, establishing a relationship between appointments and preparing nurses.\n- Appointment.Patient references Patient.SSN, connecting appointments to patients.\n- Prescribes.Appointment references Appointment.AppointmentID, linking prescriptions to appointments.\n- Prescribes.Medication references Medication.Code, connecting prescriptions to medications.\n- Prescribes.Patient references Patient.SSN, establishing a relationship between prescriptions and patients.\n- Prescribes.Physician references Physician.EmployeeID, linking prescriptions to physicians.\n- Room.BlockFloor references Block.BlockFloor, connecting rooms to block floors.\n- Room.BlockCode references Block.BlockCode, establishing a relationship between rooms and blocks.\n- On_Call.BlockFloor references Block.BlockFloor, linking on-call shifts to block floors.\n- On_Call.BlockCode references Block.BlockCode, connecting on-call shifts to block codes.\n- On_Call.Nurse references Nurse.EmployeeID, establishing a relationship between on-call shifts and nurses.\n- Stay.Room references Room.RoomNumber, linking stays to rooms.\n- Stay.Patient references Patient.SSN, connecting stays to patients.\n- Undergoes.AssistingNurse references Nurse.EmployeeID, establishing a relationship between procedures and assisting nurses.\n- Undergoes.Physician references Physician.EmployeeID, linking procedures to performing physicians.\n- Undergoes.Stay references Stay.StayID, connecting procedures to stays.\n- Undergoes.Procedures references Procedures.Code, establishing a relationship between procedures and medical procedures.\n- Undergoes.Patient references Patient.SSN, linking procedures to patients.",
    "hr_1": "Table countries:\n- Contains information about different countries.\n- Columns:\n  - COUNTRY_ID: Unique identifier for each country.\n  - COUNTRY_NAME: Name of the country.\n  - REGION_ID: Foreign key referencing the id of the region in the regions table.\n\nTable departments:\n- Stores data related to different departments within an organization.\n- Columns:\n  - DEPARTMENT_ID: Unique identifier for each department.\n  - DEPARTMENT_NAME: Name of the department.\n  - MANAGER_ID: Identifier of the manager of the department.\n  - LOCATION_ID: Identifier of the location where the department is situated.\n\nTable employees:\n- Contains details about employees working in the organization.\n- Columns:\n  - EMPLOYEE_ID: Unique identifier for each employee.\n  - FIRST_NAME: First name of the employee.\n  - LAST_NAME: Last name of the employee.\n  - EMAIL: Email address of the employee.\n  - PHONE_NUMBER: Phone number of the employee.\n  - HIRE_DATE: Date when the employee was hired.\n  - JOB_ID: Identifier of the job role of the employee.\n  - SALARY: Salary of the employee.\n  - COMMISSION_PCT: Commission percentage for the employee.\n  - MANAGER_ID: Identifier of the manager of the employee.\n  - DEPARTMENT_ID: Identifier of the department to which the employee belongs.\n\nTable job_history:\n- Stores historical data of job changes for employees.\n- Columns:\n  - EMPLOYEE_ID: Identifier of the employee.\n  - START_DATE: Start date of the job role.\n  - END_DATE: End date of the job role.\n  - JOB_ID: Identifier of the job role.\n  - DEPARTMENT_ID: Identifier of the department during the job role.\n\nTable jobs:\n- Contains information about different job roles.\n- Columns:\n  - JOB_ID: Unique identifier for each job role.\n  - JOB_TITLE: Title of the job role.\n  - MIN_SALARY: Minimum salary for the job role.\n  - MAX_SALARY: Maximum salary for the job role.\n\nTable locations:\n- Stores details about different locations.\n- Columns:\n  - LOCATION_ID: Unique identifier for each location.\n  - STREET_ADDRESS: Street address of the location.\n  - POSTAL_CODE: Postal code of the location.\n  - CITY: City where the location is situated.\n  - STATE_PROVINCE: State or province of the location.\n  - COUNTRY_ID: Foreign key referencing the id of the country in the countries table.\n\nTable regions:\n- Contains information about different regions.\n- Columns:\n  - REGION_ID: Unique identifier for each region.\n  - REGION_NAME: Name of the region.\n\nForeign Keys:\n- countries.REGION_ID references regions.REGION_ID, establishing a relationship between countries and regions.\n- employees.JOB_ID references jobs.JOB_ID, linking employees to specific job roles.\n- employees.DEPARTMENT_ID references departments.DEPARTMENT_ID, connecting employees to their respective departments.\n- job_history.JOB_ID references jobs.JOB_ID, linking job history to specific job roles.\n- job_history.DEPARTMENT_ID references departments.DEPARTMENT_ID, connecting job history to departments.\n- job_history.EMPLOYEE_ID references employees.EMPLOYEE_ID, establishing a relationship between job history and employees.\n- locations.COUNTRY_ID references countries.COUNTRY_ID, linking locations to specific countries.",
    "icfp_1": "Table Authors:\n- Contains information about authors of papers.\n- Columns:\n  - authID: Unique identifier for each author.\n  - lname: Last name of the author.\n  - fname: First name of the author.\n\nTable Authorship:\n- Represents the relationship between authors, institutions, and papers.\n- Columns:\n  - authID: Identifier of the author.\n  - instID: Identifier of the institution to which the author is affiliated.\n  - paperID: Identifier of the paper.\n  - authOrder: Order of authorship for the paper.\n\nTable Inst:\n- Stores details about institutions.\n- Columns:\n  - instID: Unique identifier for each institution.\n  - name: Name of the institution.\n  - country: Country where the institution is located.\n\nTable Papers:\n- Contains information about papers.\n- Columns:\n  - paperID: Unique identifier for each paper.\n  - title: Title of the paper.\n\nForeign Keys:\n- Authorship.paperID references Papers.paperID, establishing a relationship between authorship and papers.\n- Authorship.instID references Inst.instID, linking authorship to specific institutions.\n- Authorship.authID references Authors.authID, connecting authorship to authors.",
    "imdb": "Table actor:\n- Contains information about actors.\n- Columns:\n  - aid: Unique identifier for each actor.\n  - gender: Gender of the actor.\n  - name: Name of the actor.\n  - nationality: Nationality of the actor.\n  - birth_city: City where the actor was born.\n  - birth_year: Year of birth of the actor.\n\nTable cast:\n- Stores data about the cast members in movies or TV series.\n- Columns:\n  - id: Unique identifier for each cast entry.\n  - msid: Identifier of the movie or TV series.\n  - aid: Identifier of the actor in the cast.\n  - role: Role played by the actor in the movie or TV series.\n\nTable classification:\n- Contains information about the classification of movies or TV series.\n- Columns:\n  - id: Unique identifier for each classification entry.\n  - msid: Identifier of the movie or TV series.\n  - gid: Identifier of the genre of the movie or TV series.\n\nTable company:\n- Stores details about production companies.\n- Columns:\n  - id: Unique identifier for each company.\n  - name: Name of the company.\n  - country_code: Code representing the country where the company is located.\n\nTable copyright:\n- Contains copyright information related to movies or TV series.\n- Columns:\n  - id: Unique identifier for each copyright entry.\n  - msid: Identifier of the movie or TV series.\n  - cid: Copyright identifier.\n\nTable directed_by:\n- Stores data about the directors of movies or TV series.\n- Columns:\n  - id: Unique identifier for each director entry.\n  - msid: Identifier of the movie or TV series.\n  - did: Identifier of the director.\n\nTable director:\n- Contains information about directors.\n- Columns:\n  - did: Unique identifier for each director.\n  - gender: Gender of the director.\n  - name: Name of the director.\n  - nationality: Nationality of the director.\n  - birth_city: City where the director was born.\n  - birth_year: Year of birth of the director.\n\nTable genre:\n- Stores different genres of movies or TV series.\n- Columns:\n  - gid: Unique identifier for each genre.\n  - genre: Genre of the movie or TV series.\n\nTable keyword:\n- Contains keywords related to movies or TV series.\n- Columns:\n  - id: Unique identifier for each keyword.\n  - keyword: Keyword associated with the movie or TV series.\n\nTable made_by:\n- Represents the relationship between movies or TV series and producers.\n- Columns:\n  - id: Unique identifier for each entry.\n  - msid: Identifier of the movie or TV series.\n  - pid: Identifier of the producer.\n\nTable movie:\n- Contains details about movies.\n- Columns:\n  - mid: Unique identifier for each movie.\n  - title: Title of the movie.\n  - release_year: Year of release of the movie.\n  - title_aka: Alternative title of the movie.\n  - budget: Budget of the movie.\n\nTable producer:\n- Stores information about producers.\n- Columns:\n  - pid: Unique identifier for each producer.\n  - gender: Gender of the producer.\n  - name: Name of the producer.\n  - nationality: Nationality of the producer.\n  - birth_city: City where the producer was born.\n  - birth_year: Year of birth of the producer.\n\nTable tags:\n- Contains tags associated with movies or TV series.\n- Columns:\n  - id: Unique identifier for each tag.\n  - msid: Identifier of the movie or TV series.\n  - kid: Tag identifier.\n\nTable tv_series:\n- Stores details about TV series.\n- Columns:\n  - sid: Unique identifier for each TV series.\n  - title: Title of the TV series.\n  - release_year: Year of release of the TV series.\n  - num_of_seasons: Number of seasons in the TV series.\n  - num_of_episodes: Number of episodes in the TV series.\n  - title_aka: Alternative title of the TV series.\n  - budget: Budget of the TV series.\n\nTable writer:\n- Contains information about writers.\n- Columns:\n  - wid: Unique identifier for each writer.\n  - gender: Gender of the writer.\n  - name: Name of the writer.\n  - nationality: Nationality of the writer.\n  - num_of_episodes: Number of episodes written by the writer.\n  - birth_city: City where the writer was born.\n  - birth_year: Year of birth of the writer.\n\nTable written_by:\n- Represents the relationship between movies or TV series and writers.\n- Columns:\n  - id: Unique identifier for each entry.\n  - msid: Identifier of the movie or TV series.\n  - wid: Identifier of the writer.\n\nForeign Keys:\n- Various foreign key relationships exist between different tables to establish connections and maintain data integrity.",
    "inn_1": "Table Reservations:\n- Contains information about reservations made for rooms.\n- Columns:\n  - Code: Unique reservation code.\n  - Room: Identifier of the room reserved.\n  - CheckIn: Date of check-in for the reservation.\n  - CheckOut: Date of check-out for the reservation.\n  - Rate: Rate of the reservation.\n  - LastName: Last name of the guest making the reservation.\n  - FirstName: First name of the guest making the reservation.\n  - Adults: Number of adults included in the reservation.\n  - Kids: Number of kids included in the reservation.\n\nTable Rooms:\n- Stores details about different rooms available for reservation.\n- Columns:\n  - RoomId: Unique identifier for each room.\n  - roomName: Name of the room.\n  - beds: Number of beds in the room.\n  - bedType: Type of bed in the room.\n  - maxOccupancy: Maximum occupancy allowed in the room.\n  - basePrice: Base price of the room.\n  - decor: Decor style of the room.\n\nForeign Keys:\n- Reservations.Room references Rooms.RoomId, establishing a relationship between reservations and rooms based on the room identifier.",
    "insurance_and_eClaims": "Table Claim_Headers:\n- Contains information about claim headers in the system.\n- Columns:\n  - Claim_Header_ID: Unique identifier for each claim header.\n  - Claim_Status_Code: Code representing the status of the claim.\n  - Claim_Type_Code: Code indicating the type of claim.\n  - Policy_ID: Identifier of the policy associated with the claim.\n  - Date_of_Claim: Date when the claim was made.\n  - Date_of_Settlement: Date when the claim was settled.\n  - Amount_Claimed: Total amount claimed in the claim.\n  - Amount_Paid: Total amount paid for the claim.\n\nTable Claims_Documents:\n- Stores details about documents related to claims.\n- Columns:\n  - Claim_ID: Identifier of the claim associated with the document.\n  - Document_Type_Code: Code representing the type of document.\n  - Created_by_Staff_ID: Identifier of the staff member who created the document.\n  - Created_Date: Date when the document was created.\n\nTable Claims_Processing:\n- Contains data related to the processing of claims.\n- Columns:\n  - Claim_Processing_ID: Unique identifier for each claim processing entry.\n  - Claim_ID: Identifier of the claim being processed.\n  - Claim_Outcome_Code: Code indicating the outcome of the claim processing.\n  - Claim_Stage_ID: Identifier of the stage of claim processing.\n  - Staff_ID: Identifier of the staff member handling the claim processing.\n\nTable Claims_Processing_Stages:\n- Stores information about different stages in the claim processing workflow.\n- Columns:\n  - Claim_Stage_ID: Unique identifier for each claim processing stage.\n  - Next_Claim_Stage_ID: Identifier of the next stage in the claim processing workflow.\n  - Claim_Status_Name: Name of the claim status associated with the stage.\n  - Claim_Status_Description: Description of the claim status.\n\nTable Customers:\n- Contains details about customers who have policies and claims.\n- Columns:\n  - Customer_ID: Unique identifier for each customer.\n  - Customer_Details: Additional details about the customer.\n\nTable Policies:\n- Stores information about insurance policies.\n- Columns:\n  - Policy_ID: Unique identifier for each policy.\n  - Customer_ID: Identifier of the customer who owns the policy.\n  - Policy_Type_Code: Code representing the type of policy.\n  - Start_Date: Start date of the policy.\n  - End_Date: End date of the policy.\n\nTable Staff:\n- Contains details about staff members involved in claim processing.\n- Columns:\n  - Staff_ID: Unique identifier for each staff member.\n  - Staff_Details: Additional details about the staff member.\n\nForeign Keys:\n- Policies.Customer_ID references Customers.Customer_ID, establishing a relationship between policies and customers.\n- Claim_Headers.Policy_ID references Policies.Policy_ID, linking claim headers to policies.\n- Claims_Documents.Created_by_Staff_ID references Staff.Staff_ID, connecting documents to the staff member who created them.\n- Claims_Documents.Claim_ID references Claim_Headers.Claim_Header_ID, linking documents to the corresponding claim header.\n- Claims_Processing.Staff_ID references Staff.Staff_ID, establishing a relationship between claim processing and staff members.\n- Claims_Processing.Claim_ID references Claim_Headers.Claim_Header_ID, linking claim processing to the associated claim header.",
    "insurance_fnol": "Table Available_Policies:\n- Contains information about available insurance policies.\n- Columns:\n  - Policy_ID: Unique identifier for each policy.\n  - policy_type_code: Code representing the type of policy.\n  - Customer_Phone: Phone number of the customer associated with the policy.\n\nTable Claims:\n- Stores data related to insurance claims.\n- Columns:\n  - Claim_ID: Unique identifier for each claim.\n  - FNOL_ID: Identifier of the first notification of loss associated with the claim.\n  - Effective_Date: Date when the claim became effective.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - Customer_ID: Unique identifier for each customer.\n  - Customer_name: Name of the customer.\n\nTable Customers_Policies:\n- Stores information about the relationship between customers and policies.\n- Columns:\n  - Customer_ID: Identifier of the customer.\n  - Policy_ID: Identifier of the policy.\n  - Date_Opened: Date when the policy was opened for the customer.\n  - Date_Closed: Date when the policy was closed for the customer.\n\nTable First_Notification_of_Loss:\n- Contains data about the first notification of loss for insurance claims.\n- Columns:\n  - FNOL_ID: Unique identifier for each first notification of loss.\n  - Customer_ID: Identifier of the customer associated with the notification.\n  - Policy_ID: Identifier of the policy associated with the notification.\n  - Service_ID: Identifier of the service related to the notification.\n\nTable Services:\n- Stores information about different services.\n- Columns:\n  - Service_ID: Unique identifier for each service.\n  - Service_name: Name of the service.\n\nTable Settlements:\n- Contains details about claim settlements.\n- Columns:\n  - Settlement_ID: Unique identifier for each settlement.\n  - Claim_ID: Identifier of the claim for which the settlement is made.\n  - Effective_Date: Date when the settlement became effective.\n  - Settlement_Amount: Amount of the settlement.\n\nForeign Keys:\n- Customers_Policies.Policy_ID references Available_Policies.Policy_ID, linking customer policies to available policies.\n- Customers_Policies.Customer_ID references Customers.Customer_ID, establishing a relationship between customer policies and customers.\n- First_Notification_of_Loss.Customer_ID references Customers_Policies.Customer_ID, connecting first notifications of loss to customers.\n- First_Notification_of_Loss.Policy_ID references Customers_Policies.Policy_ID, linking first notifications of loss to policies.\n- First_Notification_of_Loss.Service_ID references Services.Service_ID, establishing a relationship between first notifications of loss and services.\n- Claims.FNOL_ID references First_Notification_of_Loss.FNOL_ID, linking claims to first notifications of loss.\n- Settlements.Claim_ID references Claims.Claim_ID, connecting settlements to claims.",
    "insurance_policies": "Table Claims:\n- Contains information about insurance claims made by customers.\n- Columns:\n  - Claim_ID: Unique identifier for each claim.\n  - Policy_ID: Identifier of the policy associated with the claim.\n  - Date_Claim_Made: Date when the claim was made.\n  - Date_Claim_Settled: Date when the claim was settled.\n  - Amount_Claimed: Amount claimed in the insurance claim.\n  - Amount_Settled: Amount settled for the claim.\n\nTable Customer_Policies:\n- Stores data related to policies held by customers.\n- Columns:\n  - Policy_ID: Unique identifier for each policy.\n  - Customer_ID: Identifier of the customer associated with the policy.\n  - Policy_Type_Code: Code representing the type of policy.\n  - Start_Date: Start date of the policy.\n  - End_Date: End date of the policy.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - Customer_ID: Unique identifier for each customer.\n  - Customer_Details: Information about the customer.\n\nTable Payments:\n- Stores information about payments made.\n- Columns:\n  - Payment_ID: Unique identifier for each payment.\n  - Settlement_ID: Identifier of the settlement associated with the payment.\n  - Payment_Method_Code: Code representing the payment method.\n  - Date_Payment_Made: Date when the payment was made.\n  - Amount_Payment: Amount of the payment made.\n\nTable Settlements:\n- Contains details about settlements related to insurance claims.\n- Columns:\n  - Settlement_ID: Unique identifier for each settlement.\n  - Claim_ID: Identifier of the claim associated with the settlement.\n  - Date_Claim_Made: Date when the claim was made for the settlement.\n  - Date_Claim_Settled: Date when the claim was settled for the settlement.\n  - Amount_Claimed: Amount claimed in the settlement.\n  - Amount_Settled: Amount settled in the settlement.\n  - Customer_Policy_ID: Identifier of the customer policy associated with the settlement.\n\nForeign Keys:\n- Customer_Policies.Customer_ID references Customers.Customer_ID, establishing a relationship between customer policies and customers.\n- Claims.Policy_ID references Customer_Policies.Policy_ID, linking claims to specific policies.\n- Settlements.Claim_ID references Claims.Claim_ID, connecting settlements to claims.\n- Payments.Settlement_ID references Settlements.Settlement_ID, linking payments to settlements.",
    "journal_committee": "Table editor:\n- Contains information about editors.\n- Columns:\n  - Editor_ID: Unique identifier for each editor.\n  - Name: Name of the editor.\n  - Age: Age of the editor.\n\nTable journal:\n- Stores data related to journals.\n- Columns:\n  - Journal_ID: Unique identifier for each journal.\n  - Date: Date of the journal.\n  - Theme: Theme of the journal.\n  - Sales: Sales data related to the journal.\n\nTable journal_committee:\n- Contains details about the committee members involved in journals.\n- Columns:\n  - Editor_ID: Identifier of the editor in the committee.\n  - Journal_ID: Identifier of the journal associated with the committee.\n  - Work_Type: Type of work assigned to the committee member.\n\nForeign Keys:\n- journal_committee.Journal_ID references journal.Journal_ID, establishing a relationship between journal_committee and journal.\n- journal_committee.Editor_ID references editor.Editor_ID, linking journal_committee to specific editors.",
    "loan_1": "Table bank:\n- Contains information about different bank branches.\n- Columns:\n  - branch_ID: Unique identifier for each bank branch.\n  - bname: Name of the bank branch.\n  - no_of_customers: Number of customers associated with the branch.\n  - city: City where the branch is located.\n  - state: State where the branch is situated.\n\nTable customer:\n- Stores data related to bank customers.\n- Columns:\n  - cust_ID: Unique identifier for each customer.\n  - cust_name: Name of the customer.\n  - acc_type: Type of account the customer holds.\n  - acc_bal: Account balance of the customer.\n  - no_of_loans: Number of loans the customer has.\n  - credit_score: Credit score of the customer.\n  - branch_ID: Identifier of the branch to which the customer is associated.\n  - state: State where the customer resides.\n\nTable loan:\n- Contains details about loans provided by the bank.\n- Columns:\n  - loan_ID: Unique identifier for each loan.\n  - loan_type: Type of loan.\n  - cust_ID: Identifier of the customer associated with the loan.\n  - branch_ID: Identifier of the branch providing the loan.\n  - amount: Amount of the loan.\n\nForeign Keys:\n- customer.branch_ID references bank.branch_ID, establishing a relationship between customers and bank branches.\n- loan.branch_ID references bank.branch_ID, linking loans to the respective bank branches.",
    "local_govt_and_lot": "Table Customer_Event_Notes:\n- Contains notes related to customer events.\n- Columns:\n  - Customer_Event_Note_ID: Unique identifier for each customer event note.\n  - Customer_Event_ID: Identifier of the customer event associated with the note.\n  - service_type_code: Code representing the type of service.\n  - resident_id: Identifier of the resident related to the note.\n  - property_id: Identifier of the property associated with the note.\n  - date_moved_in: Date when the resident moved into the property.\n\nTable Customer_Events:\n- Stores information about customer events.\n- Columns:\n  - Customer_Event_ID: Unique identifier for each customer event.\n  - customer_id: Identifier of the customer associated with the event.\n  - date_moved_in: Date when the customer moved in.\n  - property_id: Identifier of the property related to the event.\n  - resident_id: Identifier of the resident associated with the event.\n  - thing_id: Identifier of the thing related to the event.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - customer_details: Details about the customer.\n\nTable Organizations:\n- Stores information about organizations.\n- Columns:\n  - organization_id: Unique identifier for each organization.\n  - parent_organization_id: Identifier of the parent organization.\n  - organization_details: Details about the organization.\n\nTable Properties:\n- Contains details about properties.\n- Columns:\n  - property_id: Unique identifier for each property.\n  - property_type_code: Code representing the type of property.\n  - property_address: Address of the property.\n  - other_details: Additional details about the property.\n\nTable Residents:\n- Stores information about residents.\n- Columns:\n  - resident_id: Unique identifier for each resident.\n  - property_id: Identifier of the property where the resident resides.\n  - date_moved_in: Date when the resident moved into the property.\n  - date_moved_out: Date when the resident moved out.\n  - other_details: Additional details about the resident.\n\nTable Residents_Services:\n- Contains details about services provided to residents.\n- Columns:\n  - resident_id: Identifier of the resident receiving the service.\n  - service_id: Identifier of the service provided.\n  - date_moved_in: Date when the resident moved in.\n  - property_id: Identifier of the property where the service is provided.\n  - date_requested: Date when the service was requested.\n  - date_provided: Date when the service was provided.\n  - other_details: Additional details about the service.\n\nTable Services:\n- Stores information about services offered.\n- Columns:\n  - service_id: Unique identifier for each service.\n  - organization_id: Identifier of the organization providing the service.\n  - service_type_code: Code representing the type of service.\n  - service_details: Details about the service.\n\nTable Things:\n- Contains details about things.\n- Columns:\n  - thing_id: Unique identifier for each thing.\n  - organization_id: Identifier of the organization related to the thing.\n  - Type_of_Thing_Code: Code representing the type of thing.\n  - service_type_code: Code representing the type of service related to the thing.\n  - service_details: Details about the service related to the thing.\n\nTable Timed_Locations_of_Things:\n- Stores timed locations of things.\n- Columns:\n  - thing_id: Identifier of the thing.\n  - Date_and_Time: Date and time of the location.\n  - Location_Code: Code representing the location.\n\nTable Timed_Status_of_Things:\n- Contains timed status information of things.\n- Columns:\n  - thing_id: Identifier of the thing.\n  - Date_and_Date: Date and status of the thing.\n  - Status_of_Thing_Code: Code representing the status of the thing.\n\nForeign Keys:\n- Residents.property_id references Properties.property_id, linking residents to properties.\n- Services.organization_id references Organizations.organization_id, establishing a relationship between services and organizations.\n- Residents_Services.resident_id references Residents.resident_id, connecting residents to services they receive.\n- Residents_Services.property_id references Residents.property_id, linking services to the properties where they are provided.\n- Residents_Services.date_moved_in references Residents.date_moved_in, establishing a relationship based on move-in dates.\n- Residents_Services.service_id references Services.service_id, linking services to specific service types.\n- Things.organization_id references Organizations.organization_id, connecting things to organizations.\n- Customer_Events.resident_id references Residents.resident_id, linking customer events to residents.\n- Customer_Events.property_id references Residents.property_id, establishing a relationship based on properties.\n- Customer_Events.date_moved_in references Residents.date_moved_in, connecting events based on move-in dates.\n- Customer_Events.customer_id references Customers.customer_id, linking events to specific customers.\n- Customer_Events.thing_id references Things.thing_id, establishing a relationship between events and things.\n- Customer_Event_Notes.Customer_Event_ID references Customer_Events.Customer_Event_ID, linking event notes to specific customer events.\n- Timed_Status_of_Things.thing_id references Things.thing_id, connecting timed status information to things.\n- Timed_Locations_of_Things.thing_id references Things.thing_id, linking timed locations to things.",
    "local_govt_in_alabama": "Table Events:\n- Contains information about various events.\n- Columns:\n  - Event_ID: Unique identifier for each event.\n  - Service_ID: Identifier of the service associated with the event.\n  - Event_Details: Details or description of the event.\n\nTable Participants:\n- Stores data related to participants involved in events.\n- Columns:\n  - Participant_ID: Unique identifier for each participant.\n  - Participant_Type_Code: Code indicating the type of participant.\n  - Participant_Details: Additional details about the participant.\n\nTable Participants_in_Events:\n- Represents the relationship between events and participants.\n- Columns:\n  - Event_ID: Identifier of the event.\n  - Participant_ID: Identifier of the participant involved in the event.\n\nTable Services:\n- Contains information about different services.\n- Columns:\n  - Service_ID: Unique identifier for each service.\n  - Service_Type_Code: Code representing the type of service.\n\nForeign Keys:\n- Events.Service_ID references Services.Service_ID, establishing a connection between events and services.\n- Participants_in_Events.Event_ID references Events.Event_ID, linking participants in events to specific events.\n- Participants_in_Events.Participant_ID references Participants.Participant_ID, connecting participants in events to specific participants.",
    "local_govt_mdm": "Table Benefits_Overpayments:\n- Contains data related to overpayments in benefits.\n- Columns:\n  - council_tax_id: Identifier for council tax related to the overpayment.\n  - cmi_cross_ref_id: Cross-reference identifier linking to CMI Cross References.\n\nTable Business_Rates:\n- Stores information about business rates.\n- Columns:\n  - business_rates_id: Identifier for each business rate entry.\n  - cmi_cross_ref_id: Cross-reference identifier linking to CMI Cross References.\n\nTable CMI_Cross_References:\n- Holds cross-reference data for various entities.\n- Columns:\n  - cmi_cross_ref_id: Unique identifier for cross-references.\n  - master_customer_id: Identifier of the master customer associated with the cross-reference.\n  - source_system_code: Code indicating the source system.\n\nTable Council_Tax:\n- Contains details about council tax.\n- Columns:\n  - council_tax_id: Identifier for each council tax entry.\n  - cmi_cross_ref_id: Cross-reference identifier linking to CMI Cross References.\n\nTable Customer_Master_Index:\n- Stores master customer data.\n- Columns:\n  - master_customer_id: Unique identifier for each master customer.\n  - cmi_details: Details related to the customer master index.\n\nTable Electoral_Register:\n- Stores information related to the electoral register.\n- Columns:\n  - electoral_register_id: Identifier for each entry in the electoral register.\n  - cmi_cross_ref_id: Cross-reference identifier linking to CMI Cross References.\n\nTable Parking_Fines:\n- Contains data about parking fines.\n- Columns:\n  - council_tax_id: Identifier for council tax related to the parking fine.\n  - cmi_cross_ref_id: Cross-reference identifier linking to CMI Cross References.\n\nTable Rent_Arrears:\n- Stores details about rent arrears.\n- Columns:\n  - council_tax_id: Identifier for council tax related to the rent arrears.\n  - cmi_cross_ref_id: Cross-reference identifier linking to CMI Cross References.\n\nForeign Keys:\n- CMI_Cross_References.master_customer_id references Customer_Master_Index.master_customer_id, establishing a relationship between cross-references and customer master data.\n- Council_Tax.cmi_cross_ref_id references CMI_Cross_References.cmi_cross_ref_id, linking council tax data to cross-references.\n- Business_Rates.cmi_cross_ref_id references CMI_Cross_References.cmi_cross_ref_id, connecting business rates data to cross-references.\n- Benefits_Overpayments.cmi_cross_ref_id references CMI_Cross_References.cmi_cross_ref_id, establishing a relationship between overpayments data and cross-references.\n- Parking_Fines.cmi_cross_ref_id references CMI_Cross_References.cmi_cross_ref_id, linking parking fines data to cross-references.\n- Rent_Arrears.cmi_cross_ref_id references CMI_Cross_References.cmi_cross_ref_id, connecting rent arrears data to cross-references.\n- Electoral_Register.cmi_cross_ref_id references CMI_Cross_References.cmi_cross_ref_id, establishing a relationship between electoral register data and cross-references.",
    "machine_repair": "Table machine:\n- Contains information about different machines.\n- Columns:\n  - Machine_ID: Unique identifier for each machine.\n  - Making_Year: Year when the machine was manufactured.\n  - Class: Classification of the machine.\n  - Team: Team associated with the machine.\n  - Machine_series: Series to which the machine belongs.\n  - value_points: Points assigned to the machine based on its value.\n  - quality_rank: Rank indicating the quality of the machine.\n\nTable repair:\n- Stores data related to repairs.\n- Columns:\n  - repair_ID: Unique identifier for each repair.\n  - name: Name of the repair.\n  - Launch_Date: Date when the repair was launched.\n  - Notes: Additional notes related to the repair.\n\nTable repair_assignment:\n- Contains assignments of repairs to technicians for specific machines.\n- Columns:\n  - technician_id: Identifier of the technician assigned to the repair.\n  - repair_ID: Identifier of the repair being assigned.\n  - Machine_ID: Identifier of the machine for which the repair is assigned.\n\nTable technician:\n- Holds information about technicians.\n- Columns:\n  - technician_id: Unique identifier for each technician.\n  - Name: Name of the technician.\n  - Team: Team to which the technician belongs.\n  - Starting_Year: Year when the technician started working.\n  - Age: Age of the technician.\n\nForeign Keys:\n- repair_assignment.Machine_ID references machine.Machine_ID, linking repair assignments to specific machines.\n- repair_assignment.repair_ID references repair.repair_ID, establishing a relationship between repair assignments and repairs.\n- repair_assignment.technician_id references technician.technician_id, connecting repair assignments to specific technicians.",
    "manufactory_1": "Table Manufacturers:\n- Contains information about different manufacturers.\n- Columns:\n  - Code: Unique identifier for each manufacturer.\n  - Name: Name of the manufacturer.\n  - Headquarter: Location of the manufacturer's headquarters.\n  - Founder: Founder of the manufacturer.\n  - Revenue: Revenue generated by the manufacturer.\n\nTable Products:\n- Stores details about various products.\n- Columns:\n  - Code: Unique identifier for each product.\n  - Name: Name of the product.\n  - Price: Price of the product.\n  - Manufacturer: Identifier of the manufacturer of the product.\n\nForeign Keys:\n- Products.Manufacturer references Manufacturers.Code, establishing a relationship between products and manufacturers.",
    "manufacturer": "Table furniture:\n- Contains information about different types of furniture.\n- Columns:\n  - Furniture_ID: Unique identifier for each piece of furniture.\n  - Name: Name of the furniture.\n  - Num_of_Component: Number of components in the furniture.\n  - Market_Rate: Market rate of the furniture.\n\nTable furniture_manufacte:\n- Stores data related to the manufacturing of furniture.\n- Columns:\n  - Manufacturer_ID: Unique identifier for each manufacturer.\n  - Furniture_ID: Identifier of the furniture produced by the manufacturer.\n  - Price_in_Dollar: Price of the furniture in dollars.\n\nTable manufacturer:\n- Contains details about furniture manufacturers.\n- Columns:\n  - Manufacturer_ID: Unique identifier for each manufacturer.\n  - Open_Year: Year in which the manufacturer was established.\n  - Name: Name of the manufacturer.\n  - Num_of_Factories: Number of factories owned by the manufacturer.\n  - Num_of_Shops: Number of shops owned by the manufacturer.\n\nForeign Keys:\n- furniture_manufacte.Furniture_ID references furniture.Furniture_ID, linking furniture manufacturing to specific furniture items.\n- furniture_manufacte.Manufacturer_ID references manufacturer.Manufacturer_ID, establishing a relationship between furniture manufacturing and manufacturers.",
    "match_season": "Table country:\n- Contains information about different countries.\n- Columns:\n  - Country_id: Unique identifier for each country.\n  - Country_name: Name of the country.\n  - Capital: Capital city of the country.\n  - Official_native_language: Official native language of the country.\n\nTable match_season:\n- Stores data related to match seasons.\n- Columns:\n  - Season: Season of the match.\n  - Player: Player participating in the match.\n  - Position: Position of the player in the match.\n  - Country: Country participating in the match.\n  - Team: Team participating in the match.\n  - Draft_Pick_Number: Number of the draft pick.\n  - Draft_Class: Class of the draft.\n  - College: College of the player.\n\nTable player:\n- Contains details about players.\n- Columns:\n  - Player_ID: Unique identifier for each player.\n  - Player: Name of the player.\n  - Years_Played: Number of years the player has played.\n  - Total_WL: Total win-loss record of the player.\n  - Singles_WL: Win-loss record in singles matches.\n  - Doubles_WL: Win-loss record in doubles matches.\n  - Team: Team to which the player belongs.\n\nTable team:\n- Stores information about different teams.\n- Columns:\n  - Team_id: Unique identifier for each team.\n  - Name: Name of the team.\n\nForeign Keys:\n- match_season.Team references team.Team_id, linking match seasons to specific teams.\n- match_season.Country references country.Country_id, establishing a relationship between match seasons and countries.\n- player.Team references team.Team_id, connecting players to their respective teams.",
    "medicine_enzyme_interaction": "Table enzyme:\n- Contains information about enzymes.\n- Columns:\n  - id: Unique identifier for each enzyme.\n  - name: Name of the enzyme.\n  - Location: Location of the enzyme.\n  - Product: Product associated with the enzyme.\n  - Chromosome: Chromosome where the enzyme is located.\n  - OMIM: OMIM identifier for the enzyme.\n  - Porphyria: Porphyria information related to the enzyme.\n\nTable medicine:\n- Stores data related to medicines.\n- Columns:\n  - id: Unique identifier for each medicine.\n  - name: Name of the medicine.\n  - Trade_Name: Trade name of the medicine.\n  - FDA_approved: Indicates if the medicine is FDA approved.\n\nTable medicine_enzyme_interaction:\n- Represents the interactions between medicines and enzymes.\n- Columns:\n  - enzyme_id: Identifier of the enzyme involved in the interaction.\n  - medicine_id: Identifier of the medicine involved in the interaction.\n  - interaction_type: Type of interaction between the medicine and enzyme.\n\nForeign Keys:\n- medicine_enzyme_interaction.medicine_id references medicine.id, establishing a relationship between medicine_enzyme_interaction and medicines.\n- medicine_enzyme_interaction.enzyme_id references enzyme.id, linking medicine_enzyme_interaction to enzymes.",
    "mountain_photos": "Table camera_lens:\n- Contains information about different camera lenses.\n- Columns:\n  - id: Unique identifier for each camera lens.\n  - brand: Brand of the camera lens.\n  - name: Name of the camera lens.\n  - focal_length_mm: Focal length of the lens in millimeters.\n  - max_aperture: Maximum aperture of the lens.\n\nTable mountain:\n- Stores data related to mountains.\n- Columns:\n  - id: Unique identifier for each mountain.\n  - name: Name of the mountain.\n  - Height: Height of the mountain.\n  - Prominence: Prominence of the mountain.\n  - Range: Mountain range where the mountain is located.\n  - Country: Country where the mountain is situated.\n\nTable photos:\n- Contains details about photos taken.\n- Columns:\n  - id: Unique identifier for each photo.\n  - camera_lens_id: Identifier of the camera lens used to capture the photo.\n  - mountain_id: Identifier of the mountain in the photo.\n  - color: Color of the photo.\n  - name: Name of the photo.\n\nForeign Keys:\n- photos.mountain_id references mountain.id, establishing a relationship between photos and mountains.\n- photos.camera_lens_id references camera_lens.id, linking photos to the specific camera lens used.",
    "movie_1": "Table Movie:\n- Contains information about movies.\n- Columns:\n  - mID: Unique identifier for each movie.\n  - title: Title of the movie.\n  - year: Year of release of the movie.\n  - director: Director of the movie.\n\nTable Rating:\n- Stores ratings given to movies by reviewers.\n- Columns:\n  - rID: Unique identifier for each rating.\n  - mID: Identifier of the movie being rated.\n  - stars: Rating given to the movie in stars.\n  - ratingDate: Date when the rating was given.\n\nTable Reviewer:\n- Contains details about reviewers who rate movies.\n- Columns:\n  - rID: Unique identifier for each reviewer.\n  - name: Name of the reviewer.\n\nForeign Keys:\n- Rating.rID references Reviewer.rID, establishing a relationship between ratings and reviewers.\n- Rating.mID references Movie.mID, linking ratings to specific movies.",
    "museum_visit": "Table museum:\n- Contains information about different museums.\n- Columns:\n  - Museum_ID: Unique identifier for each museum.\n  - Name: Name of the museum.\n  - Num_of_Staff: Number of staff working at the museum.\n  - Open_Year: Year when the museum was opened.\n\nTable visit:\n- Stores data related to visits made by visitors to museums.\n- Columns:\n  - Museum_ID: Identifier of the museum visited.\n  - visitor_ID: Identifier of the visitor.\n  - Num_of_Ticket: Number of tickets purchased during the visit.\n  - Total_spent: Total amount spent by the visitor during the visit.\n\nTable visitor:\n- Contains details about visitors to museums.\n- Columns:\n  - ID: Unique identifier for each visitor.\n  - Name: Name of the visitor.\n  - Level_of_membership: Membership level of the visitor.\n  - Age: Age of the visitor.\n\nForeign Keys:\n- visit.visitor_ID references visitor.ID, establishing a relationship between visits and visitors.\n- visit.Museum_ID references museum.Museum_ID, linking visits to specific museums.",
    "musical": "Table actor:\n- Contains information about actors involved in musicals.\n- Columns:\n  - Actor_ID: Unique identifier for each actor.\n  - Name: Name of the actor.\n  - Musical_ID: Identifier of the musical the actor is associated with.\n  - Character: Character played by the actor.\n  - Duration: Duration of the actor's performance.\n  - Age: Age of the actor.\n\nTable musical:\n- Stores data related to musical productions.\n- Columns:\n  - Musical_ID: Unique identifier for each musical.\n  - Name: Name of the musical.\n  - Year: Year of production.\n  - Award: Award received by the musical.\n  - Category: Category of the award.\n  - Nominee: Nominee for the award.\n  - Result: Result of the award.\n\nForeign Keys:\n- actor.Musical_ID references actor.Actor_ID, establishing a relationship between actors and musicals.",
    "music_1": "Table artist:\n- Contains information about artists.\n- Columns:\n  - artist_name: Name of the artist.\n  - country: Country of origin of the artist.\n  - gender: Gender of the artist.\n  - preferred_genre: Preferred genre of the artist.\n\nTable files:\n- Stores details about files associated with artists.\n- Columns:\n  - f_id: Unique identifier for each file.\n  - artist_name: Name of the artist associated with the file.\n  - file_size: Size of the file.\n  - duration: Duration of the file.\n  - formats: Formats of the file.\n\nTable genre:\n- Contains information about different genres.\n- Columns:\n  - g_name: Name of the genre.\n  - rating: Rating of the genre.\n  - most_popular_in: Location where the genre is most popular.\n\nTable song:\n- Stores data related to songs.\n- Columns:\n  - song_name: Name of the song.\n  - artist_name: Name of the artist associated with the song.\n  - country: Country associated with the song.\n  - f_id: Identifier of the file associated with the song.\n  - genre_is: Genre of the song.\n  - rating: Rating of the song.\n  - languages: Languages in which the song is available.\n  - releasedate: Release date of the song.\n  - resolution: Resolution of the song.\n\nForeign Keys:\n- artist.preferred_genre references genre.g_name, linking preferred genres of artists to genres.\n- files.artist_name references artist.artist_name, establishing a relationship between files and artists.\n- song.genre_is references genre.g_name, connecting genres to songs.\n- song.f_id references files.f_id, linking songs to files.\n- song.artist_name references artist.artist_name, establishing a relationship between songs and artists.",
    "music_2": "Table Albums:\n- Contains information about different albums.\n- Columns:\n  - AId: Unique identifier for each album.\n  - Title: Title of the album.\n  - Year: Year of release of the album.\n  - Label: Label associated with the album.\n  - Type: Type of the album.\n\nTable Band:\n- Stores data related to bands and band members.\n- Columns:\n  - Id: Unique identifier for each band member.\n  - Firstname: First name of the band member.\n  - Lastname: Last name of the band member.\n\nTable Instruments:\n- Contains details about the instruments used by band members in songs.\n- Columns:\n  - SongId: Identifier of the song.\n  - BandmateId: Identifier of the band member playing the instrument.\n  - Instrument: Type of instrument played by the band member.\n\nTable Performance:\n- Stores information about band performances.\n- Columns:\n  - SongId: Identifier of the song performed.\n  - Bandmate: Identifier of the band member performing.\n  - StagePosition: Position of the band member on stage during the performance.\n\nTable Songs:\n- Contains details about different songs.\n- Columns:\n  - SongId: Unique identifier for each song.\n  - Title: Title of the song.\n\nTable Tracklists:\n- Stores the tracklist of albums.\n- Columns:\n  - AlbumId: Identifier of the album.\n  - Position: Position of the song in the tracklist.\n  - SongId: Identifier of the song in the tracklist.\n\nTable Vocals:\n- Contains information about vocals in songs.\n- Columns:\n  - SongId: Identifier of the song.\n  - Bandmate: Identifier of the band member providing vocals.\n  - Type: Type of vocals provided by the band member.\n\nForeign Keys:\n- Instruments.BandmateId references Band.Id, linking instruments to band members.\n- Instruments.SongId references Songs.SongId, connecting instruments to specific songs.\n- Performance.Bandmate references Band.Id, establishing a relationship between performance and band members.\n- Performance.SongId references Songs.SongId, linking performance to specific songs.\n- Tracklists.AlbumId references Albums.AId, connecting tracklists to specific albums.\n- Tracklists.SongId references Songs.SongId, establishing a relationship between tracklists and songs.\n- Vocals.Bandmate references Band.Id, linking vocals to band members.\n- Vocals.SongId references Songs.SongId, establishing a relationship between vocals and songs.",
    "music_4": "Table artist:\n- Contains information about different artists.\n- Columns:\n  - Artist_ID: Unique identifier for each artist.\n  - Artist: Name of the artist.\n  - Age: Age of the artist.\n  - Famous_Title: Title of the artist's famous work.\n  - Famous_Release_date: Release date of the artist's famous work.\n\nTable music_festival:\n- Stores data related to music festivals.\n- Columns:\n  - ID: Unique identifier for each music festival.\n  - Music_Festival: Name of the music festival.\n  - Date_of_ceremony: Date of the festival ceremony.\n  - Category: Category of the music festival.\n  - Volume: Volume of the festival.\n  - Result: Result of the music festival.\n\nTable volume:\n- Contains details about music volumes.\n- Columns:\n  - Volume_ID: Unique identifier for each volume.\n  - Volume_Issue: Issue of the volume.\n  - Issue_Date: Date of the volume issue.\n  - Weeks_on_Top: Number of weeks on top for the volume.\n  - Song: Song included in the volume.\n  - Artist_ID: Identifier of the artist associated with the volume.\n\nForeign Keys:\n- volume.Artist_ID references artist.Artist_ID, establishing a relationship between volumes and artists.\n- music_festival.Volume references volume.Volume_ID, linking music festivals to specific volumes.",
    "network_1": "Table Friend:\n- Contains information about friendships between students.\n- Columns:\n  - student_id: Identifier of the student who has a friend.\n  - friend_id: Identifier of the friend of the student.\n  \nTable Highschooler:\n- Stores data related to high school students.\n- Columns:\n  - ID: Unique identifier for each high school student.\n  - name: Name of the high school student.\n  - grade: Grade level of the high school student.\n  \nTable Likes:\n- Records data about students liking other students.\n- Columns:\n  - student_id: Identifier of the student who likes another student.\n  - liked_id: Identifier of the student who is liked by another student.\n  \nForeign Keys:\n- Friend.friend_id references Highschooler.ID, establishing a relationship between friends and high school students.\n- Friend.student_id references Highschooler.ID, linking students to their friends.\n- Likes.student_id references Highschooler.ID, connecting students who like other students to their own information.\n- Likes.liked_id references Highschooler.ID, linking students who are liked to their information.",
    "network_2": "Table Person:\n- Contains information about individuals.\n- Columns:\n  - name: Name of the person.\n  - age: Age of the person.\n  - city: City where the person resides.\n  - gender: Gender of the person.\n  - job: Job or occupation of the person.\n\nTable PersonFriend:\n- Stores data about friendships between individuals.\n- Columns:\n  - name: Name of the person.\n  - friend: Name of the person's friend.\n  - year: Year when the friendship was established.\n\nForeign Keys:\n- PersonFriend.friend references Person.name, establishing a relationship between friends and individuals.\n- PersonFriend.name references Person.name, linking friendships to the respective individuals.",
    "news_report": "Table event:\n- Contains information about events.\n- Columns:\n  - Event_ID: Unique identifier for each event.\n  - Date: Date of the event.\n  - Venue: Venue where the event took place.\n  - Name: Name of the event.\n  - Event_Attendance: Number of attendees at the event.\n\nTable journalist:\n- Stores details about journalists.\n- Columns:\n  - journalist_ID: Unique identifier for each journalist.\n  - Name: Name of the journalist.\n  - Nationality: Nationality of the journalist.\n  - Age: Age of the journalist.\n  - Years_working: Number of years the journalist has been working.\n\nTable news_report:\n- Contains data related to news reports by journalists for events.\n- Columns:\n  - journalist_ID: Identifier of the journalist.\n  - Event_ID: Identifier of the event for which the news report is created.\n  - Work_Type: Type of work done by the journalist for the news report.\n\nForeign Keys:\n- news_report.Event_ID references event.Event_ID, linking news reports to specific events.\n- news_report.journalist_ID references journalist.journalist_ID, establishing a relationship between news reports and journalists.",
    "orchestra": "Table conductor:\n- Contains information about conductors.\n- Columns:\n  - Conductor_ID: Unique identifier for each conductor.\n  - Name: Name of the conductor.\n  - Age: Age of the conductor.\n  - Nationality: Nationality of the conductor.\n  - Year_of_Work: Year when the conductor started working.\n\nTable orchestra:\n- Stores data related to orchestras.\n- Columns:\n  - Orchestra_ID: Unique identifier for each orchestra.\n  - Orchestra: Name of the orchestra.\n  - Conductor_ID: Identifier of the conductor leading the orchestra.\n  - Record_Company: Record company associated with the orchestra.\n  - Year_of_Founded: Year when the orchestra was founded.\n  - Major_Record_Format: Major record format used by the orchestra.\n\nTable performance:\n- Contains details about performances.\n- Columns:\n  - Performance_ID: Unique identifier for each performance.\n  - Orchestra_ID: Identifier of the orchestra performing.\n  - Type: Type of performance.\n  - Date: Date of the performance.\n  - Official_ratings_(millions): Official ratings in millions for the performance.\n  - Weekly_rank: Rank of the performance on a weekly basis.\n  - Share: Share percentage of the performance.\n\nTable show:\n- Stores information about shows.\n- Columns:\n  - Show_ID: Unique identifier for each show.\n  - Performance_ID: Identifier of the performance associated with the show.\n  - If_first_show: Indicates if the show is the first performance.\n  - Result: Result of the show.\n  - Attendance: Attendance details of the show.\n\nForeign Keys:\n- orchestra.Conductor_ID references conductor.Conductor_ID, establishing a relationship between orchestras and conductors.\n- performance.Orchestra_ID references orchestra.Orchestra_ID, linking performances to specific orchestras.\n- show.Performance_ID references performance.Performance_ID, connecting shows to performances.",
    "party_host": "Table host:\n- Contains information about hosts of parties.\n- Columns:\n  - Host_ID: Unique identifier for each host.\n  - Name: Name of the host.\n  - Nationality: Nationality of the host.\n  - Age: Age of the host.\n\nTable party:\n- Stores details about different parties.\n- Columns:\n  - Party_ID: Unique identifier for each party.\n  - Party_Theme: Theme of the party.\n  - Location: Location of the party.\n  - First_year: Year when the party started.\n  - Last_year: Year when the party ended.\n  - Number_of_hosts: Number of hosts associated with the party.\n\nTable party_host:\n- Represents the relationship between parties and hosts, indicating which host is in charge.\n- Columns:\n  - Party_ID: Identifier of the party.\n  - Host_ID: Identifier of the host.\n  - Is_Main_in_Charge: Flag indicating if the host is the main person in charge of the party.\n\nForeign Keys:\n- party_host.Party_ID references party.Party_ID, establishing a link between parties and hosts.\n- party_host.Host_ID references host.Host_ID, connecting hosts to specific parties.",
    "party_people": "Table member:\n- Contains information about members.\n- Columns:\n  - Member_ID: Unique identifier for each member.\n  - Member_Name: Name of the member.\n  - Party_ID: Identifier of the party the member belongs to.\n  - In_office: Indicates whether the member is currently in office.\n\nTable party:\n- Stores data related to political parties.\n- Columns:\n  - Party_ID: Unique identifier for each party.\n  - Minister: Minister associated with the party.\n  - Took_office: Date when the party took office.\n  - Left_office: Date when the party left office.\n  - Region_ID: Identifier of the region the party belongs to.\n  - Party_name: Name of the party.\n\nTable party_events:\n- Contains details about events organized by parties.\n- Columns:\n  - Event_ID: Unique identifier for each event.\n  - Event_Name: Name of the event.\n  - Party_ID: Identifier of the party hosting the event.\n  - Member_in_charge_ID: Identifier of the member in charge of the event.\n\nTable region:\n- Stores information about different regions.\n- Columns:\n  - Region_ID: Unique identifier for each region.\n  - Region_name: Name of the region.\n  - Date: Date associated with the region.\n  - Label: Label for the region.\n  - Format: Format of the region data.\n  - Catalogue: Catalogue information related to the region.\n\nForeign Keys:\n- party.Region_ID references region.Region_ID, establishing a relationship between parties and regions.\n- member.Party_ID references party.Party_ID, linking members to their respective parties.\n- party_events.Member_in_charge_ID references member.Member_ID, connecting event organizers to members.\n- party_events.Party_ID references party.Party_ID, linking events to specific parties.",
    "performance_attendance": "Table member:\n- Contains information about members involved in performances.\n- Columns:\n  - Member_ID: Unique identifier for each member.\n  - Name: Name of the member.\n  - Nationality: Nationality of the member.\n  - Role: Role played by the member.\n\nTable member_attendance:\n- Stores data related to member attendance in performances.\n- Columns:\n  - Member_ID: Identifier of the member attending the performance.\n  - Performance_ID: Identifier of the performance.\n  - Num_of_Pieces: Number of pieces performed by the member.\n\nTable performance:\n- Contains details about different performances.\n- Columns:\n  - Performance_ID: Unique identifier for each performance.\n  - Date: Date of the performance.\n  - Host: Host of the performance.\n  - Location: Location of the performance.\n  - Attendance: Attendance details of the performance.\n\nForeign Keys:\n- member_attendance.Performance_ID references performance.Performance_ID, linking member attendance to specific performances.\n- member_attendance.Member_ID references member.Member_ID, establishing a relationship between member attendance and members.",
    "perpetrator": "Table people:\n- Contains information about individuals.\n- Columns:\n  - People_ID: Unique identifier for each person.\n  - Name: Name of the person.\n  - Height: Height of the person.\n  - Weight: Weight of the person.\n  - Home Town: Hometown of the person.\n\nTable perpetrator:\n- Stores data related to perpetrators of incidents.\n- Columns:\n  - Perpetrator_ID: Unique identifier for each perpetrator.\n  - People_ID: Identifier of the person involved.\n  - Date: Date of the incident.\n  - Year: Year of the incident.\n  - Location: Location of the incident.\n  - Country: Country where the incident occurred.\n  - Killed: Number of individuals killed in the incident.\n  - Injured: Number of individuals injured in the incident.\n\nForeign Keys:\n- perpetrator.People_ID references people.People_ID, establishing a relationship between perpetrators and individuals in the people table.",
    "pets_1": "Table Has_Pet:\n- Represents the relationship between students and pets they own.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - PetID: Unique identifier for each pet owned by a student.\n\nTable Pets:\n- Contains information about different pets.\n- Columns:\n  - PetID: Unique identifier for each pet.\n  - PetType: Type or species of the pet.\n  - pet_age: Age of the pet.\n  - weight: Weight of the pet.\n\nTable Student:\n- Stores details about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Field of study or major of the student.\n  - Advisor: Advisor assigned to the student.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Has_Pet.StuID references Student.StuID, establishing a relationship between students and their pets.\n- Has_Pet.PetID references Pets.PetID, linking students to the pets they own.",
    "phone_1": "Table chip_model:\n- Contains information about different chip models used in devices.\n- Columns:\n  - Model_name: Name of the chip model.\n  - Launch_year: Year when the chip model was launched.\n  - RAM_MiB: Amount of RAM in Mebibytes.\n  - ROM_MiB: Amount of ROM in Mebibytes.\n  - Slots: Number of slots available.\n  - WiFi: Indicates if the chip model supports WiFi.\n  - Bluetooth: Indicates if the chip model supports Bluetooth.\n\nTable phone:\n- Stores data related to phones and their specifications.\n- Columns:\n  - Company_name: Name of the company manufacturing the phone.\n  - Hardware_Model_name: Name of the hardware model of the phone.\n  - Accreditation_type: Type of accreditation for the phone.\n  - Accreditation_level: Level of accreditation for the phone.\n  - Date: Date of the phone entry.\n  - chip_model: Foreign key referencing the chip model used in the phone.\n  - screen_mode: Identifier of the screen mode used in the phone.\n\nTable screen_mode:\n- Contains details about different screen modes.\n- Columns:\n  - Graphics_mode: Mode of graphics for the screen.\n  - Char_cells: Number of character cells.\n  - Pixels: Number of pixels in the screen.\n  - Hardware_colours: Number of colors supported by the hardware.\n  - used_kb: Amount of used kilobytes.\n  - map: Mapping information.\n  - Type: Type of screen mode.\n\nForeign Keys:\n- phone.chip_model references chip_model.Model_name, linking phones to specific chip models.\n- phone.screen_mode references screen_mode.Graphics_mode, establishing a relationship between phones and screen modes.",
    "phone_market": "Table market:\n- Contains information about different markets.\n- Columns:\n  - Market_ID: Unique identifier for each market.\n  - District: District where the market is located.\n  - Num_of_employees: Number of employees working in the market.\n  - Num_of_shops: Number of shops within the market.\n  - Ranking: Ranking of the market.\n\nTable phone:\n- Stores details about different phone models.\n- Columns:\n  - Name: Name of the phone model.\n  - Phone_ID: Unique identifier for each phone.\n  - Memory_in_G: Memory capacity of the phone in gigabytes.\n  - Carrier: Carrier associated with the phone.\n  - Price: Price of the phone.\n\nTable phone_market:\n- Represents the relationship between phones and markets, indicating phone stock in each market.\n- Columns:\n  - Market_ID: Identifier of the market.\n  - Phone_ID: Identifier of the phone.\n  - Num_of_stock: Number of units of the phone in stock at the market.\n\nForeign Keys:\n- phone_market.Phone_ID references phone.Phone_ID, linking phones to their respective entries in the phone table.\n- phone_market.Market_ID references market.Market_ID, establishing a relationship between phones and markets.",
    "pilot_record": "Table aircraft:\n- Contains information about different aircraft.\n- Columns:\n  - Aircraft_ID: Unique identifier for each aircraft.\n  - Order_Year: Year in which the aircraft was ordered.\n  - Manufacturer: Manufacturer of the aircraft.\n  - Model: Model of the aircraft.\n  - Fleet_Series: Series of the aircraft in the fleet.\n  - Powertrain: Powertrain details of the aircraft.\n  - Fuel_Propulsion: Information about the fuel propulsion system of the aircraft.\n\nTable pilot:\n- Stores data related to pilots.\n- Columns:\n  - Pilot_ID: Unique identifier for each pilot.\n  - Pilot_name: Name of the pilot.\n  - Rank: Rank of the pilot.\n  - Age: Age of the pilot.\n  - Nationality: Nationality of the pilot.\n  - Position: Position of the pilot.\n  - Join_Year: Year in which the pilot joined.\n  - Team: Team to which the pilot belongs.\n\nTable pilot_record:\n- Contains records of pilots related to aircraft.\n- Columns:\n  - Record_ID: Unique identifier for each pilot record.\n  - Pilot_ID: Identifier of the pilot.\n  - Aircraft_ID: Identifier of the aircraft associated with the pilot record.\n  - Date: Date of the pilot record.\n\nForeign Keys:\n- pilot_record.Aircraft_ID references aircraft.Aircraft_ID, establishing a relationship between pilot records and aircraft.\n- pilot_record.Pilot_ID references pilot.Pilot_ID, linking pilot records to specific pilots.",
    "poker_player": "Table people:\n- Contains information about individuals.\n- Columns:\n  - People_ID: Unique identifier for each person.\n  - Nationality: Nationality of the person.\n  - Name: Name of the person.\n  - Birth_Date: Date of birth of the person.\n  - Height: Height of the person.\n\nTable poker_player:\n- Stores data related to poker players.\n- Columns:\n  - Poker_Player_ID: Unique identifier for each poker player.\n  - People_ID: Identifier linking to the person in the people table.\n  - Final_Table_Made: Indicates whether the player made it to the final table.\n  - Best_Finish: Best finishing position of the player.\n  - Money_Rank: Rank based on earnings.\n  - Earnings: Total earnings of the player.\n\nForeign Keys:\n- poker_player.People_ID references people.People_ID, establishing a relationship between poker players and individuals in the people table.",
    "products_for_hire": "Table Bookings:\n- Contains information about bookings made by customers.\n- Columns:\n  - booking_id: Unique identifier for each booking.\n  - customer_id: Identifier of the customer making the booking.\n  - booking_status_code: Code indicating the status of the booking.\n  - returned_damaged_yn: Flag indicating if the booking was returned damaged.\n  - booking_start_date: Start date of the booking.\n  - booking_end_date: End date of the booking.\n  - count_hired: Number of items hired in the booking.\n  - amount_payable: Total amount payable for the booking.\n  - amount_of_discount: Discount amount applied to the booking.\n  - amount_outstanding: Outstanding amount to be paid for the booking.\n  - amount_of_refund: Amount refunded for the booking.\n\nTable Customers:\n- Stores details about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - coupon_id: Identifier of the coupon used by the customer.\n  - good_or_bad_customer: Classification of the customer as good or bad.\n  - first_name: First name of the customer.\n  - last_name: Last name of the customer.\n  - gender_mf: Gender of the customer.\n  - date_became_customer: Date when the customer became a customer.\n  - date_last_hire: Date of the last hire by the customer.\n\nTable Discount_Coupons:\n- Contains information about discount coupons.\n- Columns:\n  - coupon_id: Unique identifier for each coupon.\n  - date_issued: Date when the coupon was issued.\n  - coupon_amount: Amount of discount provided by the coupon.\n\nTable Payments:\n- Stores payment details related to bookings.\n- Columns:\n  - payment_id: Unique identifier for each payment.\n  - booking_id: Identifier of the booking for which the payment is made.\n  - customer_id: Identifier of the customer making the payment.\n  - payment_type_code: Code indicating the type of payment.\n  - amount_paid_in_full_yn: Flag indicating if the full amount is paid.\n  - payment_date: Date of the payment.\n  - amount_due: Amount due for the payment.\n  - amount_paid: Amount paid in the payment.\n\nTable Products_Booked:\n- Contains information about products booked in bookings.\n- Columns:\n  - booking_id: Identifier of the booking for the product.\n  - product_id: Identifier of the product booked.\n  - returned_yn: Flag indicating if the product was returned.\n  - returned_late_yn: Flag indicating if the product was returned late.\n  - booked_count: Number of the product booked.\n  - booked_amount: Amount associated with booking the product.\n\nTable Products_for_Hire:\n- Stores details about products available for hire.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_type_code: Code indicating the type of product.\n  - daily_hire_cost: Cost of hiring the product per day.\n  - product_name: Name of the product.\n  - product_description: Description of the product.\n\nTable View_Product_Availability:\n- Provides a view of product availability in bookings.\n- Columns:\n  - product_id: Identifier of the product.\n  - booking_id: Identifier of the booking.\n  - status_date: Date of the status.\n  - available_yn: Flag indicating if the product is available.\n\nForeign Keys:\n- Customers.coupon_id references Discount_Coupons.coupon_id, linking customers to discount coupons.\n- Bookings.customer_id references Customers.customer_id, connecting bookings to customers.\n- Payments.customer_id references Customers.customer_id, establishing a relationship between payments and customers.\n- Payments.booking_id references Bookings.booking_id, linking payments to bookings.\n- Products_Booked.product_id references Products_for_Hire.product_id, connecting booked products to available products.\n- Products_Booked.booking_id references Bookings.booking_id, linking booked products to bookings.\n- View_Product_Availability.product_id references Products_for_Hire.product_id, establishing a relationship between product availability view and products for hire.\n- View_Product_Availability.booking_id references Bookings.booking_id, linking product availability view to bookings.",
    "products_gen_characteristics": "Table Characteristics:\n- Contains information about different characteristics.\n- Columns:\n  - characteristic_id: Unique identifier for each characteristic.\n  - characteristic_type_code: Code representing the type of characteristic.\n  - characteristic_data_type: Data type of the characteristic.\n  - characteristic_name: Name of the characteristic.\n  - other_characteristic_details: Additional details related to the characteristic.\n\nTable Product_Characteristics:\n- Stores the characteristics associated with products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - characteristic_id: Identifier of the characteristic associated with the product.\n  - product_characteristic_value: Value of the characteristic for the product.\n\nTable Products:\n- Contains details about various products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - color_code: Code representing the color of the product.\n  - product_category_code: Code representing the category of the product.\n  - product_name: Name of the product.\n  - typical_buying_price: Typical buying price of the product.\n  - typical_selling_price: Typical selling price of the product.\n  - product_description: Description of the product.\n  - other_product_details: Additional details related to the product.\n\nTable Ref_Characteristic_Types:\n- Provides reference information about different characteristic types.\n- Columns:\n  - characteristic_type_code: Code representing the type of characteristic.\n  - characteristic_type_description: Description of the characteristic type.\n\nTable Ref_Colors:\n- Contains reference data for different colors.\n- Columns:\n  - color_code: Code representing the color.\n  - color_description: Description of the color.\n\nTable Ref_Product_Categories:\n- Stores reference information about product categories.\n- Columns:\n  - product_category_code: Code representing the product category.\n  - product_category_description: Description of the product category.\n  - unit_of_measure: Unit of measure for the product category.\n\nForeign Keys:\n- Characteristics.characteristic_type_code references Ref_Characteristic_Types.characteristic_type_code, establishing a relationship between characteristics and characteristic types.\n- Products.color_code references Ref_Colors.color_code, linking products to specific colors.\n- Products.product_category_code references Ref_Product_Categories.product_category_code, connecting products to specific product categories.\n- Product_Characteristics.product_id references Products.product_id, linking product characteristics to products.\n- Product_Characteristics.characteristic_id references Characteristics.characteristic_id, establishing a relationship between product characteristics and characteristics.",
    "product_catalog": "Table Attribute_Definitions:\n- Contains definitions of attributes.\n- Columns:\n  - attribute_id: Unique identifier for each attribute.\n  - attribute_name: Name of the attribute.\n  - attribute_data_type: Data type of the attribute.\n\nTable Catalog_Contents:\n- Stores information about catalog entries.\n- Columns:\n  - catalog_entry_id: Unique identifier for each catalog entry.\n  - catalog_level_number: Level number of the catalog entry.\n  - parent_entry_id: Identifier of the parent entry.\n  - previous_entry_id: Identifier of the previous entry.\n  - next_entry_id: Identifier of the next entry.\n  - catalog_entry_name: Name of the catalog entry.\n  - product_stock_number: Stock number of the product.\n  - price_in_dollars: Price of the product in dollars.\n  - price_in_euros: Price of the product in euros.\n  - price_in_pounds: Price of the product in pounds.\n  - capacity: Capacity of the product.\n  - length: Length of the product.\n  - height: Height of the product.\n  - width: Width of the product.\n\nTable Catalog_Contents_Additional_Attributes:\n- Contains additional attributes for catalog entries.\n- Columns:\n  - catalog_entry_id: Identifier of the catalog entry.\n  - catalog_level_number: Level number of the catalog entry.\n  - attribute_id: Identifier of the attribute.\n  - attribute_value: Value of the attribute.\n\nTable Catalog_Structure:\n- Defines the structure of the catalog.\n- Columns:\n  - catalog_level_number: Level number in the catalog.\n  - catalog_id: Identifier of the catalog.\n  - catalog_level_name: Name of the catalog level.\n\nTable Catalogs:\n- Stores information about catalogs.\n- Columns:\n  - catalog_id: Unique identifier for each catalog.\n  - catalog_name: Name of the catalog.\n  - catalog_publisher: Publisher of the catalog.\n  - date_of_publication: Date of publication of the catalog.\n  - date_of_latest_revision: Date of the latest revision of the catalog.\n\nForeign Keys:\n- Catalog_Structure.catalog_id references Catalogs.catalog_id, establishing a relationship between catalog structure and catalogs.\n- Catalog_Contents.catalog_level_number references Catalog_Structure.catalog_level_number, linking catalog contents to the catalog structure.\n- Catalog_Contents_Additional_Attributes.catalog_level_number references Catalog_Structure.catalog_level_number, connecting additional attributes to the catalog structure.\n- Catalog_Contents_Additional_Attributes.catalog_entry_id references Catalog_Contents.catalog_entry_id, establishing a relationship between additional attributes and catalog contents.",
    "program_share": "Table broadcast:\n- Contains information about broadcasts on different channels.\n- Columns:\n  - Channel_ID: Unique identifier for each channel.\n  - Program_ID: Unique identifier for each program being broadcast.\n  - Time_of_day: Time of the day when the broadcast occurs.\n\nTable broadcast_share:\n- Stores data related to the share percentage of broadcasts on channels.\n- Columns:\n  - Channel_ID: Identifier of the channel.\n  - Program_ID: Identifier of the program being broadcast.\n  - Date: Date of the broadcast.\n  - Share_in_percent: Percentage share of the broadcast.\n\nTable channel:\n- Contains details about different channels.\n- Columns:\n  - Channel_ID: Unique identifier for each channel.\n  - Name: Name of the channel.\n  - Owner: Owner of the channel.\n  - Share_in_percent: Percentage share of the channel.\n  - Rating_in_percent: Rating percentage of the channel.\n\nTable program:\n- Stores information about different programs being broadcast.\n- Columns:\n  - Program_ID: Unique identifier for each program.\n  - Name: Name of the program.\n  - Origin: Origin of the program.\n  - Launch: Launch details of the program.\n  - Owner: Owner of the program.\n\nForeign Keys:\n- broadcast.Program_ID references program.Program_ID, establishing a relationship between broadcasts and programs.\n- broadcast.Channel_ID references channel.Channel_ID, linking broadcasts to specific channels.\n- broadcast_share.Program_ID references program.Program_ID, connecting broadcast shares to specific programs.\n- broadcast_share.Channel_ID references channel.Channel_ID, establishing a relationship between broadcast shares and channels.",
    "protein_institute": "Table Institution:\n- Contains information about different institutions.\n- Columns:\n  - Institution_id: Unique identifier for each institution.\n  - Institution: Name of the institution.\n  - Location: Location of the institution.\n  - Founded: Year the institution was founded.\n  - Type: Type of institution.\n  - Enrollment: Number of students enrolled.\n  - Team: Team associated with the institution.\n  - Primary_Conference: Primary conference of the institution.\n  - building_id: Identifier of the building where the institution is located.\n\nTable building:\n- Stores details about buildings.\n- Columns:\n  - building_id: Unique identifier for each building.\n  - Name: Name of the building.\n  - Street_address: Street address of the building.\n  - Years_as_tallest: Number of years the building was the tallest.\n  - Height_feet: Height of the building in feet.\n  - Floors: Number of floors in the building.\n\nTable protein:\n- Contains information about proteins.\n- Columns:\n  - common_name: Common name of the protein.\n  - protein_name: Name of the protein.\n  - divergence_from_human_lineage: Divergence from the human lineage.\n  - accession_number: Accession number of the protein.\n  - sequence_length: Length of the protein sequence.\n  - sequence_identity_to_human_protein: Identity of the protein sequence to human protein.\n  - Institution_id: Identifier of the institution associated with the protein.\n\nForeign Keys:\n- Institution.building_id references building.building_id, establishing a relationship between institutions and buildings.\n- protein.Institution_id references Institution.Institution_id, linking proteins to specific institutions.",
    "race_track": "Table race:\n- Contains information about races.\n- Columns:\n  - Race_ID: Unique identifier for each race.\n  - Name: Name of the race.\n  - Class: Class of the race.\n  - Date: Date of the race.\n  - Track_ID: Identifier of the track where the race takes place.\n\nTable track:\n- Stores details about tracks where races are held.\n- Columns:\n  - Track_ID: Unique identifier for each track.\n  - Name: Name of the track.\n  - Location: Location of the track.\n  - Seating: Seating capacity of the track.\n  - Year_Opened: Year when the track was opened.\n\nForeign Keys:\n- race.Track_ID references track.Track_ID, establishing a relationship between races and tracks.",
    "railway": "Table manager:\n- Contains information about managers.\n- Columns:\n  - Manager_ID: Unique identifier for each manager.\n  - Name: Name of the manager.\n  - Country: Country where the manager is located.\n  - Working_year_starts: Year when the manager started working.\n  - Age: Age of the manager.\n  - Level: Level of the manager within the organization.\n\nTable railway:\n- Stores data related to railways.\n- Columns:\n  - Railway_ID: Unique identifier for each railway.\n  - Railway: Name of the railway.\n  - Builder: Builder of the railway.\n  - Built: Year when the railway was built.\n  - Wheels: Number of wheels in the railway.\n  - Location: Location of the railway.\n  - ObjectNumber: Identifier for the railway object.\n\nTable railway_manage:\n- Contains information about the management of railways.\n- Columns:\n  - Railway_ID: Identifier of the railway.\n  - Manager_ID: Identifier of the manager responsible for the railway.\n  - From_Year: Year from which the management started.\n\nTable train:\n- Stores details about trains.\n- Columns:\n  - Train_ID: Unique identifier for each train.\n  - Train_Num: Train number.\n  - Name: Name of the train.\n  - From: Starting point of the train.\n  - Arrival: Arrival point of the train.\n  - Railway_ID: Identifier of the railway associated with the train.\n\nForeign Keys:\n- train.Railway_ID references railway.Railway_ID, linking trains to specific railways.\n- railway_manage.Railway_ID references railway.Railway_ID, establishing a relationship between railway management and railways.\n- railway_manage.Manager_ID references manager.Manager_ID, connecting railway management to managers.",
    "real_estate_properties": "Table Other_Available_Features:\n- Contains information about various available features.\n- Columns:\n  - feature_id: Unique identifier for each feature.\n  - feature_type_code: Code representing the type of feature.\n  - feature_name: Name of the feature.\n  - feature_description: Description of the feature.\n\nTable Other_Property_Features:\n- Stores the relationship between properties and features.\n- Columns:\n  - property_id: Identifier of the property.\n  - feature_id: Identifier of the feature associated with the property.\n  - property_feature_description: Description of the feature in relation to the property.\n\nTable Properties:\n- Holds details about different properties.\n- Columns:\n  - property_id: Unique identifier for each property.\n  - property_type_code: Code representing the type of property.\n  - date_on_market: Date when the property was listed on the market.\n  - date_sold: Date when the property was sold.\n  - property_name: Name of the property.\n  - property_address: Address of the property.\n  - room_count: Number of rooms in the property.\n  - vendor_requested_price: Price requested by the vendor.\n  - buyer_offered_price: Price offered by the buyer.\n  - agreed_selling_price: Price at which the property was sold.\n  - apt_feature_1, apt_feature_2, apt_feature_3: Apartment-specific features.\n  - fld_feature_1, fld_feature_2, fld_feature_3: Field-specific features.\n  - hse_feature_1, hse_feature_2, hse_feature_3: House-specific features.\n  - oth_feature_1, oth_feature_2, oth_feature_3: Other property-specific features.\n  - shp_feature_1, shp_feature_2, shp_feature_3: Shop-specific features.\n  - other_property_details: Additional details about the property.\n\nTable Ref_Feature_Types:\n- Contains reference data for different types of features.\n- Columns:\n  - feature_type_code: Code representing the type of feature.\n  - feature_type_name: Name of the feature type.\n\nTable Ref_Property_Types:\n- Stores reference information about different types of properties.\n- Columns:\n  - property_type_code: Code representing the type of property.\n  - property_type_description: Description of the property type.\n\nForeign Keys:\n- Other_Available_Features.feature_type_code references Ref_Feature_Types.feature_type_code, establishing a relationship between available features and their types.\n- Properties.property_type_code references Ref_Property_Types.property_type_code, linking properties to their types.\n- Other_Property_Features.property_id references Properties.property_id, connecting property features to properties.\n- Other_Property_Features.feature_id references Other_Available_Features.feature_id, establishing a relationship between property features and available features.",
    "restaurants": "Table GEOGRAPHIC:\n- Contains geographic information about cities.\n- Columns:\n  - CITY_NAME: Name of the city.\n  - COUNTY: County where the city is located.\n  - REGION: Region to which the city belongs.\n\nTable LOCATION:\n- Stores details about various locations, including restaurants.\n- Columns:\n  - RESTAURANT_ID: Unique identifier for each restaurant.\n  - HOUSE_NUMBER: House number of the location.\n  - STREET_NAME: Name of the street where the location is situated.\n  - CITY_NAME: Name of the city where the location is.\n  \nTable RESTAURANT:\n- Contains information about different restaurants.\n- Columns:\n  - ID: Unique identifier for each restaurant.\n  - NAME: Name of the restaurant.\n  - FOOD_TYPE: Type of food served at the restaurant.\n  - CITY_NAME: Name of the city where the restaurant is located.\n  - RATING: Rating of the restaurant.\n\nForeign Keys:\n- RESTAURANT.CITY_NAME references GEOGRAPHIC.CITY_NAME, establishing a relationship between restaurants and cities in the geographic table.\n- LOCATION.CITY_NAME references GEOGRAPHIC.CITY_NAME, linking locations to specific cities in the geographic table.",
    "restaurant_1": "Table Restaurant:\n- Contains information about different restaurants.\n- Columns:\n  - ResID: Unique identifier for each restaurant.\n  - ResName: Name of the restaurant.\n  - Address: Address of the restaurant.\n  - Rating: Rating assigned to the restaurant.\n\nTable Restaurant_Type:\n- Stores data related to types of restaurants.\n- Columns:\n  - ResTypeID: Unique identifier for each restaurant type.\n  - ResTypeName: Name of the restaurant type.\n  - ResTypeDescription: Description of the restaurant type.\n\nTable Student:\n- Contains details about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - FName: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Major of the student.\n  - Advisor: Advisor of the student.\n  - city_code: Code representing the city where the student resides.\n\nTable Type_Of_Restaurant:\n- Stores the relationship between restaurants and their types.\n- Columns:\n  - ResID: Identifier of the restaurant.\n  - ResTypeID: Identifier of the restaurant type.\n\nTable Visits_Restaurant:\n- Contains data about student visits to restaurants.\n- Columns:\n  - StuID: Identifier of the student.\n  - ResID: Identifier of the restaurant visited.\n  - Time: Time of the visit.\n  - Spent: Amount spent during the visit.\n\nForeign Keys:\n- Type_Of_Restaurant.ResTypeID references Restaurant_Type.ResTypeID, establishing a relationship between restaurant types and their respective types.\n- Type_Of_Restaurant.ResID references Restaurant.ResID, linking restaurant types to specific restaurants.\n- Visits_Restaurant.ResID references Restaurant.ResID, connecting restaurant visits to specific restaurants.\n- Visits_Restaurant.StuID references Student.StuID, establishing a relationship between student visits and students.",
    "riding_club": "Table club:\n- Contains information about different clubs.\n- Columns:\n  - Club_ID: Unique identifier for each club.\n  - Club_name: Name of the club.\n  - Region: Region where the club is located.\n  - Start_year: Year when the club was established.\n\nTable coach:\n- Stores data related to coaches.\n- Columns:\n  - Coach_ID: Unique identifier for each coach.\n  - Coach_name: Name of the coach.\n  - Gender: Gender of the coach.\n  - Club_ID: Identifier of the club the coach belongs to.\n  - Rank: Rank of the coach.\n\nTable match_result:\n- Contains results of matches.\n- Columns:\n  - Rank: Rank of the match result.\n  - Club_ID: Identifier of the club related to the match result.\n  - Gold: Number of gold medals won.\n  - Big_Silver: Number of big silver medals won.\n  - Small_Silver: Number of small silver medals won.\n  - Bronze: Number of bronze medals won.\n  - Points: Points earned in the match.\n\nTable player:\n- Stores information about players.\n- Columns:\n  - Player_ID: Unique identifier for each player.\n  - Sponsor_name: Name of the player's sponsor.\n  - Player_name: Name of the player.\n  - Gender: Gender of the player.\n  - Residence: Residence of the player.\n  - Occupation: Occupation of the player.\n  - Votes: Number of votes received.\n  - Rank: Rank of the player.\n\nTable player_coach:\n- Contains data about player-coach relationships.\n- Columns:\n  - Player_ID: Identifier of the player.\n  - Coach_ID: Identifier of the coach.\n  - Starting_year: Year when the player-coach relationship started.\n\nForeign Keys:\n- coach.Club_ID references club.Club_ID, establishing a relationship between coaches and clubs.\n- player_coach.Coach_ID references coach.Coach_ID, linking player-coach relationships to coaches.\n- player_coach.Player_ID references player.Player_ID, connecting player-coach relationships to players.\n- match_result.Club_ID references club.Club_ID, linking match results to specific clubs.",
    "roller_coaster": "Table country:\n- Contains information about different countries.\n- Columns:\n  - Country_ID: Unique identifier for each country.\n  - Name: Name of the country.\n  - Population: Population count of the country.\n  - Area: Area size of the country.\n  - Languages: Languages spoken in the country.\n\nTable roller_coaster:\n- Stores data related to roller coasters in various parks.\n- Columns:\n  - Roller_Coaster_ID: Unique identifier for each roller coaster.\n  - Name: Name of the roller coaster.\n  - Park: Name of the park where the roller coaster is located.\n  - Country_ID: Foreign key referencing the id of the country in the country table.\n  - Length: Length of the roller coaster.\n  - Height: Height of the roller coaster.\n  - Speed: Speed of the roller coaster.\n  - Opened: Date when the roller coaster was opened.\n  - Status: Current status of the roller coaster.\n\nForeign Keys:\n- roller_coaster.Country_ID references country.Country_ID, establishing a relationship between roller coasters and countries.",
    "sakila_1": "Table actor:\n- Contains information about actors.\n- Columns:\n  - actor_id: Unique identifier for each actor.\n  - first_name: First name of the actor.\n  - last_name: Last name of the actor.\n  - last_update: Timestamp of the last update made to the actor's information.\n\nTable address:\n- Stores details about addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - address: Address information.\n  - address2: Additional address information.\n  - district: District of the address.\n  - city_id: Foreign key referencing the id of the city in the city table.\n  - postal_code: Postal code of the address.\n  - phone: Phone number associated with the address.\n  - last_update: Timestamp of the last update made to the address.\n\nTable category:\n- Contains information about film categories.\n- Columns:\n  - category_id: Unique identifier for each category.\n  - name: Name of the category.\n  - last_update: Timestamp of the last update made to the category.\n\nTable city:\n- Stores data related to cities.\n- Columns:\n  - city_id: Unique identifier for each city.\n  - city: Name of the city.\n  - country_id: Foreign key referencing the id of the country in the country table.\n  - last_update: Timestamp of the last update made to the city.\n\nTable country:\n- Contains information about countries.\n- Columns:\n  - country_id: Unique identifier for each country.\n  - country: Name of the country.\n  - last_update: Timestamp of the last update made to the country.\n\nTable customer:\n- Stores details about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - store_id: Identifier of the store the customer is associated with.\n  - first_name: First name of the customer.\n  - last_name: Last name of the customer.\n  - email: Email address of the customer.\n  - address_id: Identifier of the address associated with the customer.\n  - active: Indicates if the customer is active.\n  - create_date: Date when the customer was created.\n  - last_update: Timestamp of the last update made to the customer.\n\nTable film:\n- Contains information about films.\n- Columns:\n  - film_id: Unique identifier for each film.\n  - title: Title of the film.\n  - description: Description of the film.\n  - release_year: Year when the film was released.\n  - language_id: Identifier of the language of the film.\n  - original_language_id: Identifier of the original language of the film.\n  - rental_duration: Duration for which the film can be rented.\n  - rental_rate: Rate at which the film can be rented.\n  - length: Length of the film.\n  - replacement_cost: Cost of replacing the film.\n  - rating: Rating of the film.\n  - special_features: Special features of the film.\n  - last_update: Timestamp of the last update made to the film.\n\nTable film_actor:\n- Stores the relationship between films and actors.\n- Columns:\n  - actor_id: Identifier of the actor.\n  - film_id: Identifier of the film.\n  - last_update: Timestamp of the last update made to the film-actor relationship.\n\nTable film_category:\n- Represents the relationship between films and categories.\n- Columns:\n  - film_id: Identifier of the film.\n  - category_id: Identifier of the category.\n  - last_update: Timestamp of the last update made to the film-category relationship.\n\nTable film_text:\n- Contains text information related to films.\n- Columns:\n  - film_id: Identifier of the film.\n  - title: Title of the film.\n  - description: Description of the film.\n\nTable inventory:\n- Stores details about film inventory.\n- Columns:\n  - inventory_id: Unique identifier for each inventory entry.\n  - film_id: Identifier of the film in the inventory.\n  - store_id: Identifier of the store where the film is stocked.\n  - last_update: Timestamp of the last update made to the inventory.\n\nTable language:\n- Contains information about languages.\n- Columns:\n  - language_id: Unique identifier for each language.\n  - name: Name of the language.\n  - last_update: Timestamp of the last update made to the language.\n\nTable payment:\n- Stores payment information.\n- Columns:\n  - payment_id: Unique identifier for each payment.\n  - customer_id: Identifier of the customer making the payment.\n  - staff_id: Identifier of the staff member processing the payment.\n  - rental_id: Identifier of the rental associated with the payment.\n  - amount: Amount of the payment.\n  - payment_date: Date of the payment.\n  - last_update: Timestamp of the last update made to the payment.\n\nTable rental:\n- Contains details about rentals.\n- Columns:\n  - rental_id: Unique identifier for each rental.\n  - rental_date: Date when the rental was made.\n  - inventory_id: Identifier of the inventory item rented.\n  - customer_id: Identifier of the customer renting the item.\n  - return_date: Date of return for the rental.\n  - staff_id: Identifier of the staff member handling the rental.\n  - last_update: Timestamp of the last update made to the rental.\n\nTable staff:\n- Stores information about staff members.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - first_name: First name of the staff member.\n  - last_name: Last name of the staff member.\n  - address_id: Identifier of the address of the staff member.\n  - picture: Picture of the staff member.\n  - email: Email address of the staff member.\n  - store_id: Identifier of the store where the staff member works.\n  - active: Indicates if the staff member is active.\n  - username: Username of the staff member.\n  - password: Password of the staff member.\n  - last_update: Timestamp of the last update made to the staff member.\n\nTable store:\n- Contains information about stores.\n- Columns:\n  - store_id: Unique identifier for each store.\n  - manager_staff_id: Identifier of the staff member managing the store.\n  - address_id: Identifier of the address of the store.\n  - last_update: Timestamp of the last update made to the store.\n\nForeign Keys:\n- address.city_id references city.city_id, establishing a relationship between addresses and cities.\n- city.country_id references country.country_id, linking cities to specific countries.\n- customer.store_id references store.store_id, connecting customers to their respective stores.\n- customer.address_id references address.address_id, establishing a relationship between customers and addresses.\n- film.original_language_id references language.language_id, linking films to their original languages.\n- film.language_id references language.language_id, connecting films to their languages.\n- film_actor.film_id references film.film_id, establishing a relationship between films and actors.\n- film_actor.actor_id references actor.actor_id, linking films to actors.\n- film_category.category_id references category.category_id, connecting films to categories.\n- film_category.film_id references film.film_id, establishing a relationship between films and categories.\n- inventory.film_id references film.film_id, linking inventory to films.\n- inventory.store_id references store.store_id, connecting inventory to stores.\n- payment.staff_id references staff.staff_id, establishing a relationship between payments and staff members.\n- payment.customer_id references customer.customer_id, linking payments to customers.\n- payment.rental_id references rental.rental_id, connecting payments to rentals.\n- rental.customer_id references customer.customer_id, establishing a relationship between rentals and customers.\n- rental.inventory_id references inventory.inventory_id, linking rentals to inventory items.\n- rental.staff_id references staff.staff_id, connecting rentals to staff members.\n- staff.address_id references address.address_id, establishing a relationship between staff members and addresses.\n- store.address_id references address.address_id, linking stores to addresses.\n- store.manager_staff_id references staff.staff_id, connecting stores to managing staff members.",
    "scholar": "Table author:\n- Contains information about authors.\n- Columns:\n  - authorId: Unique identifier for each author.\n  - authorName: Name of the author.\n\nTable cite:\n- Stores data related to paper citations.\n- Columns:\n  - citingPaperId: Identifier of the paper citing another paper.\n  - citedPaperId: Identifier of the paper being cited.\n\nTable dataset:\n- Contains details about datasets.\n- Columns:\n  - datasetId: Unique identifier for each dataset.\n  - datasetName: Name of the dataset.\n\nTable journal:\n- Stores information about journals.\n- Columns:\n  - journalId: Unique identifier for each journal.\n  - journalName: Name of the journal.\n\nTable keyphrase:\n- Contains keyphrases related to papers.\n- Columns:\n  - keyphraseId: Unique identifier for each keyphrase.\n  - keyphraseName: Name of the keyphrase.\n\nTable paper:\n- Contains details about papers.\n- Columns:\n  - paperId: Unique identifier for each paper.\n  - title: Title of the paper.\n  - venueId: Identifier of the venue where the paper was published.\n  - year: Year of publication of the paper.\n  - numCiting: Number of times the paper has been cited.\n  - numCitedBy: Number of times the paper has been cited by other papers.\n  - journalId: Identifier of the journal where the paper was published.\n\nTable paperDataset:\n- Represents the relationship between papers and datasets.\n- Columns:\n  - paperId: Identifier of the paper.\n  - datasetId: Identifier of the dataset associated with the paper.\n\nTable paperKeyphrase:\n- Represents the relationship between papers and keyphrases.\n- Columns:\n  - paperId: Identifier of the paper.\n  - keyphraseId: Identifier of the keyphrase associated with the paper.\n\nTable venue:\n- Contains information about venues where papers are published.\n- Columns:\n  - venueId: Unique identifier for each venue.\n  - venueName: Name of the venue.\n\nTable writes:\n- Represents the relationship between authors and papers.\n- Columns:\n  - paperId: Identifier of the paper.\n  - authorId: Identifier of the author.\n\nForeign Keys:\n- paper.venueId references venue.venueId, establishing a relationship between papers and venues.\n- paper.journalId references journal.journalId, linking papers to specific journals.\n- cite.citingPaperId references paper.paperId, connecting citing papers to the cited papers.\n- cite.citedPaperId references paper.paperId, linking cited papers to the citing papers.\n- paperKeyphrase.keyphraseId references keyphrase.keyphraseId, establishing a relationship between papers and keyphrases.\n- paperKeyphrase.paperId references paper.paperId, linking papers to keyphrases.\n- writes.authorId references author.authorId, connecting authors to their respective papers.\n- writes.paperId references paper.paperId, establishing a relationship between authors and papers.",
    "school_bus": "Table driver:\n- Contains information about drivers.\n- Columns:\n  - Driver_ID: Unique identifier for each driver.\n  - Name: Name of the driver.\n  - Party: Party affiliation of the driver.\n  - Home_city: City where the driver resides.\n  - Age: Age of the driver.\n\nTable school:\n- Stores data related to schools.\n- Columns:\n  - School_ID: Unique identifier for each school.\n  - Grade: Grade level of the school.\n  - School: Name of the school.\n  - Location: Location of the school.\n  - Type: Type of the school.\n\nTable school_bus:\n- Contains details about school buses and their drivers.\n- Columns:\n  - School_ID: Identifier of the school associated with the bus.\n  - Driver_ID: Identifier of the driver assigned to the bus.\n  - Years_Working: Number of years the driver has been working.\n  - If_full_time: Indicates whether the driver is full-time or not.\n\nForeign Keys:\n- school_bus.Driver_ID references driver.Driver_ID, establishing a relationship between school buses and drivers.\n- school_bus.School_ID references school.School_ID, linking school buses to specific schools.",
    "school_finance": "Table School:\n- Contains information about different schools.\n- Columns:\n  - School_id: Unique identifier for each school.\n  - School_name: Name of the school.\n  - Location: Location of the school.\n  - Mascot: Mascot associated with the school.\n  - Enrollment: Number of students enrolled in the school.\n  - IHSAA_Class: Class designation in the Indiana High School Athletic Association.\n  - IHSAA_Football_Class: Football class designation in the Indiana High School Athletic Association.\n  - County: County where the school is located.\n\nTable budget:\n- Stores budget-related data for schools.\n- Columns:\n  - School_id: Identifier of the school.\n  - Year: Year to which the budget data corresponds.\n  - Budgeted: Amount budgeted for the school.\n  - total_budget_percent_budgeted: Percentage of the total budget that is budgeted.\n  - Invested: Amount invested in the school.\n  - total_budget_percent_invested: Percentage of the total budget that is invested.\n  - Budget_invested_percent: Percentage of the budget that is invested.\n\nTable endowment:\n- Contains information about endowments for schools.\n- Columns:\n  - endowment_id: Unique identifier for each endowment.\n  - School_id: Identifier of the school associated with the endowment.\n  - donator_name: Name of the donor contributing to the endowment.\n  - amount: Amount of the endowment.\n\nForeign Keys:\n- budget.School_id references School.School_id, establishing a relationship between budget and schools.\n- endowment.School_id references School.School_id, linking endowments to specific schools.",
    "school_player": "Table player:\n- Contains information about players.\n- Columns:\n  - Player_ID: Unique identifier for each player.\n  - Player: Name of the player.\n  - Team: Team the player belongs to.\n  - Age: Age of the player.\n  - Position: Position played by the player.\n  - School_ID: Identifier of the school the player attended.\n\nTable school:\n- Stores data related to schools.\n- Columns:\n  - School_ID: Unique identifier for each school.\n  - School: Name of the school.\n  - Location: Location of the school.\n  - Enrollment: Number of students enrolled in the school.\n  - Founded: Year the school was founded.\n  - Denomination: Denomination of the school.\n  - Boys_or_Girls: Indicates if the school is for boys, girls, or co-ed.\n  - Day_or_Boarding: Specifies if the school offers day or boarding facilities.\n  - Year_Entered_Competition: Year the school entered a competition.\n  - School_Colors: Colors associated with the school.\n\nTable school_details:\n- Contains additional details about schools.\n- Columns:\n  - School_ID: Identifier of the school.\n  - Nickname: Nickname of the school.\n  - Colors: Colors representing the school.\n  - League: League the school participates in.\n  - Class: Class of the school.\n  - Division: Division of the school.\n\nTable school_performance:\n- Stores performance data of schools.\n- Columns:\n  - School_Id: Identifier of the school.\n  - School_Year: Year of the school performance data.\n  - Class_A: Performance data for Class A.\n  - Class_AA: Performance data for Class AA.\n\nForeign Keys:\n- school_details.School_ID references school.School_ID, establishing a relationship between school_details and school.\n- school_performance.School_Id references school.School_ID, linking school_performance to specific schools.\n- player.School_ID references school.School_ID, connecting players to the schools they attended.",
    "scientist_1": "Table AssignedTo:\n- Contains information about the assignment of scientists to projects.\n- Columns:\n  - Scientist: Identifier of the scientist assigned to a project.\n  - Project: Identifier of the project to which a scientist is assigned.\n\nTable Projects:\n- Stores details about different projects.\n- Columns:\n  - Code: Unique identifier for each project.\n  - Name: Name of the project.\n  - Hours: Number of hours allocated to the project.\n\nTable Scientists:\n- Contains data related to scientists.\n- Columns:\n  - SSN: Social Security Number, unique identifier for each scientist.\n  - Name: Name of the scientist.\n\nForeign Keys:\n- AssignedTo.Project references Projects.Code, establishing a relationship between AssignedTo and Projects based on project codes.\n- AssignedTo.Scientist references Scientists.SSN, linking AssignedTo to Scientists based on scientist SSNs.",
    "ship_1": "Table Ship:\n- Contains information about different ships.\n- Columns:\n  - Ship_ID: Unique identifier for each ship.\n  - Name: Name of the ship.\n  - Type: Type of the ship.\n  - Built_Year: Year in which the ship was built.\n  - Class: Class of the ship.\n  - Flag: Flag representing the country the ship is registered under.\n\nTable captain:\n- Stores data related to ship captains.\n- Columns:\n  - Captain_ID: Unique identifier for each captain.\n  - Name: Name of the captain.\n  - Ship_ID: Identifier of the ship the captain is associated with.\n  - Age: Age of the captain.\n  - Class: Class of the captain.\n  - Rank: Rank of the captain.\n\nForeign Keys:\n- captain.Ship_ID references Ship.Ship_ID, establishing a relationship between captains and the ships they are associated with.",
    "ship_mission": "Table mission:\n- Contains information about different missions.\n- Columns:\n  - Mission_ID: Unique identifier for each mission.\n  - Ship_ID: Identifier of the ship associated with the mission.\n  - Code: Code assigned to the mission.\n  - Launched_Year: Year when the mission was launched.\n  - Location: Location where the mission took place.\n  - Speed_knots: Speed of the ship in knots during the mission.\n  - Fate: Outcome or fate of the mission.\n\nTable ship:\n- Stores details about different ships.\n- Columns:\n  - Ship_ID: Unique identifier for each ship.\n  - Name: Name of the ship.\n  - Type: Type or category of the ship.\n  - Nationality: Nationality of the ship.\n  - Tonnage: Tonnage of the ship.\n\nForeign Keys:\n- mission.Ship_ID references ship.Ship_ID, establishing a relationship between missions and ships.",
    "shop_membership": "Table branch:\n- Contains information about different branches.\n- Columns:\n  - Branch_ID: Unique identifier for each branch.\n  - Name: Name of the branch.\n  - Open_year: Year when the branch was opened.\n  - Address_road: Street address of the branch.\n  - City: City where the branch is located.\n  - membership_amount: Amount of membership fee for the branch.\n\nTable member:\n- Stores data related to members.\n- Columns:\n  - Member_ID: Unique identifier for each member.\n  - Card_Number: Membership card number of the member.\n  - Name: Name of the member.\n  - Hometown: Hometown of the member.\n  - Level: Level of membership of the member.\n\nTable membership_register_branch:\n- Contains records of members registered at different branches.\n- Columns:\n  - Member_ID: Identifier of the member.\n  - Branch_ID: Identifier of the branch where the member is registered.\n  - Register_Year: Year when the member registered at the branch.\n\nTable purchase:\n- Stores information about purchases made by members at branches.\n- Columns:\n  - Member_ID: Identifier of the member making the purchase.\n  - Branch_ID: Identifier of the branch where the purchase was made.\n  - Year: Year when the purchase was made.\n  - Total_pounds: Total amount spent by the member in pounds.\n\nForeign Keys:\n- membership_register_branch.Branch_ID references branch.Branch_ID, establishing a relationship between membership registration and branches.\n- membership_register_branch.Member_ID references member.Member_ID, linking membership registration to members.\n- purchase.Branch_ID references branch.Branch_ID, connecting purchases to specific branches.\n- purchase.Member_ID references member.Member_ID, establishing a relationship between purchases and members.",
    "singer": "Table singer:\n- Contains information about singers.\n- Columns:\n  - Singer_ID: Unique identifier for each singer.\n  - Name: Name of the singer.\n  - Birth_Year: Year of birth of the singer.\n  - Net_Worth_Millions: Net worth of the singer in millions.\n  - Citizenship: Citizenship of the singer.\n\nTable song:\n- Stores data related to songs.\n- Columns:\n  - Song_ID: Unique identifier for each song.\n  - Title: Title of the song.\n  - Singer_ID: Identifier of the singer who performed the song.\n  - Sales: Sales data related to the song.\n  - Highest_Position: Highest position achieved by the song.\n\nForeign Keys:\n- song.Singer_ID references singer.Singer_ID, establishing a relationship between songs and singers.",
    "small_bank_1": "Table ACCOUNTS:\n- Contains information about customer accounts.\n- Columns:\n  - custid: Unique identifier for each customer.\n  - name: Name of the customer associated with the account.\n\nTable CHECKING:\n- Stores data related to checking accounts.\n- Columns:\n  - custid: Identifier of the customer who owns the checking account.\n  - balance: Balance amount in the checking account.\n\nTable SAVINGS:\n- Contains details about savings accounts.\n- Columns:\n  - custid: Identifier of the customer who owns the savings account.\n  - balance: Balance amount in the savings account.\n\nForeign Keys:\n- SAVINGS.custid references ACCOUNTS.custid, establishing a relationship between savings accounts and customers.\n- CHECKING.custid references ACCOUNTS.custid, linking checking accounts to customers.",
    "soccer_1": "Table Country:\n- Contains information about different countries.\n- Columns:\n  - id: Unique identifier for each country.\n  - name: Name of the country.\n\nTable League:\n- Stores data related to different leagues.\n- Columns:\n  - id: Unique identifier for each league.\n  - country_id: Foreign key referencing the id of the country in the Country table.\n  - name: Name of the league.\n\nTable Player:\n- Contains details about players.\n- Columns:\n  - id: Unique identifier for each player.\n  - player_api_id: API identifier for the player.\n  - player_name: Name of the player.\n  - player_fifa_api_id: FIFA API identifier for the player.\n  - birthday: Birthdate of the player.\n  - height: Height of the player.\n  - weight: Weight of the player.\n\nTable Player_Attributes:\n- Stores attributes of players.\n- Columns:\n  - id: Unique identifier for each player attribute entry.\n  - player_fifa_api_id: FIFA API identifier for the player.\n  - player_api_id: API identifier for the player.\n  - date: Date of the player attribute data.\n  - overall_rating: Overall rating of the player.\n  - potential: Potential rating of the player.\n  - preferred_foot: Preferred foot of the player.\n  - Various other attributes related to player skills and characteristics.\n\nTable Team:\n- Contains information about different teams.\n- Columns:\n  - id: Unique identifier for each team.\n  - team_api_id: API identifier for the team.\n  - team_fifa_api_id: FIFA API identifier for the team.\n  - team_long_name: Full name of the team.\n  - team_short_name: Short name or abbreviation of the team.\n\nTable Team_Attributes:\n- Stores attributes of teams.\n- Columns:\n  - id: Unique identifier for each team attribute entry.\n  - team_fifa_api_id: FIFA API identifier for the team.\n  - team_api_id: API identifier for the team.\n  - date: Date of the team attribute data.\n  - Various attributes related to team playing style and characteristics.\n\nTable sqlite_sequence:\n- Contains information about the sequence of SQLite tables.\n- Columns:\n  - name: Name of the SQLite table.\n  - seq: Sequence number.\n\nForeign Keys:\n- Player_Attributes.player_api_id references Player.player_api_id, linking player attributes to players.\n- Player_Attributes.player_fifa_api_id references Player.player_fifa_api_id, establishing a relationship between player attributes and players.\n- League.country_id references Country.id, connecting leagues to specific countries.\n- Team_Attributes.team_api_id references Team.team_api_id, linking team attributes to teams.\n- Team_Attributes.team_fifa_api_id references Team.team_fifa_api_id, establishing a relationship between team attributes and teams.",
    "soccer_2": "Table College:\n- Contains information about different colleges.\n- Columns:\n  - cName: Name of the college.\n  - state: State where the college is located.\n  - enr: Enrollment count of the college.\n\nTable Player:\n- Stores data related to players.\n- Columns:\n  - pID: Unique identifier for each player.\n  - pName: Name of the player.\n  - yCard: Year of the player's card.\n  - HS: High school attended by the player.\n\nTable Tryout:\n- Contains details about player tryouts at colleges.\n- Columns:\n  - pID: Identifier of the player.\n  - cName: Name of the college where the tryout took place.\n  - pPos: Position of the player during the tryout.\n  - decision: Outcome decision of the tryout.\n\nForeign Keys:\n- Tryout.cName references College.cName, establishing a relationship between tryouts and colleges.\n- Tryout.pID references Player.pID, linking tryouts to specific players.",
    "solvency_ii": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - Address_ID: Unique identifier for each address.\n  - address_details: Details of the address.\n\nTable Agreements:\n- Stores agreements related data.\n- Columns:\n  - Document_ID: Identifier for the document related to the agreement.\n  - Event_ID: Identifier of the event associated with the agreement.\n\nTable Assets:\n- Contains details about various assets.\n- Columns:\n  - Asset_ID: Unique identifier for each asset.\n  - Other_Details: Additional details about the asset.\n\nTable Assets_in_Events:\n- Represents the relationship between assets and events.\n- Columns:\n  - Asset_ID: Identifier of the asset.\n  - Event_ID: Identifier of the event.\n\nTable Channels:\n- Stores information about different communication channels.\n- Columns:\n  - Channel_ID: Unique identifier for each channel.\n  - Other_Details: Additional details about the channel.\n\nTable Events:\n- Contains data related to various events.\n- Columns:\n  - Event_ID: Unique identifier for each event.\n  - Address_ID: Identifier of the address associated with the event.\n  - Channel_ID: Identifier of the channel used for the event.\n  - Event_Type_Code: Code representing the type of event.\n  - Finance_ID: Identifier of the finance related to the event.\n  - Location_ID: Identifier of the location where the event takes place.\n\nTable Finances:\n- Stores financial information.\n- Columns:\n  - Finance_ID: Unique identifier for each financial record.\n  - Other_Details: Additional details related to finances.\n\nTable Locations:\n- Contains details about different locations.\n- Columns:\n  - Location_ID: Unique identifier for each location.\n  - Other_Details: Additional details about the location.\n\nTable Parties:\n- Stores information about different parties involved.\n- Columns:\n  - Party_ID: Unique identifier for each party.\n  - Party_Details: Details about the party.\n\nTable Parties_in_Events:\n- Represents the relationship between parties and events.\n- Columns:\n  - Party_ID: Identifier of the party.\n  - Event_ID: Identifier of the event.\n  - Role_Code: Code representing the role of the party in the event.\n\nTable Products:\n- Contains details about various products.\n- Columns:\n  - Product_ID: Unique identifier for each product.\n  - Product_Type_Code: Code representing the type of product.\n  - Product_Name: Name of the product.\n  - Product_Price: Price of the product.\n\nTable Products_in_Events:\n- Represents the relationship between products and events.\n- Columns:\n  - Product_in_Event_ID: Unique identifier for each product-event relationship.\n  - Event_ID: Identifier of the event.\n  - Product_ID: Identifier of the product.\n\nForeign Keys:\n- Events.Finance_ID references Finances.Finance_ID, linking events to financial records.\n- Events.Address_ID references Addresses.Address_ID, establishing a relationship between events and addresses.\n- Events.Location_ID references Locations.Location_ID, connecting events to specific locations.\n- Products_in_Events.Product_ID references Products.Product_ID, linking products to specific events.\n- Products_in_Events.Event_ID references Events.Event_ID, establishing a relationship between products and events.\n- Parties_in_Events.Event_ID references Events.Event_ID, linking parties to specific events.\n- Parties_in_Events.Party_ID references Parties.Party_ID, connecting parties to events.\n- Agreements.Event_ID references Events.Event_ID, establishing a relationship between agreements and events.\n- Assets_in_Events.Event_ID references Events.Event_ID, linking assets to events.",
    "sports_competition": "Table club:\n- Contains information about different clubs.\n- Columns:\n  - Club_ID: Unique identifier for each club.\n  - name: Name of the club.\n  - Region: Region where the club is located.\n  - Start_year: Year when the club was established.\n\nTable club_rank:\n- Stores ranking data for clubs.\n- Columns:\n  - Rank: Ranking position of the club.\n  - Club_ID: Identifier of the club.\n  - Gold: Number of gold medals won by the club.\n  - Silver: Number of silver medals won by the club.\n  - Bronze: Number of bronze medals won by the club.\n  - Total: Total number of medals won by the club.\n\nTable competition:\n- Contains details about different competitions.\n- Columns:\n  - Competition_ID: Unique identifier for each competition.\n  - Year: Year when the competition took place.\n  - Competition_type: Type of the competition.\n  - Country: Country where the competition was held.\n\nTable competition_result:\n- Stores results of competitions between clubs.\n- Columns:\n  - Competition_ID: Identifier of the competition.\n  - Club_ID_1: Identifier of the first club in the competition.\n  - Club_ID_2: Identifier of the second club in the competition.\n  - Score: Score or result of the competition.\n\nTable player:\n- Contains information about players.\n- Columns:\n  - Player_ID: Unique identifier for each player.\n  - name: Name of the player.\n  - Position: Position played by the player.\n  - Club_ID: Identifier of the club to which the player belongs.\n  - Apps: Appearances made by the player.\n  - Tries: Number of tries scored by the player.\n  - Goals: Number of goals scored by the player.\n  - Points: Total points scored by the player.\n\nForeign Keys:\n- club_rank.Club_ID references club.Club_ID, establishing a relationship between club_rank and club.\n- player.Club_ID references club.Club_ID, linking players to their respective clubs.\n- competition_result.Competition_ID references competition.Competition_ID, connecting competition_result to specific competitions.\n- competition_result.Club_ID_2 references club.Club_ID, linking the second club in competition_result to a club.\n- competition_result.Club_ID_1 references club.Club_ID, linking the first club in competition_result to a club.",
    "station_weather": "Table route:\n- Contains information about the routes taken by trains.\n- Columns:\n  - train_id: Identifier of the train using the route.\n  - station_id: Identifier of the station on the route.\n\nTable station:\n- Stores details about different stations.\n- Columns:\n  - id: Unique identifier for each station.\n  - network_name: Name of the network associated with the station.\n  - services: Services provided at the station.\n  - local_authority: Local authority governing the station.\n\nTable train:\n- Contains data related to trains.\n- Columns:\n  - id: Unique identifier for each train.\n  - train_number: Number assigned to the train.\n  - name: Name of the train.\n  - origin: Starting point of the train.\n  - destination: Final destination of the train.\n  - time: Time schedule of the train.\n  - interval: Time interval between train schedules.\n\nTable weekly_weather:\n- Stores weekly weather data for stations.\n- Columns:\n  - station_id: Identifier of the station for which weather data is recorded.\n  - day_of_week: Day of the week for the weather data.\n  - high_temperature: Highest temperature recorded for the day.\n  - low_temperature: Lowest temperature recorded for the day.\n  - precipitation: Amount of precipitation for the day.\n  - wind_speed_mph: Wind speed in miles per hour.\n\nForeign Keys:\n- route.station_id references station.id, establishing a relationship between routes and stations.\n- route.train_id references train.id, linking routes to specific trains.\n- weekly_weather.station_id references station.id, connecting weekly weather data to specific stations.",
    "store_1": "Table albums:\n- Contains information about music albums.\n- Columns:\n  - id: Unique identifier for each album.\n  - title: Title of the album.\n  - artist_id: Identifier of the artist who created the album, referencing the id in the artists table.\n\nTable artists:\n- Stores details about music artists.\n- Columns:\n  - id: Unique identifier for each artist.\n  - name: Name of the artist.\n\nTable customers:\n- Contains data related to customers.\n- Columns:\n  - id: Unique identifier for each customer.\n  - first_name: First name of the customer.\n  - last_name: Last name of the customer.\n  - company: Company name of the customer.\n  - address: Address of the customer.\n  - city: City where the customer is located.\n  - state: State where the customer is located.\n  - country: Country where the customer is located.\n  - postal_code: Postal code of the customer.\n  - phone: Phone number of the customer.\n  - fax: Fax number of the customer.\n  - email: Email address of the customer.\n  - support_rep_id: Identifier of the support representative assigned to the customer, referencing the id in the employees table.\n\nTable employees:\n- Stores information about employees.\n- Columns:\n  - id: Unique identifier for each employee.\n  - last_name: Last name of the employee.\n  - first_name: First name of the employee.\n  - title: Job title of the employee.\n  - reports_to: Identifier of the employee to whom this employee reports, referencing the id in the employees table.\n  - birth_date: Birth date of the employee.\n  - hire_date: Date when the employee was hired.\n  - address: Address of the employee.\n  - city: City where the employee is located.\n  - state: State where the employee is located.\n  - country: Country where the employee is located.\n  - postal_code: Postal code of the employee.\n  - phone: Phone number of the employee.\n  - fax: Fax number of the employee.\n  - email: Email address of the employee.\n\nTable genres:\n- Contains information about music genres.\n- Columns:\n  - id: Unique identifier for each genre.\n  - name: Name of the genre.\n\nTable invoice_lines:\n- Stores details about individual invoice line items.\n- Columns:\n  - id: Unique identifier for each invoice line.\n  - invoice_id: Identifier of the invoice to which this line item belongs.\n  - track_id: Identifier of the music track in the line item.\n  - unit_price: Price per unit of the track.\n  - quantity: Quantity of the track in the line item.\n\nTable invoices:\n- Contains data related to invoices.\n- Columns:\n  - id: Unique identifier for each invoice.\n  - customer_id: Identifier of the customer associated with the invoice, referencing the id in the customers table.\n  - invoice_date: Date of the invoice.\n  - billing_address: Billing address for the invoice.\n  - billing_city: Billing city for the invoice.\n  - billing_state: Billing state for the invoice.\n  - billing_country: Billing country for the invoice.\n  - billing_postal_code: Billing postal code for the invoice.\n  - total: Total amount of the invoice.\n\nTable media_types:\n- Stores information about different types of media.\n- Columns:\n  - id: Unique identifier for each media type.\n  - name: Name of the media type.\n\nTable playlist_tracks:\n- Contains the mapping of tracks to playlists.\n- Columns:\n  - playlist_id: Identifier of the playlist.\n  - track_id: Identifier of the track in the playlist.\n\nTable playlists:\n- Stores details about playlists.\n- Columns:\n  - id: Unique identifier for each playlist.\n  - name: Name of the playlist.\n\nTable sqlite_sequence:\n- Contains information about the sequence of SQLite tables.\n- Columns:\n  - name: Name of the SQLite table.\n  - seq: Sequence number.\n\nTable tracks:\n- Contains details about music tracks.\n- Columns:\n  - id: Unique identifier for each track.\n  - name: Name of the track.\n  - album_id: Identifier of the album to which the track belongs, referencing the id in the albums table.\n  - media_type_id: Identifier of the media type of the track, referencing the id in the media_types table.\n  - genre_id: Identifier of the genre of the track, referencing the id in the genres table.\n  - composer: Composer of the track.\n  - milliseconds: Duration of the track in milliseconds.\n  - bytes: Size of the track in bytes.\n  - unit_price: Price of the track.\n\nForeign Keys:\n- albums.artist_id references artists.id, establishing a relationship between albums and artists.\n- employees.reports_to references employees.id, linking employees to their respective supervisors.\n- customers.support_rep_id references employees.id, connecting customers to their assigned support representatives.\n- invoices.customer_id references customers.id, linking invoices to specific customers.\n- tracks.media_type_id references media_types.id, connecting tracks to their media types.\n- tracks.genre_id references genres.id, linking tracks to their genres.\n- tracks.album_id references albums.id, establishing a relationship between tracks and albums.\n- invoice_lines.track_id references tracks.id, linking invoice line items to specific tracks.\n- invoice_lines.invoice_id references invoices.id, connecting invoice line items to specific invoices.\n- playlist_tracks.track_id references tracks.id, establishing a relationship between playlist tracks and tracks.\n- playlist_tracks.playlist_id references playlists.id, linking playlist tracks to specific playlists.",
    "store_product": "Table district:\n- Contains information about different districts.\n- Columns:\n  - District_ID: Unique identifier for each district.\n  - District_name: Name of the district.\n  - Headquartered_City: City where the district is headquartered.\n  - City_Population: Population of the city in the district.\n  - City_Area: Area of the city in the district.\n\nTable product:\n- Stores details about various products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product: Name or type of the product.\n  - dimensions: Dimensions of the product.\n  - dpi: Dots per inch resolution of the product.\n  - pages_per_minute_color: Number of pages per minute in color.\n  - max_page_size: Maximum page size supported by the product.\n  - interface: Interface type of the product.\n\nTable store:\n- Contains information about different stores.\n- Columns:\n  - Store_ID: Unique identifier for each store.\n  - Store_Name: Name of the store.\n  - Type: Type or category of the store.\n  - Area_size: Size of the store area.\n  - Number_of_product_category: Number of product categories available in the store.\n  - Ranking: Ranking of the store.\n\nTable store_district:\n- Represents the relationship between stores and districts.\n- Columns:\n  - Store_ID: Identifier of the store.\n  - District_ID: Identifier of the district where the store is located.\n\nTable store_product:\n- Represents the relationship between stores and products.\n- Columns:\n  - Store_ID: Identifier of the store.\n  - Product_ID: Identifier of the product available in the store.\n\nForeign Keys:\n- store_product.Store_ID references store.Store_ID, linking products to specific stores.\n- store_district.District_ID references district.District_ID, establishing a relationship between stores and districts.\n- store_district.Store_ID references store.Store_ID, connecting stores to their respective districts.",
    "storm_record": "Table affected_region:\n- Contains data about regions affected by storms.\n- Columns:\n  - Region_id: Unique identifier for each affected region.\n  - Storm_ID: Identifier of the storm affecting the region.\n  - Number_city_affected: Number of cities affected in the region.\n\nTable region:\n- Stores information about different regions.\n- Columns:\n  - Region_id: Unique identifier for each region.\n  - Region_code: Code assigned to the region.\n  - Region_name: Name of the region.\n\nTable storm:\n- Contains details about different storms.\n- Columns:\n  - Storm_ID: Unique identifier for each storm.\n  - Name: Name of the storm.\n  - Dates_active: Dates during which the storm was active.\n  - Max_speed: Maximum speed of the storm.\n  - Damage_millions_USD: Amount of damage caused by the storm in millions of USD.\n  - Number_Deaths: Number of deaths caused by the storm.\n\nForeign Keys:\n- affected_region.Storm_ID references storm.Storm_ID, establishing a relationship between affected regions and storms.\n- affected_region.Region_id references region.Region_id, linking affected regions to specific regions.",
    "student_1": "Table list:\n- Contains information about individuals on a list.\n- Columns:\n  - LastName: Last name of the individual.\n  - FirstName: First name of the individual.\n  - Grade: Grade associated with the individual.\n  - Classroom: Classroom where the individual belongs.\n\nTable teachers:\n- Stores data related to teachers.\n- Columns:\n  - LastName: Last name of the teacher.\n  - FirstName: First name of the teacher.\n  - Classroom: Classroom where the teacher is assigned.\n\nForeign Keys:\n- No foreign keys specified in the provided schema.",
    "student_assessment": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line_1: First line of the address.\n  - line_2: Second line of the address.\n  - city: City of the address.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Candidate_Assessments:\n- Stores data related to assessments of candidates.\n- Columns:\n  - candidate_id: Identifier of the candidate.\n  - qualification: Qualification of the candidate.\n  - assessment_date: Date of the assessment.\n  - assessment_outcome_code: Code representing the outcome of the assessment.\n\nTable Candidates:\n- Contains details about candidates.\n- Columns:\n  - candidate_id: Unique identifier for each candidate.\n  - candidate_details: Details of the candidate.\n\nTable Courses:\n- Stores information about different courses.\n- Columns:\n  - course_id: Unique identifier for each course.\n  - course_name: Name of the course.\n  - course_description: Description of the course.\n  - other_details: Additional details about the course.\n\nTable People:\n- Contains information about people.\n- Columns:\n  - person_id: Unique identifier for each person.\n  - first_name: First name of the person.\n  - middle_name: Middle name of the person.\n  - last_name: Last name of the person.\n  - cell_mobile_number: Mobile number of the person.\n  - email_address: Email address of the person.\n  - login_name: Login name of the person.\n  - password: Password of the person.\n\nTable People_Addresses:\n- Stores the relationship between people and addresses.\n- Columns:\n  - person_address_id: Unique identifier for each person-address relationship.\n  - person_id: Identifier of the person.\n  - address_id: Identifier of the address.\n  - date_from: Start date of the relationship.\n  - date_to: End date of the relationship.\n\nTable Student_Course_Attendance:\n- Contains data about student attendance in courses.\n- Columns:\n  - student_id: Identifier of the student.\n  - course_id: Identifier of the course.\n  - date_of_attendance: Date of attendance for the student in the course.\n\nTable Student_Course_Registrations:\n- Stores information about student registrations for courses.\n- Columns:\n  - student_id: Identifier of the student.\n  - course_id: Identifier of the course.\n  - registration_date: Date of registration for the course by the student.\n\nTable Students:\n- Contains details about students.\n- Columns:\n  - student_id: Unique identifier for each student.\n  - student_details: Details of the student.\n\nForeign Keys:\n- Students.student_id references People.person_id, establishing a relationship between students and people.\n- People_Addresses.address_id references Addresses.address_id, linking people addresses to specific addresses.\n- People_Addresses.person_id references People.person_id, connecting people addresses to people.\n- Student_Course_Registrations.course_id references Courses.course_id, linking student course registrations to specific courses.\n- Student_Course_Registrations.student_id references Students.student_id, connecting student course registrations to students.\n- Student_Course_Attendance.student_id references Student_Course_Registrations.student_id, establishing a relationship between student course attendance and student course registrations.\n- Student_Course_Attendance.course_id references Student_Course_Registrations.course_id, linking student course attendance to student course registrations.\n- Candidates.candidate_id references People.person_id, establishing a relationship between candidates and people.\n- Candidate_Assessments.candidate_id references Candidates.candidate_id, connecting candidate assessments to candidates.",
    "student_transcripts_tracking": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line_1: First line of the address.\n  - line_2: Second line of the address.\n  - line_3: Third line of the address.\n  - city: City of the address.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n  - other_address_details: Additional details related to the address.\n\nTable Courses:\n- Stores details about various courses.\n- Columns:\n  - course_id: Unique identifier for each course.\n  - course_name: Name of the course.\n  - course_description: Description of the course.\n  - other_details: Additional details related to the course.\n\nTable Degree_Programs:\n- Contains information about different degree programs.\n- Columns:\n  - degree_program_id: Unique identifier for each degree program.\n  - department_id: Identifier of the department offering the degree program.\n  - degree_summary_name: Name summarizing the degree program.\n  - degree_summary_description: Description summarizing the degree program.\n  - other_details: Additional details related to the degree program.\n\nTable Departments:\n- Stores data related to various departments.\n- Columns:\n  - department_id: Unique identifier for each department.\n  - department_name: Name of the department.\n  - department_description: Description of the department.\n  - other_details: Additional details related to the department.\n\nTable Sections:\n- Contains information about different sections of courses.\n- Columns:\n  - section_id: Unique identifier for each section.\n  - course_id: Identifier of the course to which the section belongs.\n  - section_name: Name of the section.\n  - section_description: Description of the section.\n  - other_details: Additional details related to the section.\n\nTable Semesters:\n- Stores details about different academic semesters.\n- Columns:\n  - semester_id: Unique identifier for each semester.\n  - semester_name: Name of the semester.\n  - semester_description: Description of the semester.\n  - other_details: Additional details related to the semester.\n\nTable Student_Enrolment:\n- Contains information about student enrollments in degree programs.\n- Columns:\n  - student_enrolment_id: Unique identifier for each student enrollment.\n  - degree_program_id: Identifier of the degree program in which the student is enrolled.\n  - semester_id: Identifier of the semester during which the enrollment occurred.\n  - student_id: Identifier of the student enrolled.\n  - other_details: Additional details related to the student enrollment.\n\nTable Student_Enrolment_Courses:\n- Stores data about courses enrolled by students.\n- Columns:\n  - student_course_id: Unique identifier for each student course enrollment.\n  - course_id: Identifier of the course enrolled.\n  - student_enrolment_id: Identifier of the student enrollment.\n\nTable Students:\n- Contains details about students.\n- Columns:\n  - student_id: Unique identifier for each student.\n  - current_address_id: Identifier of the current address of the student.\n  - permanent_address_id: Identifier of the permanent address of the student.\n  - first_name: First name of the student.\n  - middle_name: Middle name of the student.\n  - last_name: Last name of the student.\n  - cell_mobile_number: Mobile number of the student.\n  - email_address: Email address of the student.\n  - ssn: Social Security Number of the student.\n  - date_first_registered: Date when the student first registered.\n  - date_left: Date when the student left.\n  - other_student_details: Additional details related to the student.\n\nTable Transcript_Contents:\n- Stores contents of student transcripts.\n- Columns:\n  - student_course_id: Identifier of the student course.\n  - transcript_id: Identifier of the transcript.\n\nTable Transcripts:\n- Contains information about student transcripts.\n- Columns:\n  - transcript_id: Unique identifier for each transcript.\n  - transcript_date: Date of the transcript.\n  - other_details: Additional details related to the transcript.\n\nForeign Keys:\n- Degree_Programs.department_id references Departments.department_id, establishing a relationship between degree programs and departments.\n- Sections.course_id references Courses.course_id, linking sections to specific courses.\n- Students.permanent_address_id and Students.current_address_id both reference Addresses.address_id, connecting students to their permanent and current addresses.\n- Student_Enrolment.student_id references Students.student_id, linking student enrollments to students.\n- Student_Enrolment.semester_id references Semesters.semester_id, connecting student enrollments to semesters.\n- Student_Enrolment.degree_program_id references Degree_Programs.degree_program_id, establishing a relationship between student enrollments and degree programs.\n- Student_Enrolment_Courses.student_enrolment_id references Student_Enrolment.student_enrolment_id, linking student enrollment courses to student enrollments.\n- Student_Enrolment_Courses.course_id references Courses.course_id, connecting student enrollment courses to courses.\n- Transcript_Contents.transcript_id references Transcripts.transcript_id, linking transcript contents to transcripts.\n- Transcript_Contents.student_course_id references Student_Enrolment_Courses.student_course_id, establishing a relationship between transcript contents and student enrollment courses.",
    "swimming": "Table event:\n- Contains information about different events.\n- Columns:\n  - ID: Unique identifier for each event.\n  - Name: Name of the event.\n  - Stadium_ID: Identifier of the stadium where the event takes place.\n  - Year: Year in which the event occurred.\n\nTable record:\n- Stores records of results achieved in events by swimmers.\n- Columns:\n  - ID: Unique identifier for each record.\n  - Result: Result achieved in the event.\n  - Swimmer_ID: Identifier of the swimmer who achieved the result.\n  - Event_ID: Identifier of the event for which the record is recorded.\n\nTable stadium:\n- Contains details about different stadiums.\n- Columns:\n  - ID: Unique identifier for each stadium.\n  - Name: Name of the stadium.\n  - Capacity: Capacity of the stadium.\n  - City: City where the stadium is located.\n  - Country: Country where the stadium is situated.\n  - Opening_year: Year in which the stadium was opened.\n\nTable swimmer:\n- Stores information about swimmers.\n- Columns:\n  - ID: Unique identifier for each swimmer.\n  - Name: Name of the swimmer.\n  - Nationality: Nationality of the swimmer.\n  - meter_100 to meter_700: Timings of the swimmer for different distances.\n  - Time: Total time taken by the swimmer.\n\nForeign Keys:\n- event.Stadium_ID references stadium.ID, establishing a relationship between events and stadiums.\n- record.Swimmer_ID references swimmer.ID, linking records to specific swimmers.\n- record.Event_ID references event.ID, connecting records to specific events.",
    "theme_gallery": "Table artist:\n- Contains information about different artists.\n- Columns:\n  - Artist_ID: Unique identifier for each artist.\n  - Name: Name of the artist.\n  - Country: Country of origin of the artist.\n  - Year_Join: Year when the artist joined.\n  - Age: Age of the artist.\n\nTable exhibition:\n- Stores details about art exhibitions.\n- Columns:\n  - Exhibition_ID: Unique identifier for each exhibition.\n  - Year: Year of the exhibition.\n  - Theme: Theme of the exhibition.\n  - Artist_ID: Identifier of the artist associated with the exhibition.\n  - Ticket_Price: Price of tickets for the exhibition.\n\nTable exhibition_record:\n- Contains records of past exhibitions.\n- Columns:\n  - Exhibition_ID: Identifier of the exhibition.\n  - Date: Date of the exhibition.\n  - Attendance: Number of attendees at the exhibition.\n\nForeign Keys:\n- exhibition.Artist_ID references artist.Artist_ID, establishing a relationship between exhibitions and artists.\n- exhibition_record.Exhibition_ID references exhibition.Exhibition_ID, linking exhibition records to specific exhibitions.",
    "tracking_grants_for_research": "Table Document_Types:\n- Contains information about different types of documents.\n- Columns:\n  - document_type_code: Unique code for each document type.\n  - document_description: Description of the document type.\n\nTable Documents:\n- Stores details of various documents.\n- Columns:\n  - document_id: Unique identifier for each document.\n  - document_type_code: Identifier of the document type.\n  - grant_id: Identifier of the grant associated with the document.\n  - sent_date: Date when the document was sent.\n  - response_received_date: Date when a response to the document was received.\n  - other_details: Additional details related to the document.\n\nTable Grants:\n- Contains data related to grants provided.\n- Columns:\n  - grant_id: Unique identifier for each grant.\n  - organisation_id: Identifier of the organization receiving the grant.\n  - grant_amount: Amount of the grant.\n  - grant_start_date: Start date of the grant.\n  - grant_end_date: End date of the grant.\n  - other_details: Additional details about the grant.\n\nTable Organisation_Types:\n- Stores information about different types of organizations.\n- Columns:\n  - organisation_type: Type of the organization.\n  - organisation_type_description: Description of the organization type.\n\nTable Organisations:\n- Contains details about various organizations.\n- Columns:\n  - organisation_id: Unique identifier for each organization.\n  - organisation_type: Identifier of the organization type.\n  - organisation_details: Additional details about the organization.\n\nTable Project_Outcomes:\n- Stores data related to outcomes of projects.\n- Columns:\n  - project_id: Identifier of the project.\n  - outcome_code: Code representing the outcome.\n  - outcome_details: Details about the outcome.\n\nTable Project_Staff:\n- Contains information about staff working on projects.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - project_id: Identifier of the project the staff member is associated with.\n  - role_code: Code representing the role of the staff member.\n  - date_from: Start date of the staff member's involvement in the project.\n  - date_to: End date of the staff member's involvement.\n  - other_details: Additional details about the staff member.\n\nTable Projects:\n- Stores details about different projects.\n- Columns:\n  - project_id: Unique identifier for each project.\n  - organisation_id: Identifier of the organization managing the project.\n  - project_details: Additional details about the project.\n\nTable Research_Outcomes:\n- Contains information about outcomes of research.\n- Columns:\n  - outcome_code: Code representing the outcome.\n  - outcome_description: Description of the outcome.\n\nTable Research_Staff:\n- Stores data related to staff involved in research.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - employer_organisation_id: Identifier of the organization employing the staff member.\n  - staff_details: Additional details about the staff member.\n\nTable Staff_Roles:\n- Contains details about different roles staff members can have.\n- Columns:\n  - role_code: Code representing the role.\n  - role_description: Description of the role.\n\nTable Tasks:\n- Stores information about tasks within projects.\n- Columns:\n  - task_id: Unique identifier for each task.\n  - project_id: Identifier of the project to which the task belongs.\n  - task_details: Details about the task.\n\nForeign Keys:\n- Documents.grant_id references Grants.grant_id, linking documents to specific grants.\n- Documents.document_type_code references Document_Types.document_type_code, establishing a relationship between documents and document types.\n- Grants.organisation_id references Organisations.organisation_id, connecting grants to specific organizations.\n- Organisations.organisation_type references Organisation_Types.organisation_type, linking organizations to their respective types.\n- Project_Outcomes.outcome_code references Research_Outcomes.outcome_code, establishing a relationship between project outcomes and research outcomes.\n- Project_Outcomes.project_id references Projects.project_id, linking project outcomes to specific projects.\n- Project_Staff.role_code references Staff_Roles.role_code, connecting project staff to specific roles.\n- Project_Staff.project_id references Projects.project_id, establishing a relationship between project staff and projects.\n- Projects.organisation_id references Organisations.organisation_id, linking projects to managing organizations.\n- Research_Staff.employer_organisation_id references Organisations.organisation_id, connecting research staff to employing organizations.\n- Tasks.project_id references Projects.project_id, establishing a relationship between tasks and projects.",
    "tracking_orders": "Table Customers:\n- Contains information about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - customer_name: Name of the customer.\n  - customer_details: Additional details about the customer.\n\nTable Invoices:\n- Stores details about invoices.\n- Columns:\n  - invoice_number: Unique identifier for each invoice.\n  - invoice_date: Date of the invoice.\n  - invoice_details: Additional details related to the invoice.\n\nTable Order_Items:\n- Contains information about items in orders.\n- Columns:\n  - order_item_id: Unique identifier for each order item.\n  - product_id: Identifier of the product in the order item.\n  - order_id: Identifier of the order to which the item belongs.\n  - order_item_status: Status of the order item.\n  - order_item_details: Additional details about the order item.\n\nTable Orders:\n- Stores data related to orders placed by customers.\n- Columns:\n  - order_id: Unique identifier for each order.\n  - customer_id: Identifier of the customer who placed the order.\n  - order_status: Status of the order.\n  - date_order_placed: Date when the order was placed.\n  - order_details: Additional details about the order.\n\nTable Products:\n- Contains information about products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_name: Name of the product.\n  - product_details: Additional details related to the product.\n\nTable Shipment_Items:\n- Stores details about items in shipments.\n- Columns:\n  - shipment_id: Unique identifier for each shipment item.\n  - order_item_id: Identifier of the order item in the shipment.\n\nTable Shipments:\n- Contains information about shipments.\n- Columns:\n  - shipment_id: Unique identifier for each shipment.\n  - order_id: Identifier of the order associated with the shipment.\n  - invoice_number: Identifier of the invoice related to the shipment.\n  - shipment_tracking_number: Tracking number for the shipment.\n  - shipment_date: Date of the shipment.\n  - other_shipment_details: Additional details about the shipment.\n\nForeign Keys:\n- Orders.customer_id references Customers.customer_id, establishing a relationship between orders and customers.\n- Order_Items.product_id references Products.product_id, linking order items to specific products.\n- Order_Items.order_id references Orders.order_id, connecting order items to their respective orders.\n- Shipments.invoice_number references Invoices.invoice_number, linking shipments to specific invoices.\n- Shipments.order_id references Orders.order_id, establishing a relationship between shipments and orders.\n- Shipment_Items.shipment_id references Shipments.shipment_id, connecting shipment items to shipments.\n- Shipment_Items.order_item_id references Order_Items.order_item_id, establishing a relationship between shipment items and order items.",
    "tracking_share_transactions": "Table Investors:\n- Contains information about different investors.\n- Columns:\n  - investor_id: Unique identifier for each investor.\n  - Investor_details: Details about the investor.\n\nTable Lots:\n- Stores details about different lots owned by investors.\n- Columns:\n  - lot_id: Unique identifier for each lot.\n  - investor_id: Identifier of the investor who owns the lot.\n  - lot_details: Details about the lot.\n\nTable Purchases:\n- Contains information about purchase transactions.\n- Columns:\n  - purchase_transaction_id: Unique identifier for each purchase transaction.\n  - purchase_details: Details about the purchase transaction.\n\nTable Ref_Transaction_Types:\n- Stores reference data for transaction types.\n- Columns:\n  - transaction_type_code: Code representing the transaction type.\n  - transaction_type_description: Description of the transaction type.\n\nTable Sales:\n- Contains details about sales transactions.\n- Columns:\n  - sales_transaction_id: Unique identifier for each sales transaction.\n  - sales_details: Details about the sales transaction.\n\nTable Transactions:\n- Stores data related to various transactions made by investors.\n- Columns:\n  - transaction_id: Unique identifier for each transaction.\n  - investor_id: Identifier of the investor involved in the transaction.\n  - transaction_type_code: Code representing the type of transaction.\n  - date_of_transaction: Date when the transaction occurred.\n  - amount_of_transaction: Amount involved in the transaction.\n  - share_count: Number of shares involved in the transaction.\n  - other_details: Additional details about the transaction.\n\nTable Transactions_Lots:\n- Represents the relationship between transactions and lots.\n- Columns:\n  - transaction_id: Identifier of the transaction.\n  - lot_id: Identifier of the lot involved in the transaction.\n\nForeign Keys:\n- Lots.investor_id references Investors.investor_id, linking lots to their respective investors.\n- Transactions.transaction_type_code references Ref_Transaction_Types.transaction_type_code, establishing a relationship between transactions and transaction types.\n- Transactions.investor_id references Investors.investor_id, connecting transactions to the investors involved.\n- Sales.sales_transaction_id references Transactions.transaction_id, linking sales to specific transactions.\n- Purchases.purchase_transaction_id references Transactions.transaction_id, connecting purchases to specific transactions.\n- Transactions_Lots.transaction_id references Transactions.transaction_id, establishing a relationship between transactions and lots.\n- Transactions_Lots.lot_id references Lots.lot_id, linking transactions to specific lots.",
    "tracking_software_problems": "Table Problem_Category_Codes:\n- Contains codes and descriptions for different problem categories.\n- Columns:\n  - problem_category_code: Unique code for each problem category.\n  - problem_category_description: Description of the problem category.\n\nTable Problem_Log:\n- Stores logs of reported problems and their details.\n- Columns:\n  - problem_log_id: Unique identifier for each problem log entry.\n  - assigned_to_staff_id: Identifier of the staff member assigned to the problem.\n  - problem_id: Identifier of the associated problem.\n  - problem_category_code: Code referencing the problem category.\n  - problem_status_code: Code referencing the status of the problem.\n  - log_entry_date: Date of the log entry.\n  - log_entry_description: Description of the log entry.\n  - log_entry_fix: Details of the fix applied.\n  - other_log_details: Additional details related to the log entry.\n\nTable Problem_Status_Codes:\n- Contains codes and descriptions for different problem statuses.\n- Columns:\n  - problem_status_code: Unique code for each problem status.\n  - problem_status_description: Description of the problem status.\n\nTable Problems:\n- Stores information about reported problems.\n- Columns:\n  - problem_id: Unique identifier for each problem.\n  - product_id: Identifier of the associated product.\n  - closure_authorised_by_staff_id: Identifier of the staff member authorizing problem closure.\n  - reported_by_staff_id: Identifier of the staff member who reported the problem.\n  - date_problem_reported: Date when the problem was reported.\n  - date_problem_closed: Date when the problem was closed.\n  - problem_description: Description of the problem.\n  - other_problem_details: Additional details related to the problem.\n\nTable Product:\n- Contains details about different products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_name: Name of the product.\n  - product_details: Additional details about the product.\n\nTable Staff:\n- Stores information about staff members.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - staff_first_name: First name of the staff member.\n  - staff_last_name: Last name of the staff member.\n  - other_staff_details: Additional details related to the staff member.\n\nForeign Keys:\n- Problem_Log.problem_status_code references Problem_Status_Codes.problem_status_code, linking problem logs to their statuses.\n- Problem_Log.problem_id references Problems.problem_id, connecting problem logs to specific problems.\n- Problem_Log.assigned_to_staff_id references Staff.staff_id, establishing a relationship between problem logs and staff members.\n- Problem_Log.problem_category_code references Problem_Category_Codes.problem_category_code, linking problem logs to problem categories.\n- Problems.reported_by_staff_id references Staff.staff_id, connecting problems to the staff members who reported them.\n- Problems.product_id references Product.product_id, establishing a relationship between problems and products.\n- Problems.closure_authorised_by_staff_id references Staff.staff_id, linking problems to the staff members who authorized their closure.",
    "train_station": "Table station:\n- Contains information about different train stations.\n- Columns:\n  - Station_ID: Unique identifier for each station.\n  - Name: Name of the train station.\n  - Annual_entry_exit: Number of annual entries and exits at the station.\n  - Annual_interchanges: Number of annual interchanges at the station.\n  - Total_Passengers: Total number of passengers at the station.\n  - Location: Location of the station.\n  - Main_Services: Primary services provided at the station.\n  - Number_of_Platforms: Total number of platforms at the station.\n\nTable train:\n- Stores data related to different trains.\n- Columns:\n  - Train_ID: Unique identifier for each train.\n  - Name: Name of the train.\n  - Time: Time schedule of the train.\n  - Service: Type of service provided by the train.\n\nTable train_station:\n- Represents the relationship between trains and stations.\n- Columns:\n  - Train_ID: Identifier of the train.\n  - Station_ID: Identifier of the station.\n\nForeign Keys:\n- train_station.Station_ID references station.Station_ID, establishing a relationship between train_station and station.\n- train_station.Train_ID references train.Train_ID, linking train_station to specific trains.",
    "tvshow": "Table Cartoon:\n- Contains information about different cartoon shows.\n- Columns:\n  - id: Unique identifier for each cartoon show.\n  - Title: Title of the cartoon show.\n  - Directed_by: Director of the cartoon show.\n  - Written_by: Writer of the cartoon show.\n  - Original_air_date: Date when the cartoon show first aired.\n  - Production_code: Code associated with the production of the cartoon show.\n  - Channel: Foreign key referencing the id of the TV channel in the TV_Channel table.\n\nTable TV_Channel:\n- Stores data related to TV channels.\n- Columns:\n  - id: Unique identifier for each TV channel.\n  - series_name: Name of the TV channel series.\n  - Country: Country where the TV channel is based.\n  - Language: Language in which the TV channel broadcasts.\n  - Content: Type of content aired on the TV channel.\n  - Pixel_aspect_ratio_PAR: Aspect ratio of the TV channel.\n  - Hight_definition_TV: Indicates if the TV channel broadcasts in high definition.\n  - Pay_per_view_PPV: Information about pay-per-view options on the TV channel.\n  - Package_Option: Options available for TV channel packages.\n\nTable TV_series:\n- Contains details about TV series.\n- Columns:\n  - id: Unique identifier for each TV series.\n  - Episode: Episode number of the TV series.\n  - Air_Date: Date when the episode aired.\n  - Rating: Rating of the TV series.\n  - Share: Share percentage of the TV series.\n  - 18_49_Rating_Share: Rating share in the 18-49 age group.\n  - Viewers_m: Number of viewers in millions.\n  - Weekly_Rank: Rank of the TV series for the week.\n  - Channel: Foreign key referencing the id of the TV channel in the TV_Channel table.\n\nForeign Keys:\n- TV_series.Channel references TV_Channel.id, establishing a relationship between TV series and TV channels.\n- Cartoon.Channel references TV_Channel.id, linking cartoons to specific TV channels.",
    "twitter_1": "Table follows:\n- Contains information about user following relationships.\n- Columns:\n  - f1: Identifier of the user who is following.\n  - f2: Identifier of the user being followed.\n\nTable tweets:\n- Stores data related to tweets posted by users.\n- Columns:\n  - id: Unique identifier for each tweet.\n  - uid: Identifier of the user who posted the tweet.\n  - text: Content of the tweet.\n  - createdate: Date when the tweet was created.\n\nTable user_profiles:\n- Contains profiles of users.\n- Columns:\n  - uid: Unique identifier for each user.\n  - name: Name of the user.\n  - email: Email address of the user.\n  - partitionid: Identifier for partitioning.\n  - followers: Number of followers the user has.\n\nForeign Keys:\n- follows.f2 references user_profiles.uid, establishing a relationship between follows and user_profiles where f2 is the user being followed.\n- follows.f1 references user_profiles.uid, connecting follows to user_profiles where f1 is the user who is following.\n- tweets.uid references user_profiles.uid, linking tweets to the user_profiles based on the user who posted the tweet.",
    "university_basketball": "Table basketball_match:\n- Contains data related to basketball matches.\n- Columns:\n  - Team_ID: Unique identifier for each team.\n  - School_ID: Identifier of the school to which the team belongs.\n  - Team_Name: Name of the team.\n  - ACC_Regular_Season: Statistics related to the team's performance in the ACC regular season.\n  - ACC_Percent: Percentage of wins in the ACC.\n  - ACC_Home: Performance statistics of the team at home in the ACC.\n  - ACC_Road: Performance statistics of the team on the road in the ACC.\n  - All_Games: Overall statistics of all games played by the team.\n  - All_Games_Percent: Overall winning percentage of all games played.\n  - All_Home: Overall performance statistics of the team at home.\n  - All_Road: Overall performance statistics of the team on the road.\n  - All_Neutral: Performance statistics of the team in neutral venues.\n\nTable university:\n- Stores information about universities.\n- Columns:\n  - School_ID: Unique identifier for each university.\n  - School: Name of the university.\n  - Location: Location of the university.\n  - Founded: Year when the university was founded.\n  - Affiliation: Affiliation of the university.\n  - Enrollment: Number of students enrolled in the university.\n  - Nickname: Nickname of the university.\n  - Primary_conference: Primary conference associated with the university.\n\nForeign Keys:\n- basketball_match.School_ID references university.School_ID, establishing a relationship between basketball matches and universities.",
    "voter_1": "Table AREA_CODE_STATE:\n- Contains information about area codes and their corresponding states.\n- Columns:\n  - area_code: Unique identifier for each area code.\n  - state: Name of the state associated with the area code.\n\nTable CONTESTANTS:\n- Stores data related to contestants in a contest.\n- Columns:\n  - contestant_number: Unique identifier for each contestant.\n  - contestant_name: Name of the contestant.\n\nTable VOTES:\n- Contains details about votes cast in a contest.\n- Columns:\n  - vote_id: Unique identifier for each vote.\n  - phone_number: Phone number from which the vote was cast.\n  - state: State from which the vote was cast.\n  - contestant_number: Identifier of the contestant for whom the vote was cast.\n  - created: Timestamp indicating when the vote was created.\n\nForeign Keys:\n- VOTES.contestant_number references CONTESTANTS.contestant_number, establishing a relationship between votes and contestants.\n- VOTES.state references AREA_CODE_STATE.state, linking votes to the corresponding states based on area codes.",
    "voter_2": "Table Student:\n- Contains information about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Major of the student.\n  - Advisor: Advisor of the student.\n  - city_code: Code representing the city where the student resides.\n\nTable Voting_record:\n- Stores voting records of students in various elections.\n- Columns:\n  - StuID: Identifier of the student.\n  - Registration_Date: Date of registration for voting.\n  - Election_Cycle: Cycle of the election.\n  - President_Vote: Vote for the President.\n  - Vice_President_Vote: Vote for the Vice President.\n  - Secretary_Vote: Vote for the Secretary.\n  - Treasurer_Vote: Vote for the Treasurer.\n  - Class_President_Vote: Vote for the Class President.\n  - Class_Senator_Vote: Vote for the Class Senator.\n\nForeign Keys:\n- Voting_record.Class_Senator_Vote references Student.StuID, linking Class Senator votes to student records.\n- Voting_record.Class_President_Vote references Student.StuID, linking Class President votes to student records.\n- Voting_record.Treasurer_Vote references Student.StuID, linking Treasurer votes to student records.\n- Voting_record.Secretary_Vote references Student.StuID, linking Secretary votes to student records.\n- Voting_record.Vice_President_Vote references Student.StuID, linking Vice President votes to student records.\n- Voting_record.President_Vote references Student.StuID, linking President votes to student records.\n- Voting_record.StuID references Student.StuID, establishing a relationship between voting records and student information.",
    "wedding": "Table church:\n- Contains information about churches.\n- Columns:\n  - Church_ID: Unique identifier for each church.\n  - Name: Name of the church.\n  - Organized_by: Entity that organized the church.\n  - Open_Date: Date when the church was opened.\n  - Continuation_of: Reference to another church if it is a continuation.\n\nTable people:\n- Stores data related to individuals.\n- Columns:\n  - People_ID: Unique identifier for each individual.\n  - Name: Name of the person.\n  - Country: Country of the person.\n  - Is_Male: Boolean indicating if the person is male.\n  - Age: Age of the person.\n\nTable wedding:\n- Contains details about weddings.\n- Columns:\n  - Church_ID: Identifier of the church where the wedding took place.\n  - Male_ID: Identifier of the male individual in the wedding.\n  - Female_ID: Identifier of the female individual in the wedding.\n  - Year: Year when the wedding occurred.\n\nForeign Keys:\n- wedding.Female_ID references people.People_ID, linking weddings to the female individuals.\n- wedding.Male_ID references people.People_ID, linking weddings to the male individuals.\n- wedding.Church_ID references church.Church_ID, establishing a relationship between weddings and the churches.",
    "wine_1": "Table appellations:\n- Contains information about different wine appellations.\n- Columns:\n  - No: Unique identifier for each appellation.\n  - Appellation: Name of the appellation.\n  - County: County associated with the appellation.\n  - State: State where the appellation is located.\n  - Area: Area of the appellation.\n  - isAVA: Boolean value indicating if the appellation is an American Viticultural Area (AVA).\n\nTable grapes:\n- Stores details about different types of grapes used in winemaking.\n- Columns:\n  - ID: Unique identifier for each grape.\n  - Grape: Name of the grape variety.\n  - Color: Color of the grape (e.g., red, white).\n\nTable wine:\n- Contains data related to different wines.\n- Columns:\n  - No: Unique identifier for each wine.\n  - Grape: Identifier of the grape variety used in the wine.\n  - Winery: Name of the winery producing the wine.\n  - Appellation: Name of the appellation associated with the wine.\n  - State: State where the wine is produced.\n  - Name: Name of the wine.\n  - Year: Year the wine was produced.\n  - Price: Price of the wine.\n  - Score: Score or rating of the wine.\n  - Cases: Number of cases produced.\n  - Drink: Information about when the wine is best to drink.\n\nForeign Keys:\n- wine.Appellation references appellations.Appellation, establishing a relationship between wines and wine appellations.\n- wine.Grape references grapes.Grape, linking wines to specific grape varieties.",
    "workshop_paper": "Table Acceptance:\n- Contains information about the acceptance status of submissions for workshops.\n- Columns:\n  - Submission_ID: Unique identifier for each submission.\n  - Workshop_ID: Identifier of the workshop for which the submission was made.\n  - Result: Outcome of the submission acceptance.\n\nTable submission:\n- Stores details about submissions made for workshops.\n- Columns:\n  - Submission_ID: Unique identifier for each submission.\n  - Scores: Scores achieved in the submission.\n  - Author: Author of the submission.\n  - College: College of the author submitting the work.\n\nTable workshop:\n- Contains information about different workshops.\n- Columns:\n  - Workshop_ID: Unique identifier for each workshop.\n  - Date: Date of the workshop.\n  - Venue: Venue where the workshop is conducted.\n  - Name: Name of the workshop.\n\nForeign Keys:\n- Acceptance.Workshop_ID references workshop.Workshop_ID, establishing a relationship between acceptance status and workshops.\n- Acceptance.Submission_ID references submission.Submission_ID, linking acceptance status to specific submissions.",
    "world_1": "Table city:\n- Contains information about different cities.\n- Columns:\n  - ID: Unique identifier for each city.\n  - Name: Name of the city.\n  - CountryCode: Code referencing the country to which the city belongs.\n  - District: District where the city is located.\n  - Population: Population of the city.\n\nTable country:\n- Stores data related to different countries.\n- Columns:\n  - Code: Unique country code.\n  - Name: Name of the country.\n  - Continent: Continent where the country is located.\n  - Region: Region to which the country belongs.\n  - SurfaceArea: Total surface area of the country.\n  - IndepYear: Year of independence.\n  - Population: Population of the country.\n  - LifeExpectancy: Average life expectancy in the country.\n  - GNP: Gross National Product of the country.\n  - GNPOld: Old Gross National Product of the country.\n  - LocalName: Local name of the country.\n  - GovernmentForm: Form of government in the country.\n  - HeadOfState: Head of state of the country.\n  - Capital: Capital city of the country.\n  - Code2: Secondary country code.\n\nTable countrylanguage:\n- Contains information about languages spoken in different countries.\n- Columns:\n  - CountryCode: Code referencing the country.\n  - Language: Language spoken in the country.\n  - IsOfficial: Indicates if the language is official.\n  - Percentage: Percentage of the population speaking the language.\n\nTable sqlite_sequence:\n- Stores sequence information for SQLite tables.\n- Columns:\n  - name: Name of the table.\n  - seq: Sequence number.\n\nForeign Keys:\n- city.CountryCode references country.Code, establishing a relationship between cities and countries.\n- countrylanguage.CountryCode references country.Code, linking country languages to specific countries.",
    "wrestler": "Table Elimination:\n- Contains data related to eliminations in a wrestling context.\n- Columns:\n  - Elimination_ID: Unique identifier for each elimination event.\n  - Wrestler_ID: Identifier of the wrestler who was eliminated.\n  - Team: Team to which the wrestler belonged.\n  - Eliminated_By: Identifier of the wrestler who performed the elimination.\n  - Elimination_Move: Move or technique used for the elimination.\n  - Time: Time of the elimination event.\n\nTable wrestler:\n- Stores information about wrestlers in a wrestling organization.\n- Columns:\n  - Wrestler_ID: Unique identifier for each wrestler.\n  - Name: Name of the wrestler.\n  - Reign: Reign number of the wrestler.\n  - Days_held: Number of days the wrestler held a title or position.\n  - Location: Location where the wrestling event took place.\n  - Event: Event at which the wrestler participated.\n\nForeign Keys:\n- Elimination.Wrestler_ID references wrestler.Wrestler_ID, establishing a relationship between eliminations and wrestlers.",
    "wta_1": "Table matches:\n- Contains information about matches played.\n- Columns:\n  - best_of: Number of sets in the match.\n  - draw_size: Size of the draw for the match.\n  - loser_age: Age of the losing player.\n  - loser_entry: Entry status of the losing player.\n  - loser_hand: Handedness of the losing player.\n  - loser_ht: Height of the losing player.\n  - loser_id: Identifier of the losing player.\n  - loser_ioc: Country code of the losing player.\n  - loser_name: Name of the losing player.\n  - loser_rank: Ranking of the losing player.\n  - loser_rank_points: Ranking points of the losing player.\n  - loser_seed: Seed of the losing player.\n  - match_num: Number of the match.\n  - minutes: Duration of the match in minutes.\n  - round: Round of the match.\n  - score: Score of the match.\n  - surface: Surface of the match.\n  - tourney_date: Date of the tournament.\n  - tourney_id: Identifier of the tournament.\n  - tourney_level: Level of the tournament.\n  - tourney_name: Name of the tournament.\n  - winner_age: Age of the winning player.\n  - winner_entry: Entry status of the winning player.\n  - winner_hand: Handedness of the winning player.\n  - winner_ht: Height of the winning player.\n  - winner_id: Identifier of the winning player.\n  - winner_ioc: Country code of the winning player.\n  - winner_name: Name of the winning player.\n  - winner_rank: Ranking of the winning player.\n  - winner_rank_points: Ranking points of the winning player.\n  - winner_seed: Seed of the winning player.\n  - year: Year of the match.\n\nTable players:\n- Stores information about players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - first_name: First name of the player.\n  - last_name: Last name of the player.\n  - hand: Handedness of the player.\n  - birth_date: Date of birth of the player.\n  - country_code: Country code of the player.\n\nTable rankings:\n- Contains player ranking information.\n- Columns:\n  - ranking_date: Date of the ranking.\n  - ranking: Player's ranking.\n  - player_id: Identifier of the player.\n  - ranking_points: Ranking points of the player.\n  - tours: Number of tours played by the player.\n\nForeign Keys:\n- matches.winner_id references players.player_id, linking winning players to player information.\n- matches.loser_id references players.player_id, linking losing players to player information.\n- rankings.player_id references players.player_id, establishing a relationship between player rankings and player details.",
    "yelp": "Table business:\n- Contains information about different businesses.\n- Columns:\n  - bid: Unique identifier for each business.\n  - business_id: Identifier for the business.\n  - name: Name of the business.\n  - full_address: Full address of the business.\n  - city: City where the business is located.\n  - latitude: Latitude coordinate of the business location.\n  - longitude: Longitude coordinate of the business location.\n  - review_count: Number of reviews for the business.\n  - is_open: Indicator of whether the business is open.\n  - rating: Rating of the business.\n  - state: State where the business is situated.\n\nTable category:\n- Stores categories associated with businesses.\n- Columns:\n  - id: Unique identifier for each category.\n  - business_id: Identifier of the business associated with the category.\n  - category_name: Name of the category.\n\nTable checkin:\n- Contains data related to check-ins at businesses.\n- Columns:\n  - cid: Unique identifier for each check-in.\n  - business_id: Identifier of the business where the check-in occurred.\n  - count: Number of check-ins.\n  - day: Day of the check-in.\n\nTable neighbourhood:\n- Stores information about different neighborhoods.\n- Columns:\n  - id: Unique identifier for each neighborhood.\n  - business_id: Identifier of the business located in the neighborhood.\n  - neighbourhood_name: Name of the neighborhood.\n\nTable review:\n- Contains reviews given by users for businesses.\n- Columns:\n  - rid: Unique identifier for each review.\n  - business_id: Identifier of the business being reviewed.\n  - user_id: Identifier of the user who provided the review.\n  - rating: Rating given in the review.\n  - text: Text content of the review.\n  - year: Year when the review was given.\n  - month: Month when the review was given.\n\nTable tip:\n- Stores tips provided by users for businesses.\n- Columns:\n  - tip_id: Unique identifier for each tip.\n  - business_id: Identifier of the business for which the tip is given.\n  - text: Text content of the tip.\n  - user_id: Identifier of the user who provided the tip.\n  - likes: Number of likes received for the tip.\n  - year: Year when the tip was given.\n  - month: Month when the tip was given.\n\nTable user:\n- Contains information about users.\n- Columns:\n  - uid: Unique identifier for each user.\n  - user_id: Identifier of the user.\n  - name: Name of the user.\n\nForeign Keys:\n- category.business_id references business.business_id, linking categories to specific businesses.\n- checkin.business_id references business.business_id, connecting check-ins to businesses.\n- neighbourhood.business_id references business.business_id, establishing a relationship between neighborhoods and businesses.\n- review.user_id references user.user_id, linking reviews to specific users.\n- review.business_id references business.business_id, connecting reviews to businesses.\n- tip.user_id references user.user_id, establishing a relationship between tips and users.\n- tip.business_id references business.business_id, linking tips to businesses.",
    "academic_robust": "Table author:\n- Contains information about authors.\n- Columns:\n  - author_id: Unique identifier for each author.\n  - homepage: Author's homepage.\n  - name: Name of the author.\n  - organization_ID: Identifier of the organization to which the author belongs.\n\nTable cite:\n- Represents citations between publications.\n- Columns:\n  - referenced: Identifier of the publication being referenced.\n  - references: Identifier of the publication being referenced to.\n\nTable conference:\n- Stores details about conferences.\n- Columns:\n  - conference_ID: Unique identifier for each conference.\n  - homepage: Conference's homepage.\n  - name: Name of the conference.\n\nTable domain:\n- Contains information about domains.\n- Columns:\n  - domain_ID: Unique identifier for each domain.\n  - name: Name of the domain.\n\nTable domain_author:\n- Represents the relationship between authors and domains.\n- Columns:\n  - author_id: Identifier of the author.\n  - domain_ID: Identifier of the domain.\n\nTable domain_conference:\n- Represents the relationship between domains and conferences.\n- Columns:\n  - conference_ID: Identifier of the conference.\n  - domain_ID: Identifier of the domain.\n\nTable domain_journal:\n- Represents the relationship between domains and journals.\n- Columns:\n  - domain_ID: Identifier of the domain.\n  - journal_ID: Identifier of the journal.\n\nTable domain_keyword:\n- Represents the relationship between domains and keywords.\n- Columns:\n  - domain_ID: Identifier of the domain.\n  - keyword_ID: Identifier of the keyword.\n\nTable domain_publication:\n- Represents the relationship between domains and publications.\n- Columns:\n  - domain_ID: Identifier of the domain.\n  - publication_id: Identifier of the publication.\n\nTable journal:\n- Contains information about journals.\n- Columns:\n  - homepage: Journal's homepage.\n  - journal_ID: Unique identifier for each journal.\n  - name: Name of the journal.\n\nTable keyword:\n- Stores keywords related to publications.\n- Columns:\n  - keyword: Keyword related to publications.\n  - keyword_ID: Unique identifier for each keyword.\n\nTable organization:\n- Stores details about organizations.\n- Columns:\n  - mainland: Mainland of the organization.\n  - homepage: Organization's homepage.\n  - name: Name of the organization.\n  - organization_ID: Unique identifier for each organization.\n\nTable publication:\n- Contains details about publications.\n- Columns:\n  - summary: Summary of the publication.\n  - conference_ID: Identifier of the conference related to the publication.\n  - citation_number: Number of citations for the publication.\n  - journal_ID: Identifier of the journal related to the publication.\n  - publication_id: Unique identifier for each publication.\n  - reference_number: Number of references for the publication.\n  - headline: Headline of the publication.\n  - year: Year of publication.\n\nTable publication_keyword:\n- Represents the relationship between publications and keywords.\n- Columns:\n  - publication_id: Identifier of the publication.\n  - keyword_ID: Identifier of the keyword.\n\nTable writes:\n- Represents the relationship between authors and publications.\n- Columns:\n  - author_id: Identifier of the author.\n  - publication_id: Identifier of the publication.\n\nForeign Keys:\n- domain_author.domain_ID references domain.domain_ID, linking authors to specific domains.\n- domain_author.author_id references author.author_id, establishing a relationship between domain_author and author.\n- domain_conference.domain_ID references domain.domain_ID, connecting domains to conferences.\n- domain_conference.conference_ID references conference.conference_ID, establishing a relationship between domain_conference and conference.\n- domain_journal.domain_ID references domain.domain_ID, linking domains to journals.\n- domain_journal.journal_ID references journal.journal_ID, establishing a relationship between domain_journal and journal.\n- domain_keyword.domain_ID references domain.domain_ID, connecting domains to keywords.\n- domain_keyword.keyword_ID references keyword.keyword_ID, establishing a relationship between domain_keyword and keyword.\n- publication.conference_ID references conference.conference_ID, linking publications to conferences.\n- publication.journal_ID references journal.journal_ID, connecting publications to journals.\n- domain_publication.domain_ID references domain.domain_ID, establishing a relationship between domain_publication and domain.\n- domain_publication.publication_id references publication.publication_id, linking domain_publication to publications.\n- publication_keyword.keyword_ID references keyword.keyword_ID, connecting publications to keywords.\n- publication_keyword.publication_id references publication.publication_id, establishing a relationship between publication_keyword and publication.\n- writes.author_id references author.author_id, linking authors to publications.\n- writes.publication_id references publication.publication_id, establishing a relationship between writes and publication.\n- cite.references references publication.publication_id, establishing a citation relationship.\n- cite.referenced references publication.publication_id, establishing a reference relationship.",
    "activity_1_robust": "Table Activity:\n- Contains information about different activities.\n- Columns:\n  - Activity_id: Unique identifier for each activity.\n  - activity_name: Name of the activity.\n\nTable Faculty:\n- Stores data related to faculty members.\n- Columns:\n  - Fac_ID: Unique identifier for each faculty member.\n  - Lname: Last name of the faculty member.\n  - Fname: First name of the faculty member.\n  - Rank: Rank or position of the faculty member.\n  - Sex: Gender of the faculty member.\n  - Phone: Phone number of the faculty member.\n  - Room: Room number of the faculty member.\n  - Building: Building where the faculty member's office is located.\n\nTable Faculty_Participates_in:\n- Represents the participation of faculty members in activities.\n- Columns:\n  - Fac_ID: Identifier of the faculty member.\n  - Activity_id: Identifier of the activity in which the faculty member participates.\n\nTable Participates_in:\n- Contains data about student participation in activities.\n- Columns:\n  - Student_ID: Unique identifier for each student.\n  - Activity_id: Identifier of the activity in which the student participates.\n\nTable Student:\n- Stores information about students.\n- Columns:\n  - Student_ID: Unique identifier for each student.\n  - Last_name: Last name of the student.\n  - First_name: First name of the student.\n  - Age: Age of the student.\n  - gender: Gender of the student.\n  - Major: Major field of study for the student.\n  - Tutor: Tutor or mentor of the student.\n  - city_code: Code representing the city where the student is located.\n\nForeign Keys:\n- Participates_in.Activity_id references Activity.Activity_id, establishing a relationship between participation and activities.\n- Participates_in.Student_ID references Student.Student_ID, linking student participation to specific students.\n- Faculty_Participates_in.Activity_id references Activity.Activity_id, connecting faculty participation to activities.\n- Faculty_Participates_in.Fac_ID references Faculty.Fac_ID, establishing a relationship between faculty participation and faculty members.",
    "aircraft_robust": "Table aircraft:\n- Contains information about different aircraft.\n- Columns:\n  - AircraftID: Unique identifier for each aircraft.\n  - airplane: Name of the airplane.\n  - info: Additional information about the aircraft.\n  - maximum_gross_weight: Maximum gross weight of the aircraft.\n  - total_propeller_disk_area: Total propeller disk area of the aircraft.\n  - maximum_disk_loading: Maximum disk loading of the aircraft.\n\nTable airport:\n- Stores data related to airports.\n- Columns:\n  - AirportID: Unique identifier for each airport.\n  - AirportName: Name of the airport.\n  - passenger_count: Total passenger count at the airport.\n  - %_Change_2007: Percentage change in passenger count since 2007.\n  - International_Passengers: Number of international passengers at the airport.\n  - internal_Passengers: Number of internal passengers at the airport.\n  - Transit_Passengers: Number of transit passengers at the airport.\n  - Aircraft_Movements: Total aircraft movements at the airport.\n  - Cargo_Metric_Tonnes: Cargo metric tonnes handled at the airport.\n\nTable airport_aircraft:\n- Represents the relationship between airports and aircraft.\n- Columns:\n  - ID: Unique identifier for each record.\n  - AirportID: Identifier of the airport.\n  - AircraftID: Identifier of the aircraft.\n\nTable match:\n- Contains data about matches.\n- Columns:\n  - Round: Round of the match.\n  - position: Position in the match.\n  - nation: Nation participating in the match.\n  - date: Date of the match.\n  - Fastest_Qualifying: Fastest qualifying time in the match.\n  - victor_pilot: Identifier of the winning pilot.\n  - victor_airplane: Identifier of the winning airplane.\n\nTable pilot:\n- Stores information about pilots.\n- Columns:\n  - PilotID: Unique identifier for each pilot.\n  - Name: Name of the pilot.\n  - Age: Age of the pilot.\n\nForeign Keys:\n- match.victor_pilot references pilot.PilotID, establishing a relationship between matches and pilots based on the winning pilot.\n- match.victor_airplane references aircraft.AircraftID, linking matches to the winning aircraft.\n- airport_aircraft.AircraftID references aircraft.AircraftID, connecting airport_aircraft to specific aircraft.\n- airport_aircraft.AirportID references airport.AirportID, establishing a relationship between airport_aircraft and airports.",
    "allergy_1_robust": "Table Allergy_Type:\n- Contains information about different types of allergies.\n- Columns:\n  - Allergy: Name of the allergy.\n  - Allergy_Type: Type of the allergy.\n\nTable Has_Allergy:\n- Represents the relationship between students and their allergies.\n- Columns:\n  - Stu_ID: Identifier of the student.\n  - Allergy: Name of the allergy the student has.\n\nTable Student:\n- Stores details about students.\n- Columns:\n  - Stu_ID: Unique identifier for each student.\n  - Last_Name: Last name of the student.\n  - First_name: First name of the student.\n  - Age: Age of the student.\n  - gender: Gender of the student.\n  - Major: Major of the student.\n  - Tutor: Tutor of the student.\n  - CityCode: Code representing the city where the student resides.\n\nForeign Keys:\n- Has_Allergy.Allergy references Allergy_Type.Allergy, establishing a relationship between allergies and their types.\n- Has_Allergy.Stu_ID references Student.Stu_ID, linking students to their respective allergies.",
    "apartment_rentals_robust": "Table Apartment_Bookings:\n- Contains information about bookings made for apartments.\n- Columns:\n  - Apartment_booking_id: Unique identifier for each apartment booking.\n  - Apartment_id: Identifier of the apartment booked.\n  - guestID: Identifier of the guest making the booking.\n  - reservation_status_code: Code indicating the status of the reservation.\n  - reservation_start_date: Start date of the reservation.\n  - reservation_end_date: End date of the reservation.\n\nTable Apartment_Buildings:\n- Stores details about different apartment buildings.\n- Columns:\n  - buildingID: Unique identifier for each building.\n  - building_short_name: Short name of the building.\n  - building_full_name: Full name of the building.\n  - building_information: Information about the building.\n  - building_address: Address of the building.\n  - building_manager: Manager of the building.\n  - building_phone_number: Phone number of the building.\n\nTable Apartment_Facilities:\n- Contains information about facilities available in apartments.\n- Columns:\n  - Apartment_id: Identifier of the apartment.\n  - facility_code: Code representing a specific facility.\n\nTable Apartments:\n- Stores data related to individual apartments.\n- Columns:\n  - Apartment_id: Unique identifier for each apartment.\n  - buildingID: Identifier of the building where the apartment is located.\n  - Apartment_type_code: Code representing the type of apartment.\n  - Apartment_number: Number assigned to the apartment.\n  - bathroom_num: Number of bathrooms in the apartment.\n  - bedroom_num: Number of bedrooms in the apartment.\n  - room_num: Number of rooms in the apartment.\n\nTable Guests:\n- Contains information about guests staying in the apartments.\n- Columns:\n  - guestID: Unique identifier for each guest.\n  - sex_code: Code representing the gender of the guest.\n  - guest_first_name: First name of the guest.\n  - guest_last_name: Last name of the guest.\n  - birthdate: Birthdate of the guest.\n\nTable View_Unit_Status:\n- Stores the status of apartment units.\n- Columns:\n  - Apartment_id: Identifier of the apartment unit.\n  - Apartment_booking_id: Identifier of the booking associated with the unit.\n  - status_date: Date of the status.\n  - available_yn: Flag indicating if the unit is available.\n\nForeign Keys:\n- Apartments.buildingID references Apartment_Buildings.buildingID, establishing a relationship between apartments and buildings.\n- Apartment_Facilities.Apartment_id references Apartments.Apartment_id, linking apartment facilities to specific apartments.\n- Apartment_Bookings.guestID references Guests.guestID, connecting bookings to guests.\n- Apartment_Bookings.Apartment_id references Apartments.Apartment_id, linking bookings to specific apartments.\n- View_Unit_Status.Apartment_booking_id references Apartment_Bookings.Apartment_booking_id, establishing a relationship between unit status and bookings.\n- View_Unit_Status.Apartment_id references Apartments.Apartment_id, linking unit status to specific apartments.",
    "architecture_robust": "Table architect:\n- Contains information about architects.\n- Columns:\n  - id: Unique identifier for each architect.\n  - name: Name of the architect.\n  - nationality: Nationality of the architect.\n  - sex: Gender of the architect.\n\nTable bridge:\n- Stores data related to bridges.\n- Columns:\n  - architectID: Identifier of the architect who designed the bridge.\n  - id: Unique identifier for each bridge.\n  - name: Name of the bridge.\n  - site: Location site of the bridge.\n  - length_meters: Length of the bridge in meters.\n  - length_feet: Length of the bridge in feet.\n\nTable mill:\n- Contains details about mills.\n- Columns:\n  - architectID: Identifier of the architect who designed the mill.\n  - id: Unique identifier for each mill.\n  - site: Location site of the mill.\n  - name: Name of the mill.\n  - category: Category of the mill.\n  - built_year: Year when the mill was built.\n  - explanation: Additional explanation about the mill.\n\nForeign Keys:\n- bridge.architectID references architect.id, establishing a relationship between bridges and architects.\n- mill.architectID references architect.id, linking mills to architects.",
    "assets_maintenance_robust": "Table Asset_Parts:\n- Contains information about parts associated with assets.\n- Columns:\n  - asset_identification: Identifier of the asset.\n  - partID: Identifier of the part.\n\nTable Assets:\n- Stores details about different assets.\n- Columns:\n  - asset_identification: Unique identifier for each asset.\n  - maintenance_contract_identification: Identifier of the maintenance contract associated with the asset.\n  - supplier_company_identification: Identifier of the supplier company for the asset.\n  - asset_info: Information about the asset.\n  - asset_make: Make or manufacturer of the asset.\n  - asset_model: Model of the asset.\n  - asset_acquired_date: Date when the asset was acquired.\n  - asset_disposed_date: Date when the asset was disposed of.\n  - other_asset_info: Additional information about the asset.\n\nTable Engineer_Skills:\n- Contains information about the skills of engineers.\n- Columns:\n  - engineer_identification: Identifier of the engineer.\n  - skill_identification: Identifier of the skill.\n\nTable Engineer_Visits:\n- Stores data related to visits by engineers.\n- Columns:\n  - engineer_visit_identification: Identifier of the engineer visit.\n  - contact_staff_identification: Identifier of the staff contacted during the visit.\n  - engineer_identification: Identifier of the engineer conducting the visit.\n  - fault_log_entry_identification: Identifier of the fault log entry associated with the visit.\n  - fault_position: Position of the fault.\n  - visit_start_date: Start date of the visit.\n  - visit_end_date: End date of the visit.\n  - other_visit_info: Additional information about the visit.\n\nTable Fault_Log:\n- Contains records of faults logged for assets.\n- Columns:\n  - fault_log_entry_identification: Identifier of the fault log entry.\n  - asset_identification: Identifier of the asset related to the fault.\n  - recorded_by_staff_identification: Identifier of the staff member who recorded the fault.\n  - fault_log_entry_datetime: Date and time of the fault log entry.\n  - fault_description: Description of the fault.\n  - other_fault_info: Additional information about the fault.\n\nTable Fault_Log_Parts:\n- Stores information about parts associated with fault log entries.\n- Columns:\n  - fault_log_entry_identification: Identifier of the fault log entry.\n  - part_fault_identification: Identifier of the part fault.\n  - fault_position: Position of the fault.\n\nTable Maintenance_Contracts:\n- Contains details about maintenance contracts.\n- Columns:\n  - maintenance_contract_identification: Identifier of the maintenance contract.\n  - maintenance_contract_companyID: Identifier of the company providing the maintenance contract.\n  - contract_start_date: Start date of the contract.\n  - contract_end_date: End date of the contract.\n  - other_contract_info: Additional information about the contract.\n\nTable Maintenance_Engineers:\n- Stores information about maintenance engineers.\n- Columns:\n  - engineer_identification: Identifier of the engineer.\n  - companyID: Identifier of the company to which the engineer belongs.\n  - Fname: First name of the engineer.\n  - Lname: Last name of the engineer.\n  - other_info: Additional information about the engineer.\n\nTable Part_Faults:\n- Contains details about faults associated with parts.\n- Columns:\n  - part_fault_identification: Identifier of the part fault.\n  - partID: Identifier of the part.\n  - fault_short_name: Short name of the fault.\n  - fault_description: Description of the fault.\n  - other_fault_info: Additional information about the fault.\n\nTable Parts:\n- Stores information about different parts.\n- Columns:\n  - partID: Unique identifier for each part.\n  - part_name: Name of the part.\n  - chargeable_yn: Indicates if the part is chargeable or not.\n  - chargeable_amount: Amount charged for the part.\n  - other_part_info: Additional information about the part.\n\nTable Skills:\n- Contains details about different skills.\n- Columns:\n  - skill_identification: Unique identifier for each skill.\n  - skill_code: Code representing the skill.\n  - skill_info: Information about the skill.\n\nTable Skills_Required_To_Fix:\n- Stores information about skills required to fix specific part faults.\n- Columns:\n  - part_fault_identification: Identifier of the part fault.\n  - skill_identification: Identifier of the required skill.\n\nTable Staff:\n- Contains information about staff members.\n- Columns:\n  - staff_identification: Unique identifier for each staff member.\n  - staff_name: Name of the staff member.\n  - sex: Gender of the staff member.\n  - additional_staff_details: Additional details about the staff member.\n\nTable Third_Party_Companies:\n- Stores details about third-party companies.\n- Columns:\n  - companyID: Unique identifier for each company.\n  - company_category: Category of the company.\n  - company_name: Name of the company.\n  - company_address: Address of the company.\n  - other_company_info: Additional information about the company.\n\nForeign Keys:\n- Maintenance_Contracts.maintenance_contract_companyID references Third_Party_Companies.companyID, linking maintenance contracts to third-party companies.\n- Assets.supplier_company_identification references Third_Party_Companies.companyID, establishing a relationship between assets and supplier companies.\n- Assets.maintenance_contract_identification references Maintenance_Contracts.maintenance_contract_identification, connecting assets to maintenance contracts.\n- Asset_Parts.asset_identification references Assets.asset_identification, linking asset parts to assets.\n- Asset_Parts.partID references Parts.partID, establishing a relationship between asset parts and parts.\n- Maintenance_Engineers.companyID references Third_Party_Companies.companyID, connecting maintenance engineers to third-party companies.\n- Engineer_Skills.skill_identification references Skills.skill_identification, linking engineer skills to skills.\n- Engineer_Skills.engineer_identification references Maintenance_Engineers.engineer_identification, establishing a relationship between engineer skills and maintenance engineers.\n- Fault_Log.recorded_by_staff_identification references Staff.staff_identification, connecting fault logs to staff members.\n- Fault_Log.asset_identification references Assets.asset_identification, linking fault logs to assets.\n- Engineer_Visits.contact_staff_identification references Staff.staff_identification, establishing a relationship between engineer visits and staff members.\n- Engineer_Visits.engineer_identification references Maintenance_Engineers.engineer_identification, connecting engineer visits to maintenance engineers.\n- Engineer_Visits.fault_log_entry_identification references Fault_Log.fault_log_entry_identification, linking engineer visits to fault log entries.\n- Part_Faults.partID references Parts.partID, establishing a relationship between part faults and parts.\n- Fault_Log_Parts.fault_log_entry_identification references Fault_Log.fault_log_entry_identification, connecting fault log parts to fault log entries.\n- Fault_Log_Parts.part_fault_identification references Part_Faults.part_fault_identification, linking fault log parts to part faults.\n- Skills_Required_To_Fix.skill_identification references Skills.skill_identification, establishing a relationship between required skills and skills.\n- Skills_Required_To_Fix.part_fault_identification references Part_Faults.part_fault_identification, connecting required skills to part faults.",
    "baseball_1_robust": "Table all_star:\n- Contains information about players who have participated in all-star games.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the all-star game.\n  - game_number: Number of the game.\n  - game_id: Identifier for the game.\n  - team_id: Identifier of the team the player belongs to.\n  - league_id: Identifier of the league the player belongs to.\n  - gp: Games played.\n  - starting_pos: Starting position of the player.\n\nTable appearances:\n- Stores data related to player appearances in different games.\n- Columns:\n  - year: Year of the appearance.\n  - team_id: Identifier of the team the player appeared for.\n  - league_id: Identifier of the league the player appeared in.\n  - player_id: Identifier of the player.\n  - g_all: Total games played.\n  - gs: Games started.\n  - Various positional columns indicating the player's appearance in different positions.\n\nTable batting:\n- Contains batting statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the statistics.\n  - stint: Stint of the player.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player played in.\n  - Various batting statistics columns such as runs, hits, home runs, stolen bases, etc.\n\nTable batting_postseason:\n- Stores postseason batting statistics of players.\n- Columns:\n  - year: Year of the postseason.\n  - round: Round of the postseason.\n  - player_id: Identifier of the player.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player played in.\n  - Various postseason batting statistics columns.\n\nTable college:\n- Contains information about colleges.\n- Columns:\n  - college_id: Unique identifier for each college.\n  - name_full: Full name of the college.\n  - city: City where the college is located.\n  - state: State where the college is located.\n  - country: Country where the college is located.\n\nTable fielding:\n- Stores fielding statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the statistics.\n  - stint: Stint of the player.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player played in.\n  - position: Position played by the player.\n  - Various fielding statistics columns.\n\nTable fielding_outfield:\n- Contains outfield fielding statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the statistics.\n  - stint: Stint of the player.\n  - Various outfield fielding statistics columns.\n\nTable fielding_postseason:\n- Stores postseason fielding statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the postseason.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player played in.\n  - round: Round of the postseason.\n  - pos: Position played by the player.\n  - Various postseason fielding statistics columns.\n\nTable hall_of_fame:\n- Contains data about players in the Hall of Fame.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - yearid: Year of induction.\n  - votedby: Method of voting.\n  - ballots: Number of ballots.\n  - needed: Votes needed for induction.\n  - votes: Total votes received.\n  - inducted: Induction status.\n  - category: Category of induction.\n  - needed_note: Additional notes on votes needed.\n\nTable home_game:\n- Stores information about home games.\n- Columns:\n  - year: Year of the game.\n  - league_id: Identifier of the league.\n  - team_id: Identifier of the team.\n  - park_id: Identifier of the park.\n  - Various game-related columns such as games played, attendance, etc.\n\nTable manager:\n- Contains data about managers.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of management.\n  - team_id: Identifier of the team managed.\n  - league_id: Identifier of the league managed.\n  - inseason: In-season status.\n  - Various managerial statistics columns.\n\nTable manager_award:\n- Stores information about awards received by managers.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - award_id: Identifier of the award.\n  - year: Year of the award.\n  - league_id: Identifier of the league.\n  - tie: Tie status.\n  - annotation: Additional annotation.\n\nTable manager_award_vote:\n- Contains data about award votes received by managers.\n- Columns:\n  - award_id: Identifier of the award.\n  - year: Year of the vote.\n  - league_id: Identifier of the league.\n  - player_id: Identifier of the player.\n  - points_won: Points received in the vote.\n  - points_max: Maximum points available.\n  - votes_first: Number of first-place votes.\n\nTable manager_half:\n- Stores managerial statistics for each half of the season.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of management.\n  - team_id: Identifier of the team managed.\n  - league_id: Identifier of the league managed.\n  - inseason: In-season status.\n  - half: Half of the season.\n  - Various managerial statistics columns.\n\nTable park:\n- Contains information about parks.\n- Columns:\n  - park_id: Unique identifier for each park.\n  - park_name: Name of the park.\n  - park_alias: Alias of the park.\n  - city: City where the park is located.\n  - state: State where the park is located.\n  - country: Country where the park is located.\n\nTable pitching:\n- Stores pitching statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the statistics.\n  - stint: Stint of the player.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player played in.\n  - Various pitching statistics columns.\n\nTable pitching_postseason:\n- Contains postseason pitching statistics of players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - year: Year of the postseason.\n  - round: Round of the postseason.\n  - team_id: Identifier of the team the player played for.\n  - league_id: Identifier of the league the player played in.\n  - Various postseason pitching statistics columns.\n\nTable player:\n- Contains general information about players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - Various player-related information such as birth details, death details, name, physical attributes, etc.\n\nTable player_award:\n- Stores data about awards received by players.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - award_id: Identifier of the award.\n  - year: Year of the award.\n  - league_id: Identifier of the league.\n  - tie: Tie status.\n  - notes: Additional notes.\n\nTable player_award_vote:\n- Contains data about award votes received by players.\n- Columns:\n  - award_id: Identifier of the award.\n  - year: Year of the vote.\n  - league_id: Identifier of the league.\n  - player_id: Identifier of the player.\n  - points_won: Points received in the vote.\n  - points_max: Maximum points available.\n  - votes_first: Number of first-place votes.\n\nTable player_college:\n- Stores information about players' colleges.\n- Columns:\n  - player_id: Unique identifier for each player.\n  - college_id: Identifier of the college.\n  - year: Year of college association.\n\nTable postseason:\n- Contains data about postseason games.\n- Columns:\n  - year: Year of the postseason.\n  - round: Round of the postseason.\n  - team_id_winner: Identifier of the winning team.\n  - league_id_winner: Identifier of the winning team's league.\n  - team_id_loser: Identifier of the losing team.\n  - league_id_loser: Identifier of the losing team's league.\n  - Various game-related columns.\n\nTable salary:\n- Stores salary information of players.\n- Columns:\n  - year: Year of the salary.\n  - team_id: Identifier of the team.\n  - league_id: Identifier of the league.\n  - player_id: Identifier of the player.\n  - salary: Salary amount.\n\nTable team:\n- Contains data about teams.\n- Columns:\n  - year: Year of the team.\n  - league_id: Identifier of the league.\n  - team_id: Unique identifier for each team.\n  - Various team-related statistics columns.\n\nTable team_franchise:\n- Stores information about team franchises.\n- Columns:\n  - franchise_id: Unique identifier for each franchise.\n  - franchise_name: Name of the franchise.\n  - active: Active status.\n  - na_assoc: Association status.\n\nTable team_half:\n- Contains team statistics for each half of the season.\n- Columns:\n  - year: Year of the team.\n  - league_id: Identifier of the league.\n  - team_id: Identifier of the team.\n  - half: Half of the season.\n  - Various team-related statistics columns.\n\nForeign Keys:\n- Establish relationships between various tables using player_id, team_id, league_id, college_id, park_id, award_id, etc.",
    "battle_death_robust": "Table battle:\n- Contains information about battles.\n- Columns:\n  - identification: Unique identifier for each battle.\n  - name: Name of the battle.\n  - date: Date of the battle.\n  - bulgarian_commander: Commander of the Bulgarian forces in the battle.\n  - latin_commander: Commander of the Latin forces in the battle.\n  - result: Outcome or result of the battle.\n\nTable death:\n- Stores data related to deaths caused by battles.\n- Columns:\n  - caused_by_shipID: Identifier of the ship that caused the death.\n  - identification: Unique identifier for each death.\n  - annotation: Additional notes or annotations about the death.\n  - killed: Number of individuals killed.\n  - injured: Number of individuals injured.\n\nTable ship:\n- Contains details about ships involved in battles.\n- Columns:\n  - loss_in_battle: Identifier of the battle in which the ship was lost.\n  - identification: Unique identifier for each ship.\n  - name: Name of the ship.\n  - tonnage: Weight or tonnage of the ship.\n  - ship_type: Type or classification of the ship.\n  - location: Location of the ship.\n  - disposition_of_ship: Status or disposition of the ship.\n\nForeign Keys:\n- ship.loss_in_battle references battle.identification, linking ships to the battles in which they were lost.\n- death.caused_by_shipID references ship.identification, establishing a relationship between deaths and the ships that caused them.",
    "behavior_monitoring_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_identification: Unique identifier for each address.\n  - line1: First line of the address.\n  - line2: Second line of the address.\n  - line3: Third line of the address.\n  - city: City of the address.\n  - zip_postcode: Postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n  - other_address_info: Additional information about the address.\n\nTable Assessment_Notes:\n- Stores notes related to student assessments.\n- Columns:\n  - notes_identification: Unique identifier for each assessment note.\n  - student_identification: Identifier of the student being assessed.\n  - teacher_identification: Identifier of the teacher providing the assessment.\n  - date_of_notes: Date when the notes were recorded.\n  - text_of_notes: Content of the assessment notes.\n  - additional_info: Additional information related to the assessment notes.\n\nTable Behavior_Incident:\n- Contains data about behavior incidents involving students.\n- Columns:\n  - incident_identification: Unique identifier for each behavior incident.\n  - incident_type_code: Code representing the type of incident.\n  - student_identification: Identifier of the student involved in the incident.\n  - date_incident_start: Start date of the incident.\n  - date_incident_end: End date of the incident.\n  - incident_summary: Summary of the incident.\n  - recommendations: Recommendations following the incident.\n  - additional_info: Additional information about the incident.\n\nTable Detention:\n- Stores information about student detentions.\n- Columns:\n  - detention_identification: Unique identifier for each detention record.\n  - detention_type_code: Code representing the type of detention.\n  - teacher_identification: Identifier of the teacher assigning the detention.\n  - datetime_detention_start: Start date and time of the detention.\n  - datetime_detention_end: End date and time of the detention.\n  - detention_summary: Summary of the detention details.\n  - additional_info: Additional information related to the detention.\n\nTable Ref_Address_Types:\n- Contains reference data for different types of addresses.\n- Columns:\n  - address_type_code: Code representing the address type.\n  - address_type_info: Information about the address type.\n\nTable Ref_Detention_Type:\n- Stores reference data for different types of detentions.\n- Columns:\n  - detention_type_code: Code representing the detention type.\n  - detention_type_info: Information about the detention type.\n\nTable Ref_Incident_Type:\n- Contains reference data for different types of incidents.\n- Columns:\n  - incident_type_code: Code representing the incident type.\n  - incident_type_info: Information about the incident type.\n\nTable Student_Addresses:\n- Stores information about addresses associated with students.\n- Columns:\n  - student_identification: Identifier of the student.\n  - address_identification: Identifier of the address associated with the student.\n  - date_address_from: Start date of the address association.\n  - date_address_to: End date of the address association.\n  - monthly_rental: Monthly rental amount for the address.\n  - additional_info: Additional information related to the student's address.\n\nTable Students:\n- Contains details about students.\n- Columns:\n  - student_identification: Unique identifier for each student.\n  - address_identification: Identifier of the student's address.\n  - Fname: First name of the student.\n  - Mname: Middle name of the student.\n  - Lname: Last name of the student.\n  - phone_number: Phone number of the student.\n  - email_address: Email address of the student.\n  - date_first_rental: Date when the student first rented.\n  - date_left_university: Date when the student left the university.\n  - other_student_info: Additional information about the student.\n\nTable Students_in_Detention:\n- Stores data about students in detention.\n- Columns:\n  - student_identification: Identifier of the student in detention.\n  - detention_identification: Identifier of the detention.\n  - incident_identification: Identifier of the incident associated with the detention.\n\nTable Teachers:\n- Contains information about teachers.\n- Columns:\n  - teacher_identification: Unique identifier for each teacher.\n  - address_identification: Identifier of the teacher's address.\n  - Fname: First name of the teacher.\n  - Mname: Middle name of the teacher.\n  - Lname: Last name of the teacher.\n  - sex: Gender of the teacher.\n  - phone_number: Phone number of the teacher.\n  - email_address: Email address of the teacher.\n  - additional_info: Additional information about the teacher.\n\nForeign Keys:\n- Students.address_identification references Addresses.address_identification, linking students to their addresses.\n- Teachers.address_identification references Addresses.address_identification, connecting teachers to their addresses.\n- Assessment_Notes.teacher_identification references Teachers.teacher_identification, establishing a relationship between assessment notes and teachers.\n- Assessment_Notes.student_identification references Students.student_identification, linking assessment notes to students.\n- Behavior_Incident.student_identification references Students.student_identification, connecting behavior incidents to students.\n- Behavior_Incident.incident_type_code references Ref_Incident_Type.incident_type_code, establishing a relationship between behavior incidents and incident types.\n- Detention.teacher_identification references Teachers.teacher_identification, linking detentions to teachers.\n- Detention.detention_type_code references Ref_Detention_Type.detention_type_code, connecting detentions to detention types.\n- Student_Addresses.student_identification references Students.student_identification, establishing a relationship between students and their addresses.\n- Student_Addresses.address_identification references Addresses.address_identification, linking student addresses to addresses.\n- Students_in_Detention.student_identification references Students.student_identification, connecting students in detention to students.\n- Students_in_Detention.detention_identification references Detention.detention_identification, establishing a relationship between students in detention and detentions.\n- Students_in_Detention.incident_identification references Behavior_Incident.incident_identification, linking students in detention to behavior incidents.",
    "bike_1_robust": "Table station:\n- Contains information about different stations.\n- Columns:\n  - identification: Unique identifier for each station.\n  - name: Name of the station.\n  - lat: Latitude coordinate of the station.\n  - length: Length of the station.\n  - dock_num: Number of docks available at the station.\n  - city: City where the station is located.\n  - date_of_installation: Date when the station was installed.\n\nTable status:\n- Stores real-time status data of stations.\n- Columns:\n  - station_identification: Identifier of the station.\n  - bikes_available: Number of bikes available at the station.\n  - docks_available: Number of docks available at the station.\n  - time: Timestamp of the status update.\n\nTable trip:\n- Contains details about trips taken by users.\n- Columns:\n  - identification: Unique identifier for each trip.\n  - duration: Duration of the trip.\n  - date_of_start: Date when the trip started.\n  - start_station_name: Name of the starting station.\n  - start_station_identification: Identifier of the starting station.\n  - date_of_end: Date when the trip ended.\n  - end_station_name: Name of the ending station.\n  - end_station_identification: Identifier of the ending station.\n  - bike_identification: Identifier of the bike used for the trip.\n  - subscription_type: Type of subscription for the trip.\n  - zip_code: Zip code related to the trip.\n\nTable weather:\n- Stores weather data for specific dates.\n- Columns:\n  - date: Date for the weather data.\n  - maximum_temperature_F: Maximum temperature in Fahrenheit.\n  - average_temperature_F: Average temperature in Fahrenheit.\n  - minimum_temperature_F: Minimum temperature in Fahrenheit.\n  - maximum_dew_point_F: Maximum dew point in Fahrenheit.\n  - average_dew_point_F: Average dew point in Fahrenheit.\n  - minimum_dew_point_F: Minimum dew point in Fahrenheit.\n  - maximum_humidity: Maximum humidity percentage.\n  - average_humidity: Average humidity percentage.\n  - minimum_humidity: Minimum humidity percentage.\n  - maximum_sea_level_pressure_inches: Maximum sea level pressure in inches.\n  - average_sea_level_pressure_inches: Average sea level pressure in inches.\n  - minimum_sea_level_pressure_inches: Minimum sea level pressure in inches.\n  - maximum_visibility_miles: Maximum visibility in miles.\n  - average_visibility_miles: Average visibility in miles.\n  - minimum_visibility_miles: Minimum visibility in miles.\n  - maximum_wind_speed_mph: Maximum wind speed in mph.\n  - average_wind_speed_mph: Average wind speed in mph.\n  - maximum_gust_speed_mph: Maximum gust speed in mph.\n  - precipitation_inches: Amount of precipitation in inches.\n  - cloud_cover: Percentage of cloud cover.\n  - events: Weather events (e.g., rain, snow).\n  - wind_dir_degrees: Wind direction in degrees.\n  - zip_code: Zip code related to the weather data.\n\nForeign Keys:\n- status.station_identification references station.identification, establishing a relationship between status and stations.",
    "body_builder_robust": "Table body_builder:\n- Contains data related to bodybuilders and their lifting statistics.\n- Columns:\n  - Body_Builder_identification: Unique identifier for each bodybuilder.\n  - People_identification: Identifier of the person who is a bodybuilder.\n  - Snatch: Data related to the snatch lifting technique.\n  - Clean_Jerk: Data related to the clean and jerk lifting technique.\n  - sum: Total sum of the lifting statistics.\n\nTable people:\n- Stores information about individuals.\n- Columns:\n  - People_identification: Unique identifier for each person.\n  - Name: Name of the person.\n  - Height: Height of the person.\n  - Weight: Weight of the person.\n  - date_of_birth: Date of birth of the person.\n  - place_of_birth: Place of birth of the person.\n\nForeign Keys:\n- body_builder.People_identification references people.People_identification, establishing a relationship between bodybuilders and individuals in the people table.",
    "book_2_robust": "Table book:\n- Contains information about books.\n- Columns:\n  - Book_identification: Unique identifier for each book.\n  - headline: Title or headline of the book.\n  - Issues: Number of issues or editions of the book.\n  - author: Author of the book.\n\nTable publication:\n- Stores details about publications of books.\n- Columns:\n  - Publication_identification: Unique identifier for each publication.\n  - Book_identification: Identifier of the book being published, linked to the book table.\n  - Publisher: Publisher of the publication.\n  - date_of_publication: Date when the publication was released.\n  - Price: Price of the publication.\n\nForeign Keys:\n- publication.Book_identification references book.Book_identification, establishing a relationship between publications and books.",
    "browser_web_robust": "Table Web_client_accelerator:\n- Contains information about web client accelerators.\n- Columns:\n  - identification: Unique identifier for each web client accelerator.\n  - name: Name of the web client accelerator.\n  - Operating_system: Operating system used by the web client accelerator.\n  - user: User of the web client accelerator.\n  - link: Link associated with the web client accelerator.\n\nTable accelerator_compatible_browser:\n- Stores data about browsers compatible with accelerators.\n- Columns:\n  - accelerator_identification: Identifier of the web client accelerator.\n  - browser_identification: Identifier of the browser.\n  - compatible_since_year: Year since which the browser is compatible with the accelerator.\n\nTable browser:\n- Contains details about different browsers.\n- Columns:\n  - identification: Unique identifier for each browser.\n  - name: Name of the browser.\n  - market_share: Market share of the browser.\n\nForeign Keys:\n- accelerator_compatible_browser.browser_identification references browser.identification, establishing a relationship between compatible browsers and browsers.\n- accelerator_compatible_browser.accelerator_identification references Web_client_accelerator.identification, linking compatible browsers to specific web client accelerators.",
    "candidate_poll_robust": "Table candidate:\n- Contains information about candidates in a poll or election.\n- Columns:\n  - Candidate_identification: Unique identifier for each candidate.\n  - People_identification: Identifier linking to the corresponding individual in the people table.\n  - Poll_Source: Source of the poll data.\n  - Date: Date of the poll.\n  - approval_rate: Rate of approval for the candidate.\n  - Consider_rate: Rate of consideration for the candidate.\n  - disapproval_rate: Rate of disapproval for the candidate.\n  - doubt_rate: Rate of uncertainty or doubt regarding the candidate.\n\nTable people:\n- Stores details about individuals.\n- Columns:\n  - People_identification: Unique identifier for each individual.\n  - gender: Gender of the individual.\n  - Name: Name of the individual.\n  - birthdate: Birthdate of the individual.\n  - Height: Height of the individual.\n  - Weight: Weight of the individual.\n\nForeign Keys:\n- candidate.People_identification references people.People_identification, establishing a relationship between candidates and individuals in the people table.",
    "car_1_robust": "Table car_makers:\n- Contains information about different car manufacturers.\n- Columns:\n  - ID: Unique identifier for each car maker.\n  - manufacturer: Name of the manufacturer.\n  - FullName: Full name of the manufacturer.\n  - Country: Country where the manufacturer is located.\n\nTable car_names:\n- Stores details about different car models and variants.\n- Columns:\n  - MakeID: Unique identifier for each car make.\n  - variant: Variant of the car model.\n  - Make: Name of the car make.\n\nTable cars_data:\n- Contains data related to various car specifications.\n- Columns:\n  - ID: Unique identifier for each car data entry.\n  - fuel_efficiency: Fuel efficiency of the car.\n  - Cylinders: Number of cylinders in the car engine.\n  - Edispl: Engine displacement of the car.\n  - Horsepower: Horsepower of the car.\n  - Weight: Weight of the car.\n  - Accelerate: Acceleration performance of the car.\n  - Year: Year of the car model.\n\nTable continents:\n- Stores information about different continents.\n- Columns:\n  - continent_ID: Unique identifier for each continent.\n  - continent: Name of the continent.\n\nTable countries:\n- Contains details about different countries.\n- Columns:\n  - continent_ID: Identifier of the continent to which the country belongs.\n  - CountryName: Name of the country.\n  - continent: Name of the continent where the country is located.\n\nTable model_list:\n- Stores a list of car models and their manufacturers.\n- Columns:\n  - ModelId: Unique identifier for each car model.\n  - manufacturer: Manufacturer of the car model.\n  - variant: Variant of the car model.\n\nForeign Keys:\n- countries.continent references continents.continent_ID, establishing a relationship between countries and continents.\n- car_makers.Country references countries.continent_ID, linking car makers to the countries they are located in.\n- model_list.manufacturer references car_makers.ID, connecting car model manufacturers to their respective car makers.\n- car_names.variant references model_list.variant, linking car names to specific car model variants.\n- cars_data.ID references car_names.MakeID, establishing a relationship between car data and car names.",
    "chinook_1_robust": "Table Album:\n- Contains information about albums.\n- Columns:\n  - AlbumId: Unique identifier for each album.\n  - Title: Title of the album.\n  - ArtistId: Identifier of the artist who created the album.\n\nTable Artist:\n- Stores details about artists.\n- Columns:\n  - ArtistId: Unique identifier for each artist.\n  - Name: Name of the artist.\n\nTable Customer:\n- Contains data related to customers.\n- Columns:\n  - CustomerId: Unique identifier for each customer.\n  - FirstName: First name of the customer.\n  - LastName: Last name of the customer.\n  - Company: Company name of the customer.\n  - Address: Address of the customer.\n  - City: City where the customer is located.\n  - State: State where the customer is located.\n  - Country: Country where the customer is located.\n  - PostalCode: Postal code of the customer.\n  - Phone: Phone number of the customer.\n  - Fax: Fax number of the customer.\n  - Email: Email address of the customer.\n  - SupportRepId: Identifier of the support representative assigned to the customer.\n\nTable Employee:\n- Stores information about employees.\n- Columns:\n  - EmployeeId: Unique identifier for each employee.\n  - LastName: Last name of the employee.\n  - FirstName: First name of the employee.\n  - Title: Job title of the employee.\n  - ReportsTo: Identifier of the employee to whom this employee reports.\n  - BirthDate: Birth date of the employee.\n  - HireDate: Date when the employee was hired.\n  - Address: Address of the employee.\n  - City: City where the employee is located.\n  - State: State where the employee is located.\n  - Country: Country where the employee is located.\n  - PostalCode: Postal code of the employee.\n  - Phone: Phone number of the employee.\n  - Fax: Fax number of the employee.\n  - Email: Email address of the employee.\n\nTable Genre:\n- Contains information about music genres.\n- Columns:\n  - GenreId: Unique identifier for each genre.\n  - Name: Name of the genre.\n\nTable Invoice:\n- Stores details about invoices.\n- Columns:\n  - InvoiceId: Unique identifier for each invoice.\n  - CustomerId: Identifier of the customer associated with the invoice.\n  - InvoiceDate: Date of the invoice.\n  - BillingAddress: Billing address on the invoice.\n  - BillingCity: Billing city on the invoice.\n  - BillingState: Billing state on the invoice.\n  - BillingCountry: Billing country on the invoice.\n  - BillingPostalCode: Billing postal code on the invoice.\n  - Total: Total amount on the invoice.\n\nTable InvoiceLine:\n- Contains information about individual invoice line items.\n- Columns:\n  - InvoiceLineId: Unique identifier for each invoice line.\n  - InvoiceId: Identifier of the invoice to which the line item belongs.\n  - TrackId: Identifier of the track associated with the line item.\n  - UnitPrice: Price per unit of the item.\n  - Quantity: Quantity of the item.\n\nTable MediaType:\n- Stores details about media types.\n- Columns:\n  - MediaTypeId: Unique identifier for each media type.\n  - Name: Name of the media type.\n\nTable Playlist:\n- Contains information about playlists.\n- Columns:\n  - PlaylistId: Unique identifier for each playlist.\n  - Name: Name of the playlist.\n\nTable PlaylistTrack:\n- Stores the relationship between playlists and tracks.\n- Columns:\n  - PlaylistId: Identifier of the playlist.\n  - TrackId: Identifier of the track in the playlist.\n\nTable Track:\n- Contains details about music tracks.\n- Columns:\n  - TrackId: Unique identifier for each track.\n  - Name: Name of the track.\n  - AlbumId: Identifier of the album to which the track belongs.\n  - MediaTypeId: Identifier of the media type of the track.\n  - GenreId: Identifier of the genre of the track.\n  - Composer: Composer of the track.\n  - Milliseconds: Duration of the track in milliseconds.\n  - Bytes: Size of the track in bytes.\n  - UnitPrice: Price of the track.\n\nForeign Keys:\n- Album.ArtistId references Artist.ArtistId, establishing a relationship between albums and artists.\n- Customer.SupportRepId references Employee.EmployeeId, linking customers to their support representatives.\n- Employee.ReportsTo references Employee.EmployeeId, connecting employees to their respective supervisors.\n- Invoice.CustomerId references Customer.CustomerId, establishing a relationship between invoices and customers.\n- InvoiceLine.TrackId references Track.TrackId, linking invoice line items to tracks.\n- InvoiceLine.InvoiceId references Invoice.InvoiceId, connecting invoice line items to their respective invoices.\n- PlaylistTrack.TrackId references Track.TrackId, establishing a relationship between playlist tracks and tracks.\n- PlaylistTrack.PlaylistId references Playlist.PlaylistId, linking playlist tracks to playlists.\n- Track.MediaTypeId references MediaType.MediaTypeId, connecting tracks to their media types.\n- Track.GenreId references Genre.GenreId, establishing a relationship between tracks and genres.\n- Track.AlbumId references Album.AlbumId, linking tracks to their respective albums.",
    "cinema_robust": "Table cinema:\n- Contains information about different cinemas.\n- Columns:\n  - Cinema_Identification: Unique identifier for each cinema.\n  - Name: Name of the cinema.\n  - Openning_year: Year when the cinema was opened.\n  - seating: Number of seats available in the cinema.\n  - Location: Location of the cinema.\n\nTable film:\n- Stores details about films or movies.\n- Columns:\n  - movie_Identification: Unique identifier for each movie.\n  - Rank_in_series: Ranking of the movie in a series.\n  - Number_in_season: Number of the movie in a season.\n  - Title: Title of the movie.\n  - Directed_by: Director of the movie.\n  - Original_air_date: Original air date of the movie.\n  - Production_code: Production code of the movie.\n\nTable schedule:\n- Contains scheduling information for movies in cinemas.\n- Columns:\n  - Cinema_Identification: Identifier of the cinema.\n  - movie_Identification: Identifier of the movie.\n  - date: Date of the scheduled show.\n  - Show_times_per_day: Number of show times per day for the movie.\n  - Price: Price of the movie ticket.\n\nForeign Keys:\n- schedule.Cinema_Identification references cinema.Cinema_Identification, establishing a relationship between schedule and cinemas.\n- schedule.movie_Identification references film.movie_Identification, linking schedule to specific movies.",
    "city_record_robust": "Table city:\n- Contains information about different cities.\n- Columns:\n  - City_Identification: Unique identifier for each city.\n  - City: Name of the city.\n  - Hanzi: Chinese characters for the city name.\n  - Hanyu_Pinyin: Pinyin transliteration of the city name.\n  - Regional_Population: Population of the city in the region.\n  - Gross_Domestic_Product: GDP of the city.\n\nTable hosting_city:\n- Stores data related to cities hosting events.\n- Columns:\n  - Year: Year of the event.\n  - Match_Identification: Identifier for the match.\n  - Host_City: Identifier of the city hosting the event.\n\nTable match:\n- Contains details about matches.\n- Columns:\n  - Match_Identification: Unique identifier for each match.\n  - date: Date of the match.\n  - location: Location of the match.\n  - Score: Score of the match.\n  - Result: Result of the match.\n  - Competition: Type of competition for the match.\n\nTable temperature:\n- Stores temperature data for cities.\n- Columns:\n  - City_Identification: Identifier for the city.\n  - January, February, March, April, June, July, August, September, October, November, December: Temperature data for each month.\n\nForeign Keys:\n- temperature.City_Identification references city.City_Identification, linking temperature data to specific cities.\n- hosting_city.Match_Identification references match.Match_Identification, establishing a relationship between hosting cities and matches.\n- hosting_city.Host_City references city.City_Identification, connecting hosting cities to specific cities.",
    "climbing_robust": "Table climber:\n- Contains information about climbers and their climbing activities.\n- Columns:\n  - Climber_Identification: Unique identifier for each climber.\n  - Name: Name of the climber.\n  - Country: Country of origin of the climber.\n  - Time: Time spent climbing.\n  - Points: Points earned by the climber.\n  - Mountain_Identification: Identifier of the mountain climbed by the climber.\n\nTable mountain:\n- Stores details about different mountains.\n- Columns:\n  - Mountain_Identification: Unique identifier for each mountain.\n  - Name: Name of the mountain.\n  - Height: Height of the mountain.\n  - Prominence: Prominence of the mountain.\n  - Range: Mountain range where the mountain is located.\n  - Country: Country where the mountain is situated.\n\nForeign Keys:\n- climber.Mountain_Identification references mountain.Mountain_Identification, establishing a relationship between climbers and the mountains they have climbed.",
    "club_1_robust": "Table Club:\n- Contains information about different clubs.\n- Columns:\n  - Club_Identification: Unique identifier for each club.\n  - Club_Name: Name of the club.\n  - Club_Description: Description of the club.\n  - Club_Location: Location of the club.\n\nTable Member_of_club:\n- Stores data about the membership of students in clubs.\n- Columns:\n  - student_identification: Identifier of the student.\n  - Club_Identification: Identifier of the club the student is a member of.\n  - Position: Position or role of the student within the club.\n\nTable Student:\n- Contains details about students.\n- Columns:\n  - student_identification: Unique identifier for each student.\n  - Last_Name: Last name of the student.\n  - First_name: First name of the student.\n  - Age: Age of the student.\n  - gender: Gender of the student.\n  - Major: Major or field of study of the student.\n  - Tutor: Tutor or mentor of the student.\n  - city_code: Code representing the city where the student is located.\n\nForeign Keys:\n- Member_of_club.Club_Identification references Club.Club_Identification, establishing a relationship between clubs and their members.\n- Member_of_club.student_identification references Student.student_identification, linking students to their club memberships.",
    "coffee_shop_robust": "Table happy_hour:\n- Contains information about happy hour events.\n- Columns:\n  - Happy_Hour_Identification: Unique identifier for each happy hour event.\n  - Shop_Identification: Identifier of the shop where the happy hour event takes place.\n  - Month: Month in which the happy hour event occurs.\n  - Num_of_staff_in_charge: Number of staff members in charge of the happy hour event.\n\nTable happy_hour_member:\n- Stores data about members attending happy hour events.\n- Columns:\n  - Happy_Hour_Identification: Identifier of the happy hour event.\n  - Member_Identification: Unique identifier for each member attending the event.\n  - Total_amount: Total amount spent by the member during the happy hour.\n\nTable member:\n- Contains details about members attending happy hour events.\n- Columns:\n  - Member_Identification: Unique identifier for each member.\n  - Name: Name of the member.\n  - Membership_card: Membership card details of the member.\n  - Age: Age of the member.\n  - Time_of_purchase: Time of purchase made by the member.\n  - Level_of_membership: Membership level of the member.\n  - Address: Address of the member.\n\nTable shop:\n- Stores information about shops where happy hour events are held.\n- Columns:\n  - Shop_Identification: Unique identifier for each shop.\n  - Address: Address of the shop.\n  - employee_count: Number of employees working at the shop.\n  - Score: Score rating of the shop.\n  - Open_Year: Year when the shop was opened.\n\nForeign Keys:\n- happy_hour.Shop_Identification references shop.Shop_Identification, establishing a relationship between happy hour events and shops.\n- happy_hour_member.Member_Identification references member.Member_Identification, linking members to their attendance at happy hour events.",
    "college_1_robust": "Table CLASS:\n- Contains information about classes offered.\n- Columns:\n  - CLASS_CODE: Unique identifier for each class.\n  - COURSE_CODE: Identifier of the course associated with the class.\n  - CLASS_SECTION: Section of the class.\n  - CLASS_TIME: Timing details of the class.\n  - CLASS_ROOM: Room where the class is conducted.\n  - PROFESSOR_NUM: Identifier of the professor teaching the class.\n\nTable COURSE:\n- Stores details about different courses.\n- Columns:\n  - COURSE_CODE: Unique identifier for each course.\n  - DEPARTMENT_CODE: Identifier of the department offering the course.\n  - CRS_DESCRIPTION: Description of the course.\n  - CRS_CREDIT: Credit hours assigned to the course.\n\nTable DEPARTMENT:\n- Contains information about various departments.\n- Columns:\n  - DEPARTMENT_CODE: Unique identifier for each department.\n  - DEPARTMENT_NAME: Name of the department.\n  - SCHOOL_CODE: Identifier of the school to which the department belongs.\n  - EMPLOYEE_NUM: Number of employees in the department.\n  - DEPARTMENT_ADDRESS: Address of the department.\n  - DEPARTMENT_EXTENSION: Extension number for the department.\n\nTable EMPLOYEE:\n- Stores data related to employees.\n- Columns:\n  - EMPLOYEE_NUM: Unique identifier for each employee.\n  - EMPLOYEE_LAST_NAME: Last name of the employee.\n  - EMPLOYEE_FIRST_NAME: First name of the employee.\n  - EMPLOYEE_INITIAL: Initial of the employee.\n  - EMPLOYEE_JOBCODE: Job code of the employee.\n  - EMPLOYEE_HIREDATE: Date when the employee was hired.\n  - EMPLOYEE_DOB: Date of birth of the employee.\n\nTable ENROLL:\n- Contains enrollment details of students in classes.\n- Columns:\n  - CLASS_CODE: Identifier of the class.\n  - STUDENT_NUM: Identifier of the student enrolled.\n  - ENROLL_GRADE: Grade obtained by the student in the class.\n\nTable PROFESSOR:\n- Stores information about professors.\n- Columns:\n  - EMPLOYEE_NUM: Identifier of the professor.\n  - DEPARTMENT_CODE: Identifier of the department to which the professor belongs.\n  - PROF_OFFICE: Office location of the professor.\n  - PROF_EXTENSION: Extension number for the professor.\n  - PROF_HIGH_DEGREE: Highest degree obtained by the professor.\n\nTable STUDENT:\n- Contains details about students.\n- Columns:\n  - STUDENT_NUM: Unique identifier for each student.\n  - STUDENT_LAST_NAME: Last name of the student.\n  - STUDENT_FIRST_NAME: First name of the student.\n  - STUDENT_INIT: Initial of the student.\n  - STUDENT_DOB: Date of birth of the student.\n  - STUDENT_HRS: Hours completed by the student.\n  - STUDENT_CLASS: Class details of the student.\n  - STUDENT_GPA: Grade Point Average of the student.\n  - STUDENT_TRANSFER: Transfer status of the student.\n  - DEPARTMENT_CODE: Identifier of the department to which the student belongs.\n  - STUDENT_PHONE: Phone number of the student.\n  - PROFESSOR_NUM: Identifier of the professor associated with the student.\n\nForeign Keys:\n- CLASS.PROFESSOR_NUM references EMPLOYEE.EMPLOYEE_NUM, linking classes to professors.\n- CLASS.COURSE_CODE references COURSE.COURSE_CODE, connecting classes to specific courses.\n- COURSE.DEPARTMENT_CODE references DEPARTMENT.DEPARTMENT_CODE, establishing a relationship between courses and departments.\n- DEPARTMENT.EMPLOYEE_NUM references EMPLOYEE.EMPLOYEE_NUM, linking departments to employees.\n- ENROLL.STUDENT_NUM references STUDENT.STUDENT_NUM, connecting enrollments to students.\n- ENROLL.CLASS_CODE references CLASS.CLASS_CODE, establishing a relationship between enrollments and classes.\n- PROFESSOR.DEPARTMENT_CODE references DEPARTMENT.DEPARTMENT_CODE, linking professors to departments.\n- PROFESSOR.EMPLOYEE_NUM references EMPLOYEE.EMPLOYEE_NUM, establishing a relationship between professors and employees.\n- STUDENT.DEPARTMENT_CODE references DEPARTMENT.DEPARTMENT_CODE, connecting students to departments.",
    "college_2_robust": "Table advisor:\n- Contains information about the advising relationships between students and instructors.\n- Columns:\n  - student_ID: Identifier of the student being advised.\n  - instructor_ID: Identifier of the instructor providing advice.\n\nTable classroom:\n- Stores details about different classrooms.\n- Columns:\n  - building: Building where the classroom is located.\n  - room_count: Number of rooms in the classroom.\n  - capacity: Maximum capacity of the classroom.\n\nTable course:\n- Contains information about various courses offered.\n- Columns:\n  - course_id: Unique identifier for each course.\n  - title: Title of the course.\n  - department_name: Name of the department offering the course.\n  - credits: Number of credits associated with the course.\n\nTable department:\n- Stores data related to different academic departments.\n- Columns:\n  - department_name: Name of the department.\n  - building: Building where the department is located.\n  - budget: Budget allocated to the department.\n\nTable instructor:\n- Contains details about instructors.\n- Columns:\n  - ID: Unique identifier for each instructor.\n  - name: Name of the instructor.\n  - department_name: Name of the department to which the instructor belongs.\n  - wage: Salary of the instructor.\n\nTable prereq:\n- Stores prerequisite information for courses.\n- Columns:\n  - course_id: Identifier of the course.\n  - prereq_id: Identifier of the prerequisite course.\n\nTable section:\n- Contains details about course sections.\n- Columns:\n  - course_id: Identifier of the course.\n  - section_id: Identifier of the section.\n  - semester: Semester in which the section is offered.\n  - year: Year in which the section is offered.\n  - building: Building where the section is conducted.\n  - room_count: Number of rooms allocated for the section.\n  - time_slot_id: Identifier of the time slot for the section.\n\nTable student:\n- Stores information about students.\n- Columns:\n  - ID: Unique identifier for each student.\n  - name: Name of the student.\n  - department_name: Name of the department to which the student belongs.\n  - total_credits: Total credits earned by the student.\n\nTable takes:\n- Contains data about courses taken by students.\n- Columns:\n  - ID: Identifier of the student.\n  - course_id: Identifier of the course taken.\n  - section_id: Identifier of the section of the course taken.\n  - semester: Semester when the course was taken.\n  - year: Year when the course was taken.\n  - grade: Grade obtained by the student in the course.\n\nTable teaches:\n- Stores information about instructors teaching specific course sections.\n- Columns:\n  - ID: Identifier of the instructor.\n  - course_id: Identifier of the course being taught.\n  - section_id: Identifier of the section being taught.\n  - semester: Semester in which the course is being taught.\n  - year: Year in which the course is being taught.\n\nTable time_slot:\n- Contains details about different time slots.\n- Columns:\n  - time_slot_id: Unique identifier for each time slot.\n  - day: Day of the week for the time slot.\n  - start_hr: Starting hour of the time slot.\n  - start_min: Starting minute of the time slot.\n  - end_hr: Ending hour of the time slot.\n  - end_min: Ending minute of the time slot.\n\nForeign Keys:\n- course.department_name references department.department_name, linking courses to specific departments.\n- instructor.department_name references department.department_name, connecting instructors to their respective departments.\n- section.building references classroom.building, establishing a relationship between sections and classrooms based on building.\n- section.room_count references classroom.room_count, linking sections to classrooms based on room count.\n- section.course_id references course.course_id, connecting sections to specific courses.\n- teaches.ID references instructor.ID, linking instructors to specific teaching assignments.\n- teaches.course_id references section.course_id, establishing a relationship between teaching assignments and courses.\n- teaches.section_id references section.section_id, connecting teaching assignments to specific sections.\n- teaches.semester and teaches.year reference section.semester and section.year, respectively, linking teaching assignments to specific semesters and years.\n- student.department_name references department.department_name, connecting students to their respective departments.\n- takes.ID references student.ID, establishing a relationship between courses taken and students.\n- takes.course_id and takes.section_id reference section.course_id and section.section_id, respectively, linking courses taken to specific course sections.\n- advisor.student_ID references student.ID and advisor.instructor_ID references instructor.ID, establishing advising relationships between students and instructors.\n- prereq.prereq_id references course.course_id and prereq.course_id references course.course_id, linking courses to their prerequisites.",
    "college_3_robust": "Table Course:\n- Contains information about different courses offered.\n- Columns:\n  - Course_ID: Unique identifier for each course.\n  - Course_Name: Name of the course.\n  - Credits: Number of credits assigned to the course.\n  - teacher: Identifier of the faculty member teaching the course.\n  - Days: Days on which the course is scheduled.\n  - Hours: Hours during which the course is conducted.\n  - Department_NO: Identifier of the department to which the course belongs.\n\nTable Department:\n- Stores details about different departments within the educational institution.\n- Columns:\n  - Department_NO: Unique identifier for each department.\n  - Division: Division to which the department belongs.\n  - Department_Name: Name of the department.\n  - Room: Room number associated with the department.\n  - Building: Building where the department is located.\n  - DPhone: Phone number of the department.\n\nTable Enrolled_in:\n- Contains data about students enrolled in courses.\n- Columns:\n  - Student_ID: Identifier of the student.\n  - Course_ID: Identifier of the course in which the student is enrolled.\n  - Grade: Grade obtained by the student in the course.\n\nTable Faculty:\n- Contains information about faculty members.\n- Columns:\n  - Faculty_ID: Unique identifier for each faculty member.\n  - Lname: Last name of the faculty member.\n  - Fname: First name of the faculty member.\n  - Rank: Rank or position of the faculty member.\n  - Sex: Gender of the faculty member.\n  - Phone: Phone number of the faculty member.\n  - Room: Room number of the faculty member.\n  - Building: Building where the faculty member is located.\n\nTable Gradeconversion:\n- Stores the conversion between letter grades and grade points.\n- Columns:\n  - lettergrade: Letter grade assigned to a specific grade point.\n  - gradepoint: Corresponding grade point for the letter grade.\n\nTable Member_of:\n- Represents the association between faculty members and departments.\n- Columns:\n  - Faculty_ID: Identifier of the faculty member.\n  - Department_NO: Identifier of the department to which the faculty member belongs.\n  - Appt_Type: Type of appointment for the faculty member.\n\nTable Minor_in:\n- Contains data about students and their minor departments.\n- Columns:\n  - Student_ID: Identifier of the student.\n  - Department_NO: Identifier of the minor department chosen by the student.\n\nTable Student:\n- Stores information about students.\n- Columns:\n  - Student_ID: Unique identifier for each student.\n  - Last_Name: Last name of the student.\n  - First_name: First name of the student.\n  - Age: Age of the student.\n  - gender: Gender of the student.\n  - Major: Major in which the student is enrolled.\n  - Tutor: Identifier of the faculty member who is the student's tutor.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Member_of.Department_NO references Department.Department_NO, establishing a relationship between faculty members and departments.\n- Member_of.Faculty_ID references Faculty.Faculty_ID, linking faculty members to their respective departments.\n- Course.Department_NO references Department.Department_NO, connecting courses to specific departments.\n- Course.teacher references Faculty.Faculty_ID, linking courses to the faculty member teaching them.\n- Minor_in.Department_NO references Department.Department_NO, connecting minor departments to students.\n- Minor_in.Student_ID references Student.Student_ID, establishing a relationship between minor departments and students.\n- Enrolled_in.Course_ID references Course.Course_ID, linking enrolled courses to specific courses.\n- Enrolled_in.Student_ID references Student.Student_ID, establishing a relationship between enrolled courses and students.",
    "company_1_robust": "### Natural Language Annotations:\nA:\nTable department:\n- Contains information about different departments within an organization.\n- Columns:\n  - Dname: Name of the department.\n  - Dnumber: Unique identifier for each department.\n  - Mgr_ssn: Social security number of the department manager.\n  - Mgr_start_date: Start date of the manager in the department.\n\nTable dependent:\n- Stores details about dependents of employees.\n- Columns:\n  - Essn: Social security number of the employee.\n  - Dependent_name: Name of the dependent.\n  - Sex: Gender of the dependent.\n  - Bdate: Birth date of the dependent.\n  - Relationship: Relationship of the dependent with the employee.\n\nTable dept_locations:\n- Contains information about the locations of departments.\n- Columns:\n  - Dnumber: Identifier of the department.\n  - Dlocation: Location of the department.\n\nTable employee:\n- Stores data related to employees in the organization.\n- Columns:\n  - Fname: First name of the employee.\n  - Minit: Middle initial of the employee.\n  - Lname: Last name of the employee.\n  - Ssn: Social security number of the employee.\n  - Bdate: Birth date of the employee.\n  - Address: Address of the employee.\n  - Sex: Gender of the employee.\n  - Salary: Salary of the employee.\n  - Super_ssn: Social security number of the employee's supervisor.\n  - Dno: Identifier of the department to which the employee belongs.\n\nTable project:\n- Contains information about different projects.\n- Columns:\n  - Pname: Name of the project.\n  - Pnumber: Unique identifier for each project.\n  - Plocation: Location of the project.\n  - Dnum: Identifier of the department associated with the project.\n\nTable works_on:\n- Stores data about employees working on projects.\n- Columns:\n  - Essn: Social security number of the employee.\n  - Pno: Identifier of the project.\n  - Hours: Number of hours the employee works on the project.\n\nForeign Keys:\n- No foreign keys provided in the schema.",
    "company_employee_robust": "Table company:\n- Contains information about different companies.\n- Columns:\n  - CompanyID: Unique identifier for each company.\n  - Name: Name of the company.\n  - Headquarters: Location of the company's headquarters.\n  - Industry: Industry to which the company belongs.\n  - Sales: Sales revenue of the company.\n  - Profits: Profits generated by the company.\n  - Assets: Total assets owned by the company.\n  - Market_Value: Market value of the company.\n\nTable employment:\n- Stores data related to employment history.\n- Columns:\n  - CompanyID: Identifier of the company.\n  - PeopleID: Identifier of the person employed.\n  - Year_working: Number of years the person has worked at the company.\n\nTable people:\n- Contains details about individuals.\n- Columns:\n  - PeopleID: Unique identifier for each individual.\n  - Age: Age of the individual.\n  - Name: Name of the individual.\n  - Nationality: Nationality of the individual.\n  - Graduation_College: College from which the individual graduated.\n\nForeign Keys:\n- employment.PeopleID references people.PeopleID, establishing a relationship between employment and people.\n- employment.CompanyID references company.CompanyID, linking employment to specific companies.",
    "company_office_robust": "Table Companies:\n- Contains information about different companies.\n- Columns:\n  - id: Unique identifier for each company.\n  - name: Name of the company.\n  - Headquarters: Location of the company's headquarters.\n  - Industry: Industry to which the company belongs.\n  - Sales: Sales revenue of the company.\n  - Profits: Profits generated by the company.\n  - Assets: Total assets owned by the company.\n  - Market_Value: Market value of the company.\n\nTable Office_locations:\n- Stores data related to office locations of companies.\n- Columns:\n  - building_id: Identifier of the building where the office is located.\n  - company_id: Identifier of the company to which the office belongs.\n  - move_in_year: Year when the office was moved into.\n\nTable buildings:\n- Contains details about different buildings.\n- Columns:\n  - id: Unique identifier for each building.\n  - name: Name of the building.\n  - city: City where the building is located.\n  - Height: Height of the building.\n  - Stories: Number of stories in the building.\n  - Status: Status of the building.\n\nForeign Keys:\n- Office_locations.company_id references Companies.id, establishing a relationship between office locations and companies.\n- Office_locations.building_id references buildings.id, linking office locations to specific buildings.",
    "concert_singer_robust": "Table concert:\n- Contains information about different concerts.\n- Columns:\n  - concertID: Unique identifier for each concert.\n  - concertName: Name of the concert.\n  - Theme: Theme of the concert.\n  - StadiumID: Identifier of the stadium where the concert takes place.\n  - Year: Year in which the concert was held.\n\nTable singer:\n- Stores details about singers.\n- Columns:\n  - SingerID: Unique identifier for each singer.\n  - Name: Name of the singer.\n  - Country: Country of origin of the singer.\n  - Song_Name: Name of the song associated with the singer.\n  - Song_release_year: Year when the song was released.\n  - Age: Age of the singer.\n  - Is_man: Indicator specifying if the singer is male.\n\nTable singer_in_concert:\n- Represents the relationship between singers and concerts.\n- Columns:\n  - concertID: Identifier of the concert.\n  - SingerID: Identifier of the singer performing in the concert.\n\nTable stadium:\n- Contains information about different stadiums.\n- Columns:\n  - StadiumID: Unique identifier for each stadium.\n  - Location: Location of the stadium.\n  - Name: Name of the stadium.\n  - seating: Seating capacity of the stadium.\n  - Highest: Highest seating capacity in the stadium.\n  - Lowest: Lowest seating capacity in the stadium.\n  - Average: Average seating capacity in the stadium.\n\nForeign Keys:\n- concert.StadiumID references stadium.StadiumID, establishing a relationship between concerts and stadiums.\n- singer_in_concert.SingerID references singer.SingerID, linking singers to specific concerts.\n- singer_in_concert.concertID references concert.concertID, connecting singers to the concerts they perform in.",
    "county_public_safety_robust": "Table city:\n- Contains information about different cities.\n- Columns:\n  - CityID: Unique identifier for each city.\n  - CountyID: Identifier of the county to which the city belongs.\n  - Name: Name of the city.\n  - White: Population count of White residents in the city.\n  - Black: Population count of Black residents in the city.\n  - Amerindian: Population count of Amerindian residents in the city.\n  - Asian: Population count of Asian residents in the city.\n  - Multiracial: Population count of Multiracial residents in the city.\n  - Hispanic: Population count of Hispanic residents in the city.\n\nTable county_public_safety:\n- Stores data related to public safety in different counties.\n- Columns:\n  - CountyID: Unique identifier for each county.\n  - Name: Name of the county.\n  - Population: Total population of the county.\n  - Police_officers: Number of police officers in the county.\n  - Residents_per_officer: Average number of residents per police officer.\n  - Case_burden: Burden of cases handled by public safety in the county.\n  - rate_of_Crime: Rate of crime in the county.\n  - Police_force: Details about the police force in the county.\n  - Location: Location details of the county.\n\nForeign Keys:\n- city.CountyID references county_public_safety.CountyID, establishing a relationship between cities and public safety data of counties.",
    "course_teach_robust": "Table course:\n- Contains information about different courses.\n- Columns:\n  - CourseID: Unique identifier for each course.\n  - StartingDate: Date when the course starts.\n  - Course: Name or title of the course.\n\nTable course_arrange:\n- Stores data related to the arrangement of courses.\n- Columns:\n  - CourseID: Identifier of the course.\n  - TeacherID: Identifier of the teacher assigned to the course.\n  - Grade: Grade associated with the course arrangement.\n\nTable teacher:\n- Contains details about teachers.\n- Columns:\n  - TeacherID: Unique identifier for each teacher.\n  - Name: Name of the teacher.\n  - Age: Age of the teacher.\n  - Hometown: Hometown of the teacher.\n\nForeign Keys:\n- course_arrange.TeacherID references teacher.TeacherID, establishing a relationship between course arrangements and teachers.\n- course_arrange.CourseID references course.CourseID, linking course arrangements to specific courses.",
    "cre_Docs_and_Epenses_robust": "Table Accounts:\n- Contains information about different accounts.\n- Columns:\n  - AccountID: Unique identifier for each account.\n  - StatementID: Identifier linking the account to a statement.\n  - Account_information: Additional information related to the account.\n\nTable Documents:\n- Stores details about various documents.\n- Columns:\n  - DocumentID: Unique identifier for each document.\n  - Document_Type_Code: Code representing the type of document.\n  - ProjectID: Identifier of the project associated with the document.\n  - Document_Date: Date of the document.\n  - Document_Name: Name of the document.\n  - Document_information: Additional information about the document.\n  - additional_information: Extra details related to the document.\n\nTable Documents_with_Expenses:\n- Contains documents with associated expenses.\n- Columns:\n  - DocumentID: Identifier of the document.\n  - Budget_Type_Code: Code representing the budget type of the document.\n  - Document_information: Additional information about the document.\n\nTable Projects:\n- Stores information about different projects.\n- Columns:\n  - ProjectID: Unique identifier for each project.\n  - Project_information: Details related to the project.\n\nTable Ref_Budget_Codes:\n- Contains reference data for budget codes.\n- Columns:\n  - Budget_Type_Code: Code representing the budget type.\n  - Budget_Type_information: Information about the budget type.\n\nTable Ref_Document_Types:\n- Stores reference data for document types.\n- Columns:\n  - Document_Type_Code: Code representing the document type.\n  - Document_Type_Name: Name of the document type.\n  - Document_Type_information: Additional information about the document type.\n\nTable Statements:\n- Contains information about statements.\n- Columns:\n  - StatementID: Unique identifier for each statement.\n  - Statement_information: Details related to the statement.\n\nForeign Keys:\n- Documents.ProjectID references Projects.ProjectID, establishing a relationship between documents and projects.\n- Documents.Document_Type_Code references Ref_Document_Types.Document_Type_Code, linking documents to specific document types.\n- Statements.StatementID references Documents.DocumentID, connecting statements to documents.\n- Documents_with_Expenses.DocumentID references Documents.DocumentID, establishing a relationship between documents with expenses and documents.\n- Documents_with_Expenses.Budget_Type_Code references Ref_Budget_Codes.Budget_Type_Code, linking documents with expenses to budget codes.\n- Accounts.StatementID references Statements.StatementID, connecting accounts to statements.",
    "cre_Doc_Control_Systems_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - addressid: Unique identifier for each address.\n  - address_information: Details about the address.\n\nTable Circulation_History:\n- Stores the circulation history of documents.\n- Columns:\n  - document_id: Identifier of the document.\n  - number_of_draft: Number of drafts for the document.\n  - copy_number: Copy number of the document.\n  - employeeID: Identifier of the employee associated with the circulation history.\n\nTable Document_Drafts:\n- Contains details about document drafts.\n- Columns:\n  - document_id: Identifier of the document.\n  - number_of_draft: Number of drafts for the document.\n  - draft_information: Information about the draft.\n\nTable Documents:\n- Stores information about various documents.\n- Columns:\n  - document_id: Unique identifier for each document.\n  - document_status_code: Code representing the status of the document.\n  - document_type_code: Code representing the type of the document.\n  - shipping_agent_code: Code of the shipping agent for the document.\n  - date_of_receipt: Date when the document was received.\n  - number_of_receipt: Number of receipts for the document.\n  - additional_information: Additional details about the document.\n\nTable Documents_Mailed:\n- Contains data about documents that have been mailed.\n- Columns:\n  - document_id: Identifier of the document.\n  - mailed_to_address_id: Identifier of the address to which the document was mailed.\n  - date_of_mailing: Date when the document was mailed.\n\nTable Draft_Copies:\n- Stores information about draft copies of documents.\n- Columns:\n  - document_id: Identifier of the document.\n  - number_of_draft: Number of drafts for the document.\n  - copy_number: Copy number of the draft.\n\nTable Employees:\n- Contains details about employees.\n- Columns:\n  - employeeID: Unique identifier for each employee.\n  - role_code: Code representing the role of the employee.\n  - employee_name: Name of the employee.\n  - additional_information: Additional details about the employee.\n\nTable Ref_Document_Status:\n- Contains reference information about document status codes.\n- Columns:\n  - document_status_code: Code representing the status of the document.\n  - document_status_information: Information about the document status.\n\nTable Ref_Document_Types:\n- Stores reference data about document type codes.\n- Columns:\n  - document_type_code: Code representing the type of the document.\n  - document_type_information: Information about the document type.\n\nTable Ref_Shipping_Agents:\n- Contains reference information about shipping agents.\n- Columns:\n  - shipping_agent_code: Code representing the shipping agent.\n  - shipping_agent_name: Name of the shipping agent.\n  - shipping_agent_information: Additional information about the shipping agent.\n\nTable Roles:\n- Stores information about different roles.\n- Columns:\n  - role_code: Code representing the role.\n  - role_annotation: Annotation or description of the role.\n\nForeign Keys:\n- Documents.shipping_agent_code references Ref_Shipping_Agents.shipping_agent_code, establishing a relationship between documents and shipping agents.\n- Documents.document_status_code references Ref_Document_Status.document_status_code, linking documents to their status.\n- Documents.document_type_code references Ref_Document_Types.document_type_code, connecting documents to their types.\n- Employees.role_code references Roles.role_code, establishing a relationship between employees and their roles.\n- Document_Drafts.document_id references Documents.document_id, linking document drafts to specific documents.\n- Draft_Copies.document_id references Document_Drafts.document_id, connecting draft copies to document drafts.\n- Draft_Copies.number_of_draft references Document_Drafts.number_of_draft, establishing a relationship between draft copies and the number of drafts.\n- Circulation_History.employeeID references Employees.employeeID, linking circulation history to employees.\n- Circulation_History.document_id references Draft_Copies.document_id, connecting circulation history to documents.\n- Circulation_History.number_of_draft references Draft_Copies.number_of_draft, establishing a relationship between circulation history and the number of drafts.\n- Circulation_History.copy_number references Draft_Copies.copy_number, linking circulation history to copy numbers.\n- Documents_Mailed.mailed_to_address_id references Addresses.addressid, connecting mailed documents to addresses.\n- Documents_Mailed.document_id references Documents.document_id, establishing a relationship between mailed documents and documents.",
    "cre_Doc_Template_Mgt_robust": "Table Documents:\n- Contains information about various documents.\n- Columns:\n  - Document_ID: Unique identifier for each document.\n  - Template_ID: Identifier of the template associated with the document.\n  - Document_Name: Name of the document.\n  - Document_information: Additional information related to the document.\n  - additional_information: Additional details about the document.\n\nTable Paragraphs:\n- Stores paragraphs related to documents.\n- Columns:\n  - Paragraph_ID: Unique identifier for each paragraph.\n  - Document_ID: Identifier of the document to which the paragraph belongs.\n  - Paragraph_Text: Text content of the paragraph.\n  - additional_information: Additional details about the paragraph.\n\nTable Ref_Template_Types:\n- Contains reference information about different template types.\n- Columns:\n  - Template_Type_Code: Unique code for each template type.\n  - Template_Type_information: Information about the template type.\n\nTable Templates:\n- Stores details about templates used for documents.\n- Columns:\n  - Template_ID: Unique identifier for each template.\n  - Version_Number: Version number of the template.\n  - Template_Type_Code: Code referencing the type of template.\n  - Date_Effective_From: Start date of template effectiveness.\n  - Date_Effective_To: End date of template effectiveness.\n  - Template_information: Additional information about the template.\n\nForeign Keys:\n- Templates.Template_Type_Code references Ref_Template_Types.Template_Type_Code, establishing a relationship between templates and template types.\n- Documents.Template_ID references Templates.Template_ID, linking documents to specific templates.\n- Paragraphs.Document_ID references Documents.Document_ID, connecting paragraphs to their respective documents.",
    "cre_Doc_Tracking_DB_robust": "Table All_Documents:\n- Contains information about all documents stored in the system.\n- Columns:\n  - DocumentID: Unique identifier for each document.\n  - Date_Stored: Date when the document was stored.\n  - Document_Type_Code: Code representing the type of document.\n  - Document_Name: Name of the document.\n  - Document_information: Additional information related to the document.\n  - additional_information: Additional details about the document.\n\nTable Document_Locations:\n- Stores data regarding the locations of documents.\n- Columns:\n  - DocumentID: Identifier of the document.\n  - LocationCode: Code representing the location of the document.\n  - Date_in_Location_From: Start date when the document was in the location.\n  - Date_in_Locaton_To: End date when the document was in the location.\n\nTable Documents_to_be_Destroyed:\n- Contains details about documents that are planned to be destroyed.\n- Columns:\n  - DocumentID: Identifier of the document.\n  - Destruction_Authorised_by_EmployeeID: Employee ID who authorized the destruction.\n  - Destroyed_by_EmployeeID: Employee ID who destroyed the document.\n  - Planned_Destruction_Date: Date when the destruction is planned.\n  - Actual_Destruction_Date: Actual date of document destruction.\n  - additional_information: Additional information related to the document destruction.\n\nTable Employees:\n- Stores information about employees in the organization.\n- Columns:\n  - EmployeeID: Unique identifier for each employee.\n  - Role_Code: Code representing the role of the employee.\n  - Employee_Name: Name of the employee.\n  - Gender_MFU: Gender information of the employee.\n  - birthdate: Birthdate of the employee.\n  - additional_information: Additional details about the employee.\n\nTable Ref_Calendar:\n- Contains reference data related to calendar dates.\n- Columns:\n  - Calendar_Date: Date in the calendar.\n  - Day_Number: Number representing the day in the calendar.\n\nTable Ref_Document_Types:\n- Stores reference information about different document types.\n- Columns:\n  - Document_Type_Code: Code representing the document type.\n  - Document_Type_Name: Name of the document type.\n  - Document_Type_information: Additional information about the document type.\n\nTable Ref_Locations:\n- Contains reference data about different locations.\n- Columns:\n  - LocationCode: Code representing the location.\n  - Location_Name: Name of the location.\n  - Location_information: Additional information about the location.\n\nTable Roles:\n- Stores information about different roles within the organization.\n- Columns:\n  - Role_Code: Code representing the role.\n  - Role_Name: Name of the role.\n  - role_annotation: Annotation related to the role.\n\nForeign Keys:\n- All_Documents.Date_Stored references Ref_Calendar.Calendar_Date, linking document storage dates to calendar dates.\n- All_Documents.Document_Type_Code references Ref_Document_Types.Document_Type_Code, establishing a relationship between document types and documents.\n- Employees.Role_Code references Roles.Role_Code, connecting employees to their respective roles.\n- Document_Locations.DocumentID references All_Documents.DocumentID, linking document locations to specific documents.\n- Document_Locations.Date_in_Locaton_To and Date_in_Location_From reference Ref_Calendar.Calendar_Date, establishing relationships between document locations and calendar dates.\n- Document_Locations.LocationCode references Ref_Locations.LocationCode, linking document locations to specific locations.\n- Documents_to_be_Destroyed.DocumentID references All_Documents.DocumentID, connecting documents to be destroyed to specific documents.\n- Documents_to_be_Destroyed.Actual_Destruction_Date and Planned_Destruction_Date reference Ref_Calendar.Calendar_Date, establishing relationships between planned and actual destruction dates and calendar dates.\n- Documents_to_be_Destroyed.Destruction_Authorised_by_EmployeeID and Destroyed_by_EmployeeID reference Employees.EmployeeID, linking authorization and execution of document destruction to employees.",
    "cre_Drama_Workshop_Groups_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - AddressID: Unique identifier for each address.\n  - Line1: First line of the address.\n  - Line2: Second line of the address.\n  - City_Town: City or town of the address.\n  - State_County: State or county of the address.\n  - additional_information: Additional details about the address.\n\nTable Bookings:\n- Stores data related to bookings made by customers.\n- Columns:\n  - BookingID: Unique identifier for each booking.\n  - CustomerID: Identifier of the customer making the booking.\n  - Workshop_Group_ID: Identifier of the workshop group for the booking.\n  - StatusCode: Status of the booking.\n  - StoreID: Identifier of the store where the booking was made.\n  - OrderDate: Date when the booking was placed.\n  - Planned_Delivery_Date: Planned delivery date for the booking.\n  - Actual_Delivery_Date: Actual delivery date for the booking.\n  - additional_Order_information: Additional information related to the booking.\n\nTable Bookings_Services:\n- Contains the mapping of bookings to services.\n- Columns:\n  - OrderID: Identifier of the order.\n  - ProductID: Identifier of the product associated with the booking.\n\nTable Clients:\n- Stores information about clients.\n- Columns:\n  - Client_ID: Unique identifier for each client.\n  - AddressID: Identifier of the address of the client.\n  - client_email: Email address of the client.\n  - Customer_Name: Name of the client.\n  - client_phone: Phone number of the client.\n  - additional_information: Additional details about the client.\n\nTable Customer_Orders:\n- Contains details about customer orders.\n- Columns:\n  - OrderID: Unique identifier for each order.\n  - CustomerID: Identifier of the customer placing the order.\n  - StoreID: Identifier of the store where the order was placed.\n  - OrderDate: Date when the order was placed.\n  - Planned_Delivery_Date: Planned delivery date for the order.\n  - Actual_Delivery_Date: Actual delivery date for the order.\n  - additional_Order_information: Additional information related to the order.\n\nTable Customers:\n- Contains information about customers.\n- Columns:\n  - CustomerID: Unique identifier for each customer.\n  - AddressID: Identifier of the address of the customer.\n  - Customer_Name: Name of the customer.\n  - client_phone: Phone number of the customer.\n  - client_email: Email address of the customer.\n  - additional_information: Additional details about the customer.\n\nTable Drama_Workshop_Groups:\n- Stores data related to drama workshop groups.\n- Columns:\n  - Workshop_Group_ID: Unique identifier for each workshop group.\n  - AddressID: Identifier of the address of the workshop group.\n  - Currency_Code: Code for the currency used.\n  - Marketing_Region_Code: Code for the marketing region.\n  - Store_Name: Name of the store.\n  - Store_Phone: Phone number of the store.\n  - Store_Email_Address: Email address of the store.\n  - additional_information: Additional details about the workshop group.\n\nTable Invoice_Items:\n- Contains details about invoice items.\n- Columns:\n  - Invoice_Item_ID: Unique identifier for each invoice item.\n  - InvoiceID: Identifier of the invoice.\n  - OrderID: Identifier of the order.\n  - Order_Item_ID: Identifier of the order item.\n  - ProductID: Identifier of the product.\n  - Order_Quantity: Quantity of the order item.\n  - additional_Item_information: Additional information about the item.\n\nTable Invoices:\n- Stores information about invoices.\n- Columns:\n  - InvoiceID: Unique identifier for each invoice.\n  - OrderID: Identifier of the order associated with the invoice.\n  - payment_method_code: Code for the payment method.\n  - ProductID: Identifier of the product.\n  - Order_Quantity: Quantity of the order.\n  - additional_Item_information: Additional information about the item.\n  - Order_Item_ID: Identifier of the order item.\n\nTable Marketing_Regions:\n- Contains data about marketing regions.\n- Columns:\n  - Marketing_Region_Code: Unique identifier for each marketing region.\n  - Marketing_Region_Name: Name of the marketing region.\n  - Marketing_Region_information: Information about the marketing region.\n  - additional_information: Additional details about the marketing region.\n\nTable Order_Items:\n- Stores information about order items.\n- Columns:\n  - Order_Item_ID: Unique identifier for each order item.\n  - OrderID: Identifier of the order.\n  - ProductID: Identifier of the product.\n  - Order_Quantity: Quantity of the order item.\n  - additional_Item_information: Additional information about the item.\n\nTable Performers:\n- Contains details about performers.\n- Columns:\n  - PerformerID: Unique identifier for each performer.\n  - AddressID: Identifier of the address of the performer.\n  - Customer_Name: Name of the performer.\n  - client_phone: Phone number of the performer.\n  - client_email: Email address of the performer.\n  - additional_information: Additional details about the performer.\n\nTable Performers_in_Bookings:\n- Stores the mapping of performers to bookings.\n- Columns:\n  - OrderID: Identifier of the order.\n  - PerformerID: Identifier of the performer.\n\nTable Products:\n- Contains information about products.\n- Columns:\n  - ProductID: Unique identifier for each product.\n  - Product_Name: Name of the product.\n  - Product_Price: Price of the product.\n  - Product_information: Information about the product.\n  - additional_Product_Service_information: Additional information about the product or service.\n\nTable Ref_Payment_Methods:\n- Stores reference data for payment methods.\n- Columns:\n  - payment_method_code: Code for the payment method.\n  - payment_method_information: Information about the payment method.\n\nTable Ref_Service_Types:\n- Contains reference data for service types.\n- Columns:\n  - Service_Type_Code: Unique identifier for each service type.\n  - Parent_Service_Type_Code: Identifier of the parent service type.\n  - Service_Type_information: Information about the service type.\n\nTable Services:\n- Stores information about services.\n- Columns:\n  - ServiceID: Unique identifier for each service.\n  - Service_Type_Code: Identifier of the service type.\n  - Workshop_Group_ID: Identifier of the workshop group.\n  - Product_information: Information about the product.\n  - Product_Name: Name of the product.\n  - Product_Price: Price of the product.\n  - additional_Product_Service_information: Additional information about the product or service.\n\nTable Stores:\n- Contains data related to stores.\n- Columns:\n  - StoreID: Unique identifier for each store.\n  - AddressID: Identifier of the address of the store.\n  - Marketing_Region_Code: Code for the marketing region.\n  - Store_Name: Name of the store.\n  - Store_Phone: Phone number of the store.\n  - Store_Email_Address: Email address of the store.\n  - additional_information: Additional details about the store.\n\nForeign Keys:\n- Clients.AddressID references Addresses.AddressID, establishing a relationship between clients and addresses.\n- Drama_Workshop_Groups.AddressID references Addresses.AddressID, linking drama workshop groups to addresses.\n- Performers.AddressID references Addresses.AddressID, connecting performers to addresses.\n- Customers.AddressID references Addresses.AddressID, establishing a relationship between customers and addresses.\n- Stores.Marketing_Region_Code references Marketing_Regions.Marketing_Region_Code, linking stores to marketing regions.\n- Stores.AddressID references Addresses.AddressID, connecting stores to addresses.\n- Bookings.Workshop_Group_ID references Drama_Workshop_Groups.Workshop_Group_ID, establishing a relationship between bookings and workshop groups.\n- Bookings.CustomerID references Clients.Client_ID, linking bookings to clients.\n- Performers_in_Bookings.OrderID references Bookings.BookingID, establishing a relationship between performers in bookings and bookings.\n- Performers_in_Bookings.PerformerID references Performers.PerformerID, linking performers in bookings to performers.\n- Customer_Orders.StoreID references Stores.StoreID, connecting customer orders to stores.\n- Customer_Orders.CustomerID references Customers.CustomerID, establishing a relationship between customer orders and customers.\n- Order_Items.ProductID references Products.ProductID, linking order items to products.\n- Order_Items.OrderID references Customer_Orders.OrderID, connecting order items to customer orders.\n- Invoices.payment_method_code references Ref_Payment_Methods.payment_method_code, establishing a relationship between invoices and payment methods.\n- Invoices.OrderID references Bookings.BookingID and Customer_Orders.OrderID, linking invoices to bookings and customer orders.\n- Services.Service_Type_Code references Ref_Service_Types.Service_Type_Code, connecting services to service types.\n- Services.Workshop_Group_ID references Drama_Workshop_Groups.Workshop_Group_ID, establishing a relationship between services and workshop groups.\n- Bookings_Services.ProductID references Services.ServiceID, linking bookings services to services.\n- Bookings_Services.OrderID references Bookings.BookingID, connecting bookings services to bookings.\n- Invoice_Items.OrderID, Invoice_Items.ProductID, and Invoice_Items.InvoiceID reference Bookings_Services.OrderID, Bookings_Services.ProductID, and Invoices.InvoiceID respectively, establishing relationships between invoice items, bookings services, and invoices.\n- Invoice_Items.Order_Item_ID references Order_Items.Order_Item_ID, linking invoice items to order items.",
    "cre_Theme_park_robust": "Table Features:\n- Contains information about various features.\n- Columns:\n  - Feature_ID: Unique identifier for each feature.\n  - Feature_information: Details or description of the feature.\n\nTable Hotels:\n- Stores data related to hotels.\n- Columns:\n  - hotel_id: Unique identifier for each hotel.\n  - star_rating_code: Code representing the star rating of the hotel.\n  - pets_allowed_yn: Indicator for whether pets are allowed in the hotel.\n  - price_range: Range of prices for the hotel.\n  - additional_hotel_information: Additional information about the hotel.\n\nTable Locations:\n- Contains details about different locations.\n- Columns:\n  - Location_ID: Unique identifier for each location.\n  - Location_Name: Name of the location.\n  - Address: Address of the location.\n  - additional_information: Additional information about the location.\n\nTable Museums:\n- Stores information about museums.\n- Columns:\n  - Museum_ID: Unique identifier for each museum.\n  - Museum_information: Information about the museum.\n\nTable Photos:\n- Contains data related to photos of tourist attractions.\n- Columns:\n  - Photo_ID: Unique identifier for each photo.\n  - Tourist_Attraction_ID: Identifier of the tourist attraction associated with the photo.\n  - Name: Name of the photo.\n  - information: Description or details about the photo.\n  - Filename: Name of the file containing the photo.\n  - additional_information: Additional information about the photo.\n\nTable Ref_Attraction_Types:\n- Provides reference information about attraction types.\n- Columns:\n  - Attraction_Type_Code: Code representing the type of attraction.\n  - Attraction_Type_information: Information about the attraction type.\n\nTable Ref_Hotel_Star_Ratings:\n- Contains reference data for hotel star ratings.\n- Columns:\n  - star_rating_code: Code representing the star rating.\n  - star_rating_information: Information about the star rating.\n\nTable Royal_Family:\n- Stores information about royal families.\n- Columns:\n  - Royal_Family_ID: Unique identifier for each royal family.\n  - Royal_Family_information: Information about the royal family.\n\nTable Shops:\n- Contains details about shops.\n- Columns:\n  - Shop_ID: Unique identifier for each shop.\n  - Shop_information: Information about the shop.\n\nTable Staff:\n- Stores information about staff members at tourist attractions.\n- Columns:\n  - Staff_ID: Unique identifier for each staff member.\n  - Tourist_Attraction_ID: Identifier of the tourist attraction where the staff member works.\n  - Name: Name of the staff member.\n  - additional_information: Additional information about the staff member.\n\nTable Street_Markets:\n- Contains data related to street markets.\n- Columns:\n  - Market_ID: Unique identifier for each street market.\n  - Market_information: Information about the street market.\n\nTable Theme_Parks:\n- Stores information about theme parks.\n- Columns:\n  - Theme_Park_ID: Unique identifier for each theme park.\n  - Theme_Park_information: Information about the theme park.\n\nTable Tourist_Attraction_Features:\n- Represents the relationship between tourist attractions and features.\n- Columns:\n  - Tourist_Attraction_ID: Identifier of the tourist attraction.\n  - Feature_ID: Identifier of the feature associated with the tourist attraction.\n\nTable Tourist_Attractions:\n- Contains details about tourist attractions.\n- Columns:\n  - Tourist_Attraction_ID: Unique identifier for each tourist attraction.\n  - Attraction_Type_Code: Code representing the type of attraction.\n  - Location_ID: Identifier of the location where the attraction is situated.\n  - How_to_Get_There: Information on how to reach the attraction.\n  - Name: Name of the tourist attraction.\n  - information: Description or details about the attraction.\n  - Opening_Hours: Hours during which the attraction is open.\n  - additional_information: Additional information about the attraction.\n\nTable Visitors:\n- Stores information about visitors or tourists.\n- Columns:\n  - Tourist_ID: Unique identifier for each visitor.\n  - Tourist_information: Information about the visitor.\n\nTable Visits:\n- Contains data about visits made by tourists to attractions.\n- Columns:\n  - Visit_ID: Unique identifier for each visit.\n  - Tourist_Attraction_ID: Identifier of the attraction visited.\n  - Tourist_ID: Identifier of the tourist who visited.\n  - Visit_Date: Date of the visit.\n  - Visit_information: Additional information about the visit.\n\nForeign Keys:\n- Hotels.star_rating_code references Ref_Hotel_Star_Ratings.star_rating_code, linking hotels to their star ratings.\n- Tourist_Attractions.Attraction_Type_Code references Ref_Attraction_Types.Attraction_Type_Code, connecting attraction types to tourist attractions.\n- Tourist_Attractions.Location_ID references Locations.Location_ID, establishing a relationship between attractions and locations.\n- Street_Markets.Market_ID references Tourist_Attractions.Tourist_Attraction_ID, linking street markets to tourist attractions.\n- Shops.Shop_ID references Tourist_Attractions.Tourist_Attraction_ID, connecting shops to tourist attractions.\n- Museums.Museum_ID references Tourist_Attractions.Tourist_Attraction_ID, linking museums to tourist attractions.\n- Royal_Family.Royal_Family_ID references Tourist_Attractions.Tourist_Attraction_ID, establishing a relationship between royal families and attractions.\n- Theme_Parks.Theme_Park_ID references Tourist_Attractions.Tourist_Attraction_ID, linking theme parks to tourist attractions.\n- Visits.Tourist_ID references Visitors.Tourist_ID, connecting visits to tourists.\n- Visits.Tourist_Attraction_ID references Tourist_Attractions.Tourist_Attraction_ID, establishing a relationship between visits and attractions.\n- Photos.Tourist_Attraction_ID references Tourist_Attractions.Tourist_Attraction_ID, linking photos to tourist attractions.\n- Staff.Tourist_Attraction_ID references Tourist_Attractions.Tourist_Attraction_ID, connecting staff to tourist attractions.\n- Tourist_Attraction_Features.Feature_ID references Features.Feature_ID, linking features to tourist attractions.\n- Tourist_Attraction_Features.Tourist_Attraction_ID references Tourist_Attractions.Tourist_Attraction_ID, establishing a relationship between features and attractions.",
    "csu_1_robust": "Table Campuses:\n- Contains information about different campuses.\n- Columns:\n  - Id: Unique identifier for each campus.\n  - campus: Name of the campus.\n  - site: Site of the campus.\n  - County: County where the campus is located.\n  - year: Year associated with the data.\n\nTable csu_fees:\n- Stores data related to fees at different campuses.\n- Columns:\n  - campus: Identifier of the campus.\n  - year: Year associated with the fee data.\n  - CampusFee: Fee amount for the campus.\n\nTable degrees:\n- Contains information about degrees offered at campuses.\n- Columns:\n  - year: Year associated with the degree data.\n  - campus: Identifier of the campus.\n  - degrees: Types of degrees offered.\n\nTable discipline_enrollments:\n- Stores enrollment data based on disciplines at campuses.\n- Columns:\n  - campus: Identifier of the campus.\n  - discipline: Discipline name.\n  - year: Year associated with the enrollment data.\n  - undergraduate: Number of undergraduate students enrolled.\n  - graduate: Number of graduate students enrolled.\n\nTable enrollments:\n- Contains information about total enrollments at campuses.\n- Columns:\n  - campus: Identifier of the campus.\n  - year: Year associated with the enrollment data.\n  - TotalEnrollment_AY: Total enrollment for the academic year.\n  - FTE_AY: Full-time equivalent enrollment for the academic year.\n\nTable faculty:\n- Stores data related to faculty at campuses.\n- Columns:\n  - campus: Identifier of the campus.\n  - year: Year associated with the faculty data.\n  - faculty: Number of faculty members at the campus.\n\nForeign Keys:\n- csu_fees.campus references Campuses.Id, establishing a relationship between csu_fees and Campuses.\n- degrees.campus references Campuses.Id, linking degrees to specific campuses.\n- discipline_enrollments.campus references Campuses.Id, connecting discipline_enrollments to campuses.\n- enrollments.campus references Campuses.Id, linking enrollments to specific campuses.\n- faculty.campus references Campuses.Id, establishing a relationship between faculty and campuses.",
    "culture_company_robust": "Table book_club:\n- Contains information about different book clubs.\n- Columns:\n  - book_club_id: Unique identifier for each book club.\n  - Year: Year of the book club.\n  - Author_or_Editor: Author or editor of the book club.\n  - Title_of_book: Title of the book associated with the book club.\n  - Publisher: Publisher of the book.\n  - Category: Category of the book club.\n  - Result: Result of the book club activities.\n\nTable culture_company:\n- Stores data related to cultural companies.\n- Columns:\n  - Company_name: Name of the cultural company.\n  - Type: Type of the cultural company.\n  - Incorporated_in: Location where the company is incorporated.\n  - Group_Equity_Shareholding: Equity shareholding within the company.\n  - book_club_id: Identifier of the book club associated with the company.\n  - film_id: Identifier of the film associated with the company.\n\nTable movie:\n- Contains details about movies.\n- Columns:\n  - film_id: Unique identifier for each movie.\n  - Title: Title of the movie.\n  - Year: Year of the movie.\n  - Director: Director of the movie.\n  - Budget_million: Budget of the movie in million.\n  - Gross_worldwide: Worldwide gross revenue generated by the movie.\n\nForeign Keys:\n- culture_company.film_id references movie.film_id, establishing a relationship between cultural companies and movies.\n- culture_company.book_club_id references book_club.book_club_id, linking cultural companies to specific book clubs.",
    "customers_and_addresses_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - addressID: Unique identifier for each address.\n  - location: Location of the address.\n  - city: City of the address.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n  - additional_address_details: Additional details related to the address.\n\nTable Customer_Addresses:\n- Stores data related to customer addresses.\n- Columns:\n  - customerID: Identifier of the customer.\n  - addressID: Identifier of the address.\n  - date_address_from: Date from which the address is valid.\n  - address_type: Type of the address.\n  - date_address_to: Date until which the address is valid.\n\nTable Customer_Contact_Channels:\n- Contains information about customer contact channels.\n- Columns:\n  - customerID: Identifier of the customer.\n  - channelCode: Code representing the contact channel.\n  - active_from_date: Date from which the contact channel is active.\n  - active_to_date: Date until which the contact channel is active.\n  - contact_number: Contact number associated with the channel.\n\nTable Customer_Orders:\n- Stores details about customer orders.\n- Columns:\n  - orderID: Unique identifier for each order.\n  - customerID: Identifier of the customer who placed the order.\n  - order_status: Status of the order.\n  - order_date: Date when the order was placed.\n  - additional_details: Additional details related to the order.\n\nTable Customers:\n- Contains information about customers.\n- Columns:\n  - customerID: Unique identifier for each customer.\n  - payment_method: Method of payment preferred by the customer.\n  - customer_name: Name of the customer.\n  - date_became_customer: Date when the customer became a customer.\n  - additional_customer_details: Additional details related to the customer.\n\nTable Order_Items:\n- Stores details about items included in orders.\n- Columns:\n  - orderID: Identifier of the order.\n  - productID: Identifier of the product in the order.\n  - order_quantity: Quantity of the product in the order.\n\nTable Products:\n- Contains information about different products.\n- Columns:\n  - productID: Unique identifier for each product.\n  - product_information: Information about the product.\n\nForeign Keys:\n- Customer_Addresses.customerID references Customers.customerID, linking customer addresses to customers.\n- Customer_Addresses.addressID references Addresses.addressID, connecting customer addresses to specific addresses.\n- Customer_Contact_Channels.customerID references Customers.customerID, establishing a relationship between customer contact channels and customers.\n- Customer_Orders.customerID references Customers.customerID, linking customer orders to customers.\n- Order_Items.orderID references Customer_Orders.orderID, connecting order items to specific orders.\n- Order_Items.productID references Products.productID, establishing a relationship between order items and products.",
    "customers_and_invoices_robust": "Table Accounts:\n- Contains information about accounts.\n- Columns:\n  - accountID: Unique identifier for each account.\n  - customerID: Identifier of the customer associated with the account.\n  - date_account_opened: Date when the account was opened.\n  - account_name: Name of the account.\n  - additional_account_details: Additional details related to the account.\n\nTable Customers:\n- Stores data related to customers.\n- Columns:\n  - customerID: Unique identifier for each customer.\n  - customer_Fname: First name of the customer.\n  - customer_middle_initial: Middle initial of the customer.\n  - customer_Lname: Last name of the customer.\n  - gender: Gender of the customer.\n  - email_address: Email address of the customer.\n  - login_name: Login name of the customer.\n  - login_password: Password for customer login.\n  - phone_number: Phone number of the customer.\n  - town_city: City or town where the customer resides.\n  - state_county_province: State, county, or province where the customer resides.\n  - country: Country where the customer resides.\n\nTable Financial_Transactions:\n- Contains details about financial transactions.\n- Columns:\n  - transaction_id: Unique identifier for each transaction.\n  - accountID: Identifier of the account associated with the transaction.\n  - invoice_number: Number of the invoice related to the transaction.\n  - transaction_type: Type of the transaction.\n  - transaction_date: Date of the transaction.\n  - amount: Amount involved in the transaction.\n  - transaction_comment: Comment related to the transaction.\n  - additional_transaction_details: Additional details about the transaction.\n\nTable Invoice_Line_Items:\n- Stores line items of invoices.\n- Columns:\n  - order_itemID: Unique identifier for each order item.\n  - invoice_number: Number of the invoice to which the line item belongs.\n  - productID: Identifier of the product in the line item.\n  - product_title: Title of the product.\n  - quantity: Quantity of the product in the line item.\n  - product_price: Price of the product.\n  - derived_product_cost: Cost derived from the product.\n  - derived_vat_payable: VAT payable for the product.\n  - derived_total_cost: Total cost derived from the product.\n\nTable Invoices:\n- Contains information about invoices.\n- Columns:\n  - invoice_number: Unique identifier for each invoice.\n  - orderID: Identifier of the order related to the invoice.\n  - invoice_date: Date of the invoice.\n\nTable Order_Items:\n- Stores details about order items.\n- Columns:\n  - order_itemID: Unique identifier for each order item.\n  - orderID: Identifier of the order to which the item belongs.\n  - productID: Identifier of the product in the order item.\n  - quantity: Quantity of the product in the order item.\n  - additional_order_item_details: Additional details about the order item.\n\nTable Orders:\n- Contains information about orders.\n- Columns:\n  - orderID: Unique identifier for each order.\n  - customerID: Identifier of the customer who placed the order.\n  - timestamp: Timestamp of the order.\n  - additional_details: Additional details related to the order.\n\nTable Product_Categories:\n- Stores information about product categories.\n- Columns:\n  - production_type_code: Code representing the production type of the product.\n  - product_type_information: Information about the product type.\n  - vat_rating: VAT rating associated with the product category.\n\nTable Products:\n- Contains details about products.\n- Columns:\n  - productID: Unique identifier for each product.\n  - parent_product_id: Identifier of the parent product.\n  - production_type_code: Code representing the production type of the product.\n  - unit_price: Price per unit of the product.\n  - product_name: Name of the product.\n  - product_color: Color of the product.\n  - product_size: Size of the product.\n\nForeign Keys:\n- Orders.customerID references Customers.customerID, linking orders to customers.\n- Invoices.orderID references Orders.orderID, connecting invoices to orders.\n- Accounts.customerID references Customers.customerID, establishing a relationship between accounts and customers.\n- Products.production_type_code references Product_Categories.production_type_code, linking products to product categories.\n- Financial_Transactions.accountID references Accounts.accountID, connecting financial transactions to accounts.\n- Financial_Transactions.invoice_number references Invoices.invoice_number, establishing a relationship between financial transactions and invoices.\n- Order_Items.orderID references Orders.orderID, linking order items to orders.\n- Order_Items.productID references Products.productID, connecting order items to products.\n- Invoice_Line_Items.productID references Products.productID, linking invoice line items to products.\n- Invoice_Line_Items.invoice_number references Invoices.invoice_number, connecting invoice line items to invoices.\n- Invoice_Line_Items.order_itemID references Order_Items.order_itemID, establishing a relationship between invoice line items and order items.",
    "customers_and_products_contacts_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - addressID: Unique identifier for each address.\n  - line1_number_building: Line 1 number or building information of the address.\n  - city: City of the address.\n  - zip_postcode: Zip code or postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Contacts:\n- Stores contact details of customers.\n- Columns:\n  - contactID: Unique identifier for each contact.\n  - customerID: Identifier of the customer associated with the contact.\n  - sex: Gender of the contact.\n  - Fname: First name of the contact.\n  - Lname: Last name of the contact.\n  - contact_phone: Phone number of the contact.\n\nTable Customer_Address_History:\n- Contains historical data of customer addresses.\n- Columns:\n  - customerID: Identifier of the customer.\n  - addressID: Identifier of the address.\n  - date_from: Start date of the address association.\n  - date_to: End date of the address association.\n\nTable Customer_Orders:\n- Stores information about customer orders.\n- Columns:\n  - orderID: Unique identifier for each order.\n  - customerID: Identifier of the customer who placed the order.\n  - order_date: Date when the order was placed.\n  - order_status_code: Status code of the order.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - customerID: Unique identifier for each customer.\n  - payment_method_code: Code for the payment method used by the customer.\n  - customer_number: Customer number or identifier.\n  - customer_name: Name of the customer.\n  - customer_address: Address of the customer.\n  - customer_phone_number: Phone number of the customer.\n  - Customer_Email_Address: Email address of the customer.\n\nTable Order_Items:\n- Contains information about items in each order.\n- Columns:\n  - order_item_id: Unique identifier for each order item.\n  - orderID: Identifier of the order to which the item belongs.\n  - productID: Identifier of the product in the order.\n  - order_quantity: Quantity of the product in the order.\n\nTable Products:\n- Stores details about different products.\n- Columns:\n  - productID: Unique identifier for each product.\n  - product_type_code: Code for the type of product.\n  - product_name: Name of the product.\n  - product_price: Price of the product.\n\nForeign Keys:\n- Customer_Address_History.addressID references Addresses.addressID, linking customer address history to specific addresses.\n- Customer_Address_History.customerID references Customers.customerID, connecting customer address history to customers.\n- Customer_Orders.customerID references Customers.customerID, establishing a relationship between customer orders and customers.\n- Order_Items.orderID references Customer_Orders.orderID, linking order items to specific orders.\n- Order_Items.productID references Products.productID, connecting order items to products.",
    "customers_campaigns_ecommerce_robust": "Table Customer_Addresses:\n- Contains information about customer addresses.\n- Columns:\n  - customer_id: Identifier of the customer associated with the address.\n  - premise_id: Identifier of the premise where the address is located.\n  - date_address_from: Date from which the address is valid.\n  - address_category_code: Code indicating the category of the address.\n  - date_address_to: Date until which the address is valid.\n\nTable Customer_Orders:\n- Stores data related to customer orders.\n- Columns:\n  - orderID: Unique identifier for each order.\n  - customer_id: Identifier of the customer who placed the order.\n  - order_status_code: Code indicating the status of the order.\n  - shipping_method_code: Code representing the shipping method for the order.\n  - order_placed_datetime: Date and time when the order was placed.\n  - order_delivered_datetime: Date and time when the order was delivered.\n  - order_shipping_charges: Charges associated with shipping the order.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - payment_method: Method of payment used by the customer.\n  - customer_name: Name of the customer.\n  - phone_number: Phone number of the customer.\n  - Customer_Email_Address: Email address of the customer.\n  - customer_address: Address of the customer.\n  - customer_login: Login information of the customer.\n  - customer_password: Password of the customer.\n\nTable Mailshot_Campaigns:\n- Stores information about mailshot campaigns.\n- Columns:\n  - mailshot_id: Unique identifier for each mailshot campaign.\n  - product_type: Type of product associated with the campaign.\n  - mailshot_name: Name of the mailshot campaign.\n  - mailshot_start_date: Start date of the mailshot campaign.\n  - mailshot_end_date: End date of the mailshot campaign.\n\nTable Mailshot_Customers:\n- Contains data about customers participating in mailshot campaigns.\n- Columns:\n  - mailshot_id: Identifier of the mailshot campaign.\n  - customer_id: Identifier of the customer participating in the campaign.\n  - outcome_code: Code indicating the outcome of the campaign for the customer.\n  - campaign_date: Date of the campaign.\n\nTable Order_Items:\n- Stores details about items included in orders.\n- Columns:\n  - item_id: Unique identifier for each item.\n  - order_item_status_code: Code indicating the status of the order item.\n  - orderID: Identifier of the order to which the item belongs.\n  - productID: Identifier of the product in the item.\n  - item_status_code: Code representing the status of the item.\n  - item_delivered_datetime: Date and time when the item was delivered.\n  - item_order_quantity: Quantity of the item ordered.\n\nTable Premises:\n- Contains information about premises.\n- Columns:\n  - premise_id: Unique identifier for each premise.\n  - premises_type: Type of premises.\n  - premise_information: Additional information about the premise.\n\nTable Products:\n- Stores data related to products.\n- Columns:\n  - productID: Unique identifier for each product.\n  - product_type: Type of the product.\n  - product_name: Name of the product.\n\nForeign Keys:\n- Customer_Addresses.customer_id references Customers.customer_id, linking customer addresses to customers.\n- Customer_Addresses.premise_id references Premises.premise_id, establishing a relationship between customer addresses and premises.\n- Customer_Orders.customer_id references Customers.customer_id, connecting customer orders to customers.\n- Mailshot_Customers.mailshot_id references Mailshot_Campaigns.mailshot_id, linking mailshot customers to mailshot campaigns.\n- Mailshot_Customers.customer_id references Customers.customer_id, establishing a relationship between mailshot customers and customers.\n- Order_Items.orderID references Customer_Orders.orderID, connecting order items to orders.\n- Order_Items.productID references Products.productID, linking order items to products.",
    "customers_card_transactions_robust": "Table Accounts:\n- Contains information about different accounts.\n- Columns:\n  - account_id: Unique identifier for each account.\n  - customer_id: Identifier of the customer associated with the account.\n  - account_name: Name of the account.\n  - additional_account_details: Additional details related to the account.\n\nTable Customers:\n- Stores data related to customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - customer_Fname: First name of the customer.\n  - customer_Lname: Last name of the customer.\n  - customer_address: Address of the customer.\n  - customer_phone: Phone number of the customer.\n  - customer_email_address: Email address of the customer.\n  - additional_customer_details: Additional details related to the customer.\n\nTable Customers_Cards:\n- Contains information about customer cards.\n- Columns:\n  - card_id: Unique identifier for each card.\n  - customer_id: Identifier of the customer associated with the card.\n  - card_type_code: Code representing the type of card.\n  - card_number: Number of the card.\n  - date_valid_from: Validity start date of the card.\n  - date_valid_to: Validity end date of the card.\n  - other_card_information: Additional information related to the card.\n\nTable Financial_Transactions:\n- Stores details about financial transactions.\n- Columns:\n  - transaction_id: Unique identifier for each transaction.\n  - previous_transaction_id: Identifier of the previous transaction.\n  - account_id: Identifier of the account involved in the transaction.\n  - card_id: Identifier of the card used in the transaction.\n  - transaction_type: Type of the transaction.\n  - transaction_date: Date of the transaction.\n  - transaction_amount: Amount involved in the transaction.\n  - transaction_comment: Comment related to the transaction.\n  - additional_transaction_details: Additional details related to the transaction.\n\nForeign Keys:\n- Financial_Transactions.account_id references Accounts.account_id, linking financial transactions to specific accounts.\n- Financial_Transactions.card_id references Customers_Cards.card_id, establishing a relationship between financial transactions and customer cards.",
    "customer_complaints_robust": "Table Complaints:\n- Contains information about customer complaints.\n- Columns:\n  - complaintID: Unique identifier for each complaint.\n  - productID: Identifier of the product related to the complaint.\n  - customerID: Identifier of the customer who raised the complaint.\n  - complaint_outcome_code: Code indicating the outcome of the complaint.\n  - complaint_status_code: Code representing the status of the complaint.\n  - complaint_type_code: Code specifying the type of complaint.\n  - date_complaint_raised: Date when the complaint was raised.\n  - date_complaint_closed: Date when the complaint was closed.\n  - staff_id: Identifier of the staff member handling the complaint.\n\nTable Customers:\n- Stores details about customers.\n- Columns:\n  - customerID: Unique identifier for each customer.\n  - customer_type_code: Code indicating the type of customer.\n  - address_line1: First line of the customer's address.\n  - address_line2: Second line of the customer's address.\n  - town_city: City where the customer is located.\n  - state: State where the customer is located.\n  - email: Email address of the customer.\n  - phone_number: Phone number of the customer.\n\nTable Products:\n- Contains information about products.\n- Columns:\n  - productID: Unique identifier for each product.\n  - parent_product_id: Identifier of the parent product if applicable.\n  - product_category_code: Code specifying the category of the product.\n  - date_product_first_available: Date when the product was first available.\n  - date_product_discontinued: Date when the product was discontinued.\n  - product_name: Name of the product.\n  - product_information: Additional information about the product.\n  - product_price: Price of the product.\n\nTable Staff:\n- Stores details about staff members.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - sex: Gender of the staff member.\n  - Fname: First name of the staff member.\n  - Lname: Last name of the staff member.\n  - email: Email address of the staff member.\n  - phone_number: Phone number of the staff member.\n\nForeign Keys:\n- Complaints.customerID references Customers.customerID, linking complaints to specific customers.\n- Complaints.productID references Products.productID, connecting complaints to specific products.\n- Complaints.staff_id references Staff.staff_id, establishing a relationship between complaints and staff members.",
    "customer_deliveries_robust": "Table Actual_Order_Products:\n- Contains the mapping between actual orders and products.\n- Columns:\n  - actual_orderID: Identifier for each actual order.\n  - productID: Identifier for each product in the order.\n\nTable Actual_Orders:\n- Stores information about actual orders.\n- Columns:\n  - actual_orderID: Unique identifier for each actual order.\n  - status: Status of the order.\n  - regular_orderID: Identifier of the regular order associated with the actual order.\n  - actual_order_date: Date of the actual order.\n\nTable Addresses:\n- Contains details about different addresses.\n- Columns:\n  - addressID: Unique identifier for each address.\n  - address_information: Information about the address.\n  - city: City of the address.\n  - zip_postcode: Postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Customer_Addresses:\n- Stores the relationship between customers and addresses.\n- Columns:\n  - customerID: Identifier for each customer.\n  - addressID: Identifier for each address.\n  - date_from: Start date for the address association.\n  - address_type: Type of address.\n  - date_to: End date for the address association.\n\nTable Customers:\n- Contains information about customers.\n- Columns:\n  - customerID: Unique identifier for each customer.\n  - payment_method: Payment method used by the customer.\n  - customer_name: Name of the customer.\n  - customer_phone: Phone number of the customer.\n  - customer_email_address: Email address of the customer.\n  - date_became_customer: Date when the customer became a customer.\n\nTable Delivery_Route_Locations:\n- Stores information about delivery route locations.\n- Columns:\n  - postal_code: Postal code of the location.\n  - routeID: Identifier for each delivery route.\n  - location_addressID: Identifier of the address for the location.\n  - location_name: Name of the location.\n\nTable Delivery_Routes:\n- Contains details about delivery routes.\n- Columns:\n  - routeID: Unique identifier for each delivery route.\n  - route_name: Name of the delivery route.\n  - additional_route_info: Additional information about the route.\n\nTable Employees:\n- Stores data related to employees.\n- Columns:\n  - employeeID: Unique identifier for each employee.\n  - employee_addressID: Identifier of the address for the employee.\n  - employee_name: Name of the employee.\n  - employee_phone_number: Phone number of the employee.\n\nTable Order_Deliveries:\n- Contains information about order deliveries.\n- Columns:\n  - postal_code: Postal code of the delivery location.\n  - actual_orderID: Identifier for each actual order.\n  - delivery_status_code: Status code of the delivery.\n  - driver_employeeID: Identifier of the driver employee.\n  - truckID: Identifier of the truck used for delivery.\n  - delivery_date: Date of the delivery.\n\nTable Products:\n- Contains details about products.\n- Columns:\n  - productID: Unique identifier for each product.\n  - product_name: Name of the product.\n  - product_price: Price of the product.\n  - product_information: Additional information about the product.\n\nTable Regular_Order_Products:\n- Represents the mapping between regular orders and products.\n- Columns:\n  - regular_orderID: Identifier for each regular order.\n  - productID: Identifier for each product in the order.\n\nTable Regular_Orders:\n- Stores information about regular orders.\n- Columns:\n  - regular_orderID: Unique identifier for each regular order.\n  - distributerID: Identifier of the distributor associated with the order.\n\nTable Trucks:\n- Contains details about trucks.\n- Columns:\n  - truckID: Unique identifier for each truck.\n  - truck_licence_number: License number of the truck.\n  - truck_information: Additional information about the truck.\n\nForeign Keys:\n- Regular_Orders.distributerID references Customers.customerID, linking regular orders to customers.\n- Regular_Order_Products.regular_orderID references Regular_Orders.regular_orderID, establishing a relationship between regular orders and products.\n- Regular_Order_Products.productID references Products.productID, linking regular order products to products.\n- Actual_Orders.regular_orderID references Regular_Orders.regular_orderID, connecting actual orders to regular orders.\n- Actual_Order_Products.actual_orderID references Actual_Orders.actual_orderID, establishing a relationship between actual order products and actual orders.\n- Actual_Order_Products.productID references Products.productID, linking actual order products to products.\n- Customer_Addresses.addressID references Addresses.addressID, establishing a relationship between customer addresses and addresses.\n- Customer_Addresses.customerID references Customers.customerID, connecting customer addresses to customers.\n- Delivery_Route_Locations.routeID references Delivery_Routes.routeID, linking delivery route locations to delivery routes.\n- Delivery_Route_Locations.location_addressID references Addresses.addressID, establishing a relationship between delivery route locations and addresses.\n- Employees.employee_addressID references Addresses.addressID, connecting employees to their addresses.\n- Order_Deliveries.driver_employeeID references Employees.employeeID, linking driver employees to order deliveries.\n- Order_Deliveries.postal_code references Delivery_Route_Locations.postal_code, establishing a relationship between order deliveries and delivery route locations.\n- Order_Deliveries.actual_orderID references Actual_Orders.actual_orderID, connecting order deliveries to actual orders.\n- Order_Deliveries.truckID references Trucks.truckID, linking order deliveries to trucks.",
    "debate_robust": "Table debate:\n- Contains information about debates.\n- Columns:\n  - Debate_ID: Unique identifier for each debate.\n  - Date: Date of the debate.\n  - location: Location of the debate.\n  - Num_of_Audience: Number of audience members present at the debate.\n\nTable debate_people:\n- Stores details about people involved in debates.\n- Columns:\n  - Debate_ID: Identifier of the debate.\n  - Affirmative: Identifier of the person representing the affirmative side in the debate.\n  - Negative: Identifier of the person representing the negative side in the debate.\n  - Affirmative_Win: Indicates whether the affirmative side won the debate.\n\nTable people:\n- Contains information about individuals participating in debates.\n- Columns:\n  - People_ID: Unique identifier for each individual.\n  - region: Region to which the individual belongs.\n  - Name: Name of the individual.\n  - Party: Political party affiliation of the individual.\n  - Age: Age of the individual.\n\nForeign Keys:\n- debate_people.Negative references people.People_ID, linking negative side participants to individuals.\n- debate_people.Affirmative references people.People_ID, linking affirmative side participants to individuals.\n- debate_people.Debate_ID references debate.Debate_ID, establishing a relationship between debate_people and debates.",
    "decoration_competition_robust": "Table college:\n- Contains information about different colleges.\n- Columns:\n  - CollegeID: Unique identifier for each college.\n  - Name: Name of the college.\n  - Leader_Name: Name of the leader of the college.\n  - College_Location: Location of the college.\n\nTable member:\n- Stores data related to members associated with colleges.\n- Columns:\n  - MemberID: Unique identifier for each member.\n  - Name: Name of the member.\n  - Country: Country of the member.\n  - CollegeID: Identifier of the college to which the member belongs.\n\nTable round:\n- Contains details about rounds in a competition.\n- Columns:\n  - RoundID: Unique identifier for each round.\n  - MemberID: Identifier of the member participating in the round.\n  - Decoration_Theme: Theme of decoration for the round.\n  - Rank_in_Round: Rank achieved by the member in the round.\n\nForeign Keys:\n- member.CollegeID references college.CollegeID, establishing a relationship between members and colleges.\n- round.MemberID references member.MemberID, linking rounds to specific members.",
    "department_management_robust": "Table department:\n- Contains information about different departments.\n- Columns:\n  - DepartmentID: Unique identifier for each department.\n  - Name: Name of the department.\n  - Creation: Date of creation of the department.\n  - Ranking: Ranking of the department.\n  - Budget_in_Billions: Budget of the department in billions.\n  - Employees_num: Number of employees in the department.\n\nTable head:\n- Stores details about department heads.\n- Columns:\n  - headID: Unique identifier for each head.\n  - name: Name of the head.\n  - state_of_birth: State of birth of the head.\n  - age: Age of the head.\n\nTable management:\n- Contains data related to the management of departments.\n- Columns:\n  - departmentID: Identifier of the department.\n  - headID: Identifier of the head of the department.\n  - temporary_acting: Indicates if the head is temporarily acting.\n\nForeign Keys:\n- management.headID references head.headID, establishing a relationship between management and head tables based on the head identifier.\n- management.departmentID references department.DepartmentID, linking management to specific departments based on the department identifier.",
    "department_store_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - addressID: Unique identifier for each address.\n  - address_information: Details of the address.\n\nTable Customer_Addresses:\n- Stores the relationship between customers and addresses.\n- Columns:\n  - customerID: Identifier of the customer.\n  - addressID: Identifier of the address.\n  - date_from: Start date of the address association.\n  - date_to: End date of the address association.\n\nTable Customer_Orders:\n- Contains details about customer orders.\n- Columns:\n  - orderID: Unique identifier for each order.\n  - customerID: Identifier of the customer who placed the order.\n  - order_status_code: Code indicating the status of the order.\n  - order_date: Date when the order was placed.\n\nTable Customers:\n- Stores information about customers.\n- Columns:\n  - customerID: Unique identifier for each customer.\n  - payment_method_code: Code for the payment method used by the customer.\n  - customer_code: Code assigned to the customer.\n  - customer_name: Name of the customer.\n  - customer_address: Address of the customer.\n  - customer_phone_number: Phone number of the customer.\n  - customer_email_address: Email address of the customer.\n\nTable Department_Store_Chain:\n- Contains data related to department store chains.\n- Columns:\n  - Department_Store_Chain_id: Unique identifier for each department store chain.\n  - Department_Store_Chain_name: Name of the department store chain.\n\nTable Department_Stores:\n- Stores information about department stores.\n- Columns:\n  - department_store_id: Unique identifier for each department store.\n  - Department_Store_Chain_id: Identifier of the department store chain.\n  - store_name: Name of the store.\n  - store_address: Address of the store.\n  - store_phone_number: Phone number of the store.\n  - Store_Email_Address: Email address of the store.\n\nTable Departments:\n- Contains details about different departments within department stores.\n- Columns:\n  - dept_id: Unique identifier for each department.\n  - department_store_id: Identifier of the department store.\n  - department_name: Name of the department.\n\nTable Order_Items:\n- Stores information about items included in orders.\n- Columns:\n  - order_item_id: Unique identifier for each order item.\n  - orderID: Identifier of the order.\n  - product_id: Identifier of the product in the order.\n\nTable Product_Suppliers:\n- Contains data about suppliers of products.\n- Columns:\n  - product_id: Identifier of the product.\n  - supplierID: Identifier of the supplier.\n  - date_supplied_from: Start date of the product supply.\n  - date_supplied_to: End date of the product supply.\n  - total_amount_purchased: Total quantity of the product purchased.\n  - total_value_purchased: Total value of the product purchased.\n\nTable Products:\n- Stores information about different products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product_category_code: Code for the product category.\n  - product_name: Name of the product.\n  - product_price: Price of the product.\n\nTable Staff:\n- Contains details about staff members.\n- Columns:\n  - staffID: Unique identifier for each staff member.\n  - staff_sex: Gender of the staff member.\n  - staff_name: Name of the staff member.\n\nTable Staff_Department_Assignments:\n- Stores the assignments of staff members to departments.\n- Columns:\n  - staffID: Identifier of the staff member.\n  - dept_id: Identifier of the department.\n  - date_assigned_from: Start date of the assignment.\n  - job_title_code: Code for the job title.\n  - date_assigned_to: End date of the assignment.\n\nTable Supplier_Addresses:\n- Contains information about addresses of suppliers.\n- Columns:\n  - supplierID: Identifier of the supplier.\n  - addressID: Identifier of the address.\n  - date_from: Start date of the address association.\n  - date_to: End date of the address association.\n\nTable Suppliers:\n- Stores details about suppliers.\n- Columns:\n  - supplierID: Unique identifier for each supplier.\n  - supplier_name: Name of the supplier.\n  - supplier_phone_number: Phone number of the supplier.\n\nForeign Keys:\n- Supplier_Addresses.supplierID references Suppliers.supplierID, establishing a relationship between supplier addresses and suppliers.\n- Supplier_Addresses.addressID references Addresses.addressID, linking supplier addresses to specific addresses.\n- Customer_Addresses.customerID references Customers.customerID, connecting customer addresses to customers.\n- Customer_Addresses.addressID references Addresses.addressID, establishing a relationship between customer addresses and addresses.\n- Customer_Orders.customerID references Customers.customerID, linking customer orders to customers.\n- Department_Stores.Department_Store_Chain_id references Department_Store_Chain.Department_Store_Chain_id, establishing a relationship between department stores and department store chains.\n- Departments.department_store_id references Department_Stores.department_store_id, connecting departments to department stores.\n- Order_Items.product_id references Products.product_id, linking order items to products.\n- Order_Items.orderID references Customer_Orders.orderID, establishing a relationship between order items and customer orders.\n- Product_Suppliers.product_id references Products.product_id, connecting product suppliers to products.\n- Product_Suppliers.supplierID references Suppliers.supplierID, linking product suppliers to suppliers.\n- Staff_Department_Assignments.staffID references Staff.staffID, establishing a relationship between staff department assignments and staff members.\n- Staff_Department_Assignments.dept_id references Departments.dept_id, connecting staff department assignments to departments.",
    "device_robust": "Table device:\n- Contains information about different devices.\n- Columns:\n  - DeviceID: Unique identifier for each device.\n  - Device: Name or type of the device.\n  - Carrier: Carrier associated with the device.\n  - Package_Version: Version of the device package.\n  - Applications: Applications available on the device.\n  - Software_Platform: Platform on which the device software runs.\n\nTable shop:\n- Stores data related to different shops.\n- Columns:\n  - ShopID: Unique identifier for each shop.\n  - Shop_Name: Name of the shop.\n  - Location: Location of the shop.\n  - Open_Date: Date when the shop was opened.\n  - Open_Year: Year when the shop was opened.\n\nTable stock:\n- Contains information about the stock of devices in each shop.\n- Columns:\n  - ShopID: Identifier of the shop.\n  - DeviceID: Identifier of the device in stock.\n  - Quantity: Number of devices available in stock.\n\nForeign Keys:\n- stock.DeviceID references device.DeviceID, establishing a relationship between stock and devices.\n- stock.ShopID references shop.ShopID, linking stock to specific shops.",
    "document_management_robust": "Table Document_Functional_Areas:\n- Contains information about the functional areas of documents.\n- Columns:\n  - doc_code: Unique identifier for each document.\n  - functional_area_code: Identifier for the functional area of the document.\n\nTable Document_Sections:\n- Stores details about different sections within documents.\n- Columns:\n  - sectionID: Unique identifier for each section.\n  - doc_code: Identifier of the document to which the section belongs.\n  - section_sequence: Sequence of the section within the document.\n  - section_code: Code for the section.\n  - section_title: Title of the section.\n\nTable Document_Sections_Images:\n- Contains the mapping between document sections and images.\n- Columns:\n  - sectionID: Identifier of the section.\n  - imageID: Identifier of the image associated with the section.\n\nTable Document_Structures:\n- Stores information about the structure of documents.\n- Columns:\n  - doc_structure_code: Unique identifier for each document structure.\n  - parent_document_structure_code: Identifier of the parent document structure.\n  - document_structure_description: Description of the document structure.\n\nTable Documents:\n- Contains data related to documents.\n- Columns:\n  - doc_code: Unique identifier for each document.\n  - doc_structure_code: Identifier of the document structure.\n  - doc_type_code: Code for the type of document.\n  - access_count: Count of accesses to the document.\n  - doc_name: Name of the document.\n\nTable Functional_Areas:\n- Stores details about different functional areas.\n- Columns:\n  - functional_area_code: Unique identifier for each functional area.\n  - parent_functional_area_code: Identifier of the parent functional area.\n  - functional_area_information: Information about the functional area.\n\nTable Images:\n- Contains information about images.\n- Columns:\n  - imageID: Unique identifier for each image.\n  - image_alternative_text: Alternative text for the image.\n  - image_name: Name of the image.\n  - image_url: URL of the image.\n\nTable Roles:\n- Stores data related to different roles.\n- Columns:\n  - role_code: Unique identifier for each role.\n  - role_annotation: Annotation or description of the role.\n\nTable Users:\n- Contains details about users.\n- Columns:\n  - userID: Unique identifier for each user.\n  - role_code: Identifier of the role of the user.\n  - user_name: Name of the user.\n  - user_login: Login information of the user.\n  - password: Password of the user.\n\nForeign Keys:\n- Users.role_code references Roles.role_code, establishing a relationship between users and roles.\n- Documents.doc_structure_code references Document_Structures.doc_structure_code, linking documents to their structures.\n- Document_Functional_Areas.functional_area_code references Functional_Areas.functional_area_code, connecting document functional areas to functional areas.\n- Document_Functional_Areas.doc_code references Documents.doc_code, establishing a relationship between document functional areas and documents.\n- Document_Sections.doc_code references Documents.doc_code, linking document sections to documents.\n- Document_Sections_Images.imageID references Images.imageID, connecting document sections to images.\n- Document_Sections_Images.sectionID references Document_Sections.sectionID, establishing a relationship between document section images and sections.",
    "dog_kennels_robust": "Table Breeds:\n- Contains information about different dog breeds.\n- Columns:\n  - breed_code: Unique code for each breed.\n  - breed_name: Name of the breed.\n\nTable Charges:\n- Stores details about various charges.\n- Columns:\n  - charge_id: Unique identifier for each charge.\n  - charge_type: Type of charge.\n  - charge_amount: Amount of the charge.\n\nTable Dogs:\n- Holds data related to dogs.\n- Columns:\n  - dog_id: Unique identifier for each dog.\n  - owner_id: Identifier of the owner of the dog.\n  - abandoned_yn: Indicator if the dog has been abandoned.\n  - breed_code: Code referencing the breed of the dog.\n  - size_code: Code referencing the size of the dog.\n  - name: Name of the dog.\n  - age: Age of the dog.\n  - birthdate: Birthdate of the dog.\n  - sex: Gender of the dog.\n  - weight: Weight of the dog.\n  - arrival_date: Date when the dog arrived.\n  - date_of_adoption: Date when the dog was adopted.\n  - date_departed: Date when the dog departed.\n\nTable Owners:\n- Contains information about dog owners.\n- Columns:\n  - owner_id: Unique identifier for each owner.\n  - Fname: First name of the owner.\n  - Lname: Last name of the owner.\n  - address: Address of the owner.\n  - city: City where the owner resides.\n  - state: State where the owner resides.\n  - zip_code: Zip code of the owner's location.\n  - email: Email address of the owner.\n  - home_phone: Home phone number of the owner.\n  - cell_phone_number: Cell phone number of the owner.\n\nTable Professionals:\n- Stores data about professionals involved in dog-related services.\n- Columns:\n  - professional_id: Unique identifier for each professional.\n  - role_code: Code representing the role of the professional.\n  - Fname: First name of the professional.\n  - address: Address of the professional.\n  - city: City where the professional is located.\n  - state: State where the professional is located.\n  - zip_code: Zip code of the professional's location.\n  - Lname: Last name of the professional.\n  - email: Email address of the professional.\n  - home_phone: Home phone number of the professional.\n  - cell_phone_number: Cell phone number of the professional.\n\nTable Sizes:\n- Contains information about different sizes of dogs.\n- Columns:\n  - size_code: Code representing the size category.\n  - size_information: Information about the size category.\n\nTable Treatment_Types:\n- Stores details about different types of treatments.\n- Columns:\n  - treatment_type_code: Code for each treatment type.\n  - treatment_type_information: Information about the treatment type.\n\nTable Treatments:\n- Holds data related to treatments given to dogs.\n- Columns:\n  - treatment_id: Unique identifier for each treatment.\n  - dog_id: Identifier of the dog receiving the treatment.\n  - professional_id: Identifier of the professional providing the treatment.\n  - treatment_type_code: Code referencing the type of treatment.\n  - date_of_treatment: Date when the treatment was administered.\n  - cost_of_treatment: Cost associated with the treatment.\n\nForeign Keys:\n- Dogs.owner_id references Owners.owner_id, establishing a relationship between dogs and owners.\n- Dogs.size_code references Sizes.size_code, linking dogs to their respective sizes.\n- Dogs.breed_code references Breeds.breed_code, connecting dogs to their breeds.\n- Treatments.dog_id references Dogs.dog_id, linking treatments to specific dogs.\n- Treatments.professional_id references Professionals.professional_id, establishing a relationship between treatments and professionals.\n- Treatments.treatment_type_code references Treatment_Types.treatment_type_code, connecting treatments to their types.",
    "dorm_1_robust": "Table Dorm:\n- Contains information about different dormitories.\n- Columns:\n  - dormitory_id: Unique identifier for each dormitory.\n  - dorm_name: Name of the dormitory.\n  - student_capacity: Maximum capacity of students the dormitory can accommodate.\n  - gender: Indicates the gender accommodation of the dormitory.\n\nTable Dorm_amenity:\n- Stores details about various amenities available in dormitories.\n- Columns:\n  - amenity_id: Unique identifier for each amenity.\n  - amenity_name: Name of the amenity provided in dormitories.\n\nTable Has_amenity:\n- Represents the relationship between dormitories and the amenities they have.\n- Columns:\n  - dormitory_id: Identifier of the dormitory.\n  - amenity_id: Identifier of the amenity available in the dormitory.\n\nTable Lives_in:\n- Contains data about the living arrangements of students in dormitories.\n- Columns:\n  - student_id: Identifier of the student.\n  - dormitory_id: Identifier of the dormitory where the student lives.\n  - room_number: Number of the room where the student resides.\n\nTable Student:\n- Stores information about students.\n- Columns:\n  - StuID: Unique identifier for each student.\n  - Last_Name: Last name of the student.\n  - First_name: First name of the student.\n  - Age: Age of the student.\n  - sex: Gender of the student.\n  - Major: Field of study or major of the student.\n  - Tutor: Tutor or mentor assigned to the student.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Has_amenity.amenity_id references Dorm_amenity.amenity_id, establishing a relationship between dorm amenities and their respective amenities.\n- Has_amenity.dormitory_id references Dorm.dormitory_id, linking dormitories to the amenities they have.\n- Lives_in.dormitory_id references Dorm.dormitory_id, connecting student living arrangements to specific dormitories.\n- Lives_in.student_id references Student.StuID, establishing a relationship between students and their living arrangements.",
    "driving_school_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line1_number_building: Line 1 address details including building number.\n  - city: City of the address.\n  - zip_postcode: Postal code or ZIP code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Customer_Payments:\n- Stores data related to payments made by customers.\n- Columns:\n  - customerID: Identifier of the customer making the payment.\n  - datetime_payment: Date and time of the payment.\n  - payment_method_code: Code representing the payment method used.\n  - amount_payment: Amount paid by the customer.\n\nTable Customers:\n- Contains details about customers of the organization.\n- Columns:\n  - customerID: Unique identifier for each customer.\n  - customer_address_id: Identifier of the address associated with the customer.\n  - customer_status_code: Code indicating the status of the customer.\n  - date_became_customer: Date when the customer became a customer.\n  - birthdate: Birthdate of the customer.\n  - Fname: First name of the customer.\n  - Lname: Last name of the customer.\n  - amount_outstanding: Outstanding amount to be paid by the customer.\n  - email: Email address of the customer.\n  - contact_number: Contact number of the customer.\n  - mobile_phone_number: Mobile phone number of the customer.\n\nTable Lessons:\n- Stores information about lessons provided by the organization.\n- Columns:\n  - lessonID: Unique identifier for each lesson.\n  - customerID: Identifier of the customer taking the lesson.\n  - lesson_status_code: Code indicating the status of the lesson.\n  - staffID: Identifier of the staff member conducting the lesson.\n  - vehicleID: Identifier of the vehicle used in the lesson.\n  - lesson_date: Date of the lesson.\n  - lesson_time: Time of the lesson.\n  - price: Price of the lesson.\n\nTable Staff:\n- Contains details about staff members of the organization.\n- Columns:\n  - staffID: Unique identifier for each staff member.\n  - staff_address_id: Identifier of the address associated with the staff member.\n  - nickname: Nickname of the staff member.\n  - Fname: First name of the staff member.\n  - Mname: Middle name of the staff member.\n  - Lname: Last name of the staff member.\n  - birthdate: Birthdate of the staff member.\n  - employment_date: Date when the staff member was employed.\n  - date_left_staff: Date when the staff member left the organization.\n\nTable Vehicles:\n- Contains information about different vehicles.\n- Columns:\n  - vehicleID: Unique identifier for each vehicle.\n  - vehicle_information: Details about the vehicle.\n\nForeign Keys:\n- Staff.staff_address_id references Addresses.address_id, linking staff members to their addresses.\n- Customers.customer_address_id references Addresses.address_id, connecting customers to their addresses.\n- Customer_Payments.customerID references Customers.customerID, establishing a relationship between payments and customers.\n- Lessons.customerID references Customers.customerID, linking lessons to specific customers.\n- Lessons.staffID references Staff.staffID, connecting lessons to staff members.\n- Lessons.vehicleID references Vehicles.vehicleID, establishing a relationship between lessons and vehicles.",
    "election_robust": "Table county:\n- Contains information about different counties.\n- Columns:\n  - CountyID: Unique identifier for each county.\n  - County_name: Name of the county.\n  - Population: Population of the county.\n  - Zip_code: Zip code of the county.\n\nTable election:\n- Stores data related to elections.\n- Columns:\n  - Election_ID: Unique identifier for each election.\n  - Counties_Represented: Counties represented in the election.\n  - District: Identifier of the district for the election.\n  - representative: Representative elected.\n  - Party: Political party of the representative.\n  - First_Elected: Date when the representative was first elected.\n  - Committee: Committee associated with the election.\n\nTable party:\n- Contains information about political parties.\n- Columns:\n  - Party_ID: Unique identifier for each party.\n  - Year: Year of the party information.\n  - Party: Name of the party.\n  - Governor: Governor affiliated with the party.\n  - Lieutenant_Governor: Lieutenant Governor affiliated with the party.\n  - Comptroller: Comptroller affiliated with the party.\n  - Attorney_General: Attorney General affiliated with the party.\n  - US_Senate: U.S. Senate affiliation of the party.\n\nForeign Keys:\n- election.District references county.CountyID, establishing a relationship between elections and counties.\n- election.Party references party.Party_ID, linking elections to specific political parties.",
    "election_representative_robust": "Table election:\n- Contains information about elections.\n- Columns:\n  - Election_ID: Unique identifier for each election.\n  - Representative_ID: Identifier of the representative associated with the election.\n  - Date: Date of the election.\n  - Ballots: Number of ballots cast in the election.\n  - Vote_Percent: Percentage of votes received by the representative.\n  - Seats: Number of seats won by the representative.\n  - Place: Position or rank achieved by the representative in the election.\n\nTable representative:\n- Stores details about representatives.\n- Columns:\n  - Representative_ID: Unique identifier for each representative.\n  - Name: Name of the representative.\n  - State: State represented by the representative.\n  - PoliticalParty: Political party affiliation of the representative.\n  - Lifespan: Duration of the representative's life or career.\n\nForeign Keys:\n- election.Representative_ID references representative.Representative_ID, establishing a relationship between elections and representatives.",
    "employee_hire_evaluation_robust": "Table employee:\n- Contains information about employees.\n- Columns:\n  - EmployeeID: Unique identifier for each employee.\n  - Name: Name of the employee.\n  - Age: Age of the employee.\n  - City: City where the employee is located.\n\nTable evaluation:\n- Stores data related to employee evaluations.\n- Columns:\n  - EmployeeID: Identifier of the employee being evaluated.\n  - Year_awarded: Year in which the evaluation was awarded.\n  - prix: Evaluation prize or award.\n\nTable hiring:\n- Contains details about the hiring process of employees in different shops.\n- Columns:\n  - Shop_ID: Unique identifier for each shop.\n  - EmployeeID: Identifier of the employee being hired.\n  - Start_from: Start date of the employment.\n  - ss_full_time: Indicator of whether the employee is hired as a full-time employee.\n\nTable shop:\n- Stores information about different shops.\n- Columns:\n  - Shop_ID: Unique identifier for each shop.\n  - Name: Name of the shop.\n  - Location: Location of the shop.\n  - City: City where the shop is situated.\n  - Number_products: Number of products available in the shop.\n  - Manager_name: Name of the shop manager.\n\nForeign Keys:\n- hiring.EmployeeID references employee.EmployeeID, establishing a relationship between hiring and employees.\n- hiring.Shop_ID references shop.Shop_ID, linking hiring to specific shops.\n- evaluation.EmployeeID references employee.EmployeeID, connecting evaluations to employees.",
    "entertainment_awards_robust": "Table artwork:\n- Contains information about different artworks.\n- Columns:\n  - Artwork_ID: Unique identifier for each artwork.\n  - category: Category to which the artwork belongs.\n  - Name: Name of the artwork.\n\nTable festival_detail:\n- Stores details about various festivals.\n- Columns:\n  - FestivalID: Unique identifier for each festival.\n  - Festival_Name: Name of the festival.\n  - Chair_Name: Name of the chairperson of the festival.\n  - Location: Location where the festival is held.\n  - Year: Year in which the festival took place.\n  - Num_of_Audience: Number of audience members at the festival.\n\nTable nomination:\n- Contains data related to nominations of artworks in festivals.\n- Columns:\n  - Artwork_ID: Identifier of the artwork being nominated.\n  - FestivalID: Identifier of the festival where the nomination took place.\n  - Result: Outcome of the nomination for the artwork.\n\nForeign Keys:\n- nomination.FestivalID references festival_detail.FestivalID, establishing a relationship between nominations and festivals.\n- nomination.Artwork_ID references artwork.Artwork_ID, linking nominations to specific artworks.",
    "entrepreneur_robust": "Table entrepreneur:\n- Contains information about entrepreneurs and their companies.\n- Columns:\n  - Entrepreneur_ID: Unique identifier for each entrepreneur.\n  - People_ID: Identifier referencing the individual in the people table.\n  - Company: Name of the entrepreneur's company.\n  - Money_Requested: Amount of money requested by the entrepreneur.\n  - moneyman: Indicator of financial support or investment.\n\nTable people:\n- Stores details about individuals.\n- Columns:\n  - People_ID: Unique identifier for each individual.\n  - Name: Name of the person.\n  - Height: Height of the person.\n  - Weight: Weight of the person.\n  - birthdate: Date of birth of the person.\n\nForeign Keys:\n- entrepreneur.People_ID references people.People_ID, establishing a relationship between entrepreneurs and individuals in the people table.",
    "epinions_1_robust": "Table item:\n- Contains information about different items.\n- Columns:\n  - i_id: Unique identifier for each item.\n  - title: Title of the item.\n\nTable review:\n- Stores reviews given by users for items.\n- Columns:\n  - a_id: Unique identifier for each review.\n  - u_id: Identifier of the user who gave the review.\n  - i_id: Identifier of the item being reviewed.\n  - rating: Rating given by the user for the item.\n  - rank: Rank of the review.\n\nTable trust:\n- Contains trust relationships between users.\n- Columns:\n  - source_u_id: Identifier of the user who trusts another user.\n  - target_u_id: Identifier of the user being trusted.\n  - trust: Level of trust between the source user and the target user.\n\nTable useracct:\n- Stores user account information.\n- Columns:\n  - u_id: Unique identifier for each user.\n  - name: Name of the user.\n\nForeign Keys:\n- review.i_id references item.i_id, linking reviews to specific items.\n- review.u_id references useracct.u_id, connecting reviews to the users who gave them.\n- trust.target_u_id references useracct.u_id, establishing a trust relationship from one user to another.\n- trust.source_u_id references useracct.u_id, indicating the user who trusts another user.",
    "e_government_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - addressID: Unique identifier for each address.\n  - line1_number_building: Line 1 address details including building number.\n  - city: City of the address.\n  - postal_code: Postal code of the address.\n  - state_province_county: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Forms:\n- Stores data related to various forms.\n- Columns:\n  - formID: Unique identifier for each form.\n  - form_type_code: Code representing the type of form.\n  - service_id: Identifier of the service associated with the form.\n  - form_number: Number assigned to the form.\n  - form_name: Name of the form.\n  - form_information: Additional information related to the form.\n\nTable Individuals:\n- Contains details about individual persons.\n- Columns:\n  - individual_id: Unique identifier for each individual.\n  - individual_Fname: First name of the individual.\n  - individual_Mname: Middle name of the individual.\n  - individual_phone_number: Phone number of the individual.\n  - individual_email_address: Email address of the individual.\n  - individual_address: Address of the individual.\n  - individual_Lname: Last name of the individual.\n\nTable Organization_Contact_Individuals:\n- Stores information about contacts between organizations and individuals.\n- Columns:\n  - individual_id: Identifier of the individual contact.\n  - organization_id: Identifier of the organization involved.\n  - date_contact_from: Start date of the contact.\n  - date_contact_to: End date of the contact.\n\nTable Organizations:\n- Contains data about different organizations.\n- Columns:\n  - organization_id: Unique identifier for each organization.\n  - date_formed: Date when the organization was formed.\n  - organization_name: Name of the organization.\n  - uk_vat_number: VAT number of the organization in the UK.\n\nTable Parties:\n- Stores details about different parties.\n- Columns:\n  - partyID: Unique identifier for each party.\n  - payment_method_code: Code representing the payment method used.\n  - party_phone: Phone number of the party.\n  - party_email_address: Email address of the party.\n\nTable Party_Addresses:\n- Contains information about addresses associated with parties.\n- Columns:\n  - partyID: Identifier of the party.\n  - addressID: Identifier of the address.\n  - date_address_from: Start date of the address association.\n  - address_type_code: Code representing the type of address.\n  - date_address_to: End date of the address association.\n\nTable Party_Forms:\n- Stores data about forms associated with parties.\n- Columns:\n  - partyID: Identifier of the party.\n  - formID: Identifier of the form.\n  - date_completion_started: Start date of form completion.\n  - form_status_code: Code representing the status of the form.\n  - date_fully_completed: Date when the form was fully completed.\n\nTable Party_Services:\n- Contains information about services booked by parties.\n- Columns:\n  - booking_id: Identifier of the booking.\n  - customer_id: Identifier of the customer (party).\n  - service_id: Identifier of the service booked.\n  - service_datetime: Date and time of the service.\n  - booking_made_date: Date when the booking was made.\n\nTable Services:\n- Stores details about different services.\n- Columns:\n  - service_id: Unique identifier for each service.\n  - service_type_code: Code representing the type of service.\n  - service_name: Name of the service.\n  - service_description: Description of the service.\n\nForeign Keys:\n- Forms.service_id references Services.service_id, linking forms to specific services.\n- Organization_Contact_Individuals.individual_id references Individuals.individual_id, connecting organization contacts to individuals.\n- Organization_Contact_Individuals.organization_id references Organizations.organization_id, establishing a relationship between organization contacts and organizations.\n- Party_Addresses.partyID references Parties.partyID, linking party addresses to specific parties.\n- Party_Addresses.addressID references Addresses.addressID, connecting party addresses to addresses.\n- Party_Forms.formID references Forms.formID, establishing a relationship between party forms and forms.\n- Party_Forms.partyID references Parties.partyID, linking party forms to parties.\n- Party_Services.customer_id references Parties.partyID, connecting party services to customers (parties).\n- Party_Services.service_id references Services.service_id, establishing a relationship between party services and services.",
    "e_learning_robust": "Table Course_Authors_and_Tutors:\n- Contains information about authors and tutors of courses.\n- Columns:\n  - authorID: Unique identifier for each author or tutor.\n  - author_tutor_ATB: Indicates whether the individual is an author or a tutor.\n  - login_name: Login name of the author or tutor.\n  - passcode: Passcode for authentication.\n  - personal_name: First name of the author or tutor.\n  - Mname: Middle name of the author or tutor.\n  - family_name: Last name of the author or tutor.\n  - gender_mf: Gender of the author or tutor.\n  - address_line1: Address of the author or tutor.\n\nTable Courses:\n- Stores details about different courses offered.\n- Columns:\n  - course_id: Unique identifier for each course.\n  - authorID: Identifier of the author or tutor of the course.\n  - subjectID: Identifier of the subject to which the course belongs.\n  - course_name: Name of the course.\n  - course_information: Information about the course.\n\nTable Student_Course_Enrolment:\n- Contains data about students enrolled in courses.\n- Columns:\n  - registration_id: Unique identifier for each enrollment registration.\n  - student_id: Identifier of the student enrolled.\n  - course_id: Identifier of the course in which the student is enrolled.\n  - date_of_enrolment: Date when the student enrolled in the course.\n  - date_of_completion: Date when the student completed the course.\n\nTable Student_Tests_Taken:\n- Stores information about tests taken by students.\n- Columns:\n  - registration_id: Identifier of the enrollment registration for the test.\n  - date_test_taken: Date when the test was taken.\n  - test_result: Result of the test taken by the student.\n\nTable Students:\n- Contains details about students.\n- Columns:\n  - student_id: Unique identifier for each student.\n  - date_of_registration: Date when the student registered.\n  - date_of_latest_logon: Date of the student's latest login.\n  - login_name: Login name of the student.\n  - passcode: Passcode for student authentication.\n  - personal_name: First name of the student.\n  - Mname: Middle name of the student.\n  - family_name: Last name of the student.\n\nTable Subjects:\n- Stores information about different subjects.\n- Columns:\n  - subjectID: Unique identifier for each subject.\n  - subject_name: Name of the subject.\n\nForeign Keys:\n- Courses.subjectID references Subjects.subjectID, establishing a relationship between courses and subjects.\n- Courses.authorID references Course_Authors_and_Tutors.authorID, linking courses to their respective authors or tutors.\n- Student_Course_Enrolment.student_id references Students.student_id, connecting students to their enrolled courses.\n- Student_Course_Enrolment.course_id references Courses.course_id, linking student enrollments to specific courses.\n- Student_Tests_Taken.registration_id references Student_Course_Enrolment.registration_id, establishing a relationship between tests taken and course enrollments.",
    "farm_robust": "Table city:\n- Contains information about different cities.\n- Columns:\n  - CityID: Unique identifier for each city.\n  - OfficialName: Official name of the city.\n  - condition: Condition or status of the city.\n  - Area_km_2: Area of the city in square kilometers.\n  - population: Population of the city.\n  - Census_Ranking: Ranking of the city in a census.\n\nTable competition_record:\n- Stores records of competitions related to farms.\n- Columns:\n  - CompetitionID: Unique identifier for each competition.\n  - FarmID: Identifier of the farm participating in the competition.\n  - Rank: Rank achieved by the farm in the competition.\n\nTable farm:\n- Contains data about different farms.\n- Columns:\n  - FarmID: Unique identifier for each farm.\n  - Year: Year of the farm data.\n  - Total_Horses: Total number of horses on the farm.\n  - Working_Horses: Number of working horses on the farm.\n  - Total_Cattle: Total number of cattle on the farm.\n  - Oxen: Number of oxen on the farm.\n  - Bulls: Number of bulls on the farm.\n  - Cows: Number of cows on the farm.\n  - Pigs: Number of pigs on the farm.\n  - Sheep_and_Goats: Number of sheep and goats on the farm.\n\nTable farm_competition:\n- Contains information about farm competitions.\n- Columns:\n  - CompetitionID: Unique identifier for each competition.\n  - Year: Year of the competition.\n  - Theme: Theme of the competition.\n  - Host_city_ID: Identifier of the city hosting the competition.\n  - Hosts: Hosts of the competition.\n\nForeign Keys:\n- farm_competition.Host_city_ID references city.CityID, establishing a relationship between farm competitions and cities.\n- competition_record.FarmID references farm.FarmID, linking competition records to specific farms.\n- competition_record.CompetitionID references farm_competition.CompetitionID, connecting competition records to farm competitions.",
    "film_rank_robust": "Table film:\n- Contains information about different films.\n- Columns:\n  - movie_ID: Unique identifier for each movie.\n  - Title: Title of the film.\n  - Studio: Studio producing the film.\n  - Director: Director of the film.\n  - Gross_in_dollar: Gross revenue generated by the film in dollars.\n\nTable film_market_estimation:\n- Stores market estimation data related to films.\n- Columns:\n  - Estimation_ID: Unique identifier for each estimation.\n  - Low_Estimate: Lower bound of the revenue estimation.\n  - High_Estimate: Upper bound of the revenue estimation.\n  - movie_ID: Identifier of the movie.\n  - category: Category of the market estimation.\n  - Market_ID: Identifier of the market.\n  - Year: Year of the estimation.\n\nTable market:\n- Contains information about different markets.\n- Columns:\n  - Market_ID: Unique identifier for each market.\n  - Country: Country where the market is located.\n  - Number_cities: Number of cities within the market.\n\nForeign Keys:\n- film_market_estimation.Market_ID references market.Market_ID, establishing a relationship between film market estimations and markets.\n- film_market_estimation.movie_ID references film.movie_ID, linking film market estimations to specific films.",
    "flight_1_robust": "Table aircraft:\n- Contains information about different aircraft.\n- Columns:\n  - aircraft_id: Unique identifier for each aircraft.\n  - name: Name of the aircraft.\n  - distance: Distance covered by the aircraft.\n\nTable certificate:\n- Stores data related to certificates held by employees for specific aircraft.\n- Columns:\n  - employee_id: Identifier of the employee holding the certificate.\n  - aircraft_id: Identifier of the aircraft for which the certificate is held.\n\nTable employee:\n- Contains details about employees.\n- Columns:\n  - employee_id: Unique identifier for each employee.\n  - name: Name of the employee.\n  - salary: Salary of the employee.\n\nTable flight:\n- Stores information about flights.\n- Columns:\n  - flight_no: Unique identifier for each flight.\n  - origin: Origin of the flight.\n  - destination: Destination of the flight.\n  - distance: Distance of the flight.\n  - departure_date: Date and time of departure.\n  - arrival_date: Date and time of arrival.\n  - price: Price of the flight.\n  - aircraft_id: Identifier of the aircraft used for the flight.\n\nForeign Keys:\n- flight.aircraft_id references aircraft.aircraft_id, establishing a relationship between flights and aircraft.\n- certificate.aircraft_id references aircraft.aircraft_id, linking certificates to specific aircraft.\n- certificate.employee_id references employee.employee_id, connecting certificates to employees.",
    "flight_2_robust": "Table airlines:\n- Contains information about different airlines.\n- Columns:\n  - uid: Unique identifier for each airline.\n  - Airline: Name of the airline.\n  - Abbreviation: Abbreviation of the airline name.\n  - Country: Country where the airline is based.\n\nTable airports:\n- Stores data related to various airports.\n- Columns:\n  - City: City where the airport is located.\n  - AirportCode: Code assigned to the airport.\n  - AirportName: Name of the airport.\n  - Country: Country where the airport is situated.\n  - CountryAbbrev: Abbreviation of the country where the airport is located.\n\nTable flights:\n- Contains details about flights operated by airlines.\n- Columns:\n  - Airline: Name of the airline operating the flight.\n  - FlightNo: Flight number assigned to the flight.\n  - SourceAirport: Code of the airport from where the flight originates.\n  - DestAirport: Code of the airport where the flight is destined.\n\nForeign Keys:\n- flights.DestAirport references airports.AirportCode, establishing a relationship between flights and destination airports.\n- flights.SourceAirport references airports.AirportCode, linking flights to the source airports.",
    "flight_4_robust": "Table airlines:\n- Contains information about different airlines.\n- Columns:\n  - alid: Unique identifier for each airline.\n  - name: Name of the airline.\n  - iata: IATA code of the airline.\n  - icao: ICAO code of the airline.\n  - callsign: Callsign of the airline.\n  - country: Country where the airline is based.\n  - active: Indicates if the airline is currently active.\n\nTable airports:\n- Stores data related to various airports.\n- Columns:\n  - apid: Unique identifier for each airport.\n  - name: Name of the airport.\n  - city: City where the airport is located.\n  - country: Country where the airport is situated.\n  - x: X-coordinate of the airport location.\n  - y: Y-coordinate of the airport location.\n  - elevation: Elevation of the airport.\n  - iata: IATA code of the airport.\n  - icao: ICAO code of the airport.\n\nTable routes:\n- Contains information about flight routes between airports.\n- Columns:\n  - rid: Unique identifier for each route.\n  - dst_apid: Identifier of the destination airport.\n  - dst_ap: Name of the destination airport.\n  - src_apid: Identifier of the source airport.\n  - src_ap: Name of the source airport.\n  - alid: Identifier of the airline operating the route.\n  - airline: Name of the airline operating the route.\n  - codeshare: Indicates if the route is a codeshare flight.\n\nForeign Keys:\n- routes.alid references airlines.alid, establishing a relationship between routes and airlines.\n- routes.src_apid references airports.apid, linking routes to the source airport.\n- routes.dst_apid references airports.apid, linking routes to the destination airport.",
    "flight_company_robust": "Table airport:\n- Contains information about airports.\n- Columns:\n  - id: Unique identifier for each airport.\n  - City: City where the airport is located.\n  - Country: Country where the airport is situated.\n  - IATA: International Air Transport Association code for the airport.\n  - ICAO: International Civil Aviation Organization code for the airport.\n  - name: Name of the airport.\n\nTable flight:\n- Stores data related to flights.\n- Columns:\n  - id: Unique identifier for each flight.\n  - Vehicle_Flight_number: Flight number of the vehicle.\n  - date: Date of the flight.\n  - Pilot: Pilot of the flight.\n  - Velocity: Velocity of the flight.\n  - Altitude: Altitude of the flight.\n  - airport_id: Identifier of the airport associated with the flight.\n  - company_id: Identifier of the operating company of the flight.\n\nTable operate_company:\n- Contains details about operating companies.\n- Columns:\n  - id: Unique identifier for each operating company.\n  - name: Name of the operating company.\n  - category: Category of the company.\n  - Principal_activities: Main activities of the company.\n  - Incorporated_in: Location where the company is incorporated.\n  - Group_Equity_Shareholding: Information about equity shareholding within the company.\n\nForeign Keys:\n- flight.company_id references operate_company.id, linking flights to their respective operating companies.\n- flight.airport_id references airport.id, establishing a relationship between flights and airports.",
    "formula_1_robust": "Table circuits:\n- Contains information about racing circuits.\n- Columns:\n  - circuitId: Unique identifier for each circuit.\n  - circuitRef: Reference code for the circuit.\n  - name: Name of the circuit.\n  - location: Location of the circuit.\n  - country: Country where the circuit is located.\n  - latitude: Latitude coordinates of the circuit.\n  - longitude: Longitude coordinates of the circuit.\n  - alternative: Alternative information about the circuit.\n  - url: URL link related to the circuit.\n\nTable constructorResults:\n- Stores results of constructors in races.\n- Columns:\n  - constructorResultsId: Unique identifier for each constructor result.\n  - raceId: Identifier of the race.\n  - constructorId: Identifier of the constructor.\n  - points: Points earned by the constructor.\n  - status: Status of the constructor in the race.\n\nTable constructorStandings:\n- Contains standings of constructors in races.\n- Columns:\n  - constructorStandingsId: Unique identifier for each constructor standing.\n  - raceId: Identifier of the race.\n  - constructorId: Identifier of the constructor.\n  - points: Points earned by the constructor.\n  - position: Position of the constructor.\n  - positionText: Textual representation of the position.\n  - wins: Number of wins by the constructor.\n\nTable constructors:\n- Stores information about racing constructors.\n- Columns:\n  - constructorId: Unique identifier for each constructor.\n  - constructorRef: Reference code for the constructor.\n  - name: Name of the constructor.\n  - nationality: Nationality of the constructor.\n  - url: URL link related to the constructor.\n\nTable driverStandings:\n- Contains standings of drivers in races.\n- Columns:\n  - driverStandingsId: Unique identifier for each driver standing.\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - points: Points earned by the driver.\n  - position: Position of the driver.\n  - positionText: Textual representation of the position.\n  - wins: Number of wins by the driver.\n\nTable drivers:\n- Contains information about racing drivers.\n- Columns:\n  - driverId: Unique identifier for each driver.\n  - driverRef: Reference code for the driver.\n  - number: Racing number of the driver.\n  - code: Code representing the driver.\n  - forename: First name of the driver.\n  - surname: Last name of the driver.\n  - dob: Date of birth of the driver.\n  - nationality: Nationality of the driver.\n  - url: URL link related to the driver.\n\nTable lapTimes:\n- Stores lap time data for drivers in races.\n- Columns:\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - lap: Lap number.\n  - position: Position of the driver in the lap.\n  - time: Lap time.\n  - milliseconds: Lap time in milliseconds.\n\nTable pitStops:\n- Contains pit stop data for drivers in races.\n- Columns:\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - stop: Pit stop number.\n  - lap: Lap number of the pit stop.\n  - time: Time of the pit stop.\n  - duration: Duration of the pit stop.\n  - milliseconds: Duration of the pit stop in milliseconds.\n\nTable qualifying:\n- Stores qualifying data for drivers in races.\n- Columns:\n  - qualifyId: Unique identifier for each qualifying record.\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - constructorId: Identifier of the constructor.\n  - number: Qualifying number.\n  - position: Qualifying position.\n  - q1: Qualifying time for Q1.\n  - q2: Qualifying time for Q2.\n  - q3: Qualifying time for Q3.\n\nTable races:\n- Contains information about racing events.\n- Columns:\n  - raceId: Unique identifier for each race.\n  - year: Year of the race.\n  - round: Round number of the race.\n  - circuitId: Identifier of the circuit.\n  - name: Name of the race.\n  - date: Date of the race.\n  - time: Time of the race.\n  - url: URL link related to the race.\n\nTable results:\n- Stores results of drivers in races.\n- Columns:\n  - resultId: Unique identifier for each result.\n  - raceId: Identifier of the race.\n  - driverId: Identifier of the driver.\n  - constructorId: Identifier of the constructor.\n  - number: Racing number of the driver.\n  - grid: Starting grid position of the driver.\n  - position: Finishing position of the driver.\n  - positionText: Textual representation of the finishing position.\n  - positionOrder: Order of the finishing position.\n  - points: Points earned by the driver.\n  - laps: Number of laps completed.\n  - time: Total race time.\n  - milliseconds: Total race time in milliseconds.\n  - fastestLap: Fastest lap number.\n  - rank: Rank of the driver.\n  - fastestLapTime: Time of the fastest lap.\n  - fastestLapSpeed: Speed of the fastest lap.\n  - statusId: Identifier of the status.\n\nTable seasons:\n- Contains information about racing seasons.\n- Columns:\n  - year: Year of the season.\n  - url: URL link related to the season.\n\nTable status:\n- Stores status information related to races.\n- Columns:\n  - statusId: Unique identifier for each status.\n  - status: Description of the status.\n\nForeign Keys:\n- races.circuitId references circuits.circuitId, establishing a relationship between races and circuits.\n- constructorStandings.raceId references races.raceId, linking constructor standings to races.\n- constructorStandings.constructorId references constructors.constructorId, connecting constructor standings to constructors.\n- results.driverId references drivers.driverId, linking results to drivers.\n- results.raceId references races.raceId, connecting results to races.\n- results.constructorId references constructors.constructorId, establishing a relationship between results and constructors.\n- driverStandings.driverId references drivers.driverId, linking driver standings to drivers.\n- driverStandings.raceId references races.raceId, connecting driver standings to races.\n- constructorResults.raceId references races.raceId, linking constructor results to races.\n- constructorResults.constructorId references constructors.constructorId, establishing a relationship between constructor results and constructors.\n- qualifying.driverId references drivers.driverId, linking qualifying data to drivers.\n- qualifying.raceId references races.raceId, connecting qualifying data to races.\n- qualifying.constructorId references constructors.constructorId, establishing a relationship between qualifying data and constructors.\n- pitStops.driverId references drivers.driverId, linking pit stop data to drivers.\n- pitStops.raceId references races.raceId, connecting pit stop data to races.\n- lapTimes.driverId references drivers.driverId, linking lap time data to drivers.\n- lapTimes.raceId references races.raceId, connecting lap time data to races.",
    "game_1_robust": "Table Plays_Games:\n- Contains data related to students playing games.\n- Columns:\n  - Student_ID: Identifier of the student playing the game.\n  - Game_ID: Identifier of the game being played.\n  - Hours_Played: Number of hours the student played the game.\n\nTable SportsInfo:\n- Stores information about students participating in sports.\n- Columns:\n  - Student_ID: Identifier of the student involved in sports.\n  - Sport_Name: Name of the sport the student participates in.\n  - HoursPerWeek: Number of hours per week the student dedicates to the sport.\n  - Games_Played: Number of games played by the student.\n  - On_Scholarship: Indicates if the student is on a sports scholarship.\n\nTable Student:\n- Contains details about students.\n- Columns:\n  - Student_ID: Unique identifier for each student.\n  - Last_Name: Last name of the student.\n  - First_name: First name of the student.\n  - Age: Age of the student.\n  - gender: Gender of the student.\n  - Major: Field of study of the student.\n  - Tutor: Tutor assigned to the student.\n  - city_code: Code representing the city where the student resides.\n\nTable Video_Games:\n- Stores information about different video games.\n- Columns:\n  - Game_ID: Unique identifier for each video game.\n  - Game_Name: Name of the video game.\n  - Game_type: Type or genre of the video game.\n\nForeign Keys:\n- Plays_Games.Student_ID references Student.Student_ID, establishing a relationship between students and games they play.\n- Plays_Games.Game_ID references Video_Games.Game_ID, linking games played to specific video games.\n- SportsInfo.Student_ID references Student.Student_ID, connecting sports information to specific students.",
    "game_injury_robust": "Table game:\n- Contains information about different games.\n- Columns:\n  - stadium_id: Identifier of the stadium where the game took place.\n  - id: Unique identifier for each game.\n  - Season: Season in which the game was played.\n  - Date: Date of the game.\n  - Home_team: Name of the home team.\n  - Away_team: Name of the away team.\n  - resScoreult: Result of the game.\n  - Competition: Type of competition the game was part of.\n\nTable injury_accident:\n- Stores data related to injuries or accidents during games.\n- Columns:\n  - game_id: Identifier of the game where the injury or accident occurred.\n  - id: Unique identifier for each injury or accident record.\n  - Player: Name of the player involved in the injury or accident.\n  - Injury: Description of the injury.\n  - Number_of_matches: Number of matches the player missed due to the injury.\n  - Source: Source of information about the injury or accident.\n\nTable stadium:\n- Contains details about different stadiums.\n- Columns:\n  - id: Unique identifier for each stadium.\n  - name: Name of the stadium.\n  - Home_Games: Number of home games played at the stadium.\n  - Average_Attendance: Average attendance at the stadium.\n  - Total_Attendance: Total attendance at the stadium.\n  - Capacity_Percentage: Percentage of stadium capacity utilized.\n\nForeign Keys:\n- game.stadium_id references stadium.id, establishing a relationship between games and stadiums.\n- injury_accident.game_id references game.id, linking injury or accident records to specific games.",
    "gas_company_robust": "Table company:\n- Contains information about different companies.\n- Columns:\n  - Company_ID: Unique identifier for each company.\n  - Rank: Ranking of the company.\n  - Company: Name of the company.\n  - Headquarters: Location of the company's headquarters.\n  - Main_Industry: Primary industry of the company.\n  - Sales: Sales revenue of the company.\n  - Profits: Profits generated by the company.\n  - Assets: Total assets owned by the company.\n  - Market_Value: Market value of the company.\n\nTable gas_station:\n- Stores data related to gas stations.\n- Columns:\n  - Station_ID: Unique identifier for each gas station.\n  - Open_Year: Year when the gas station was opened.\n  - address: Address of the gas station.\n  - Manager_Name: Name of the manager of the gas station.\n  - Vice_Manager_Name: Name of the vice manager of the gas station.\n  - Representative_Name: Name of the representative associated with the gas station.\n\nTable station_company:\n- Represents the relationship between gas stations and companies.\n- Columns:\n  - Station_ID: Identifier of the gas station.\n  - Company_ID: Identifier of the company associated with the gas station.\n  - Rank_of_the_Year: Rank of the company for the specific year.\n\nForeign Keys:\n- station_company.Company_ID references company.Company_ID, linking gas stations to specific companies.\n- station_company.Station_ID references gas_station.Station_ID, establishing a relationship between gas stations and companies.",
    "geo_robust": "Table border_info:\n- Contains information about the borders of states.\n- Columns:\n  - State_Name: Name of the state.\n  - frontier: Information about the state's border.\n\nTable city:\n- Stores data related to cities.\n- Columns:\n  - city_name: Name of the city.\n  - inhabitants: Number of inhabitants in the city.\n  - country_name: Name of the country where the city is located.\n  - State_Name: Name of the state where the city is situated.\n\nTable highlow:\n- Contains details about the highest and lowest points of states.\n- Columns:\n  - State_Name: Name of the state.\n  - highest_elevation: Highest elevation point in the state.\n  - lowest_point: Lowest point in the state.\n  - highest_point: Highest point in the state.\n  - lowest_elevation: Lowest elevation point in the state.\n\nTable lake:\n- Stores information about lakes.\n- Columns:\n  - Lake_Name: Name of the lake.\n  - area: Area covered by the lake.\n  - country_name: Name of the country where the lake is located.\n  - State_Name: Name of the state where the lake is situated.\n\nTable mountain:\n- Contains data about mountains.\n- Columns:\n  - mountain_name: Name of the mountain.\n  - Mountain_altitude: Altitude of the mountain.\n  - country_name: Name of the country where the mountain is located.\n  - State_Name: Name of the state where the mountain is situated.\n\nTable river:\n- Stores details about rivers.\n- Columns:\n  - river_name: Name of the river.\n  - length: Length of the river.\n  - country_name: Name of the country where the river is located.\n  - traverse: State_Name through which the river traverses.\n\nTable state:\n- Contains information about states.\n- Columns:\n  - State_Name: Name of the state.\n  - inhabitants: Number of inhabitants in the state.\n  - area: Area of the state.\n  - country_name: Name of the country where the state is located.\n  - capital: Capital city of the state.\n  - density: Population density of the state.\n\nForeign Keys:\n- city.State_Name references state.State_Name, establishing a relationship between cities and states.\n- border_info.frontier references state.State_Name, linking border information to states.\n- border_info.State_Name references state.State_Name, connecting border information to states.\n- highlow.State_Name references state.State_Name, linking highest and lowest points to states.\n- mountain.State_Name references state.State_Name, connecting mountains to states.\n- river.traverse references state.State_Name, establishing a relationship between rivers and states.",
    "gymnast_robust": "Table gymnast:\n- Contains information about gymnasts and their performance points in different exercises.\n- Columns:\n  - Gymnast_ID: Unique identifier for each gymnast.\n  - Floor_Exercise_Points: Points scored by the gymnast in floor exercise.\n  - Pommel_Horse_Points: Points scored by the gymnast in pommel horse exercise.\n  - Rings_Points: Points scored by the gymnast in rings exercise.\n  - Vault_Points: Points scored by the gymnast in vault exercise.\n  - Parallel_Bars_Points: Points scored by the gymnast in parallel bars exercise.\n  - Horizontal_Bar_Points: Points scored by the gymnast in horizontal bar exercise.\n  - tot_Points: Total points scored by the gymnast across all exercises.\n\nTable people:\n- Stores information about individuals, including gymnasts.\n- Columns:\n  - PeopleID: Unique identifier for each individual.\n  - Name: Name of the person.\n  - Age: Age of the person.\n  - Height: Height of the person.\n  - Hometown: Hometown of the person.\n\nForeign Keys:\n- gymnast.Gymnast_ID references people.PeopleID, establishing a relationship between gymnasts and individuals in the people table.",
    "hospital_1_robust": "Table Affiliated_With:\n- Contains information about the affiliation of physicians with departments.\n- Columns:\n  - Physician: Identifier of the physician.\n  - Department: Identifier of the department.\n  - PrimaryAffiliation: Indicates if the affiliation is primary or not.\n\nTable Appointment:\n- Stores details about appointments made for patients.\n- Columns:\n  - Appointment_ID: Unique identifier for each appointment.\n  - Patient: Identifier of the patient.\n  - PrepNurse: Identifier of the nurse responsible for preparation.\n  - Physician: Identifier of the physician attending the appointment.\n  - Start: Start time of the appointment.\n  - End: End time of the appointment.\n  - Examination_Room: Room where the examination takes place.\n\nTable Block:\n- Contains information about blocks within a facility.\n- Columns:\n  - BlockFloor: Floor of the block.\n  - BlockCode: Code identifying the block.\n\nTable Department:\n- Stores data related to different departments.\n- Columns:\n  - Department_ID: Unique identifier for each department.\n  - Name: Name of the department.\n  - Head: Identifier of the head physician of the department.\n\nTable Medication:\n- Contains details about medications.\n- Columns:\n  - identifier: Unique identifier for each medication.\n  - Name: Name of the medication.\n  - Brand: Brand of the medication.\n  - details: Additional details about the medication.\n\nTable Nurse:\n- Contains information about nurses.\n- Columns:\n  - Employee_ID: Unique identifier for each nurse.\n  - Name: Name of the nurse.\n  - Position: Position or role of the nurse.\n  - Registered: Indicates if the nurse is registered.\n  - SSN: Social Security Number of the nurse.\n\nTable On_Call:\n- Stores data about nurses on call.\n- Columns:\n  - Nurse: Identifier of the nurse on call.\n  - BlockFloor: Floor of the block where the nurse is on call.\n  - BlockCode: Code identifying the block where the nurse is on call.\n  - OnCallStart: Start time of the on-call shift.\n  - OnCallEnd: End time of the on-call shift.\n\nTable Patient:\n- Contains details about patients.\n- Columns:\n  - SSN: Social Security Number of the patient.\n  - Name: Name of the patient.\n  - Address: Address of the patient.\n  - Phone_number: Phone number of the patient.\n  - Insurance_ID: Identifier of the patient's insurance.\n  - PCP: Identifier of the patient's primary care physician.\n\nTable Physician:\n- Stores information about physicians.\n- Columns:\n  - Employee_ID: Unique identifier for each physician.\n  - Name: Name of the physician.\n  - Position: Position or specialty of the physician.\n  - SSN: Social Security Number of the physician.\n\nTable Prescribes:\n- Contains data about prescriptions made by physicians.\n- Columns:\n  - Physician: Identifier of the prescribing physician.\n  - Patient: Identifier of the patient receiving the prescription.\n  - Medication: Identifier of the prescribed medication.\n  - Date: Date of the prescription.\n  - Appointment: Identifier of the appointment associated with the prescription.\n  - dosage: Dosage of the medication prescribed.\n\nTable Procedures:\n- Stores information about medical procedures.\n- Columns:\n  - identifier: Unique identifier for each procedure.\n  - Name: Name of the procedure.\n  - Cost: Cost of the procedure.\n\nTable Room:\n- Contains details about rooms within the facility.\n- Columns:\n  - Room_Number: Identifier for each room.\n  - Room_Type: Type or category of the room.\n  - BlockFloor: Floor where the room is located.\n  - BlockCode: Code identifying the block where the room is situated.\n  - Unavailable: Indicates if the room is currently unavailable.\n\nTable Stay:\n- Stores data about patient stays in rooms.\n- Columns:\n  - Stay_ID: Unique identifier for each stay.\n  - Patient: Identifier of the patient staying.\n  - Room: Identifier of the room where the patient is staying.\n  - Stay_Start: Start date of the stay.\n  - Stay_End: End date of the stay.\n\nTable Trained_In:\n- Contains information about physicians trained in specific treatments.\n- Columns:\n  - Physician: Identifier of the trained physician.\n  - Treatment: Identifier of the treatment the physician is trained in.\n  - Certification_Date: Date of certification.\n  - Certification_Expires: Expiry date of the certification.\n\nTable Undergoes:\n- Stores data about patients undergoing medical procedures.\n- Columns:\n  - Patient: Identifier of the patient undergoing the procedure.\n  - Procedures: Identifier of the procedure being undergone.\n  - Stay: Identifier of the stay during which the procedure is performed.\n  - DateUndergoes: Date when the procedure is undergone.\n  - Physician: Identifier of the physician performing the procedure.\n  - Assisting_Nurse: Identifier of the nurse assisting during the procedure.\n\nForeign Keys:\n- Department.Head references Physician.Employee_ID, linking department heads to physicians.\n- Affiliated_With.Department references Department.Department_ID, establishing a relationship between affiliations and departments.\n- Affiliated_With.Physician references Physician.Employee_ID, connecting affiliations to physicians.\n- Trained_In.Treatment references Procedures.identifier, linking trained treatments to procedures.\n- Trained_In.Physician references Physician.Employee_ID, establishing a relationship between trained physicians and physicians.\n- Patient.PCP references Physician.Employee_ID, connecting patients to their primary care physicians.\n- Appointment.Physician references Physician.Employee_ID, linking appointments to physicians.\n- Appointment.PrepNurse references Nurse.Employee_ID, establishing a relationship between appointments and prep nurses.\n- Appointment.Patient references Patient.SSN, connecting appointments to patients.\n- Prescribes.Appointment references Appointment.Appointment_ID, linking prescriptions to appointments.\n- Prescribes.Medication references Medication.identifier, connecting prescriptions to medications.\n- Prescribes.Patient references Patient.SSN, establishing a relationship between prescriptions and patients.\n- Prescribes.Physician references Physician.Employee_ID, linking prescriptions to physicians.\n- Room.BlockFloor references Block.BlockFloor, connecting rooms to block floors.\n- Room.BlockCode references Block.BlockCode, establishing a relationship between rooms and blocks.\n- On_Call.BlockFloor references Block.BlockFloor, linking on-call shifts to block floors.\n- On_Call.BlockCode references Block.BlockCode, connecting on-call shifts to blocks.\n- On_Call.Nurse references Nurse.Employee_ID, establishing a relationship between on-call shifts and nurses.\n- Stay.Room references Room.Room_Number, linking stays to rooms.\n- Stay.Patient references Patient.SSN, connecting stays to patients.\n- Undergoes.Assisting_Nurse references Nurse.Employee_ID, establishing a relationship between procedures and assisting nurses.\n- Undergoes.Physician references Physician.Employee_ID, linking procedures to performing physicians.\n- Undergoes.Stay references Stay.Stay_ID, connecting procedures to stays.\n- Undergoes.Procedures references Procedures.identifier, establishing a relationship between procedures and medical procedures.\n- Undergoes.Patient references Patient.SSN, linking procedures to patients.",
    "hr_1_robust": "Table countries:\n- This table contains information about different countries.\n- Columns:\n  - COUNTRYID: Unique identifier for each country.\n  - COUNTRYNAME: Name of the country.\n  - REGIONID: Foreign key referencing the id of the region in the regions table.\n\nTable departments:\n- Stores data related to different departments within an organization.\n- Columns:\n  - Dept_ID: Unique identifier for each department.\n  - Dept_NAME: Name of the department.\n  - Manager_ID: Identifier of the manager of the department.\n  - Location_ID: Identifier of the location where the department is situated.\n\nTable employees:\n- Contains details about employees working in the organization.\n- Columns:\n  - employee_id: Unique identifier for each employee.\n  - Fname: First name of the employee.\n  - Lname: Last name of the employee.\n  - Email_address: Email address of the employee.\n  - phone_number: Phone number of the employee.\n  - date_of_hire: Date when the employee was hired.\n  - JOB_ID: Identifier of the job role of the employee.\n  - wage: Salary of the employee.\n  - COMMISSION_PCT: Commission percentage for the employee.\n  - Manager_ID: Identifier of the manager of the employee.\n  - Dept_ID: Identifier of the department to which the employee belongs.\n\nTable job_history:\n- Stores historical data of job changes for employees.\n- Columns:\n  - employee_id: Identifier of the employee.\n  - START_DATE: Start date of the job role.\n  - END_DATE: End date of the job role.\n  - JOB_ID: Identifier of the job role.\n  - Dept_ID: Identifier of the department during the job role.\n\nTable jobs:\n- Contains information about different job roles.\n- Columns:\n  - JOB_ID: Unique identifier for each job role.\n  - JOB_TITLE: Title of the job role.\n  - minimum_salary: Minimum salary for the job role.\n  - maximum_salary: Maximum salary for the job role.\n\nTable locations:\n- Stores details about different locations.\n- Columns:\n  - Location_ID: Unique identifier for each location.\n  - STREET_ADDRESS: Street address of the location.\n  - POSTAL_CODE: Postal code of the location.\n  - CITY: City where the location is situated.\n  - STATE_PROVINCE: State or province of the location.\n  - COUNTRYID: Foreign key referencing the id of the country in the countries table.\n\nTable regions:\n- Contains information about different regions.\n- Columns:\n  - REGIONID: Unique identifier for each region.\n  - REGIONNAME: Name of the region.\n\nForeign Keys:\n- countries.REGIONID references regions.REGIONID, establishing a relationship between countries and regions.\n- employees.JOB_ID references jobs.JOB_ID, linking employees to specific job roles.\n- employees.Dept_ID references departments.Dept_ID, connecting employees to their respective departments.\n- job_history.JOB_ID references jobs.JOB_ID, linking job history to specific job roles.\n- job_history.Dept_ID references departments.Dept_ID, connecting job history to departments.\n- job_history.employee_id references employees.employee_id, establishing a relationship between job history and employees.\n- locations.COUNTRYID references countries.COUNTRYID, linking locations to specific countries.",
    "icfp_1_robust": "Table Authors:\n- Contains information about authors of papers.\n- Columns:\n  - authID: Unique identifier for each author.\n  - lname: Last name of the author.\n  - fname: First name of the author.\n\nTable Authorship:\n- Stores the relationship between authors, institutions, and papers.\n- Columns:\n  - authID: Identifier of the author.\n  - instID: Identifier of the institution to which the author is affiliated.\n  - paperID: Identifier of the paper.\n  - authOrder: Order of authorship for the paper.\n\nTable Inst:\n- Contains details about institutions.\n- Columns:\n  - instID: Unique identifier for each institution.\n  - name: Name of the institution.\n  - country: Country where the institution is located.\n\nTable Papers:\n- Stores information about papers.\n- Columns:\n  - paperID: Unique identifier for each paper.\n  - title: Title of the paper.\n\nForeign Keys:\n- Authorship.paperID references Papers.paperID, establishing a relationship between authorship and papers.\n- Authorship.instID references Inst.instID, linking authorship to specific institutions.\n- Authorship.authID references Authors.authID, connecting authorship to authors.",
    "imdb_robust": "Table actor:\n- Contains information about actors.\n- Columns:\n  - actor_id: Unique identifier for each actor.\n  - sex: Gender of the actor.\n  - name: Name of the actor.\n  - nationality: Nationality of the actor.\n  - birthplace: Birthplace of the actor.\n  - birth_year: Birth year of the actor.\n\nTable cast:\n- Stores data about the cast of movies or TV series.\n- Columns:\n  - id: Unique identifier for each cast entry.\n  - ms_id: Identifier of the movie or TV series.\n  - actor_id: Identifier of the actor in the cast.\n  - role: Role played by the actor in the movie or TV series.\n\nTable classification:\n- Contains information about the classification of movies or TV series.\n- Columns:\n  - id: Unique identifier for each classification entry.\n  - ms_id: Identifier of the movie or TV series.\n  - genre_id: Identifier of the genre of the movie or TV series.\n\nTable company:\n- Stores details about production companies.\n- Columns:\n  - id: Unique identifier for each company.\n  - name: Name of the company.\n  - country_code: Code representing the country where the company is located.\n\nTable copyright:\n- Contains copyright information related to movies or TV series.\n- Columns:\n  - id: Unique identifier for each copyright entry.\n  - ms_id: Identifier of the movie or TV series.\n  - copyright_id: Identifier of the copyright.\n\nTable directed_by:\n- Stores data about the directors of movies or TV series.\n- Columns:\n  - id: Unique identifier for each directed_by entry.\n  - ms_id: Identifier of the movie or TV series.\n  - director_id: Identifier of the director.\n\nTable director:\n- Contains information about directors.\n- Columns:\n  - director_id: Unique identifier for each director.\n  - sex: Gender of the director.\n  - name: Name of the director.\n  - nationality: Nationality of the director.\n  - birthplace: Birthplace of the director.\n  - birth_year: Birth year of the director.\n\nTable genre:\n- Stores different genres of movies or TV series.\n- Columns:\n  - genre_id: Unique identifier for each genre.\n  - genre: Genre of the movie or TV series.\n\nTable keyword:\n- Contains keywords related to movies or TV series.\n- Columns:\n  - id: Unique identifier for each keyword.\n  - keyword: Keyword associated with the movie or TV series.\n\nTable made_by:\n- Stores information about the production of movies or TV series.\n- Columns:\n  - id: Unique identifier for each made_by entry.\n  - ms_id: Identifier of the movie or TV series.\n  - producer_id: Identifier of the producer.\n\nTable movie:\n- Contains details about movies.\n- Columns:\n  - movie_id: Unique identifier for each movie.\n  - title: Title of the movie.\n  - release_year: Year when the movie was released.\n  - title_aka: Alternative title of the movie.\n  - budget: Budget of the movie.\n\nTable producer:\n- Stores information about producers.\n- Columns:\n  - producer_id: Unique identifier for each producer.\n  - sex: Gender of the producer.\n  - name: Name of the producer.\n  - nationality: Nationality of the producer.\n  - birthplace: Birthplace of the producer.\n  - birth_year: Birth year of the producer.\n\nTable tags:\n- Contains tags associated with movies or TV series.\n- Columns:\n  - id: Unique identifier for each tag.\n  - ms_id: Identifier of the movie or TV series.\n  - k_id: Keyword identifier.\n\nTable tv_series:\n- Stores details about TV series.\n- Columns:\n  - s_id: Unique identifier for each TV series.\n  - title: Title of the TV series.\n  - release_year: Year when the TV series was released.\n  - num_of_seasons: Number of seasons in the TV series.\n  - num_of_episodes: Number of episodes in the TV series.\n  - title_aka: Alternative title of the TV series.\n  - budget: Budget of the TV series.\n\nTable writer:\n- Contains information about writers.\n- Columns:\n  - writer_id: Unique identifier for each writer.\n  - sex: Gender of the writer.\n  - name: Name of the writer.\n  - nationality: Nationality of the writer.\n  - num_of_episodes: Number of episodes written by the writer.\n  - birthplace: Birthplace of the writer.\n  - birth_year: Birth year of the writer.\n\nTable written_by:\n- Stores data about the writers of movies or TV series.\n- Columns:\n  - id: Unique identifier for each written_by entry.\n  - ms_id: Identifier of the movie or TV series.\n  - writer_id: Identifier of the writer.\n\nForeign Keys:\n- cast.ms_id references copyright.ms_id, linking cast to copyright information.\n- cast.actor_id references actor.actor_id, connecting cast to actors.\n- classification.ms_id references copyright.ms_id, linking classification to copyright information.\n- classification.genre_id references genre.genre_id, establishing a relationship between classification and genres.\n- directed_by.director_id references director.director_id, linking directed_by to directors.\n- directed_by.ms_id references copyright.ms_id, establishing a relationship between directed_by and copyright information.\n- made_by.producer_id references producer.producer_id, connecting made_by to producers.\n- made_by.ms_id references copyright.ms_id, linking made_by to copyright information.\n- tags.ms_id references copyright.ms_id, establishing a relationship between tags and copyright information.\n- written_by.writer_id references writer.writer_id, connecting written_by to writers.\n- written_by.ms_id references copyright.ms_id, linking written_by to copyright information.",
    "inn_1_robust": "Table Reservations:\n- Contains information about reservations made for rooms.\n- Columns:\n  - Code: Unique reservation code.\n  - Room: Identifier of the room reserved.\n  - Check_In: Date of check-in for the reservation.\n  - Check_Out: Date of check-out for the reservation.\n  - Rate: Rate of the reservation.\n  - Lname: Last name of the person making the reservation.\n  - Fname: First name of the person making the reservation.\n  - Adults: Number of adults included in the reservation.\n  - Kids: Number of kids included in the reservation.\n\nTable Rooms:\n- Stores details about different rooms available for reservation.\n- Columns:\n  - Room_Id: Unique identifier for each room.\n  - room_Name: Name or identifier of the room.\n  - beds: Number of beds in the room.\n  - bed_Type: Type of bed in the room.\n  - max_Occupancy: Maximum occupancy allowed in the room.\n  - basePrice: Base price of the room.\n  - decor: Decor style of the room.\n\nForeign Keys:\n- Reservations.Room references Rooms.Room_Id, establishing a relationship between reservations and rooms.",
    "insurance_and_eClaims_robust": "Table Claim_Headers:\n- Contains information about claim headers.\n- Columns:\n  - Claim_Header_ID: Unique identifier for each claim header.\n  - Claim_Status_Code: Code representing the status of the claim.\n  - Claim_Type_Code: Code indicating the type of claim.\n  - PolicyID: Identifier of the policy associated with the claim.\n  - Date_of_Claim: Date when the claim was made.\n  - Date_of_Settlement: Date of claim settlement.\n  - Amount_Claimed: Total amount claimed.\n  - Amount_Paid: Total amount paid for the claim.\n\nTable Claims_Documents:\n- Stores details about documents related to claims.\n- Columns:\n  - ClaimID: Identifier of the claim associated with the document.\n  - Document_Type_Code: Code representing the type of document.\n  - Created_by_Staff_ID: Identifier of the staff member who created the document.\n  - CreatedDate: Date when the document was created.\n\nTable Claims_Processing:\n- Contains data related to claim processing.\n- Columns:\n  - Claim_Processing_ID: Unique identifier for each claim processing entry.\n  - ClaimID: Identifier of the claim being processed.\n  - Claim_Outcome_Code: Code indicating the outcome of claim processing.\n  - Claim_Stage_ID: Identifier of the stage of claim processing.\n  - StaffID: Identifier of the staff member handling the claim processing.\n\nTable Claims_Processing_Stages:\n- Stores information about different stages in the claim processing workflow.\n- Columns:\n  - Claim_Stage_ID: Unique identifier for each claim processing stage.\n  - Next_Claim_Stage_ID: Identifier of the next stage in the claim processing workflow.\n  - Claim_Status_Name: Name of the claim status associated with the stage.\n  - Claim_Status_information: Additional information about the claim status.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - CustomerID: Unique identifier for each customer.\n  - Customer_Information: Information about the customer.\n\nTable Policies:\n- Stores information about insurance policies.\n- Columns:\n  - PolicyID: Unique identifier for each policy.\n  - CustomerID: Identifier of the customer associated with the policy.\n  - Policy_Type_Code: Code representing the type of policy.\n  - StartDate: Start date of the policy.\n  - End_Date: End date of the policy.\n\nTable Staff:\n- Contains information about staff members.\n- Columns:\n  - StaffID: Unique identifier for each staff member.\n  - Staff_Information: Information about the staff member.\n\nForeign Keys:\n- Policies.CustomerID references Customers.CustomerID, establishing a relationship between policies and customers.\n- Claim_Headers.PolicyID references Policies.PolicyID, linking claim headers to specific policies.\n- Claims_Documents.Created_by_Staff_ID references Staff.StaffID, connecting documents to the staff member who created them.\n- Claims_Documents.ClaimID references Claim_Headers.Claim_Header_ID, linking documents to specific claims.\n- Claims_Processing.StaffID references Staff.StaffID, establishing a relationship between claim processing and staff members.\n- Claims_Processing.ClaimID references Claim_Headers.Claim_Header_ID, linking claim processing to specific claims.",
    "insurance_fnol_robust": "Table Available_Policies:\n- Contains information about the available insurance policies.\n- Columns:\n  - PolicyID: Unique identifier for each policy.\n  - policy_type_code: Code representing the type of policy.\n  - CustomerPhone: Phone number of the customer associated with the policy.\n\nTable Claims:\n- Stores data related to insurance claims.\n- Columns:\n  - ClaimID: Unique identifier for each claim.\n  - First_Notification_of_Loss_ID: Identifier of the first notification of loss associated with the claim.\n  - Effective_Date: Date when the claim became effective.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - CustomerID: Unique identifier for each customer.\n  - CustomerName: Name of the customer.\n\nTable Customers_Policies:\n- Represents the relationship between customers and policies.\n- Columns:\n  - CustomerID: Identifier of the customer.\n  - PolicyID: Identifier of the policy.\n  - DateOpened: Date when the policy was opened.\n  - DateClosed: Date when the policy was closed.\n\nTable First_Notification_of_Loss:\n- Stores information about the first notification of loss for policies.\n- Columns:\n  - First_Notification_of_Loss_ID: Unique identifier for each notification of loss.\n  - CustomerID: Identifier of the customer associated with the notification.\n  - PolicyID: Identifier of the policy associated with the notification.\n  - ServiceID: Identifier of the service related to the notification.\n\nTable Services:\n- Contains details about different services.\n- Columns:\n  - ServiceID: Unique identifier for each service.\n  - ServiceName: Name of the service.\n\nTable Settlements:\n- Stores data related to claim settlements.\n- Columns:\n  - SettlementID: Unique identifier for each settlement.\n  - ClaimID: Identifier of the claim associated with the settlement.\n  - Effective_Date: Date when the settlement was effective.\n  - Settlement_Amount: Amount of the settlement.\n\nForeign Keys:\n- Customers_Policies.PolicyID references Available_Policies.PolicyID, linking customers' policies to available policies.\n- Customers_Policies.CustomerID references Customers.CustomerID, establishing a relationship between customers' policies and customers.\n- First_Notification_of_Loss.CustomerID references Customers_Policies.CustomerID, connecting first notifications of loss to customers.\n- First_Notification_of_Loss.PolicyID references Customers_Policies.PolicyID, linking first notifications of loss to policies.\n- First_Notification_of_Loss.ServiceID references Services.ServiceID, establishing a relationship between first notifications of loss and services.\n- Claims.First_Notification_of_Loss_ID references First_Notification_of_Loss.First_Notification_of_Loss_ID, linking claims to first notifications of loss.\n- Settlements.ClaimID references Claims.ClaimID, connecting settlements to claims.",
    "insurance_policies_robust": "Table Claims:\n- Contains information about insurance claims made by customers.\n- Columns:\n  - Claim_ID: Unique identifier for each claim.\n  - Policy_ID: Identifier of the policy associated with the claim.\n  - Claim_Made_Date: Date when the claim was made.\n  - Claim_Settled_Date: Date when the claim was settled.\n  - Claimed_Amount: Amount claimed in the insurance claim.\n  - Settled_Amount: Amount settled for the claim.\n\nTable Customer_Policies:\n- Stores details about policies held by customers.\n- Columns:\n  - Policy_ID: Unique identifier for each policy.\n  - Customer_ID: Identifier of the customer associated with the policy.\n  - Policy_Type_Code: Code representing the type of policy.\n  - Start_Date: Start date of the policy.\n  - End_Date: End date of the policy.\n\nTable Customers:\n- Contains information about customers.\n- Columns:\n  - Customer_ID: Unique identifier for each customer.\n  - Customer_information: Information about the customer.\n\nTable Payments:\n- Stores data related to payments made.\n- Columns:\n  - Payment_ID: Unique identifier for each payment.\n  - Settlement_ID: Identifier of the settlement associated with the payment.\n  - Payment_Method_Code: Code representing the payment method.\n  - Date_Payment_Made: Date when the payment was made.\n  - Payment_Amount: Amount of the payment.\n\nTable Settlements:\n- Contains details about claim settlements.\n- Columns:\n  - Settlement_ID: Unique identifier for each settlement.\n  - Claim_ID: Identifier of the claim associated with the settlement.\n  - Claim_Made_Date: Date when the claim was made for the settlement.\n  - Claim_Settled_Date: Date when the claim was settled for the settlement.\n  - Claimed_Amount: Amount claimed in the settlement.\n  - Settled_Amount: Amount settled in the settlement.\n  - Customer_Policy_ID: Identifier of the customer policy associated with the settlement.\n\nForeign Keys:\n- Customer_Policies.Customer_ID references Customers.Customer_ID, establishing a relationship between customer policies and customers.\n- Claims.Policy_ID references Customer_Policies.Policy_ID, linking claims to specific policies.\n- Settlements.Claim_ID references Claims.Claim_ID, connecting settlements to specific claims.\n- Payments.Settlement_ID references Settlements.Settlement_ID, linking payments to settlements.",
    "journal_committee_robust": "Table editor:\n- Contains information about editors.\n- Columns:\n  - EditorID: Unique identifier for each editor.\n  - Name: Name of the editor.\n  - Age: Age of the editor.\n\nTable journal:\n- Stores data related to journals.\n- Columns:\n  - JournalID: Unique identifier for each journal.\n  - Date: Date of the journal.\n  - Theme: Theme of the journal.\n  - Sales: Sales data related to the journal.\n\nTable journal_committee:\n- Contains details about the committee members associated with journals.\n- Columns:\n  - EditorID: Identifier of the editor in the committee.\n  - JournalID: Identifier of the journal in the committee.\n  - Work_Type: Type of work assigned to the committee member.\n\nForeign Keys:\n- journal_committee.JournalID references journal.JournalID, establishing a relationship between journal_committee and journal.\n- journal_committee.EditorID references editor.EditorID, linking journal_committee to specific editors.",
    "loan_1_robust": "Table bank:\n- Contains information about different bank branches.\n- Columns:\n  - branch_ID: Unique identifier for each bank branch.\n  - bname: Name of the bank branch.\n  - no_of_customers: Number of customers associated with the branch.\n  - city: City where the branch is located.\n  - state: State where the branch is situated.\n\nTable customer:\n- Stores data related to bank customers.\n- Columns:\n  - cust_ID: Unique identifier for each customer.\n  - cust_name: Name of the customer.\n  - acc_type: Type of account the customer holds.\n  - acc_bal: Account balance of the customer.\n  - no_of_loans: Number of loans the customer has.\n  - credit_score: Credit score of the customer.\n  - branch_ID: Identifier of the bank branch to which the customer is associated.\n  - state: State where the customer resides.\n\nTable loan:\n- Contains details about loans provided by the bank.\n- Columns:\n  - loan_ID: Unique identifier for each loan.\n  - loan_type: Type of loan.\n  - cust_ID: Identifier of the customer associated with the loan.\n  - branch_ID: Identifier of the bank branch providing the loan.\n  - amount: Amount of the loan.\n\nForeign Keys:\n- customer.branch_ID references bank.branch_ID, establishing a relationship between customers and bank branches.\n- loan.branch_ID references bank.branch_ID, linking loans to the respective bank branches.",
    "local_govt_and_lot_robust": "Table Customer_Event_Notes:\n- Contains notes related to customer events.\n- Columns:\n  - Customer_Event_Note_ID: Unique identifier for each customer event note.\n  - Customer_Event_ID: Identifier of the customer event associated with the note.\n  - service_type_code: Code representing the type of service.\n  - resIDent_ID: Identifier of the resident.\n  - property_ID: Identifier of the property.\n  - date_moved_in: Date when the resident moved into the property.\n\nTable Customer_Events:\n- Stores information about customer events.\n- Columns:\n  - Customer_Event_ID: Unique identifier for each customer event.\n  - customer_ID: Identifier of the customer associated with the event.\n  - date_moved_in: Date when the customer moved in.\n  - property_ID: Identifier of the property related to the event.\n  - resIDent_ID: Identifier of the resident involved in the event.\n  - thing_ID: Identifier of the thing associated with the event.\n\nTable Customers:\n- Contains details about customers.\n- Columns:\n  - customer_ID: Unique identifier for each customer.\n  - customer_information: Information about the customer.\n\nTable Organizations:\n- Stores information about different organizations.\n- Columns:\n  - organization_ID: Unique identifier for each organization.\n  - parent_organization_ID: Identifier of the parent organization.\n  - organization_information: Information about the organization.\n\nTable Properties:\n- Contains details about properties.\n- Columns:\n  - property_ID: Unique identifier for each property.\n  - property_type_code: Code representing the type of property.\n  - property_address: Address of the property.\n  - additional_information: Additional information about the property.\n\nTable ResIDents:\n- Stores data related to residents.\n- Columns:\n  - resIDent_ID: Unique identifier for each resident.\n  - property_ID: Identifier of the property where the resident resides.\n  - date_moved_in: Date when the resident moved into the property.\n  - date_moved_out: Date when the resident moved out.\n  - additional_information: Additional information about the resident.\n\nTable ResIDents_Services:\n- Contains information about services provided to residents.\n- Columns:\n  - resIDent_ID: Identifier of the resident receiving the service.\n  - service_ID: Identifier of the service provided.\n  - date_moved_in: Date when the resident moved in.\n  - property_ID: Identifier of the property where the service is provided.\n  - date_requested: Date when the service was requested.\n  - date_provIDed: Date when the service was provided.\n  - additional_information: Additional information about the service.\n\nTable Services:\n- Stores details about different services.\n- Columns:\n  - service_ID: Unique identifier for each service.\n  - organization_ID: Identifier of the organization providing the service.\n  - service_type_code: Code representing the type of service.\n  - service_information: Information about the service.\n\nTable Things:\n- Contains information about different things.\n- Columns:\n  - thing_ID: Unique identifier for each thing.\n  - organization_ID: Identifier of the organization related to the thing.\n  - Type_of_Thing_Code: Code representing the type of thing.\n  - service_type_code: Code representing the type of service related to the thing.\n  - service_information: Information about the service related to the thing.\n\nTable Timed_Locations_of_Things:\n- Stores timed locations of things.\n- Columns:\n  - thing_ID: Identifier of the thing.\n  - Date_and_Time: Date and time of the location.\n  - Location_Code: Code representing the location.\n\nTable Timed_Status_of_Things:\n- Contains timed status information of things.\n- Columns:\n  - thing_ID: Identifier of the thing.\n  - Date_and_Date: Date and status of the thing.\n  - Status_of_Thing_Code: Code representing the status of the thing.\n\nForeign Keys:\n- ResIDents.property_ID references Properties.property_ID, establishing a relationship between residents and properties.\n- Services.organization_ID references Organizations.organization_ID, linking services to specific organizations.\n- ResIDents_Services.resIDent_ID references ResIDents.resIDent_ID, connecting resident services to residents.\n- ResIDents_Services.property_ID references ResIDents.property_ID, linking resident services to properties.\n- ResIDents_Services.date_moved_in references ResIDents.date_moved_in, establishing a relationship between resident services and move-in dates.\n- ResIDents_Services.service_ID references Services.service_ID, linking resident services to specific services.\n- Things.organization_ID references Organizations.organization_ID, connecting things to organizations.\n- Customer_Events.resIDent_ID references ResIDents.resIDent_ID, linking customer events to residents.\n- Customer_Events.property_ID references ResIDents.property_ID, connecting customer events to properties.\n- Customer_Events.date_moved_in references ResIDents.date_moved_in, establishing a relationship between customer events and move-in dates.\n- Customer_Events.customer_ID references Customers.customer_ID, linking customer events to customers.\n- Customer_Events.thing_ID references Things.thing_ID, connecting customer events to things.\n- Customer_Event_Notes.Customer_Event_ID references Customer_Events.Customer_Event_ID, establishing a relationship between event notes and customer events.\n- Timed_Status_of_Things.thing_ID references Things.thing_ID, linking timed status information to things.\n- Timed_Locations_of_Things.thing_ID references Things.thing_ID, connecting timed locations to things.",
    "local_govt_in_alabama_robust": "Table Events:\n- Contains information about various events.\n- Columns:\n  - EventID: Unique identifier for each event.\n  - ServiceID: Identifier of the service associated with the event.\n  - Event_Information: Details or information related to the event.\n\nTable Participants:\n- Stores data about participants involved in events.\n- Columns:\n  - ParticipantID: Unique identifier for each participant.\n  - Participant_Type_Code: Code representing the type of participant.\n  - Participant_Information: Additional information about the participant.\n\nTable Participants_in_Events:\n- Represents the relationship between events and participants.\n- Columns:\n  - EventID: Identifier of the event.\n  - ParticipantID: Identifier of the participant involved in the event.\n\nTable Services:\n- Contains details about different services.\n- Columns:\n  - ServiceID: Unique identifier for each service.\n  - Service_Type_Code: Code representing the type of service.\n\nForeign Keys:\n- Events.ServiceID references Services.ServiceID, linking events to specific services.\n- Participants_in_Events.EventID references Events.EventID, establishing a relationship between participants in events and events.\n- Participants_in_Events.ParticipantID references Participants.ParticipantID, connecting participants in events to specific participants.",
    "local_govt_mdm_robust": "Table Benefits_Overpayments:\n- Contains data related to benefits overpayments.\n- Columns:\n  - council_tax_id: Identifier for council tax associated with the overpayment.\n  - Customer_Master_Index_cross_ref_id: Cross-reference identifier in the Customer Master Index.\n\nTable Business_Rates:\n- Stores information about business rates.\n- Columns:\n  - business_rates_id: Identifier for business rates data.\n  - Customer_Master_Index_cross_ref_id: Cross-reference identifier in the Customer Master Index.\n\nTable CMI_Cross_References:\n- Contains cross-references for the Customer Master Index.\n- Columns:\n  - Customer_Master_Index_cross_ref_id: Unique identifier for cross-references.\n  - master_customer_id: Identifier for the master customer.\n  - source_system_code: Code indicating the source system.\n\nTable Council_Tax:\n- Stores data related to council tax.\n- Columns:\n  - council_tax_id: Identifier for council tax data.\n  - Customer_Master_Index_cross_ref_id: Cross-reference identifier in the Customer Master Index.\n\nTable Customer_Master_Index:\n- Contains details about the master customer index.\n- Columns:\n  - master_customer_id: Unique identifier for the master customer.\n  - Customer_Master_Index_details: Details related to the Customer Master Index.\n\nTable Electoral_Register:\n- Contains information from the electoral register.\n- Columns:\n  - electoral_register_id: Identifier for the electoral register data.\n  - Customer_Master_Index_cross_ref_id: Cross-reference identifier in the Customer Master Index.\n\nTable Parking_Fines:\n- Stores data related to parking fines.\n- Columns:\n  - council_tax_id: Identifier for council tax associated with the parking fine.\n  - Customer_Master_Index_cross_ref_id: Cross-reference identifier in the Customer Master Index.\n\nTable Rent_Arrears:\n- Contains information about rent arrears.\n- Columns:\n  - council_tax_id: Identifier for council tax associated with the rent arrears.\n  - Customer_Master_Index_cross_ref_id: Cross-reference identifier in the Customer Master Index.\n\nForeign Keys:\n- Council_Tax.Customer_Master_Index_cross_ref_id references CMI_Cross_References.Customer_Master_Index_cross_ref_id, establishing a relationship between Council Tax and Customer Master Index Cross References.\n- Business_Rates.Customer_Master_Index_cross_ref_id references CMI_Cross_References.Customer_Master_Index_cross_ref_id, linking Business Rates to Customer Master Index Cross References.\n- Benefits_Overpayments.Customer_Master_Index_cross_ref_id references CMI_Cross_References.Customer_Master_Index_cross_ref_id, connecting Benefits Overpayments to Customer Master Index Cross References.\n- Parking_Fines.Customer_Master_Index_cross_ref_id references CMI_Cross_References.Customer_Master_Index_cross_ref_id, establishing a relationship between Parking Fines and Customer Master Index Cross References.\n- Rent_Arrears.Customer_Master_Index_cross_ref_id references CMI_Cross_References.Customer_Master_Index_cross_ref_id, linking Rent Arrears to Customer Master Index Cross References.\n- Electoral_Register.Customer_Master_Index_cross_ref_id references CMI_Cross_References.Customer_Master_Index_cross_ref_id, connecting Electoral Register to Customer Master Index Cross References.",
    "machine_repair_robust": "Table machine:\n- Contains information about different machines.\n- Columns:\n  - MachineID: Unique identifier for each machine.\n  - Making_Year: Year when the machine was manufactured.\n  - Class: Classification of the machine.\n  - Team: Team associated with the machine.\n  - Machine_series: Series to which the machine belongs.\n  - value_points: Points assigned to the machine based on its value.\n  - quality_rank: Rank indicating the quality of the machine.\n\nTable repair:\n- Stores data related to repairs.\n- Columns:\n  - repair_ID: Unique identifier for each repair.\n  - name: Name of the repair.\n  - release: Release version of the repair.\n  - annotation: Additional notes or comments related to the repair.\n\nTable repair_assignment:\n- Contains assignments of repairs to technicians for specific machines.\n- Columns:\n  - technician_ID: Identifier of the technician assigned to the repair.\n  - repair_ID: Identifier of the repair being assigned.\n  - MachineID: Identifier of the machine for which the repair is assigned.\n\nTable technician:\n- Holds information about technicians.\n- Columns:\n  - technician_ID: Unique identifier for each technician.\n  - Name: Name of the technician.\n  - Team: Team to which the technician belongs.\n  - Starting_Year: Year when the technician started working.\n  - Age: Age of the technician.\n\nForeign Keys:\n- repair_assignment.MachineID references machine.MachineID, linking repair assignments to specific machines.\n- repair_assignment.repair_ID references repair.repair_ID, establishing a relationship between repair assignments and repairs.\n- repair_assignment.technician_ID references technician.technician_ID, connecting repair assignments to specific technicians.",
    "manufactory_1_robust": "Table Manufacturers:\n- Contains information about different manufacturers.\n- Columns:\n  - Code: Unique identifier for each manufacturer.\n  - Name: Name of the manufacturer.\n  - Headquarter: Location of the manufacturer's headquarters.\n  - Founder: Founder of the manufacturer.\n  - Income: Income generated by the manufacturer.\n\nTable Products:\n- Stores details about various products.\n- Columns:\n  - Code: Unique identifier for each product.\n  - Name: Name of the product.\n  - Price: Price of the product.\n  - Manufacturer: Identifier of the manufacturer of the product.\n\nForeign Keys:\n- Products.Manufacturer references Manufacturers.Code, establishing a relationship between products and manufacturers.",
    "manufacturer_robust": "Table furniture:\n- Contains information about different types of furniture.\n- Columns:\n  - Furniture_ID: Unique identifier for each piece of furniture.\n  - Name: Name of the furniture.\n  - Component_count: Number of components in the furniture.\n  - Market_Rate: Market rate of the furniture.\n\nTable furniture_manufacte:\n- Stores data related to the manufacturing of furniture.\n- Columns:\n  - Manufacturer_ID: Unique identifier for each manufacturer.\n  - Furniture_ID: Identifier of the furniture produced by the manufacturer.\n  - Price: Price of the furniture manufactured by the manufacturer.\n\nTable manufacturer:\n- Contains details about furniture manufacturers.\n- Columns:\n  - Manufacturer_ID: Unique identifier for each manufacturer.\n  - Open_Year: Year in which the manufacturer was established.\n  - Name: Name of the manufacturer.\n  - factory_count: Number of factories owned by the manufacturer.\n  - shop_count: Number of shops owned by the manufacturer.\n\nForeign Keys:\n- furniture_manufacte.Furniture_ID references furniture.Furniture_ID, linking furniture manufacturing to specific furniture items.\n- furniture_manufacte.Manufacturer_ID references manufacturer.Manufacturer_ID, establishing a relationship between furniture manufacturing and manufacturers.",
    "match_season_robust": "Table country:\n- Contains information about different countries.\n- Columns:\n  - Country_id: Unique identifier for each country.\n  - Country_name: Name of the country.\n  - Capital: Capital city of the country.\n  - Official_native_language: Official native language of the country.\n\nTable match_season:\n- Stores data related to match seasons, players, and teams.\n- Columns:\n  - Season: Season of the match.\n  - Player: Player participating in the match.\n  - Position: Position of the player in the match.\n  - Country: Country participating in the match.\n  - Team: Team to which the player belongs.\n  - Draft_Pick_Number: Number of the draft pick.\n  - Draft_Class: Class of the draft.\n  - College: College of the player.\n\nTable player:\n- Contains details about players.\n- Columns:\n  - PlayerID: Unique identifier for each player.\n  - Player: Name of the player.\n  - Years_Played: Number of years the player has played.\n  - Total_WL: Total win-loss record of the player.\n  - Singles_WL: Win-loss record in singles matches.\n  - Doubles_WL: Win-loss record in doubles matches.\n  - Team: Team to which the player belongs.\n\nTable team:\n- Stores information about different teams.\n- Columns:\n  - Team_ID: Unique identifier for each team.\n  - Name: Name of the team.\n\nForeign Keys:\n- match_season.Team references team.Team_ID, establishing a relationship between match_season and teams.\n- match_season.Country references country.Country_id, linking match_season to specific countries.\n- player.Team references team.Team_ID, connecting players to their respective teams.",
    "medicine_enzyme_interaction_robust": "Table enzyme:\n- Contains information about enzymes.\n- Columns:\n  - ID: Unique identifier for each enzyme.\n  - name: Name of the enzyme.\n  - site: Site information related to the enzyme.\n  - output: Output information of the enzyme.\n  - Chromosome: Chromosome associated with the enzyme.\n  - OMIM: OMIM (Online Mendelian Inheritance in Man) identifier for the enzyme.\n  - Porphyria: Porphyria information related to the enzyme.\n\nTable medicine:\n- Stores data related to medicines.\n- Columns:\n  - ID: Unique identifier for each medicine.\n  - name: Name of the medicine.\n  - Trade_Name: Trade name of the medicine.\n  - FDA_approved: Indicates whether the medicine is approved by the FDA (Food and Drug Administration).\n\nTable medicine_enzyme_interaction:\n- Represents the interactions between medicines and enzymes.\n- Columns:\n  - enzyme_ID: Identifier of the enzyme involved in the interaction.\n  - medicine_ID: Identifier of the medicine involved in the interaction.\n  - interaction_type: Type of interaction between the medicine and enzyme.\n\nForeign Keys:\n- medicine_enzyme_interaction.medicine_ID references medicine.ID, establishing a relationship between medicine_enzyme_interaction and medicines.\n- medicine_enzyme_interaction.enzyme_ID references enzyme.ID, linking medicine_enzyme_interaction to enzymes.",
    "mountain_photos_robust": "Table camera_lens:\n- Contains information about different camera lenses.\n- Columns:\n  - ID: Unique identifier for each camera lens.\n  - brand: Brand of the camera lens.\n  - name: Name of the camera lens.\n  - focal_length: Focal length of the lens.\n  - maximum_aperture: Maximum aperture of the lens.\n\nTable mountain:\n- Stores data related to various mountains.\n- Columns:\n  - ID: Unique identifier for each mountain.\n  - name: Name of the mountain.\n  - Height: Height of the mountain.\n  - Prominence: Prominence of the mountain.\n  - Range: Mountain range where the mountain is located.\n  - Country: Country in which the mountain is situated.\n\nTable photos:\n- Contains details about photos taken.\n- Columns:\n  - ID: Unique identifier for each photo.\n  - camera_lens_ID: Identifier of the camera lens used for the photo.\n  - mountain_ID: Identifier of the mountain in the photo.\n  - color: Color of the photo.\n  - name: Name of the photo.\n\nForeign Keys:\n- photos.mountain_ID references mountain.ID, establishing a relationship between photos and mountains.\n- photos.camera_lens_ID references camera_lens.ID, linking photos to the specific camera lenses used.",
    "movie_1_robust": "Table Movie:\n- Contains information about movies.\n- Columns:\n  - movie_ID: Unique identifier for each movie.\n  - title: Title of the movie.\n  - year: Year of release of the movie.\n  - director: Director of the movie.\n\nTable Rating:\n- Stores ratings given by reviewers to movies.\n- Columns:\n  - Reviewer_ID: Identifier of the reviewer.\n  - movie_ID: Identifier of the movie being rated.\n  - stars: Rating given in stars.\n  - ratingDate: Date when the rating was given.\n\nTable Reviewer:\n- Contains details about reviewers who rate movies.\n- Columns:\n  - Reviewer_ID: Unique identifier for each reviewer.\n  - name: Name of the reviewer.\n\nForeign Keys:\n- Rating.Reviewer_ID references Reviewer.Reviewer_ID, establishing a relationship between ratings and reviewers.\n- Rating.movie_ID references Movie.movie_ID, linking ratings to specific movies.",
    "museum_visit_robust": "Table museum:\n- Contains information about different museums.\n- Columns:\n  - Museum_ID: Unique identifier for each museum.\n  - Name: Name of the museum.\n  - Staff_Count: Number of staff working at the museum.\n  - Open_Year: Year when the museum was opened.\n\nTable visit:\n- Stores data related to visits made by visitors to museums.\n- Columns:\n  - Museum_ID: Identifier of the museum visited.\n  - visitor_ID: Identifier of the visitor.\n  - Ticket_count: Number of tickets purchased during the visit.\n  - Total_spent: Total amount spent by the visitor during the visit.\n\nTable visitor:\n- Contains details about visitors to museums.\n- Columns:\n  - ID: Unique identifier for each visitor.\n  - Name: Name of the visitor.\n  - Level_of_membership: Membership level of the visitor.\n  - Age: Age of the visitor.\n\nForeign Keys:\n- visit.visitor_ID references visitor.ID, establishing a relationship between visits and visitors.\n- visit.Museum_ID references museum.Museum_ID, linking visits to specific museums.",
    "musical_robust": "Table actor:\n- Contains information about actors involved in musicals.\n- Columns:\n  - Actor_ID: Unique identifier for each actor.\n  - Name: Name of the actor.\n  - Musical_ID: Identifier of the musical the actor is associated with.\n  - Character: Character played by the actor.\n  - Duration: Duration of the actor's performance.\n  - Age: Age of the actor.\n\nTable musical:\n- Stores data related to musical productions.\n- Columns:\n  - Musical_ID: Unique identifier for each musical.\n  - Name: Name of the musical.\n  - Year: Year of production.\n  - Prize: Prize associated with the musical.\n  - Genre: Genre of the musical.\n  - Nominee: Nominee information related to the musical.\n  - Result: Result of the musical.\n\nForeign Keys:\n- actor.Musical_ID references actor.Actor_ID, establishing a relationship between actors and musicals.",
    "music_1_robust": "Table artist:\n- Contains information about artists.\n- Columns:\n  - artist_name: Name of the artist.\n  - country: Country of origin of the artist.\n  - gender: Gender of the artist.\n  - preferred_genre: Preferred genre of the artist.\n\nTable files:\n- Stores details about files related to artists.\n- Columns:\n  - file_ID: Unique identifier for each file.\n  - artist_name: Name of the artist associated with the file.\n  - file_size: Size of the file.\n  - duration: Duration of the file.\n  - formats: Formats of the file.\n\nTable genre:\n- Contains information about different genres.\n- Columns:\n  - genre_name: Name of the genre.\n  - rating: Rating of the genre.\n  - most_popular_in: Location where the genre is most popular.\n\nTable song:\n- Stores data related to songs.\n- Columns:\n  - song_name: Name of the song.\n  - artist_name: Name of the artist who performed the song.\n  - country: Country associated with the song.\n  - file_ID: Identifier of the file associated with the song.\n  - genre_is: Genre of the song.\n  - rating: Rating of the song.\n  - languages: Languages in which the song is available.\n  - releasedate: Release date of the song.\n  - resolution: Resolution of the song.\n\nForeign Keys:\n- artist.preferred_genre references genre.genre_name, indicating the preferred genre of an artist.\n- files.artist_name references artist.artist_name, linking files to specific artists.\n- song.genre_is references genre.genre_name, connecting songs to specific genres.\n- song.artist_name references artist.artist_name, establishing a relationship between songs and artists.",
    "music_2_robust": "Table Albums:\n- Contains information about different albums.\n- Columns:\n  - AlbumID: Unique identifier for each album.\n  - Title: Title of the album.\n  - Year: Year of release of the album.\n  - Label: Label associated with the album.\n  - Type: Type of the album.\n\nTable Band:\n- Stores data related to bands or musical groups.\n- Columns:\n  - ID: Unique identifier for each band.\n  - Fname: First name of the band member.\n  - Lname: Last name of the band member.\n\nTable Instruments:\n- Contains details about the instruments used by band members.\n- Columns:\n  - SongID: Identifier of the song.\n  - BandmateID: Identifier of the band member.\n  - Instrument: Type of instrument used by the band member.\n\nTable Performance:\n- Stores information about performances by band members.\n- Columns:\n  - SongID: Identifier of the song.\n  - Bandmate: Identifier of the band member.\n  - Stage_Position: Position of the band member on stage during the performance.\n\nTable Songs:\n- Contains details about different songs.\n- Columns:\n  - SongID: Unique identifier for each song.\n  - Title: Title of the song.\n\nTable Tracklists:\n- Stores the tracklist information for albums.\n- Columns:\n  - AlbumID: Identifier of the album.\n  - Position: Position of the song in the tracklist.\n  - SongID: Identifier of the song in the tracklist.\n\nTable Vocals:\n- Contains information about vocals in songs.\n- Columns:\n  - SongID: Identifier of the song.\n  - Bandmate: Identifier of the band member providing vocals.\n  - Type: Type of vocals provided by the band member.\n\nForeign Keys:\n- Instruments.BandmateID references Band.ID, linking instruments to band members.\n- Instruments.SongID references Songs.SongID, connecting instruments to specific songs.\n- Performance.Bandmate references Band.ID, establishing a relationship between performance and band members.\n- Performance.SongID references Songs.SongID, linking performance to specific songs.\n- Tracklists.AlbumID references Albums.AlbumID, connecting tracklists to specific albums.\n- Tracklists.SongID references Songs.SongID, establishing a relationship between tracklists and songs.\n- Vocals.Bandmate references Band.ID, linking vocals to band members.\n- Vocals.SongID references Songs.SongID, establishing a relationship between vocals and songs.",
    "music_4_robust": "Table artist:\n- Contains information about different artists.\n- Columns:\n  - ArtistID: Unique identifier for each artist.\n  - Artist: Name of the artist.\n  - Age: Age of the artist.\n  - Famous_Title: Title of the artist's famous work.\n  - Famous_Release_date: Release date of the artist's famous work.\n\nTable music_festival:\n- Stores data related to music festivals.\n- Columns:\n  - ID: Unique identifier for each music festival.\n  - Music_Festival: Name of the music festival.\n  - event_date: Date of the music festival event.\n  - Category: Category of the music festival.\n  - Volume: Identifier of the volume associated with the festival.\n  - Result: Result of the music festival.\n\nTable volume:\n- Contains details about music volumes.\n- Columns:\n  - VolumeID: Unique identifier for each volume.\n  - Volume_Issue: Issue of the volume.\n  - Issue_Date: Date of the volume issue.\n  - Weeks_on_Top: Number of weeks the volume was on top.\n  - Song: Song included in the volume.\n  - ArtistID: Identifier of the artist associated with the volume.\n\nForeign Keys:\n- volume.ArtistID references artist.ArtistID, establishing a relationship between volumes and artists.\n- music_festival.Volume references volume.VolumeID, linking music festivals to specific volumes.",
    "network_1_robust": "Table Friend:\n- Contains information about friendships between students.\n- Columns:\n  - student_id: Identifier of the student who has a friend.\n  - friend_id: Identifier of the friend of the student.\n\nTable Highschooler:\n- Stores data related to high school students.\n- Columns:\n  - ID: Unique identifier for each high school student.\n  - name: Name of the high school student.\n  - grade: Grade level of the high school student.\n\nTable Likes:\n- Records data about students liking other students.\n- Columns:\n  - student_id: Identifier of the student who likes another student.\n  - liked_id: Identifier of the student who is liked by another student.\n\nForeign Keys:\n- Friend.friend_id references Highschooler.ID, establishing a relationship between friends and high school students.\n- Friend.student_id references Highschooler.ID, linking friends to high school students.\n- Likes.student_id references Highschooler.ID, connecting students who like others to high school students.\n- Likes.liked_id references Highschooler.ID, establishing a relationship between students who like others and high school students.",
    "network_2_robust": "Table Person:\n- Contains information about individuals.\n- Columns:\n  - name: Name of the person.\n  - Age: Age of the person.\n  - city: City where the person resides.\n  - sex: Gender of the person.\n  - job: Job role or occupation of the person.\n\nTable PersonFriend:\n- Stores data about friendships between individuals.\n- Columns:\n  - name: Name of the person.\n  - Friend: Name of the friend of the person.\n  - year: Year when the friendship was established.\n\nForeign Keys:\n- PersonFriend.Friend references Person.name, establishing a relationship between friends and individuals.\n- PersonFriend.name references Person.name, linking individuals to their friendships.",
    "news_report_robust": "Table event:\n- Contains information about different events.\n- Columns:\n  - Event_ID: Unique identifier for each event.\n  - Date: Date of the event.\n  - Location: Location where the event took place.\n  - Name: Name of the event.\n  - Event_Attendance: Number of attendees at the event.\n\nTable journalist:\n- Stores details about journalists.\n- Columns:\n  - journalistID: Unique identifier for each journalist.\n  - Name: Name of the journalist.\n  - Nationality: Nationality of the journalist.\n  - Age: Age of the journalist.\n  - Years_working: Number of years the journalist has been working.\n\nTable news_report:\n- Contains data related to news reports filed by journalists for events.\n- Columns:\n  - journalistID: Identifier of the journalist filing the news report.\n  - Event_ID: Identifier of the event for which the news report is filed.\n  - Work_Type: Type of work done by the journalist for the news report.\n\nForeign Keys:\n- news_report.Event_ID references event.Event_ID, linking news reports to specific events.\n- news_report.journalistID references journalist.journalistID, establishing a relationship between news reports and journalists.",
    "orchestra_robust": "Table conductor:\n- Contains information about conductors.\n- Columns:\n  - ConductorID: Unique identifier for each conductor.\n  - Name: Name of the conductor.\n  - Age: Age of the conductor.\n  - Nationality: Nationality of the conductor.\n  - Year_of_Work: Year when the conductor started working.\n\nTable orchestra:\n- Stores data related to orchestras.\n- Columns:\n  - OrchestraID: Unique identifier for each orchestra.\n  - Orchestra: Name of the orchestra.\n  - ConductorID: Identifier of the conductor leading the orchestra.\n  - Record_Company: Record company associated with the orchestra.\n  - Year_of_Founded: Year when the orchestra was founded.\n  - Major_Record_Format: Major record format used by the orchestra.\n\nTable performance:\n- Contains details about performances.\n- Columns:\n  - PerformanceID: Unique identifier for each performance.\n  - OrchestraID: Identifier of the orchestra performing.\n  - category: Category of the performance.\n  - tiDateme: Date of the performance.\n  - Official_ratings_millions: Official ratings in millions for the performance.\n  - Weekly_rank: Rank of the performance on a weekly basis.\n  - Share: Share percentage of the performance.\n\nTable show:\n- Stores information about shows.\n- Columns:\n  - ShowID: Unique identifier for each show.\n  - PerformanceID: Identifier of the performance associated with the show.\n  - is_first_show: Indicates if the show is the first of its kind.\n  - Result: Result of the show.\n  - Attendance: Attendance details of the show.\n\nForeign Keys:\n- orchestra.ConductorID references conductor.ConductorID, establishing a relationship between orchestras and conductors.\n- performance.OrchestraID references orchestra.OrchestraID, linking performances to specific orchestras.\n- show.PerformanceID references performance.PerformanceID, connecting shows to performances.",
    "party_host_robust": "Table host:\n- Contains information about hosts of parties.\n- Columns:\n  - HostID: Unique identifier for each host.\n  - Name: Name of the host.\n  - Nationality: Nationality of the host.\n  - Age: Age of the host.\n\nTable party:\n- Stores details about different parties.\n- Columns:\n  - PartyID: Unique identifier for each party.\n  - PartyTheme: Theme of the party.\n  - Location: Location of the party.\n  - First_year: First year the party was held.\n  - Last_year: Last year the party was held.\n  - hosts_count: Number of hosts for the party.\n\nTable party_host:\n- Represents the relationship between parties and hosts, indicating which host is in charge.\n- Columns:\n  - PartyID: Identifier of the party.\n  - HostID: Identifier of the host.\n  - Is_Main_in_Charge: Flag indicating if the host is the main person in charge of the party.\n\nForeign Keys:\n- party_host.PartyID references party.PartyID, establishing a link between party hosts and parties.\n- party_host.HostID references host.HostID, connecting party hosts to specific hosts.",
    "party_people_robust": "Table member:\n- Contains information about members.\n- Columns:\n  - MemberID: Unique identifier for each member.\n  - MemberName: Name of the member.\n  - PartyID: Identifier of the party the member belongs to.\n  - In_office: Indicates whether the member is currently in office.\n\nTable party:\n- Stores data related to political parties.\n- Columns:\n  - PartyID: Unique identifier for each party.\n  - Minister: Minister associated with the party.\n  - Took_office: Date when the party took office.\n  - Left_office: Date when the party left office.\n  - RegionID: Foreign key referencing the id of the region in the regions table.\n  - PartyName: Name of the party.\n\nTable party_events:\n- Contains details about events organized by parties.\n- Columns:\n  - EventID: Unique identifier for each event.\n  - EventName: Name of the event.\n  - PartyID: Identifier of the party hosting the event.\n  - Member_in_charge_ID: Identifier of the member in charge of the event.\n\nTable region:\n- Stores information about different regions.\n- Columns:\n  - RegionID: Unique identifier for each region.\n  - RegionName: Name of the region.\n  - Date: Date associated with the region.\n  - Label: Label for the region.\n  - Format: Format of the region data.\n  - Catalogue: Catalogue information related to the region.\n\nForeign Keys:\n- party.RegionID references region.RegionID, establishing a relationship between parties and regions.\n- member.PartyID references party.PartyID, linking members to their respective parties.\n- party_events.Member_in_charge_ID references member.MemberID, connecting event organizers to members.\n- party_events.PartyID references party.PartyID, linking events to specific parties.",
    "performance_attendance_robust": "Table member:\n- Contains information about members.\n- Columns:\n  - MemberID: Unique identifier for each member.\n  - Name: Name of the member.\n  - Nationality: Nationality of the member.\n  - Role: Role of the member.\n\nTable member_attendance:\n- Stores data related to member attendance at performances.\n- Columns:\n  - MemberID: Identifier of the member attending the performance.\n  - PerformanceID: Identifier of the performance.\n  - Pieces_count: Number of pieces performed by the member at the performance.\n\nTable performance:\n- Contains details about performances.\n- Columns:\n  - PerformanceID: Unique identifier for each performance.\n  - Date: Date of the performance.\n  - Host: Host of the performance.\n  - Venue: Venue where the performance took place.\n  - Attendance: Number of attendees at the performance.\n\nForeign Keys:\n- member_attendance.PerformanceID references performance.PerformanceID, linking member attendance to specific performances.\n- member_attendance.MemberID references member.MemberID, establishing a relationship between member attendance and members.",
    "perpetrator_robust": "Table people:\n- Contains information about individuals.\n- Columns:\n  - PeopleID: Unique identifier for each person.\n  - Name: Name of the person.\n  - Height: Height of the person.\n  - Weight: Weight of the person.\n  - Home Town: Hometown of the person.\n\nTable perpetrator:\n- Stores data related to perpetrators of incidents.\n- Columns:\n  - PerpetratorID: Unique identifier for each perpetrator.\n  - PeopleID: Identifier of the person associated with the perpetrator.\n  - Date: Date of the incident.\n  - Year: Year of the incident.\n  - Location: Location of the incident.\n  - Country: Country where the incident occurred.\n  - Killed: Number of individuals killed in the incident.\n  - Injured: Number of individuals injured in the incident.\n\nForeign Keys:\n- perpetrator.PeopleID references people.PeopleID, establishing a relationship between perpetrators and individuals in the people table.",
    "pets_1_robust": "Table Has_Pet:\n- Contains the relationship between students and pets they own.\n- Columns:\n  - Student_ID: Identifier of the student who owns the pet.\n  - Pet_ID: Identifier of the pet owned by the student.\n\nTable Pets:\n- Stores information about different pets.\n- Columns:\n  - Pet_ID: Unique identifier for each pet.\n  - PetType: Type or species of the pet.\n  - pet_age: Age of the pet.\n  - weight: Weight of the pet.\n\nTable Student:\n- Contains details about students.\n- Columns:\n  - Student_ID: Unique identifier for each student.\n  - LName: Last name of the student.\n  - Fname: First name of the student.\n  - Age: Age of the student.\n  - Sex: Gender of the student.\n  - Major: Field of study or major of the student.\n  - Tutor: Tutor or mentor of the student.\n  - city_code: Code representing the city where the student resides.\n\nForeign Keys:\n- Has_Pet.Student_ID references Student.Student_ID, establishing a relationship between students and their pets.\n- Has_Pet.Pet_ID references Pets.Pet_ID, linking the ownership of pets by students to the pet details.",
    "phone_1_robust": "Table chip_model:\n- Contains information about different chip models used in devices.\n- Columns:\n  - Model_name: Name of the chip model.\n  - Launch_year: Year when the chip model was launched.\n  - RAM: Random Access Memory capacity of the chip model.\n  - ROM: Read-Only Memory capacity of the chip model.\n  - Slots: Number of slots available in the chip model.\n  - WiFi: Indicates if the chip model supports WiFi connectivity.\n  - Bluetooth: Indicates if the chip model supports Bluetooth connectivity.\n\nTable phone:\n- Stores data related to phones and their configurations.\n- Columns:\n  - Company_name: Name of the company manufacturing the phone.\n  - Hardware_Model_name: Name of the hardware model of the phone.\n  - Accreditation_type: Type of accreditation for the phone.\n  - Accreditation_level: Level of accreditation for the phone.\n  - Date: Date of the phone's configuration.\n  - chip_model: Foreign key referencing the chip model used in the phone.\n  - screen_mode: Foreign key referencing the screen mode of the phone.\n\nTable screen_mode:\n- Contains details about different screen modes used in devices.\n- Columns:\n  - Graphics_mode: Mode of graphics displayed on the screen.\n  - Char_cells: Number of character cells on the screen.\n  - Pixels: Resolution of the screen in pixels.\n  - Hardware_colours: Number of colors supported by the screen.\n  - used_kb: Amount of memory used in kilobytes.\n  - map: Mapping information for the screen.\n  - category: Category of the screen mode.\n\nForeign Keys:\n- phone.chip_model references chip_model.Model_name, establishing a relationship between phones and chip models.\n- phone.screen_mode references screen_mode.Graphics_mode, linking phones to specific screen modes.",
    "phone_market_robust": "Table market:\n- Contains information about different markets.\n- Columns:\n  - MarketID: Unique identifier for each market.\n  - area: Area where the market is located.\n  - employees_count: Number of employees working in the market.\n  - shops_count: Number of shops present in the market.\n  - Ranking: Ranking of the market.\n\nTable phone:\n- Stores details about different phone models.\n- Columns:\n  - Name: Name of the phone model.\n  - PhoneID: Unique identifier for each phone.\n  - Memory: Memory capacity of the phone.\n  - Carrier: Carrier associated with the phone.\n  - Price: Price of the phone.\n\nTable phone_market:\n- Represents the relationship between phones and markets, indicating phone availability in different markets.\n- Columns:\n  - MarketID: Identifier of the market.\n  - PhoneID: Identifier of the phone.\n  - stock_count: Number of units of the phone available in the market.\n\nForeign Keys:\n- phone_market.PhoneID references phone.PhoneID, establishing a relationship between phone_market and phone.\n- phone_market.MarketID references market.MarketID, linking phone_market to specific markets.",
    "pilot_record_robust": "Table aircraft:\n- Contains information about different aircraft.\n- Columns:\n  - AircraftID: Unique identifier for each aircraft.\n  - OrderYear: Year in which the aircraft was ordered.\n  - maker: Manufacturer of the aircraft.\n  - Model: Model of the aircraft.\n  - Fleet_Series: Series of the aircraft in the fleet.\n  - Powertrain: Type of powertrain used in the aircraft.\n  - Fuel_Propulsion: Fuel or propulsion mechanism of the aircraft.\n\nTable pilot:\n- Stores data related to pilots.\n- Columns:\n  - PilotID: Unique identifier for each pilot.\n  - PilotName: Name of the pilot.\n  - Rank: Rank or position of the pilot.\n  - Age: Age of the pilot.\n  - Nationality: Nationality of the pilot.\n  - Position: Position held by the pilot.\n  - Join_Year: Year in which the pilot joined.\n  - Team: Team to which the pilot belongs.\n\nTable pilot_record:\n- Contains records of pilots and their associated aircraft.\n- Columns:\n  - RecordID: Unique identifier for each record.\n  - PilotID: Identifier of the pilot.\n  - AircraftID: Identifier of the aircraft associated with the pilot.\n  - date: Date of the record.\n\nForeign Keys:\n- pilot_record.AircraftID references aircraft.AircraftID, establishing a relationship between pilot records and aircraft.\n- pilot_record.PilotID references pilot.PilotID, linking pilot records to pilots.",
    "poker_player_robust": "Table people:\n- Contains information about individuals.\n- Columns:\n  - PeopleID: Unique identifier for each person.\n  - Nationality: Nationality of the person.\n  - Name: Name of the person.\n  - Date_of_Birth: Date of birth of the person.\n  - Height: Height of the person.\n\nTable poker_player:\n- Stores data related to poker players.\n- Columns:\n  - Poker_Player_ID: Unique identifier for each poker player.\n  - PeopleID: Identifier linking to the person in the people table.\n  - Final_Table_Made: Indicates if the player made it to the final table.\n  - Best_Finish: Best finishing position of the player.\n  - Money_Rank: Ranking based on money won.\n  - income: Income generated from poker playing.\n\nForeign Keys:\n- poker_player.PeopleID references people.PeopleID, establishing a relationship between poker players and individuals in the people table.",
    "products_for_hire_robust": "Table Bookings:\n- Contains information about bookings made by customers.\n- Columns:\n  - booking_ID: Unique identifier for each booking.\n  - customer_ID: Identifier of the customer making the booking.\n  - booking_status_code: Code indicating the status of the booking.\n  - returned_damaged_yn: Flag indicating if the booking was returned damaged.\n  - booking_start_date: Start date of the booking.\n  - booking_end_date: End date of the booking.\n  - count_hired: Number of items hired in the booking.\n  - amount_payable: Total amount payable for the booking.\n  - amount_of_discount: Discount amount applied to the booking.\n  - amount_outstanding: Outstanding amount to be paid for the booking.\n  - amount_of_refund: Amount refunded for the booking.\n\nTable Customers:\n- Stores details about customers.\n- Columns:\n  - customer_ID: Unique identifier for each customer.\n  - coupon_ID: Identifier of the coupon used by the customer.\n  - good_or_bad_customer: Flag indicating if the customer is considered good or bad.\n  - Fname: First name of the customer.\n  - Lname: Last name of the customer.\n  - gender: Gender of the customer.\n  - date_became_customer: Date when the customer became a customer.\n  - date_last_hire: Date of the last hire by the customer.\n\nTable Discount_Coupons:\n- Contains information about discount coupons.\n- Columns:\n  - coupon_ID: Unique identifier for each coupon.\n  - date_issued: Date when the coupon was issued.\n  - coupon_amount: Amount of discount provided by the coupon.\n\nTable Payments:\n- Stores payment details related to bookings.\n- Columns:\n  - payment_ID: Unique identifier for each payment.\n  - booking_ID: Identifier of the booking for which the payment is made.\n  - customer_ID: Identifier of the customer making the payment.\n  - payment_type_code: Code indicating the type of payment.\n  - amount_paid_in_full_yn: Flag indicating if the full amount has been paid.\n  - date_paid: Date when the payment was made.\n  - amount_due: Amount due for the payment.\n  - amount_paid: Amount paid in the payment.\n\nTable Products_Booked:\n- Contains information about products booked in bookings.\n- Columns:\n  - booking_ID: Identifier of the booking for the product.\n  - product_ID: Unique identifier for each product.\n  - returned_yn: Flag indicating if the product was returned.\n  - returned_late_yn: Flag indicating if the product was returned late.\n  - booked_count: Number of times the product was booked.\n  - reserved_amount: Amount reserved for the product.\n\nTable Products_for_Hire:\n- Stores details about products available for hire.\n- Columns:\n  - product_ID: Unique identifier for each product.\n  - product_type_code: Code indicating the type of product.\n  - daily_hire_cost: Cost of hiring the product per day.\n  - product_name: Name of the product.\n  - product_information: Additional information about the product.\n\nTable View_Product_Availability:\n- Provides a view of product availability for bookings.\n- Columns:\n  - product_ID: Identifier of the product.\n  - booking_ID: Identifier of the booking.\n  - status_date: Date of the status.\n  - available_yn: Flag indicating if the product is available.\n\nForeign Keys:\n- Customers.coupon_ID references Discount_Coupons.coupon_ID, linking customers to discount coupons.\n- Bookings.customer_ID references Customers.customer_ID, connecting bookings to customers.\n- Payments.customer_ID references Customers.customer_ID, establishing a relationship between payments and customers.\n- Payments.booking_ID references Bookings.booking_ID, linking payments to specific bookings.\n- Products_Booked.product_ID references Products_for_Hire.product_ID, connecting booked products to available products.\n- Products_Booked.booking_ID references Bookings.booking_ID, linking booked products to specific bookings.\n- View_Product_Availability.product_ID references Products_for_Hire.product_ID, establishing a relationship between product availability and products for hire.\n- View_Product_Availability.booking_ID references Bookings.booking_ID, linking product availability to specific bookings.",
    "products_gen_characteristics_robust": "Table Characteristics:\n- Contains information about different characteristics.\n- Columns:\n  - characteristic_ID: Unique identifier for each characteristic.\n  - characteristic_type_code: Code representing the type of characteristic.\n  - characteristic_data_type: Data type of the characteristic.\n  - characteristic_name: Name of the characteristic.\n  - additional_characteristic_details: Additional details related to the characteristic.\n\nTable Product_Characteristics:\n- Stores the characteristics associated with products.\n- Columns:\n  - product_ID: Unique identifier for each product.\n  - characteristic_ID: Identifier of the characteristic associated with the product.\n  - product_characteristic_value: Value of the characteristic for the product.\n\nTable Products:\n- Contains details about various products.\n- Columns:\n  - product_ID: Unique identifier for each product.\n  - color_code: Code representing the color of the product.\n  - product_category_code: Code representing the category of the product.\n  - product_name: Name of the product.\n  - typical_buying_price: Typical buying price of the product.\n  - typical_selling_price: Typical selling price of the product.\n  - product_information: Information about the product.\n  - additional_product_details: Additional details related to the product.\n\nTable Ref_Characteristic_Types:\n- Provides reference information about different characteristic types.\n- Columns:\n  - characteristic_type_code: Code representing the type of characteristic.\n  - characteristic_type_information: Information about the characteristic type.\n\nTable Ref_Colors:\n- Contains reference data for different colors.\n- Columns:\n  - color_code: Code representing the color.\n  - color_information: Information about the color.\n\nTable Ref_Product_Categories:\n- Stores reference data for product categories.\n- Columns:\n  - product_category_code: Code representing the product category.\n  - product_category_information: Information about the product category.\n  - unit_of_measure: Unit of measure for the product category.\n\nForeign Keys:\n- Characteristics.characteristic_type_code references Ref_Characteristic_Types.characteristic_type_code, establishing a relationship between characteristics and characteristic types.\n- Products.color_code references Ref_Colors.color_code, linking products to specific colors.\n- Products.product_category_code references Ref_Product_Categories.product_category_code, connecting products to specific product categories.\n- Product_Characteristics.product_ID references Products.product_ID, linking product characteristics to products.\n- Product_Characteristics.characteristic_ID references Characteristics.characteristic_ID, establishing a relationship between product characteristics and characteristics.",
    "product_catalog_robust": "Table Attribute_Definitions:\n- Contains definitions of attributes.\n- Columns:\n  - attribute_ID: Unique identifier for each attribute.\n  - attribute_name: Name of the attribute.\n  - attribute_data_type: Data type of the attribute.\n\nTable Catalog_Contents:\n- Stores information about catalog entries.\n- Columns:\n  - catalog_entry_ID: Unique identifier for each catalog entry.\n  - catalog_level_number: Level number of the catalog entry.\n  - parent_entry_id: Identifier of the parent entry.\n  - previous_entry_id: Identifier of the previous entry.\n  - next_entry_id: Identifier of the next entry.\n  - catalog_entry_name: Name of the catalog entry.\n  - product_stock_number: Stock number of the product.\n  - price_dollars: Price of the product in dollars.\n  - price_euros: Price of the product in euros.\n  - price_pounds: Price of the product in pounds.\n  - capacity: Capacity of the product.\n  - length: Length of the product.\n  - height: Height of the product.\n  - width: Width of the product.\n\nTable Catalog_Contents_Additional_Attributes:\n- Contains additional attributes for catalog entries.\n- Columns:\n  - catalog_entry_ID: Identifier of the catalog entry.\n  - catalog_level_number: Level number of the catalog entry.\n  - attribute_ID: Identifier of the attribute.\n  - attribute_value: Value of the attribute.\n\nTable Catalog_Structure:\n- Describes the structure of the catalog.\n- Columns:\n  - catalog_level_number: Level number in the catalog.\n  - catalog_ID: Identifier of the catalog.\n  - catalog_level_name: Name of the catalog level.\n\nTable Catalogs:\n- Stores information about catalogs.\n- Columns:\n  - catalog_ID: Unique identifier for each catalog.\n  - catalog_name: Name of the catalog.\n  - catalog_publisher: Publisher of the catalog.\n  - publication_date: Date of publication of the catalog.\n  - date_of_latest_revision: Date of the latest revision of the catalog.\n\nForeign Keys:\n- Catalog_Structure.catalog_ID references Catalogs.catalog_ID, establishing a relationship between catalog structure and catalogs.\n- Catalog_Contents.catalog_level_number references Catalog_Structure.catalog_level_number, linking catalog contents to the catalog structure.\n- Catalog_Contents_Additional_Attributes.catalog_level_number references Catalog_Structure.catalog_level_number, connecting additional attributes to the catalog structure.\n- Catalog_Contents_Additional_Attributes.catalog_entry_ID references Catalog_Contents.catalog_entry_ID, establishing a relationship between additional attributes and catalog contents.",
    "program_share_robust": "Table broadcast:\n- Contains information about broadcasts on different channels.\n- Columns:\n  - ChannelID: Identifier for the channel broadcasting the program.\n  - ProgramID: Identifier for the program being broadcast.\n  - Time_of_day: Time of the day when the broadcast occurs.\n\nTable broadcast_share:\n- Stores data related to the share percentage of broadcasts.\n- Columns:\n  - ChannelID: Identifier for the channel sharing the broadcast.\n  - ProgramID: Identifier for the program being shared.\n  - Date: Date of the broadcast share.\n  - Share_percentage: Percentage of share for the broadcast.\n\nTable channel:\n- Contains details about different broadcasting channels.\n- Columns:\n  - ChannelID: Unique identifier for each channel.\n  - Name: Name of the channel.\n  - Owner: Owner of the channel.\n  - Share_percentage: Percentage of share for the channel.\n  - Rating_in_percent: Rating of the channel in percentage.\n\nTable program:\n- Stores information about different programs.\n- Columns:\n  - ProgramID: Unique identifier for each program.\n  - Name: Name of the program.\n  - Origin: Origin of the program.\n  - Launch: Launch details of the program.\n  - Owner: Owner of the program.\n\nForeign Keys:\n- broadcast.ProgramID references program.ProgramID, establishing a relationship between broadcasts and programs.\n- broadcast.ChannelID references channel.ChannelID, linking broadcasts to specific channels.\n- broadcast_share.ProgramID references program.ProgramID, connecting broadcast shares to programs.\n- broadcast_share.ChannelID references channel.ChannelID, establishing a relationship between broadcast shares and channels.",
    "protein_institute_robust": "Table Institution:\n- Contains information about different institutions.\n- Columns:\n  - Institution_ID: Unique identifier for each institution.\n  - Institution: Name of the institution.\n  - site: Location/site of the institution.\n  - established: Year of establishment of the institution.\n  - category: Category to which the institution belongs.\n  - registration: Registration details of the institution.\n  - Team: Team associated with the institution.\n  - Primary_Conference: Primary conference associated with the institution.\n  - building_ID: Identifier of the building where the institution is located.\n\nTable building:\n- Stores data related to different buildings.\n- Columns:\n  - building_ID: Unique identifier for each building.\n  - Name: Name of the building.\n  - Street_address: Street address of the building.\n  - Years_as_tallest: Number of years the building was the tallest.\n  - Height: Height of the building.\n  - Floors: Number of floors in the building.\n\nTable protein:\n- Contains information about proteins.\n- Columns:\n  - common_name: Common name of the protein.\n  - protein_name: Name of the protein.\n  - divergence_from_human_lineage: Divergence from the human lineage.\n  - accession_number: Accession number of the protein.\n  - sequence_length: Length of the protein sequence.\n  - sequence_identity_to_human_protein: Identity of the protein sequence to human protein.\n  - Institution_ID: Identifier of the institution associated with the protein.\n\nForeign Keys:\n- Institution.building_ID references building.building_ID, establishing a relationship between institutions and buildings.\n- protein.Institution_ID references Institution.Institution_ID, linking proteins to specific institutions.",
    "race_track_robust": "Table race:\n- Contains information about races.\n- Columns:\n  - RaceID: Unique identifier for each race.\n  - Name: Name of the race.\n  - Class: Class of the race.\n  - Date: Date of the race.\n  - TrackID: Identifier of the track where the race takes place.\n\nTable track:\n- Stores data related to tracks where races are held.\n- Columns:\n  - TrackID: Unique identifier for each track.\n  - Name: Name of the track.\n  - Venue: Venue of the track.\n  - Capacity: Capacity of the track.\n  - Year_Opened: Year when the track was opened.\n\nForeign Keys:\n- race.TrackID references track.TrackID, establishing a relationship between races and tracks.",
    "railway_robust": "Table manager:\n- Contains information about managers.\n- Columns:\n  - ManagerID: Unique identifier for each manager.\n  - Name: Name of the manager.\n  - Country: Country where the manager is located.\n  - Working_year_starts: Year when the manager started working.\n  - Age: Age of the manager.\n  - Level: Level of the manager.\n\nTable railway:\n- Stores data related to railways.\n- Columns:\n  - RailwayID: Unique identifier for each railway.\n  - train: Name of the train associated with the railway.\n  - founder: Founder of the railway.\n  - Built: Year when the railway was built.\n  - Wheels: Number of wheels on the train.\n  - Location: Location of the railway.\n  - Object_Number: Identifier for the object associated with the railway.\n\nTable railway_manage:\n- Contains information about the management of railways.\n- Columns:\n  - RailwayID: Identifier of the railway.\n  - ManagerID: Identifier of the manager responsible for the railway.\n  - FromYear: Year from which the manager started managing the railway.\n\nTable train:\n- Stores details about trains.\n- Columns:\n  - Train_ID: Unique identifier for each train.\n  - Train_Number: Number assigned to the train.\n  - Name: Name of the train.\n  - From: Departure location of the train.\n  - Arrival: Arrival location of the train.\n  - RailwayID: Identifier of the railway to which the train belongs.\n\nForeign Keys:\n- train.RailwayID references railway.RailwayID, establishing a relationship between trains and railways.\n- railway_manage.RailwayID references railway.RailwayID, linking railway management to specific railways.\n- railway_manage.ManagerID references manager.ManagerID, connecting railway management to managers.",
    "real_estate_properties_robust": "Table Other_Available_Features:\n- Contains information about various available features.\n- Columns:\n  - feature_ID: Unique identifier for each feature.\n  - feature_type_code: Code representing the type of feature.\n  - feature_name: Name of the feature.\n  - feature_information: Additional information about the feature.\n\nTable Other_Property_Features:\n- Stores the relationship between properties and additional features.\n- Columns:\n  - property_ID: Unique identifier for each property.\n  - feature_ID: Identifier of the feature associated with the property.\n  - property_feature_information: Information specific to the property feature.\n\nTable Properties:\n- Holds details about different properties.\n- Columns:\n  - property_ID: Unique identifier for each property.\n  - property_type_code: Code indicating the type of property.\n  - date_on_market: Date when the property was listed on the market.\n  - sold_date: Date when the property was sold.\n  - property_name: Name of the property.\n  - property_address: Address of the property.\n  - Num_of_room: Number of rooms in the property.\n  - vendor_requested_price: Price requested by the vendor for the property.\n  - buyer_offered_price: Price offered by the buyer for the property.\n  - agreed_selling_price: Price at which the property was sold.\n  - apt_feature1, apt_feature2, apt_feature3: Apartment-specific features.\n  - fld_feature1, fld_feature2, fld_feature3: Field-specific features.\n  - hse_feature1, hse_feature2, hse_feature3: House-specific features.\n  - oth_feature1, oth_feature2, oth_feature3: Other property-specific features.\n  - shp_feature1, shp_feature2, shp_feature3: Shop-specific features.\n  - additional_property_details: Additional details about the property.\n\nTable Ref_Feature_Types:\n- Contains reference data for different types of features.\n- Columns:\n  - feature_type_code: Code representing the type of feature.\n  - feature_type_name: Name of the feature type.\n\nTable Ref_Property_Types:\n- Stores reference information about different types of properties.\n- Columns:\n  - property_type_code: Code indicating the type of property.\n  - property_type_information: Information related to the property type.\n\nForeign Keys:\n- Other_Available_Features.feature_type_code references Ref_Feature_Types.feature_type_code, establishing a relationship between available features and their types.\n- Properties.property_type_code references Ref_Property_Types.property_type_code, linking properties to their respective types.\n- Other_Property_Features.property_ID references Properties.property_ID, connecting property features to specific properties.\n- Other_Property_Features.feature_ID references Other_Available_Features.feature_ID, establishing a relationship between property features and available features.",
    "restaurants_robust": "Table GEOGRAPHIC:\n- Contains geographic information about different locations.\n- Columns:\n  - city_name: Name of the city.\n  - canton: Canton information.\n  - district: District information.\n\nTable LOCATION:\n- Stores details about various locations, particularly restaurants.\n- Columns:\n  - restaurant_ID: Unique identifier for each restaurant.\n  - house_number: House number of the location.\n  - Road_Name: Name of the road where the location is situated.\n  - city_name: Name of the city where the location is.\n  \nTable RESTAURANT:\n- Contains information about different restaurants.\n- Columns:\n  - ID: Unique identifier for each restaurant.\n  - NAME: Name of the restaurant.\n  - Food_Category: Category of food served at the restaurant.\n  - city_name: Name of the city where the restaurant is located.\n  - score: Score or rating of the restaurant.\n\nForeign Keys:\n- RESTAURANT.city_name references GEOGRAPHIC.city_name, establishing a relationship between restaurants and geographic locations based on city names.\n- LOCATION.city_name references GEOGRAPHIC.city_name, linking locations to geographic information based on city names.",
    "restaurant_1_robust": "Table Restaurant:\n- Contains information about different restaurants.\n- Columns:\n  - RestaurantID: Unique identifier for each restaurant.\n  - ResTitle: Title of the restaurant.\n  - ADDRESS: Address of the restaurant.\n  - score: Score or rating associated with the restaurant.\n\nTable Restaurant_Type:\n- Stores details about different types of restaurants.\n- Columns:\n  - RestaurantTypeID: Unique identifier for each restaurant type.\n  - RestaurantTypeTitle: Title of the restaurant type.\n  - RestaurantTypeDescription: Description of the restaurant type.\n\nTable Student:\n- Contains data related to students.\n- Columns:\n  - StudentID: Unique identifier for each student.\n  - Last_Name: Last name of the student.\n  - First_name: First name of the student.\n  - Years: Number of years the student has been studying.\n  - gender: Gender of the student.\n  - Main: Main field of study for the student.\n  - consultant: Consultant assigned to the student.\n  - CITY_CODE: Code representing the city where the student is located.\n\nTable Type_Of_Restaurant:\n- Represents the relationship between restaurants and their types.\n- Columns:\n  - RestaurantID: Identifier of the restaurant.\n  - RestaurantTypeID: Identifier of the restaurant type.\n\nTable Visits_Restaurant:\n- Stores data about student visits to restaurants.\n- Columns:\n  - StudentID: Identifier of the student visiting the restaurant.\n  - RestaurantID: Identifier of the restaurant visited.\n  - TIME: Time of the visit.\n  - Expended: Amount spent during the visit.\n\nForeign Keys:\n- Type_Of_Restaurant.RestaurantTypeID references Restaurant_Type.RestaurantTypeID, linking restaurant types to specific restaurant types.\n- Type_Of_Restaurant.RestaurantID references Restaurant.RestaurantID, establishing a relationship between restaurants and their types.\n- Visits_Restaurant.RestaurantID references Restaurant.RestaurantID, connecting visits to specific restaurants.\n- Visits_Restaurant.StudentID references Student.StudentID, linking visits to specific students.",
    "riding_club_robust": "Table club:\n- Contains information about different clubs.\n- Columns:\n  - CLUB_ID: Unique identifier for each club.\n  - CLUB_NAME: Name of the club.\n  - area: Area where the club is located.\n  - Begin_year: Year when the club was established.\n\nTable coach:\n- Stores data related to coaches.\n- Columns:\n  - Coach_ID: Unique identifier for each coach.\n  - Coach_name: Name of the coach.\n  - Sex: Gender of the coach.\n  - CLUB_ID: Identifier of the club the coach belongs to.\n  - Level: Level of coaching expertise.\n\nTable match_result:\n- Contains results of matches.\n- Columns:\n  - Level: Level of the match.\n  - CLUB_ID: Identifier of the club involved in the match.\n  - 1st: First place in the match.\n  - prize: Prize awarded for the match.\n  - second_place: Second place in the match.\n  - third: Third place in the match.\n  - score: Score of the match.\n\nTable player:\n- Stores information about players.\n- Columns:\n  - PlAYER_ID: Unique identifier for each player.\n  - SPONSOR_name: Name of the player's sponsor.\n  - PLAYER_NAME: Name of the player.\n  - Sex: Gender of the player.\n  - housing: Housing details of the player.\n  - OCCUPATION: Occupation of the player.\n  - VOTES: Votes received by the player.\n  - Level: Level of the player.\n\nTable player_coach:\n- Contains data about player-coach relationships.\n- Columns:\n  - PlAYER_ID: Identifier of the player.\n  - Coach_ID: Identifier of the coach.\n  - Beginning_year: Year when the player-coach relationship started.\n\nForeign Keys:\n- coach.CLUB_ID references club.CLUB_ID, establishing a relationship between coaches and clubs.\n- player_coach.Coach_ID references coach.Coach_ID, linking player-coach relationships to coaches.\n- player_coach.PlAYER_ID references player.PlAYER_ID, connecting player-coach relationships to players.\n- match_result.CLUB_ID references club.CLUB_ID, linking match results to specific clubs.",
    "roller_coaster_robust": "Table country:\n- Contains information about different countries.\n- Columns:\n  - Nation_ID: Unique identifier for each country.\n  - NAME: Name of the country.\n  - population: Population of the country.\n  - size: Size of the country.\n  - LANGUAGES: Languages spoken in the country.\n\nTable roller_coaster:\n- Stores data related to roller coasters in amusement parks.\n- Columns:\n  - ROLLER_COASTER_ID: Unique identifier for each roller coaster.\n  - NAME: Name of the roller coaster.\n  - amusement: Type of amusement park the roller coaster is located in.\n  - Nation_ID: Foreign key referencing the id of the country in the country table.\n  - distance: Distance covered by the roller coaster.\n  - Elevation: Elevation of the roller coaster.\n  - velocity: Velocity of the roller coaster.\n  - inaugurated: Date when the roller coaster was inaugurated.\n  - condition: Condition of the roller coaster.\n\nForeign Keys:\n- roller_coaster.Nation_ID references country.Nation_ID, establishing a relationship between roller coasters and countries.",
    "sakila_1_robust": "Table Address:\n- Contains information about addresses.\n- Columns:\n  - Address_id: Unique identifier for each address.\n  - Address: Address details.\n  - address_line_2: Additional address details.\n  - region: Region of the address.\n  - CITY_id: Identifier of the city where the address is located.\n  - zipcode: Zipcode of the address.\n  - telephone: Telephone number associated with the address.\n  - timestamp: Timestamp for the address data.\n\nTable CITY:\n- Stores data related to cities.\n- Columns:\n  - CITY_id: Unique identifier for each city.\n  - CITY: Name of the city.\n  - Country_id: Identifier of the country to which the city belongs.\n  - timestamp: Timestamp for city data.\n\nTable actor:\n- Contains details about actors.\n- Columns:\n  - ACTOR_id: Unique identifier for each actor.\n  - FName: First name of the actor.\n  - LName: Last name of the actor.\n  - timestamp: Timestamp for actor data.\n\nTable category:\n- Stores information about categories.\n- Columns:\n  - category_id: Unique identifier for each category.\n  - NAME: Name of the category.\n  - timestamp: Timestamp for category data.\n\nTable country:\n- Contains data related to countries.\n- Columns:\n  - Country_id: Unique identifier for each country.\n  - country: Name of the country.\n  - timestamp: Timestamp for country data.\n\nTable customer:\n- Stores details about customers.\n- Columns:\n  - CUSTOMER_ID: Unique identifier for each customer.\n  - STORE_ID: Identifier of the store to which the customer belongs.\n  - FName: First name of the customer.\n  - LName: Last name of the customer.\n  - Emain_address: Email address of the customer.\n  - Address_id: Identifier of the address associated with the customer.\n  - enabled: Indicates if the customer is enabled.\n  - CREATE_DATE: Date when the customer was created.\n  - timestamp: Timestamp for customer data.\n\nTable film:\n- Contains information about films.\n- Columns:\n  - movie_id: Unique identifier for each film.\n  - title: Title of the film.\n  - summary: Summary of the film.\n  - RELEASE_year: Year of release of the film.\n  - Language_id: Identifier of the language of the film.\n  - Original_Language_id: Identifier of the original language of the film.\n  - rental_duration: Duration for which the film can be rented.\n  - RENTAL_RATE: Rental rate of the film.\n  - duration: Duration of the film.\n  - substitution_cost: Substitution cost of the film.\n  - score: Score of the film.\n  - attributes: Additional attributes of the film.\n  - timestamp: Timestamp for film data.\n\nTable film_actor:\n- Stores the relationship between films and actors.\n- Columns:\n  - ACTOR_id: Identifier of the actor.\n  - movie_id: Identifier of the film.\n  - timestamp: Timestamp for film-actor relationship data.\n\nTable film_category:\n- Contains the relationship between films and categories.\n- Columns:\n  - movie_id: Identifier of the film.\n  - category_id: Identifier of the category.\n  - timestamp: Timestamp for film-category relationship data.\n\nTable film_text:\n- Stores text information related to films.\n- Columns:\n  - movie_id: Identifier of the film.\n  - title: Title of the film.\n  - summary: Summary of the film.\n\nTable inventory:\n- Contains details about film inventory.\n- Columns:\n  - INVENTORY_id: Unique identifier for each inventory entry.\n  - movie_id: Identifier of the film.\n  - STORE_ID: Identifier of the store where the film is available.\n  - timestamp: Timestamp for inventory data.\n\nTable language:\n- Stores information about languages.\n- Columns:\n  - Language_id: Unique identifier for each language.\n  - NAME: Name of the language.\n  - timestamp: Timestamp for language data.\n\nTable payment:\n- Contains payment details.\n- Columns:\n  - Payment_id: Unique identifier for each payment.\n  - CUSTOMER_ID: Identifier of the customer making the payment.\n  - personnel_id: Identifier of the personnel involved in the payment.\n  - Rental_id: Identifier of the rental associated with the payment.\n  - quantity: Quantity of the payment.\n  - PAYMENT_DATE: Date of the payment.\n  - timestamp: Timestamp for payment data.\n\nTable rental:\n- Stores rental information.\n- Columns:\n  - Rental_id: Unique identifier for each rental.\n  - date_of_rental: Date of rental.\n  - INVENTORY_id: Identifier of the inventory item rented.\n  - CUSTOMER_ID: Identifier of the customer renting the item.\n  - date_of_return: Date of return for the rental.\n  - personnel_id: Identifier of the personnel involved in the rental.\n  - timestamp: Timestamp for rental data.\n\nTable staff:\n- Contains details about staff members.\n- Columns:\n  - personnel_id: Unique identifier for each staff member.\n  - FName: First name of the staff member.\n  - LName: Last name of the staff member.\n  - Address_id: Identifier of the address of the staff member.\n  - image: Image of the staff member.\n  - Emain_address: Email address of the staff member.\n  - STORE_ID: Identifier of the store where the staff member works.\n  - enabled: Indicates if the staff member is enabled.\n  - USER_NAME: Username of the staff member.\n  - cipher_code: Cipher code for the staff member.\n  - timestamp: Timestamp for staff data.\n\nTable store:\n- Stores information about stores.\n- Columns:\n  - STORE_ID: Unique identifier for each store.\n  - manager_personnel_id: Identifier of the manager of the store.\n  - Address_id: Identifier of the address of the store.\n  - timestamp: Timestamp for store data.\n\nForeign Keys:\n- Address.CITY_id references CITY.CITY_id, establishing a relationship between addresses and cities.\n- CITY.Country_id references country.Country_id, linking cities to specific countries.\n- customer.STORE_ID references store.STORE_ID, connecting customers to their respective stores.\n- customer.Address_id references Address.Address_id, establishing a relationship between customers and addresses.\n- film.Original_Language_id references language.Language_id, linking films to their original languages.\n- film.Language_id references language.Language_id, connecting films to languages.\n- film_actor.movie_id references film.movie_id, linking actors to specific films.\n- film_actor.ACTOR_id references actor.ACTOR_id, establishing a relationship between films and actors.\n- film_category.category_id references category.category_id, connecting films to categories.\n- film_category.movie_id references film.movie_id, establishing a relationship between films and categories.\n- inventory.movie_id references film.movie_id, linking inventory to films.\n- inventory.STORE_ID references store.STORE_ID, connecting inventory to stores.\n- payment.personnel_id references staff.personnel_id, establishing a relationship between payments and staff members.\n- payment.CUSTOMER_ID references customer.CUSTOMER_ID, linking payments to customers.\n- payment.Rental_id references rental.Rental_id, connecting payments to rentals.\n- rental.CUSTOMER_ID references customer.CUSTOMER_ID, establishing a relationship between rentals and customers.\n- rental.INVENTORY_id references inventory.INVENTORY_id, linking rentals to inventory items.\n- rental.personnel_id references staff.personnel_id, connecting rentals to staff members.\n- staff.Address_id references Address.Address_id, establishing a relationship between staff members and addresses.\n- store.Address_id references Address.Address_id, linking stores to addresses.\n- store.manager_personnel_id references staff.personnel_id, connecting stores to staff members.",
    "scholar_robust": "Table author:\n- Contains information about authors.\n- Columns:\n  - AuthorId: Unique identifier for each author.\n  - AuthorName: Name of the author.\n\nTable cite:\n- Stores citations between papers.\n- Columns:\n  - CitingPaperID: Identifier of the paper citing another paper.\n  - CitiedPaperID: Identifier of the paper being cited.\n\nTable dataset:\n- Contains details about datasets.\n- Columns:\n  - DatasetId: Unique identifier for each dataset.\n  - name_of_dataset: Name of the dataset.\n\nTable journal:\n- Stores information about journals.\n- Columns:\n  - JournalId: Unique identifier for each journal.\n  - Jurnal_Name: Name of the journal.\n\nTable keyphrase:\n- Contains key phrases related to papers.\n- Columns:\n  - KeyPhraseId: Unique identifier for each key phrase.\n  - Key_Phrase_Name: Name of the key phrase.\n\nTable paper:\n- Contains data about papers.\n- Columns:\n  - Paper_Id: Unique identifier for each paper.\n  - headline: Headline of the paper.\n  - VENUEId: Identifier of the venue where the paper was published.\n  - year: Year of publication of the paper.\n  - citationCount: Count of citations for the paper.\n  - Number_Cited_By: Number of times the paper has been cited.\n  - JournalId: Identifier of the journal where the paper was published.\n\nTable paperDataset:\n- Represents the relationship between papers and datasets.\n- Columns:\n  - Paper_Id: Identifier of the paper.\n  - DatasetId: Identifier of the dataset associated with the paper.\n\nTable paperKeyphrase:\n- Represents the relationship between papers and key phrases.\n- Columns:\n  - Paper_Id: Identifier of the paper.\n  - KeyPhraseId: Identifier of the key phrase associated with the paper.\n\nTable venue:\n- Contains information about venues where papers are published.\n- Columns:\n  - VENUEId: Unique identifier for each venue.\n  - VENUENAME: Name of the venue.\n\nTable writes:\n- Represents the relationship between authors and papers.\n- Columns:\n  - Paper_Id: Identifier of the paper.\n  - AuthorId: Identifier of the author.\n\nForeign Keys:\n- paper.VENUEId references venue.VENUEId, linking papers to specific venues.\n- paper.JournalId references journal.JournalId, connecting papers to the journals they are published in.\n- cite.CitingPaperID references paper.Paper_Id, establishing a relationship between citing and cited papers.\n- cite.CitiedPaperID references paper.Paper_Id, linking cited papers to their citing papers.\n- paperKeyphrase.KeyPhraseId references keyphrase.KeyPhraseId, connecting papers to key phrases.\n- paperKeyphrase.Paper_Id references paper.Paper_Id, establishing a relationship between papers and key phrases.\n- writes.AuthorId references author.AuthorId, linking authors to their respective papers.\n- writes.Paper_Id references paper.Paper_Id, establishing a relationship between authors and papers.",
    "school_bus_robust": "Table driver:\n- Contains information about drivers.\n- Columns:\n  - DriverID: Unique identifier for each driver.\n  - name: Name of the driver.\n  - party: Party affiliation of the driver.\n  - hometown_city: City where the driver's hometown is located.\n  - years: Number of years the driver has been working.\n\nTable school:\n- Stores data related to schools.\n- Columns:\n  - SchoolID: Unique identifier for each school.\n  - level: Educational level of the school.\n  - school: Name of the school.\n  - address: Address of the school.\n  - category: Category classification of the school.\n\nTable school_bus:\n- Contains information about school buses and their drivers.\n- Columns:\n  - SchoolID: Identifier of the school associated with the bus.\n  - DriverID: Identifier of the driver assigned to the bus.\n  - YearsWorking: Number of years the driver has been working with the school bus.\n  - IffFullTime: Indicator specifying if the driver is full-time.\n\nForeign Keys:\n- school_bus.DriverID references driver.DriverID, establishing a relationship between school buses and drivers.\n- school_bus.SchoolID references school.SchoolID, linking school buses to specific schools.",
    "school_finance_robust": "Table School:\n- Contains information about different schools.\n- Columns:\n  - school_id: Unique identifier for each school.\n  - School_Name: Name of the school.\n  - address: Address of the school.\n  - mascot: Mascot representing the school.\n  - registration: Registration details of the school.\n  - IHSAA_CLASS: Class designation in the Indiana High School Athletic Association.\n  - IHSAAFootballClass: Football class in the Indiana High School Athletic Association.\n  - COUNTY: County where the school is located.\n\nTable budget:\n- Stores budget-related data for schools.\n- Columns:\n  - school_id: Identifier of the school.\n  - Year: Year for the budget data.\n  - budgeted: Amount budgeted for the school.\n  - TotalBudgetPercentBudgeted: Percentage of the total budget that is budgeted.\n  - invested: Amount invested in the school.\n  - TotalBudgetPercentInvested: Percentage of the total budget that is invested.\n  - BudgetInvestedPercent: Percentage of the budget that is invested.\n\nTable endowment:\n- Contains details about endowments for schools.\n- Columns:\n  - Endowment_id: Unique identifier for each endowment.\n  - school_id: Identifier of the school associated with the endowment.\n  - Donator_name: Name of the donor contributing to the endowment.\n  - quantity: Quantity or amount of the endowment.\n\nForeign Keys:\n- budget.school_id references School.school_id, establishing a relationship between budget and schools.\n- endowment.school_id references School.school_id, linking endowment data to specific schools.",
    "school_player_robust": "Table player:\n- Contains information about players.\n- Columns:\n  - PlayerID: Unique identifier for each player.\n  - player: Name of the player.\n  - team: Team the player belongs to.\n  - Years: Number of years the player has been playing.\n  - Location: Location of the player.\n  - SchoolID: Identifier of the school the player is associated with.\n\nTable school:\n- Stores data related to schools.\n- Columns:\n  - SchoolID: Unique identifier for each school.\n  - School: Name of the school.\n  - position: Position of the school.\n  - egistration: Registration details of the school.\n  - Established: Year the school was established.\n  - DENOMINATION: Denomination of the school.\n  - Boys_or_Girls: Indicates if the school is for boys or girls.\n  - Day_or_Boarding: Specifies if the school is day or boarding.\n  - Year_Entered_Tournament: Year the school entered a tournament.\n  - SchoolColors: Colors associated with the school.\n\nTable school_details:\n- Contains additional details about schools.\n- Columns:\n  - SchoolID: Identifier of the school.\n  - NickName: Nickname of the school.\n  - colors: Colors associated with the school.\n  - Coalition: Coalition the school is part of.\n  - class: Class of the school.\n  - division: Division of the school.\n\nTable school_performance:\n- Stores performance data of schools.\n- Columns:\n  - SchoolId: Identifier of the school.\n  - SchoolYear: Year of the school performance data.\n  - ClassA: Performance data for Class A.\n  - ClassAA: Performance data for Class AA.\n\nForeign Keys:\n- school_details.SchoolID references school.SchoolID, establishing a relationship between school_details and school.\n- school_performance.SchoolId references school.SchoolID, linking school_performance to specific schools.\n- player.SchoolID references school.SchoolID, connecting players to their respective schools.",
    "scientist_1_robust": "Table AssignedTo:\n- Contains information about the assignment of scientists to projects.\n- Columns:\n  - Scientist: Identifier of the scientist assigned to a project.\n  - Project: Identifier of the project to which a scientist is assigned.\n\nTable Projects:\n- Stores details about different projects.\n- Columns:\n  - code: Unique identifier for each project.\n  - name: Name of the project.\n  - hours: Number of hours allocated to the project.\n\nTable Scientists:\n- Contains data related to scientists.\n- Columns:\n  - SSN: Unique identifier for each scientist.\n  - name: Name of the scientist.\n\nForeign Keys:\n- AssignedTo.Project references Projects.code, establishing a relationship between AssignedTo and Projects based on project codes.\n- AssignedTo.Scientist references Scientists.SSN, linking AssignedTo to Scientists based on scientist SSNs.",
    "ship_1_robust": "Table Ship:\n- Contains information about different ships.\n- Columns:\n  - SHIP_ID: Unique identifier for each ship.\n  - name: Name of the ship.\n  - category: Category of the ship.\n  - Year_of_Built: Year the ship was built.\n  - class: Class of the ship.\n  - banner: Banner of the ship.\n\nTable captain:\n- Stores data related to ship captains.\n- Columns:\n  - Headman_ID: Unique identifier for each captain.\n  - name: Name of the captain.\n  - SHIP_ID: Identifier of the ship the captain is assigned to.\n  - Years: Number of years the captain has been in service.\n  - class: Class of the captain.\n  - Level: Level of the captain.\n\nForeign Keys:\n- captain.SHIP_ID references Ship.SHIP_ID, establishing a relationship between captains and the ships they are assigned to.",
    "ship_mission_robust": "Table mission:\n- Contains information about missions.\n- Columns:\n  - MissionID: Unique identifier for each mission.\n  - SHIP_ID: Identifier of the ship associated with the mission.\n  - Identifier: Identifier of the mission.\n  - Year_of_Launch: Year when the mission was launched.\n  - Position: Position of the mission.\n  - velocity_knots: Velocity of the mission in knots.\n  - Destiny: Destination of the mission.\n\nTable ship:\n- Stores data related to ships.\n- Columns:\n  - SHIP_ID: Unique identifier for each ship.\n  - name: Name of the ship.\n  - Category: Category of the ship.\n  - citizenship: Citizenship of the ship.\n  - tonnage: Tonnage of the ship.\n\nForeign Keys:\n- mission.SHIP_ID references ship.SHIP_ID, establishing a relationship between missions and ships.",
    "shop_membership_robust": "Table branch:\n- Contains information about different branches.\n- Columns:\n  - BranchID: Unique identifier for each branch.\n  - name: Name of the branch.\n  - OPEN_YEAR: Year when the branch was opened.\n  - address_street: Street address of the branch.\n  - city: City where the branch is located.\n  - membership_quantity: Quantity of members associated with the branch.\n\nTable member:\n- Stores details about members.\n- Columns:\n  - MemberID: Unique identifier for each member.\n  - Member_Ship_id: Membership ID of the member.\n  - name: Name of the member.\n  - native_land: Native land of the member.\n  - Rank: Rank of the member.\n\nTable membership_register_branch:\n- Contains records of members registered with branches.\n- Columns:\n  - MemberID: Identifier of the member.\n  - BranchID: Identifier of the branch.\n  - Year_of_Register: Year when the member registered with the branch.\n\nTable purchase:\n- Stores information about purchases made by members.\n- Columns:\n  - MemberID: Identifier of the member making the purchase.\n  - BranchID: Identifier of the branch where the purchase was made.\n  - Year: Year when the purchase was made.\n  - overall_pounds: Total amount spent in pounds for the purchase.\n\nForeign Keys:\n- membership_register_branch.BranchID references branch.BranchID, establishing a relationship between membership registration and branches.\n- membership_register_branch.MemberID references member.MemberID, linking membership registration to members.\n- purchase.BranchID references branch.BranchID, connecting purchases to specific branches.\n- purchase.MemberID references member.MemberID, establishing a relationship between purchases and members.",
    "singer_robust": "Table singer:\n- Contains information about singers.\n- Columns:\n  - SingerID: Unique identifier for each singer.\n  - name: Name of the singer.\n  - Year_of_Birth: Year of birth of the singer.\n  - Net_Fortune_Millions: Net fortune in millions of the singer.\n  - Nationality: Nationality of the singer.\n\nTable song:\n- Stores data related to songs.\n- Columns:\n  - SongID: Unique identifier for each song.\n  - Name: Name of the song.\n  - SingerID: Identifier of the singer who performed the song.\n  - sales: Sales data of the song.\n  - peak: Peak performance data of the song.\n\nForeign Keys:\n- song.SingerID references singer.SingerID, establishing a relationship between songs and singers.",
    "small_bank_1_robust": "Table ACCOUNTS:\n- Contains information about customer accounts.\n- Columns:\n  - custid: Unique identifier for each customer.\n  - name: Name of the customer associated with the account.\n\nTable CHECKING:\n- Stores data related to checking accounts.\n- Columns:\n  - custid: Identifier of the customer.\n  - balance: Balance amount in the checking account.\n\nTable SAVINGS:\n- Contains details about savings accounts.\n- Columns:\n  - custid: Identifier of the customer.\n  - balance: Balance amount in the savings account.\n\nForeign Keys:\n- SAVINGS.custid references ACCOUNTS.custid, establishing a relationship between savings accounts and customers.\n- CHECKING.custid references ACCOUNTS.custid, linking checking accounts to customers.",
    "soccer_1_robust": "Table Country:\n- Contains information about different countries.\n- Columns:\n  - id: Unique identifier for each country.\n  - NAME: Name of the country.\n\nTable League:\n- Stores data related to different leagues.\n- Columns:\n  - id: Unique identifier for each league.\n  - state_id: Identifier of the state where the league is located.\n  - NAME: Name of the league.\n\nTable Match:\n- Contains details about matches played.\n- Columns:\n  - id: Unique identifier for each match.\n  - state_id: Identifier of the state where the match took place.\n  - league_id: Identifier of the league to which the match belongs.\n  - season: Season in which the match was played.\n  - stage: Stage of the match.\n  - Date: Date of the match.\n  - match_api_id: API identifier for the match.\n  - home_team_api_id: API identifier for the home team.\n  - away_team_api_id: API identifier for the away team.\n  - home_team_goal: Number of goals scored by the home team.\n  - away_team_goal: Number of goals scored by the away team.\n  - Various columns for player details and match statistics.\n\nTable Player:\n- Contains information about players.\n- Columns:\n  - id: Unique identifier for each player.\n  - player_api_id: API identifier for the player.\n  - Player_Name: Name of the player.\n  - player_fifa_api_id: FIFA API identifier for the player.\n  - birthdate: Date of birth of the player.\n  - HEIGHT: Height of the player.\n  - WEIGHT: Weight of the player.\n\nTable Player_Attributes:\n- Stores attributes related to player performance.\n- Columns:\n  - id: Unique identifier for each player attribute.\n  - player_fifa_api_id: FIFA API identifier for the player.\n  - player_api_id: API identifier for the player.\n  - Date: Date of the player attribute data.\n  - Various attributes related to player performance such as overall performance, potential, preferred foot, etc.\n\nTable Team:\n- Contains information about different teams.\n- Columns:\n  - id: Unique identifier for each team.\n  - Team_API_id: API identifier for the team.\n  - Team_FIFA_API_id: FIFA API identifier for the team.\n  - TeamLongName: Full name of the team.\n  - TeamShortName: Short name or abbreviation of the team.\n\nTable Team_Attributes:\n- Stores attributes related to team performance.\n- Columns:\n  - id: Unique identifier for each team attribute.\n  - Team_FIFA_API_id: FIFA API identifier for the team.\n  - Team_API_id: API identifier for the team.\n  - Date: Date of the team attribute data.\n  - Various attributes related to team performance such as build-up play speed, passing, defense, etc.\n\nTable sqlite_sequence:\n- Contains information about the sequence of SQLite tables.\n- Columns:\n  - name: Name of the table.\n  - seq: Sequence number.\n\nForeign Keys:\n- Establish relationships between tables using foreign keys:\n  - Player_Attributes.player_api_id references Player.player_api_id.\n  - Player_Attributes.player_fifa_api_id references Player.player_fifa_api_id.\n  - Match and Player tables have multiple foreign key relationships for player details.\n  - Match.away_team_api_id references Team.Team_API_id.\n  - Match.home_team_api_id references Team.Team_API_id.\n  - Match.league_id references League.id.\n  - Match.state_id references Country.id.\n  - League.state_id references Country.id.\n  - Team_Attributes.Team_API_id references Team.Team_API_id.\n  - Team_Attributes.Team_FIFA_API_id references Team.Team_FIFA_API_id.",
    "soccer_2_robust": "Table College:\n- Contains information about different colleges.\n- Columns:\n  - College_Name: Name of the college.\n  - province: Province where the college is located.\n  - enr: Enrollment number of the college.\n\nTable Player:\n- Stores data related to players.\n- Columns:\n  - Player_ID: Unique identifier for each player.\n  - Player_Name: Name of the player.\n  - yellow_Card: Number of yellow cards received by the player.\n  - Home_Shots: Number of shots taken by the player at home.\n\nTable Tryout:\n- Contains details about player tryouts.\n- Columns:\n  - Player_ID: Identifier of the player.\n  - College_Name: Name of the college where the tryout took place.\n  - player_position: Position played by the player during the tryout.\n  - DECISION: Outcome decision of the tryout for the player.\n\nForeign Keys:\n- Tryout.College_Name references College.College_Name, establishing a relationship between tryouts and colleges.\n- Tryout.Player_ID references Player.Player_ID, linking tryouts to specific players.",
    "solvency_ii_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - AddressID: Unique identifier for each address.\n  - location_details: Details of the location associated with the address.\n\nTable Agreements:\n- Stores agreements related data.\n- Columns:\n  - File_ID: Identifier for the agreement file.\n  - EventID: Identifier of the event associated with the agreement.\n\nTable Assets:\n- Contains details about various assets.\n- Columns:\n  - AssetID: Unique identifier for each asset.\n  - Additional_Details: Additional information about the asset.\n\nTable Assets_in_Events:\n- Represents the relationship between assets and events.\n- Columns:\n  - AssetID: Identifier of the asset.\n  - EventID: Identifier of the event.\n\nTable Channels:\n- Stores information about different communication channels.\n- Columns:\n  - ChannelID: Unique identifier for each channel.\n  - Additional_Details: Additional details about the channel.\n\nTable Events:\n- Contains data related to events.\n- Columns:\n  - EventID: Unique identifier for each event.\n  - AddressID: Identifier of the address associated with the event.\n  - ChannelID: Identifier of the communication channel used for the event.\n  - Code_of_Event_Type: Code representing the type of event.\n  - FinanceID: Identifier of the finance related to the event.\n  - Position_ID: Identifier of the position related to the event.\n\nTable Finances:\n- Stores financial information.\n- Columns:\n  - FinanceID: Unique identifier for each finance record.\n  - Additional_Details: Additional details related to finance.\n\nTable Locations:\n- Contains details about different locations.\n- Columns:\n  - Position_ID: Unique identifier for each position.\n  - Additional_Details: Additional information about the location.\n\nTable Parties:\n- Stores information about different parties involved.\n- Columns:\n  - PartyID: Unique identifier for each party.\n  - Party_Information: Information about the party.\n\nTable Parties_in_Events:\n- Represents the relationship between parties and events.\n- Columns:\n  - PartyID: Identifier of the party.\n  - EventID: Identifier of the event.\n  - role_code: Code representing the role of the party in the event.\n\nTable Products:\n- Contains details about various products.\n- Columns:\n  - ProductID: Unique identifier for each product.\n  - Code_of_Product_Type: Code representing the type of product.\n  - ProductName: Name of the product.\n  - Price_of_Product: Price of the product.\n\nTable Products_in_Events:\n- Represents the relationship between products and events.\n- Columns:\n  - Product_in_Incident_ID: Identifier for the product in the incident.\n  - EventID: Identifier of the event.\n  - ProductID: Identifier of the product.\n\nForeign Keys:\n- Events.FinanceID references Finances.FinanceID, establishing a relationship between events and finances.\n- Events.AddressID references Addresses.AddressID, linking events to specific addresses.\n- Events.Position_ID references Locations.Position_ID, connecting events to specific positions.\n- Products_in_Events.ProductID references Products.ProductID, linking products to specific events.\n- Products_in_Events.EventID references Events.EventID, establishing a relationship between products and events.\n- Parties_in_Events.EventID references Events.EventID, linking parties to specific events.\n- Parties_in_Events.PartyID references Parties.PartyID, connecting parties to events.\n- Agreements.EventID references Events.EventID, establishing a relationship between agreements and events.\n- Assets_in_Events.EventID references Events.EventID, linking assets to events.",
    "sports_competition_robust": "Table club:\n- Contains information about different clubs.\n- Columns:\n  - ClubID: Unique identifier for each club.\n  - name: Name of the club.\n  - Area: Area where the club is located.\n  - Begin_year: Year when the club was established.\n\nTable club_rank:\n- Stores ranking data of clubs.\n- Columns:\n  - Level: Level of the club's ranking.\n  - ClubID: Identifier of the club.\n  - 1st: Number of first-place finishes.\n  - 2nd: Number of second-place finishes.\n  - 3rd: Number of third-place finishes.\n  - Sum: Total sum of rankings.\n\nTable competition:\n- Contains details about different competitions.\n- Columns:\n  - competitionID: Unique identifier for each competition.\n  - Year: Year when the competition took place.\n  - Competition_Category: Category of the competition.\n  - Nation: Nation where the competition occurred.\n\nTable competition_result:\n- Stores results of competitions between clubs.\n- Columns:\n  - competitionID: Identifier of the competition.\n  - ClubID1: Identifier of the first club.\n  - ClubID2: Identifier of the second club.\n  - score: Score of the competition result.\n\nTable player:\n- Contains information about players.\n- Columns:\n  - PlayerID: Unique identifier for each player.\n  - name: Name of the player.\n  - Location: Location of the player.\n  - ClubID: Identifier of the club to which the player belongs.\n  - apps: Number of appearances by the player.\n  - Attempts: Number of attempts made by the player.\n  - targets: Number of targets achieved by the player.\n  - score: Score of the player.\n\nForeign Keys:\n- club_rank.ClubID references club.ClubID, establishing a relationship between club_rank and club.\n- player.ClubID references club.ClubID, linking players to their respective clubs.\n- competition_result.competitionID references competition.competitionID, connecting competition_result to specific competitions.\n- competition_result.ClubID2 references club.ClubID, linking competition_result to the second club.\n- competition_result.ClubID1 references club.ClubID, linking competition_result to the first club.",
    "station_weather_robust": "Table route:\n- Contains information about the routes taken by trains.\n- Columns:\n  - Train_id: Identifier of the train.\n  - Station_id: Identifier of the station on the route.\n\nTable station:\n- Stores details about different stations.\n- Columns:\n  - id: Unique identifier for each station.\n  - NetworkName: Name of the network to which the station belongs.\n  - amenities: Amenities available at the station.\n  - Local_Authority: Local authority governing the station.\n\nTable train:\n- Contains data related to trains.\n- Columns:\n  - id: Unique identifier for each train.\n  - Train_Number: Number assigned to the train.\n  - name: Name of the train.\n  - source: Starting point of the train.\n  - Destination: Final destination of the train.\n  - Time: Scheduled time of the train.\n  - spacing: Spacing information related to the train.\n\nTable weekly_weather:\n- Stores weekly weather data for stations.\n- Columns:\n  - Station_id: Identifier of the station.\n  - Day_of_Week: Day of the week for the weather data.\n  - max_temp: Maximum temperature recorded.\n  - Low_Temperature: Lowest temperature recorded.\n  - rainfall: Amount of rainfall.\n  - wind_velocity_mph: Wind velocity in miles per hour.\n\nForeign Keys:\n- route.Station_id references station.id, establishing a relationship between routes and stations.\n- route.Train_id references train.id, linking routes to specific trains.\n- weekly_weather.Station_id references station.id, connecting weekly weather data to stations.",
    "store_1_robust": "Table albums:\n- Contains information about music albums.\n- Columns:\n  - id: Unique identifier for each album.\n  - name: Name of the album.\n  - Artist_id: Foreign key referencing the id of the artist in the artists table.\n\nTable artists:\n- Stores details about music artists.\n- Columns:\n  - id: Unique identifier for each artist.\n  - name: Name of the artist.\n\nTable customers:\n- Holds data related to customers.\n- Columns:\n  - id: Unique identifier for each customer.\n  - FName: First name of the customer.\n  - LName: Last name of the customer.\n  - company: Company name of the customer.\n  - location: Location of the customer.\n  - CITY: City where the customer is located.\n  - state: State of the customer.\n  - country: Country of the customer.\n  - postal_code: Postal code of the customer.\n  - telephone: Telephone number of the customer.\n  - facsimile: Fax number of the customer.\n  - Email_address: Email address of the customer.\n  - support_rep_id: Identifier of the support representative assigned to the customer.\n\nTable employees:\n- Contains information about employees.\n- Columns:\n  - id: Unique identifier for each employee.\n  - LName: Last name of the employee.\n  - FName: First name of the employee.\n  - name: Full name of the employee.\n  - reports_to: Identifier of the employee to whom this employee reports.\n  - birth_date: Birth date of the employee.\n  - hire_date: Date when the employee was hired.\n  - location: Location of the employee.\n  - CITY: City where the employee is located.\n  - state: State of the employee.\n  - country: Country of the employee.\n  - postal_code: Postal code of the employee.\n  - telephone: Telephone number of the employee.\n  - facsimile: Fax number of the employee.\n  - Email_address: Email address of the employee.\n\nTable genres:\n- Stores information about music genres.\n- Columns:\n  - id: Unique identifier for each genre.\n  - name: Name of the genre.\n\nTable invoice_lines:\n- Contains details about individual invoice line items.\n- Columns:\n  - id: Unique identifier for each invoice line.\n  - invoice_id: Identifier of the invoice to which this line item belongs.\n  - track_id: Identifier of the music track associated with this line item.\n  - Unit_Price: Price per unit of the item.\n  - amount: Total amount for this line item.\n\nTable invoices:\n- Stores data related to invoices.\n- Columns:\n  - id: Unique identifier for each invoice.\n  - Customer_id: Identifier of the customer associated with this invoice.\n  - Date_of_invoice: Date of the invoice.\n  - Billing_Address: Address for billing.\n  - Billing_City: City for billing.\n  - billing_state: State for billing.\n  - billing_country: Country for billing.\n  - billing_postal_code: Postal code for billing.\n  - total: Total amount on the invoice.\n\nTable media_types:\n- Contains information about different media types.\n- Columns:\n  - id: Unique identifier for each media type.\n  - name: Name of the media type.\n\nTable playlist_tracks:\n- Stores the relationship between playlists and tracks.\n- Columns:\n  - playlist_id: Identifier of the playlist.\n  - track_id: Identifier of the track in the playlist.\n\nTable playlists:\n- Contains details about playlists.\n- Columns:\n  - id: Unique identifier for each playlist.\n  - name: Name of the playlist.\n\nTable sqlite_sequence:\n- Represents a table used internally by SQLite for auto-incrementing primary key values.\n- Columns:\n  - name: Name of the table.\n  - seq: Sequence number.\n\nTable tracks:\n- Contains information about music tracks.\n- Columns:\n  - id: Unique identifier for each track.\n  - name: Name of the track.\n  - Album_ID: Identifier of the album to which the track belongs.\n  - MediaTypeID: Identifier of the media type of the track.\n  - genre_id: Identifier of the genre of the track.\n  - songwriter: Name of the songwriter.\n  - milliseconds: Duration of the track in milliseconds.\n  - Bytes: Size of the track in bytes.\n  - Unit_Price: Price of the track.\n\nForeign Keys:\n- albums.Artist_id references artists.id, linking albums to specific artists.\n- employees.reports_to references employees.id, establishing a hierarchical relationship among employees.\n- customers.support_rep_id references employees.id, connecting customers to their support representatives.\n- invoices.Customer_id references customers.id, linking invoices to specific customers.\n- tracks.MediaTypeID references media_types.id, connecting tracks to their media types.\n- tracks.genre_id references genres.id, linking tracks to specific genres.\n- tracks.Album_ID references albums.id, establishing a relationship between tracks and albums.\n- invoice_lines.track_id references tracks.id, linking invoice lines to specific tracks.\n- invoice_lines.invoice_id references invoices.id, connecting invoice lines to their respective invoices.\n- playlist_tracks.track_id references tracks.id, establishing a relationship between playlist tracks and tracks.\n- playlist_tracks.playlist_id references playlists.id, linking playlist tracks to specific playlists.",
    "store_product_robust": "Table district:\n- Contains information about different districts.\n- Columns:\n  - districtID: Unique identifier for each district.\n  - DistrictName: Name of the district.\n  - headquartered_city: City where the district is headquartered.\n  - city_population: Population of the city.\n  - city_area: Area of the city.\n\nTable product:\n- Stores details about various products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - product: Name of the product.\n  - size: Size of the product.\n  - DPI: Dots per inch resolution of the product.\n  - pages_per_minute_color: Number of pages per minute in color.\n  - max_page_size: Maximum page size supported by the product.\n  - feature: Features of the product.\n\nTable store:\n- Contains information about different stores.\n- Columns:\n  - storeID: Unique identifier for each store.\n  - Store_Name: Name of the store.\n  - category: Category of the store.\n  - Area_Dimension: Dimension of the store area.\n  - Number_of_product_category: Number of product categories in the store.\n  - ranking: Ranking of the store.\n\nTable store_district:\n- Represents the relationship between stores and districts.\n- Columns:\n  - storeID: Identifier of the store.\n  - districtID: Identifier of the district where the store is located.\n\nTable store_product:\n- Represents the relationship between stores and products.\n- Columns:\n  - storeID: Identifier of the store.\n  - product_id: Identifier of the product available in the store.\n\nForeign Keys:\n- store_product.product_id references product.product_id, linking store_product to specific products.\n- store_product.storeID references store.storeID, connecting store_product to specific stores.\n- store_district.districtID references district.districtID, establishing a relationship between store_district and districts.\n- store_district.storeID references store.storeID, linking store_district to specific stores.",
    "storm_record_robust": "Table affected_region:\n- Contains data about regions affected by storms.\n- Columns:\n  - regionid: Identifier for each affected region.\n  - stormID: Identifier of the storm causing the impact.\n  - count_of_city_affected: Number of cities affected in the region.\n\nTable region:\n- Stores information about different regions.\n- Columns:\n  - regionid: Unique identifier for each region.\n  - area_code: Area code of the region.\n  - region_name: Name of the region.\n\nTable storm:\n- Contains details about different storms.\n- Columns:\n  - stormID: Unique identifier for each storm.\n  - name: Name of the storm.\n  - duration: Duration of the storm.\n  - max_velocity: Maximum velocity of the storm.\n  - Damage_millions_USD: Damage caused by the storm in millions of USD.\n  - Number_Fatality: Number of fatalities caused by the storm.\n\nForeign Keys:\n- affected_region.stormID references storm.stormID, establishing a relationship between affected regions and storms.\n- affected_region.regionid references region.regionid, linking affected regions to specific regions.",
    "student_1_robust": "Table list:\n- Contains a list of individuals.\n- Columns:\n  - LName: Last name of the individual.\n  - FName: First name of the individual.\n  - Rank: Rank or position of the individual.\n  - schoolroom: Identifier of the schoolroom associated with the individual.\n\nTable teachers:\n- Stores information about teachers.\n- Columns:\n  - LName: Last name of the teacher.\n  - FName: First name of the teacher.\n  - schoolroom: Identifier of the schoolroom where the teacher is assigned.\n\nForeign Keys:\n- No foreign keys specified in the provided information.",
    "student_assessment_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line_first: First line of the address.\n  - line_second: Second line of the address.\n  - city: City of the address.\n  - postal_code: Postal code of the address.\n  - StateProvinceCounty: State, province, or county of the address.\n  - country: Country of the address.\n\nTable Candidate_Assessments:\n- Stores assessments of candidates.\n- Columns:\n  - candidate_id: Identifier of the candidate.\n  - qualification: Qualification of the candidate.\n  - assessment_date: Date of the assessment.\n  - asessment_outcome_code: Code representing the outcome of the assessment.\n\nTable Candidates:\n- Contains information about candidates.\n- Columns:\n  - candidate_id: Unique identifier for each candidate.\n  - candidate_info: Information about the candidate.\n\nTable Courses:\n- Stores details about different courses.\n- Columns:\n  - course_id: Unique identifier for each course.\n  - course_name: Name of the course.\n  - course_information: Information about the course.\n  - additional_information: Additional details about the course.\n\nTable People:\n- Contains data related to people.\n- Columns:\n  - person_id: Unique identifier for each person.\n  - FName: First name of the person.\n  - MName: Middle name of the person.\n  - LName: Last name of the person.\n  - cell_phone_number: Cell phone number of the person.\n  - email: Email address of the person.\n  - LoginName: Login name of the person.\n  - password: Password of the person.\n\nTable People_Addresses:\n- Stores the relationship between people and addresses.\n- Columns:\n  - person_address_id: Unique identifier for each person-address relationship.\n  - person_id: Identifier of the person.\n  - address_id: Identifier of the address.\n  - start_date: Start date of the association between person and address.\n  - end_date: End date of the association between person and address.\n\nTable Student_Course_Attendance:\n- Contains information about student attendance in courses.\n- Columns:\n  - stu_id: Identifier of the student.\n  - course_id: Identifier of the course.\n  - attendance_date: Date of attendance.\n\nTable Student_Course_Registrations:\n- Stores data about student registrations in courses.\n- Columns:\n  - stu_id: Identifier of the student.\n  - course_id: Identifier of the course.\n  - enrollment_date: Date of enrollment.\n\nTable Students:\n- Contains details about students.\n- Columns:\n  - stu_id: Unique identifier for each student.\n  - student_information: Information about the student.\n\nForeign Keys:\n- Students.stu_id references People.person_id, linking students to people.\n- People_Addresses.address_id references Addresses.address_id, establishing a relationship between people addresses.\n- People_Addresses.person_id references People.person_id, connecting people addresses to people.\n- Student_Course_Registrations.course_id references Courses.course_id, linking student course registrations to courses.\n- Student_Course_Registrations.stu_id references Students.stu_id, connecting student course registrations to students.\n- Student_Course_Attendance.stu_id references Student_Course_Registrations.stu_id, establishing a relationship between student course attendance and registrations.\n- Student_Course_Attendance.course_id references Student_Course_Registrations.course_id, linking student course attendance to registrations.\n- Candidates.candidate_id references People.person_id, connecting candidates to people.\n- Candidate_Assessments.candidate_id references Candidates.candidate_id, establishing a relationship between candidate assessments and candidates.",
    "student_transcripts_tracking_robust": "Table Addresses:\n- Contains information about different addresses.\n- Columns:\n  - address_id: Unique identifier for each address.\n  - line_first: First line of the address.\n  - line_second: Second line of the address.\n  - line_third: Third line of the address.\n  - CITY: City of the address.\n  - postal_code: Postal code of the address.\n  - State_Province_County: State, province, or county of the address.\n  - nation: Nation of the address.\n  - additional_address_details: Additional details related to the address.\n\nTable Courses:\n- Stores details about various courses.\n- Columns:\n  - course_id: Unique identifier for each course.\n  - CourseName: Name of the course.\n  - CourseSummary: Summary of the course.\n  - additional_details: Additional details related to the course.\n\nTable Degree_Programs:\n- Contains information about degree programs.\n- Columns:\n  - degree_program_id: Unique identifier for each degree program.\n  - department_id: Identifier of the department offering the degree program.\n  - degree_abstract_name: Name of the degree program.\n  - degree_abstract_description: Description of the degree program.\n  - additional_details: Additional details related to the degree program.\n\nTable Departments:\n- Stores data related to different departments.\n- Columns:\n  - department_id: Unique identifier for each department.\n  - DepartmentName: Name of the department.\n  - DepartmentDescription: Description of the department.\n  - additional_details: Additional details related to the department.\n\nTable Sections:\n- Contains information about course sections.\n- Columns:\n  - section_id: Unique identifier for each section.\n  - course_id: Identifier of the course to which the section belongs.\n  - SectionName: Name of the section.\n  - Description: Description of the section.\n  - additional_details: Additional details related to the section.\n\nTable Semesters:\n- Stores details about different academic semesters.\n- Columns:\n  - semester_id: Unique identifier for each semester.\n  - SemesterName: Name of the semester.\n  - SemesterDescription: Description of the semester.\n  - additional_details: Additional details related to the semester.\n\nTable Student_Enrolment:\n- Contains information about student enrollments.\n- Columns:\n  - student_registration_id: Unique identifier for each student registration.\n  - degree_program_id: Identifier of the degree program in which the student is enrolled.\n  - semester_id: Identifier of the semester during which the student is enrolled.\n  - student_id: Identifier of the student.\n  - additional_details: Additional details related to the student enrollment.\n\nTable Student_Enrolment_Courses:\n- Stores data about student enrollments in specific courses.\n- Columns:\n  - STUDENTCOURCE_id: Unique identifier for each student-course enrollment.\n  - course_id: Identifier of the course in which the student is enrolled.\n  - student_registration_id: Identifier of the student registration.\n\nTable Students:\n- Contains details about students.\n- Columns:\n  - student_id: Unique identifier for each student.\n  - current_address_id: Identifier of the current address of the student.\n  - permanent_address_id: Identifier of the permanent address of the student.\n  - First_Name: First name of the student.\n  - Middle_Name: Middle name of the student.\n  - Last_Name: Last name of the student.\n  - telephone_number: Telephone number of the student.\n  - Email_Address: Email address of the student.\n  - SSN: Social Security Number of the student.\n  - Date_of_First_Enrollment: Date of the student's first enrollment.\n  - departure_date: Date of departure of the student.\n  - additional_student_details: Additional details related to the student.\n\nTable Transcript_Contents:\n- Stores contents of student transcripts.\n- Columns:\n  - STUDENTCOURCE_id: Identifier of the student-course relationship.\n  - transcript_id: Identifier of the transcript.\n\nTable Transcripts:\n- Contains information about student transcripts.\n- Columns:\n  - transcript_id: Unique identifier for each transcript.\n  - date_of_transcript: Date of the transcript.\n  - additional_details: Additional details related to the transcript.\n\nForeign Keys:\n- Degree_Programs.department_id references Departments.department_id, establishing a relationship between degree programs and departments.\n- Sections.course_id references Courses.course_id, linking sections to specific courses.\n- Students.permanent_address_id and Students.current_address_id reference Addresses.address_id, connecting students to their permanent and current addresses.\n- Student_Enrolment.student_id references Students.student_id, linking student enrollments to students.\n- Student_Enrolment.semester_id references Semesters.semester_id, connecting student enrollments to semesters.\n- Student_Enrolment.degree_program_id references Degree_Programs.degree_program_id, establishing a relationship between student enrollments and degree programs.\n- Student_Enrolment_Courses.student_registration_id references Student_Enrolment.student_registration_id, linking student-course enrollments to student enrollments.\n- Student_Enrolment_Courses.course_id references Courses.course_id, connecting student-course enrollments to courses.\n- Transcript_Contents.transcript_id references Transcripts.transcript_id, establishing a relationship between transcript contents and transcripts.\n- Transcript_Contents.STUDENTCOURCE_id references Student_Enrolment_Courses.STUDENTCOURCE_id, linking transcript contents to student-course enrollments.",
    "swimming_robust": "Table event:\n- Contains information about different events.\n- Columns:\n  - ID: Unique identifier for each event.\n  - Name: Name of the event.\n  - Stadium_ID: Identifier of the stadium where the event takes place.\n  - Year: Year in which the event occurred.\n\nTable record:\n- Stores records of outcomes and incidents related to events.\n- Columns:\n  - ID: Unique identifier for each record.\n  - outcome: Outcome of the event.\n  - Swimmer_ID: Identifier of the swimmer associated with the record.\n  - Incident_ID: Identifier of the incident related to the record.\n\nTable stadium:\n- Contains details about different stadiums.\n- Columns:\n  - ID: Unique identifier for each stadium.\n  - name: Name of the stadium.\n  - capacity: Capacity of the stadium.\n  - city: City where the stadium is located.\n  - nation: Nation to which the stadium belongs.\n  - opening_year: Year in which the stadium was opened.\n\nTable swimmer:\n- Stores information about swimmers.\n- Columns:\n  - ID: Unique identifier for each swimmer.\n  - name: Name of the swimmer.\n  - citizenship: Citizenship of the swimmer.\n  - meter_one_hundred: Time taken for the 100-meter swim.\n  - meter_two_hundred: Time taken for the 200-meter swim.\n  - meter_three_hundred: Time taken for the 300-meter swim.\n  - meter_four_hundred: Time taken for the 400-meter swim.\n  - meter_five_hundred: Time taken for the 500-meter swim.\n  - meter_six_hundred: Time taken for the 600-meter swim.\n  - meter_seven_hundred: Time taken for the 700-meter swim.\n  - time: Total time taken for the swimmer in the event.\n\nForeign Keys:\n- event.Stadium_ID references stadium.ID, establishing a relationship between events and stadiums.\n- record.Swimmer_ID references swimmer.ID, linking records to specific swimmers.\n- record.Incident_ID references event.ID, connecting records to specific incidents in events.",
    "theme_gallery_robust": "Table artist:\n- Contains information about different artists.\n- Columns:\n  - Artist_ID: Unique identifier for each artist.\n  - Name: Name of the artist.\n  - Nation: Nationality of the artist.\n  - Year_Join: Year when the artist joined.\n  - Years: Number of years the artist has been active.\n\nTable exhibition:\n- Stores details about art exhibitions.\n- Columns:\n  - Exhibition_ID: Unique identifier for each exhibition.\n  - Year: Year of the exhibition.\n  - theme: Theme of the exhibition.\n  - Artist_ID: Identifier of the artist associated with the exhibition.\n  - price_of_ticket: Price of the exhibition ticket.\n\nTable exhibition_record:\n- Contains records of exhibition attendance.\n- Columns:\n  - Exhibition_ID: Identifier of the exhibition.\n  - date_time: Date and time of the exhibition.\n  - attendance: Number of attendees at the exhibition.\n\nForeign Keys:\n- exhibition.Artist_ID references artist.Artist_ID, linking exhibitions to specific artists.\n- exhibition_record.Exhibition_ID references exhibition.Exhibition_ID, establishing a relationship between exhibition records and exhibitions.",
    "tracking_grants_for_research_robust": "Table Document_Types:\n- Contains information about different types of documents.\n- Columns:\n  - doc_type_code: Unique code for each document type.\n  - doc_description: Description of the document type.\n\nTable Documents:\n- Stores details of various documents.\n- Columns:\n  - document_id: Unique identifier for each document.\n  - doc_type_code: Code referencing the type of document.\n  - grant_id: Identifier of the grant associated with the document.\n  - delivery_date: Date when the document was delivered.\n  - responseReceivedDate: Date when the response to the document was received.\n  - additional_details: Additional details related to the document.\n\nTable Grants:\n- Contains information about grants provided.\n- Columns:\n  - grant_id: Unique identifier for each grant.\n  - organisation_id: Identifier of the organization receiving the grant.\n  - grant_quantity: Quantity or amount of the grant.\n  - grant_begin_date: Start date of the grant.\n  - grant_end_date: End date of the grant.\n  - additional_details: Additional details related to the grant.\n\nTable Organisation_Types:\n- Stores different types or categories of organizations.\n- Columns:\n  - category: Category code for each organization type.\n  - organisation_category_description: Description of the organization category.\n\nTable Organisations:\n- Contains details about various organizations.\n- Columns:\n  - organisation_id: Unique identifier for each organization.\n  - category: Category code referencing the type of organization.\n  - organization_info: Information about the organization.\n\nTable Project_Outcomes:\n- Stores outcomes or results of projects.\n- Columns:\n  - project_id: Identifier of the project.\n  - result_code: Code representing the outcome.\n  - result_details: Details of the project outcome.\n\nTable Project_Staff:\n- Contains information about staff working on projects.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - project_id: Identifier of the project the staff member is associated with.\n  - RoleCode: Code representing the role of the staff member.\n  - start_date: Start date of the staff member's involvement in the project.\n  - end_date: End date of the staff member's involvement.\n  - additional_details: Additional details related to the staff member.\n\nTable Projects:\n- Stores details of various projects.\n- Columns:\n  - project_id: Unique identifier for each project.\n  - organisation_id: Identifier of the organization managing the project.\n  - ProjectDetails: Details of the project.\n\nTable Research_Outcomes:\n- Contains information about outcomes of research activities.\n- Columns:\n  - result_code: Unique code for each research outcome.\n  - result_description: Description of the research outcome.\n\nTable Research_Staff:\n- Stores details of staff involved in research activities.\n- Columns:\n  - staff_id: Unique identifier for each staff member.\n  - employer_organisation_id: Identifier of the organization employing the staff member.\n  - personnel_details: Details about the staff member.\n\nTable Staff_Roles:\n- Contains different roles that staff members can have.\n- Columns:\n  - RoleCode: Unique code for each staff role.\n  - RoleDescription: Description of the staff role.\n\nTable Tasks:\n- Stores information about tasks within projects.\n- Columns:\n  - task_id: Unique identifier for each task.\n  - project_id: Identifier of the project to which the task belongs.\n  - TaskDetails: Details of the task.\n  - exempli_gratia_agree_bbjectives: Objectives or goals of the task.\n\nForeign Keys:\n- Documents.grant_id references Grants.grant_id, linking documents to specific grants.\n- Documents.doc_type_code references Document_Types.doc_type_code, establishing a relationship between documents and document types.\n- Grants.organisation_id references Organisations.organisation_id, connecting grants to specific organizations.\n- Organisations.category references Organisation_Types.category, linking organizations to their respective types.\n- Project_Outcomes.result_code references Research_Outcomes.result_code, establishing a relationship between project outcomes and research outcomes.\n- Project_Outcomes.project_id references Projects.project_id, linking project outcomes to specific projects.\n- Project_Staff.RoleCode references Staff_Roles.RoleCode, connecting project staff to their roles.\n- Project_Staff.project_id references Projects.project_id, establishing a relationship between project staff and projects.\n- Projects.organisation_id references Organisations.organisation_id, linking projects to the organizations managing them.\n- Research_Staff.employer_organisation_id references Organisations.organisation_id, connecting research staff to their employing organizations.\n- Tasks.project_id references Projects.project_id, establishing a relationship between tasks and projects.",
    "tracking_orders_robust": "Table Customers:\n- Contains information about customers.\n- Columns:\n  - customer_id: Unique identifier for each customer.\n  - CustomerName: Name of the customer.\n  - CustomerDetails: Additional details about the customer.\n\nTable Invoices:\n- Stores data related to invoices.\n- Columns:\n  - number_of_invoice: Unique identifier for each invoice.\n  - date_of_invoice: Date when the invoice was generated.\n  - billing_details: Details related to billing.\n\nTable Order_Items:\n- Contains details about items in an order.\n- Columns:\n  - Order_project_id: Unique identifier for each order item.\n  - product_id: Identifier of the product in the order item.\n  - order_id: Identifier of the order to which the item belongs.\n  - order_project_status: Status of the order item.\n  - order_project_details: Additional details about the order item.\n\nTable Orders:\n- Stores information about orders placed by customers.\n- Columns:\n  - order_id: Unique identifier for each order.\n  - customer_id: Identifier of the customer who placed the order.\n  - order_status: Status of the order.\n  - dateOrderPlaced: Date when the order was placed.\n  - additional_details: Additional information related to the order.\n\nTable Products:\n- Contains details about products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - ProductName: Name of the product.\n  - ProductDetails: Additional details about the product.\n\nTable Shipment_Items:\n- Stores information about items in a shipment.\n- Columns:\n  - shipment_id: Unique identifier for each shipment item.\n  - Order_project_id: Identifier of the order item in the shipment.\n\nTable Shipments:\n- Contains data related to shipments.\n- Columns:\n  - shipment_id: Unique identifier for each shipment.\n  - order_id: Identifier of the order associated with the shipment.\n  - number_of_invoice: Number of the invoice related to the shipment.\n  - shipmentTrackingNumber: Tracking number for the shipment.\n  - date_of_shipment: Date when the shipment was dispatched.\n  - additional_shipment_info: Extra information about the shipment.\n\nForeign Keys:\n- Orders.customer_id references Customers.customer_id, establishing a relationship between orders and customers.\n- Order_Items.product_id references Products.product_id, linking order items to specific products.\n- Order_Items.order_id references Orders.order_id, connecting order items to their respective orders.\n- Shipments.number_of_invoice references Invoices.number_of_invoice, linking shipments to specific invoices.\n- Shipments.order_id references Orders.order_id, connecting shipments to orders.\n- Shipment_Items.shipment_id references Shipments.shipment_id, establishing a relationship between shipment items and shipments.\n- Shipment_Items.Order_project_id references Order_Items.Order_project_id, linking shipment items to order items.",
    "tracking_share_transactions_robust": "Table Investors:\n- Contains information about different investors.\n- Columns:\n  - investor_id: Unique identifier for each investor.\n  - investor_details: Details about the investor.\n\nTable Lots:\n- Stores details about investment lots associated with investors.\n- Columns:\n  - many_id: Unique identifier for each lot.\n  - investor_id: Identifier of the investor associated with the lot.\n  - many_details: Additional details about the lot.\n\nTable Purchases:\n- Contains data related to purchase transactions.\n- Columns:\n  - purchase_transaction_id: Unique identifier for each purchase transaction.\n  - transaction_details: Details of the transaction.\n\nTable Ref_Transaction_Types:\n- Provides reference information about transaction types.\n- Columns:\n  - transaction_class_code: Unique code for each transaction class.\n  - transaction_class_description: Description of the transaction class.\n\nTable Sales:\n- Stores information about sales transactions.\n- Columns:\n  - sales_transaction_id: Unique identifier for each sales transaction.\n  - transaction_details: Details of the transaction.\n\nTable Transactions:\n- Contains details of various financial transactions.\n- Columns:\n  - transaction_id: Unique identifier for each transaction.\n  - investor_id: Identifier of the investor involved in the transaction.\n  - transaction_class_code: Code representing the type of transaction.\n  - transaction_date: Date of the transaction.\n  - transaction_amount: Amount involved in the transaction.\n  - share_quantity: Quantity of shares involved.\n  - additional_details: Any additional information related to the transaction.\n\nTable Transactions_Lots:\n- Links transactions with specific investment lots.\n- Columns:\n  - transaction_id: Identifier of the transaction.\n  - many_id: Identifier of the lot associated with the transaction.\n\nForeign Keys:\n- Lots.investor_id references Investors.investor_id, establishing a relationship between lots and investors.\n- Transactions.transaction_class_code references Ref_Transaction_Types.transaction_class_code, linking transaction types to their descriptions.\n- Transactions.investor_id references Investors.investor_id, connecting transactions to investors.\n- Sales.sales_transaction_id references Transactions.transaction_id, linking sales to specific transactions.\n- Purchases.purchase_transaction_id references Transactions.transaction_id, connecting purchases to transactions.\n- Transactions_Lots.transaction_id references Transactions.transaction_id, establishing a relationship between transaction lots and transactions.\n- Transactions_Lots.many_id references Lots.many_id, linking transaction lots to specific lots.",
    "tracking_software_problems_robust": "Table Problem_Category_Codes:\n- Contains codes and descriptions for different categories of issues.\n- Columns:\n  - issue_category_type: Type of the issue category.\n  - issue_category_description: Description of the issue category.\n\nTable Problem_Log:\n- Stores logs of reported problems and their details.\n- Columns:\n  - problem_log_id: Unique identifier for each log entry.\n  - assigned_to_personnel_id: Identifier of the personnel assigned to handle the issue.\n  - issue_id: Identifier of the reported issue.\n  - issue_category_type: Type of the issue category.\n  - issue_status_code: Status code of the issue.\n  - date_of_log_entry: Date when the log entry was made.\n  - summary_of_log_entry: Brief summary of the log entry.\n  - logEntryFix: Fix applied for the issue.\n  - additional_log_details: Additional details related to the log entry.\n\nTable Problem_Status_Codes:\n- Contains codes and descriptions for different statuses of the issues.\n- Columns:\n  - issue_status_code: Code for the issue status.\n  - issue_status_description: Description of the issue status.\n\nTable Problems:\n- Stores information about reported problems.\n- Columns:\n  - issue_id: Unique identifier for each reported problem.\n  - product_id: Identifier of the product related to the problem.\n  - closure_authorised_by_personnel_id: Identifier of the personnel authorizing closure of the problem.\n  - reported_by_personnel_id: Identifier of the personnel who reported the problem.\n  - date_of_reported_problem: Date when the problem was reported.\n  - date_of_closed_problem: Date when the problem was closed.\n  - issue_description: Description of the reported problem.\n  - additional_problem_details: Additional details related to the problem.\n\nTable Product:\n- Contains details about different products.\n- Columns:\n  - product_id: Unique identifier for each product.\n  - productName: Name of the product.\n  - productDetails: Additional details about the product.\n\nTable Staff:\n- Stores information about staff members/personnel.\n- Columns:\n  - personnel_id: Unique identifier for each staff member.\n  - personnel_first_name: First name of the staff member.\n  - personnel_last_name: Last name of the staff member.\n  - additional_personnel_details: Additional details about the staff member.\n\nForeign Keys:\n- Problem_Log.issue_status_code references Problem_Status_Codes.issue_status_code, linking log entries to specific issue statuses.\n- Problem_Log.issue_id references Problems.issue_id, connecting log entries to reported problems.\n- Problem_Log.assigned_to_personnel_id references Staff.personnel_id, establishing a relationship between assigned personnel and staff members.\n- Problem_Log.issue_category_type references Problem_Category_Codes.issue_category_type, linking log entries to specific issue categories.\n- Problems.reported_by_personnel_id references Staff.personnel_id, connecting reported problems to staff members.\n- Problems.product_id references Product.product_id, establishing a relationship between problems and products.\n- Problems.closure_authorised_by_personnel_id references Staff.personnel_id, linking closure authorization to staff members.",
    "train_station_robust": "Table station:\n- Contains information about different train stations.\n- Columns:\n  - stationID: Unique identifier for each station.\n  - Name: Name of the station.\n  - yearly_entry_exit: Number of yearly entries and exits at the station.\n  - yearly_transfers: Number of yearly transfers at the station.\n  - all_Passengers: Total number of passengers at the station.\n  - Position: Position details of the station.\n  - Major_Services: Major services provided at the station.\n  - count_of_platforms: Count of platforms available at the station.\n\nTable train:\n- Stores data related to trains.\n- Columns:\n  - trainID: Unique identifier for each train.\n  - Name: Name of the train.\n  - time: Time details of the train.\n  - service: Type of service provided by the train.\n\nTable train_station:\n- Represents the relationship between trains and stations.\n- Columns:\n  - trainID: Identifier of the train.\n  - stationID: Identifier of the station.\n\nForeign Keys:\n- train_station.stationID references station.stationID, establishing a relationship between train_station and station.\n- train_station.trainID references train.trainID, linking train_station to specific trains.",
    "tvshow_robust": "Table Cartoon:\n- Contains information about different cartoons.\n- Columns:\n  - id: Unique identifier for each cartoon.\n  - name: Name of the cartoon.\n  - helmed_by: Person or entity in charge of the cartoon.\n  - authored_by: Person or entity who authored the cartoon.\n  - Original_broadcast_date: Date when the cartoon was first broadcasted.\n  - Production_identifier: Identifier for the production of the cartoon.\n  - Network: Foreign key referencing the id of the TV_Channel in the TV_Channel table.\n\nTable TV_Channel:\n- Stores data related to TV channels.\n- Columns:\n  - id: Unique identifier for each TV channel.\n  - SeriesName: Name of the TV series associated with the channel.\n  - Nation: Country of origin for the TV channel.\n  - LANGUAGE: Language in which the TV channel broadcasts.\n  - CONTENT: Type of content aired on the TV channel.\n  - Pixel_aspect_ratio_PAR: Aspect ratio of the pixels on the TV channel.\n  - high_def_TV: Indicates if the TV channel broadcasts in high definition.\n  - Pay_per_view_PPV: Information about pay-per-view options on the TV channel.\n  - Package_Option: Options available for TV channel packages.\n\nTable TV_series:\n- Contains details about TV series.\n- Columns:\n  - id: Unique identifier for each TV series.\n  - episode: Episode number of the TV series.\n  - broadcast_date: Date when the episode was broadcasted.\n  - score: Score or rating of the TV series.\n  - SHARE: Share percentage of viewership.\n  - 18_49_Rating_Share: Rating share in the 18-49 age group.\n  - audience_m: Audience measurement data.\n  - Weekly_Rank: Ranking of the TV series for the week.\n  - Network: Identifier of the TV channel broadcasting the series.\n\nForeign Keys:\n- TV_series.Network references TV_Channel.id, establishing a relationship between TV series and TV channels.\n- Cartoon.Network references TV_Channel.id, linking cartoons to specific TV channels.",
    "twitter_1_robust": "Table follows:\n- Contains information about user following relationships.\n- Columns:\n  - f1: Identifier of the user who is following.\n  - f2: Identifier of the user being followed.\n\nTable tweets:\n- Stores data related to tweets posted by users.\n- Columns:\n  - id: Unique identifier for each tweet.\n  - uid: Identifier of the user who posted the tweet.\n  - text: Content of the tweet.\n  - createdate: Date when the tweet was created.\n\nTable user_profiles:\n- Contains profiles of users.\n- Columns:\n  - uid: Unique identifier for each user.\n  - name: Name of the user.\n  - email: Email address of the user.\n  - partitionid: Identifier for partitioning.\n  - followers: Number of followers for the user.\n\nForeign Keys:\n- follows.f2 references user_profiles.uid, establishing a relationship between the followed user and user profiles.\n- follows.f1 references user_profiles.uid, connecting the following user to user profiles.\n- tweets.uid references user_profiles.uid, linking tweets to the respective user profiles.",
    "university_basketball_robust": "Table basketball_match:\n- Contains data related to basketball matches.\n- Columns:\n  - teamID: Unique identifier for each team.\n  - schoolID: Identifier of the school associated with the team.\n  - team_Name: Name of the team.\n  - ACC_regular_season: ACC regular season statistics.\n  - percentage_of_ACC: Percentage of games played in ACC.\n  - ACC_home: Statistics of games played at home in ACC.\n  - ACC_Street: Statistics of games played on the street in ACC.\n  - Total_Games: Total number of games played.\n  - percentage_of_all_games: Percentage of all games played.\n  - all_home: Statistics of all games played at home.\n  - total_street: Total games played on the street.\n  - total_neutral: Total games played at neutral venues.\n\nTable university:\n- Stores information about universities.\n- Columns:\n  - schoolID: Unique identifier for each university.\n  - school: Name of the university.\n  - POSITION: Position of the university.\n  - established: Year of establishment of the university.\n  - association: Association of the university.\n  - registration: Registration details of the university.\n  - Nick_Name: Nickname of the university.\n  - basic_conference: Basic conference affiliation of the university.\n\nForeign Keys:\n- basketball_match.schoolID references university.schoolID, establishing a relationship between basketball matches and universities.",
    "voter_1_robust": "Table AREA_CODE_STATE:\n- Contains information about area codes and their corresponding states.\n- Columns:\n  - area_code: Unique identifier for each area code.\n  - state: Name of the state associated with the area code.\n\nTable CONTESTANTS:\n- Stores data related to contestants in a competition.\n- Columns:\n  - contestant_number: Unique identifier for each contestant.\n  - contestant_name: Name of the contestant.\n\nTable VOTES:\n- Contains details about votes cast in a competition.\n- Columns:\n  - vote_id: Unique identifier for each vote.\n  - phone_number: Phone number from which the vote was cast.\n  - state: State from which the vote was cast.\n  - contestant_number: Identifier of the contestant for whom the vote was cast.\n  - created: Timestamp indicating when the vote was created.\n\nForeign Keys:\n- VOTES.contestant_number references CONTESTANTS.contestant_number, establishing a relationship between votes and contestants.\n- VOTES.state references AREA_CODE_STATE.state, linking votes to the corresponding states based on area codes.",
    "voter_2_robust": "Table Student:\n- Contains information about students.\n- Columns:\n  - StudentID: Unique identifier for each student.\n  - Last_Name: Last name of the student.\n  - First_name: First name of the student.\n  - age: Age of the student.\n  - gender: Gender of the student.\n  - Main: Main information about the student.\n  - counselor: Counselor assigned to the student.\n  - CITY_CODE: Code representing the city where the student is located.\n\nTable Voting_record:\n- Stores voting records of students in various elections.\n- Columns:\n  - StudentID: Identifier of the student.\n  - Registration_Date: Date of registration for voting.\n  - Election_Cycle: Cycle of the election.\n  - President_Vote: Vote for the President position.\n  - Vice_President_Vote: Vote for the Vice President position.\n  - Secretary_Vote: Vote for the Secretary position.\n  - Treasurer_Vote: Vote for the Treasurer position.\n  - Class_President_Vote: Vote for the Class President position.\n  - Class_Senator_Vote: Vote for the Class Senator position.\n\nForeign Keys:\n- Voting_record.Class_Senator_Vote references Student.StudentID, linking Class Senator votes to student records.\n- Voting_record.Class_President_Vote references Student.StudentID, connecting Class President votes to student records.\n- Voting_record.Treasurer_Vote references Student.StudentID, establishing a relationship between Treasurer votes and student records.\n- Voting_record.Secretary_Vote references Student.StudentID, linking Secretary votes to student records.\n- Voting_record.Vice_President_Vote references Student.StudentID, connecting Vice President votes to student records.\n- Voting_record.President_Vote references Student.StudentID, establishing a relationship between President votes and student records.\n- Voting_record.StudentID references Student.StudentID, linking voting records to specific students.",
    "wedding_robust": "Table church:\n- Contains information about different churches.\n- Columns:\n  - ChurchID: Unique identifier for each church.\n  - Name: Name of the church.\n  - arranged_by: Entity responsible for arranging events at the church.\n  - Open_Date: Date when the church was opened.\n  - Continuation_of: Reference to another church indicating continuation.\n\nTable people:\n- Stores data related to individuals.\n- Columns:\n  - PeopleID: Unique identifier for each person.\n  - Name: Name of the person.\n  - Country: Country of origin of the person.\n  - Is_Male: Boolean indicating if the person is male.\n  - Age: Age of the person.\n\nTable wedding:\n- Contains details about weddings.\n- Columns:\n  - ChurchID: Identifier of the church where the wedding took place.\n  - MaleID: Identifier of the male participant in the wedding.\n  - FemaleID: Identifier of the female participant in the wedding.\n  - Year: Year when the wedding occurred.\n\nForeign Keys:\n- wedding.FemaleID references people.PeopleID, linking weddings to female individuals.\n- wedding.MaleID references people.PeopleID, linking weddings to male individuals.\n- wedding.ChurchID references church.ChurchID, establishing a relationship between weddings and churches.",
    "wine_1_robust": "Table appellations:\n- Contains information about different wine appellations.\n- Columns:\n  - No: Unique identifier for each appellation.\n  - Appelation: Name of the appellation.\n  - County: County associated with the appellation.\n  - State: State associated with the appellation.\n  - region: Region where the appellation is located.\n  - isAVA: Boolean value indicating if the appellation is an American Viticultural Area.\n\nTable grapes:\n- Stores details about different grape varieties.\n- Columns:\n  - id: Unique identifier for each grape.\n  - Grape: Name of the grape variety.\n  - Color: Color of the grape (e.g., red, white).\n\nTable wine:\n- Contains information about different wines.\n- Columns:\n  - No: Unique identifier for each wine.\n  - Grape: Type of grape used in the wine.\n  - Winery: Name of the winery producing the wine.\n  - Appelation: Appellation associated with the wine.\n  - State: State where the wine is produced.\n  - Name: Name of the wine.\n  - Year: Vintage year of the wine.\n  - Price: Price of the wine.\n  - Score: Rating score of the wine.\n  - Cases: Number of cases produced.\n  - Drink: Recommended drinking status of the wine.\n\nForeign Keys:\n- wine.Appelation references appellations.Appelation, establishing a relationship between wines and wine appellations.\n- wine.Grape references grapes.Grape, linking wines to specific grape varieties.",
    "workshop_paper_robust": "Table Acceptance:\n- Contains information about the acceptance status of submissions for workshops.\n- Columns:\n  - SubmissionID: Unique identifier for each submission.\n  - WorkshopID: Identifier of the workshop associated with the submission.\n  - Result: Outcome of the submission acceptance.\n\nTable submission:\n- Stores details about submissions made.\n- Columns:\n  - SubmissionID: Unique identifier for each submission.\n  - Scores: Scores achieved in the submission.\n  - writer: Name of the writer of the submission.\n  - College: College associated with the submission.\n\nTable workshop:\n- Contains information about workshops.\n- Columns:\n  - WorkshopID: Unique identifier for each workshop.\n  - Date: Date of the workshop.\n  - location: Location of the workshop.\n  - Name: Name of the workshop.\n\nForeign Keys:\n- Acceptance.WorkshopID references workshop.WorkshopID, establishing a relationship between acceptance and workshops.\n- Acceptance.SubmissionID references submission.SubmissionID, linking acceptance to specific submissions.",
    "world_1_robust": "Table city:\n- Contains information about different cities.\n- Columns:\n  - ID: Unique identifier for each city.\n  - Name: Name of the city.\n  - CountryCode: Code referencing the country to which the city belongs.\n  - District: District where the city is located.\n  - Population: Population of the city.\n\nTable country:\n- Stores data related to different countries.\n- Columns:\n  - Code: Unique country code.\n  - Name: Name of the country.\n  - Continent: Continent where the country is located.\n  - Region: Region where the country is situated.\n  - SurfaceArea: Total surface area of the country.\n  - IndepYear: Year of independence.\n  - Population: Population of the country.\n  - LifeExpectancy: Average life expectancy in the country.\n  - GNP: Gross National Product.\n  - GNPOld: Old Gross National Product.\n  - LocalName: Local name of the country.\n  - GovernmentForm: Form of government in the country.\n  - HeadOfState: Head of state of the country.\n  - Capital: Capital city of the country.\n  - Code2: Secondary country code.\n\nTable countrylanguage:\n- Contains data about languages spoken in different countries.\n- Columns:\n  - CountryCode: Code referencing the country to which the language belongs.\n  - Language: Name of the language.\n  - IsOfficial: Indicates if the language is an official language of the country.\n  - Percentage: Percentage of the population speaking the language.\n\nTable sqlite_sequence:\n- Used internally by SQLite to track the autoincrement value of the primary key.\n- Columns:\n  - name: Name of the table.\n  - seq: Sequence number.\n\nForeign Keys:\n- city.CountryCode references country.Code, establishing a relationship between cities and countries.\n- countrylanguage.CountryCode references country.Code, linking country languages to specific countries.",
    "wrestler_robust": "Table Elimination:\n- Contains data related to eliminations in a wrestling context.\n- Columns:\n  - EliminationID: Unique identifier for each elimination event.\n  - WrestlerID: Identifier of the wrestler who was eliminated.\n  - Team: Team to which the wrestler belonged.\n  - Eliminated_By: Identifier of the wrestler who performed the elimination.\n  - Elimination_Move: The move used for the elimination.\n  - Time: Time of the elimination event.\n\nTable wrestler:\n- Stores information about wrestlers.\n- Columns:\n  - WrestlerID: Unique identifier for each wrestler.\n  - Name: Name of the wrestler.\n  - Reign: Reign number of the wrestler.\n  - held_days: Number of days the wrestler held a title.\n  - venue: Venue where the wrestling event took place.\n  - Event: Event name where the wrestler participated.\n\nForeign Keys:\n- Elimination.WrestlerID references wrestler.WrestlerID, establishing a relationship between eliminations and wrestlers.",
    "wta_1_robust": "Table matches:\n- Contains information about matches played.\n- Columns:\n  - best_of: Number of sets required to win the match.\n  - draw_size: Size of the draw for the match.\n  - failure_age: Age of the player who failed in the match.\n  - failure_entry: Entry type of the player who failed.\n  - failure_hand: Playing hand of the player who failed.\n  - failure_ht: Height of the player who failed.\n  - failure_ID: Identifier of the player who failed.\n  - failure_ioc: Country code of the player who failed.\n  - failure_name: Name of the player who failed.\n  - failure_rank: Ranking of the player who failed.\n  - failure_rank_points: Ranking points of the player who failed.\n  - failure_seed: Seed of the player who failed.\n  - match_number: Number of the match.\n  - minutes: Duration of the match in minutes.\n  - round: Round of the match.\n  - score: Score of the match.\n  - surface: Surface type of the match.\n  - tourney_date: Date of the tournament.\n  - tourney_id: Identifier of the tournament.\n  - tourney_level: Level of the tournament.\n  - tourney_name: Name of the tournament.\n  - victor_age: Age of the winning player.\n  - victor_entry: Entry type of the winning player.\n  - victor_hand: Playing hand of the winning player.\n  - victor_ht: Height of the winning player.\n  - victor_id: Identifier of the winning player.\n  - victor_ioc: Country code of the winning player.\n  - victor_name: Name of the winning player.\n  - victor_rank: Ranking of the winning player.\n  - victor_points: Ranking points of the winning player.\n  - winner_seed: Seed of the winning player.\n  - year: Year of the match.\n\nTable players:\n- Stores information about players.\n- Columns:\n  - PlayerID: Unique identifier for each player.\n  - Fname: First name of the player.\n  - Lname: Last name of the player.\n  - hand: Playing hand of the player.\n  - date_of_birth: Date of birth of the player.\n  - country_code: Country code of the player.\n\nTable qualifying_matches:\n- Contains details about qualifying matches.\n- Columns:\n  - (Similar to matches table columns with additional columns for players' statistics in the match)\n\nTable rankings:\n- Stores player rankings.\n- Columns:\n  - ranking_date: Date of the ranking.\n  - ranking: Ranking position of the player.\n  - PlayerID: Identifier of the player.\n  - ranking_points: Ranking points of the player.\n  - tournaments: Number of tournaments played by the player.\n\nForeign Keys:\n- matches.victor_id references players.PlayerID, linking the winning player in matches to the players table.\n- matches.failure_ID references players.PlayerID, linking the losing player in matches to the players table.\n- qualifying_matches.victor_id references players.PlayerID, linking the winning player in qualifying matches to the players table.\n- qualifying_matches.failure_ID references players.PlayerID, linking the losing player in qualifying matches to the players table.\n- rankings.PlayerID references players.PlayerID, establishing a relationship between player rankings and players.",
    "yelp_robust": "Table business:\n- Contains information about different businesses.\n- Columns:\n  - bid: Unique identifier for each business.\n  - business_id: Identifier for the business.\n  - name: Name of the business.\n  - full_address: Full address of the business.\n  - city: City where the business is located.\n  - latitude: Latitude coordinate of the business location.\n  - longitude: Longitude coordinate of the business location.\n  - num_of_review: Number of reviews for the business.\n  - is_open: Indicator of whether the business is open.\n  - rating: Rating of the business.\n  - state: State where the business is situated.\n\nTable category:\n- Stores categories associated with businesses.\n- Columns:\n  - ID: Unique identifier for each category.\n  - business_id: Identifier of the business associated with the category.\n  - category_name: Name of the category.\n\nTable checkin:\n- Contains data related to check-ins at businesses.\n- Columns:\n  - checkin_id: Unique identifier for each check-in.\n  - business_id: Identifier of the business where the check-in occurred.\n  - count: Number of check-ins.\n  - day: Day of the check-in.\n\nTable neighbourhood:\n- Stores information about different neighborhoods.\n- Columns:\n  - ID: Unique identifier for each neighborhood.\n  - business_id: Identifier of the business located in the neighborhood.\n  - neighbourhood_name: Name of the neighborhood.\n\nTable review:\n- Contains reviews given by users for businesses.\n- Columns:\n  - review_id: Unique identifier for each review.\n  - business_id: Identifier of the business being reviewed.\n  - user_id: Identifier of the user who provided the review.\n  - rating: Rating given in the review.\n  - text: Text content of the review.\n  - year: Year when the review was given.\n  - month: Month when the review was given.\n\nTable tip:\n- Stores tips given by users for businesses.\n- Columns:\n  - tip_id: Unique identifier for each tip.\n  - business_id: Identifier of the business for which the tip is given.\n  - text: Text content of the tip.\n  - user_id: Identifier of the user who provided the tip.\n  - likes: Number of likes received for the tip.\n  - year: Year when the tip was given.\n  - month: Month when the tip was given.\n\nTable user:\n- Contains information about users.\n- Columns:\n  - uid: Unique identifier for each user.\n  - user_id: Identifier of the user.\n  - name: Name of the user.\n\nForeign Keys:\n- category.business_id references business.business_id, linking categories to specific businesses.\n- checkin.business_id references business.business_id, connecting check-ins to businesses.\n- neighbourhood.business_id references business.business_id, establishing a relationship between neighborhoods and businesses.\n- review.user_id references user.user_id, linking reviews to specific users.\n- review.business_id references business.business_id, connecting reviews to businesses.\n- tip.user_id references user.user_id, establishing a relationship between tips and users.\n- tip.business_id references business.business_id, linking tips to businesses."
}