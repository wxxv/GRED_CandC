[
    {
        "record_name": "375@y_name@ASC",
        "db_id": "browser_web",
        "target": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "nlq": "Present a bar graph representing the IDs and names of web accelerators that are compatible with two or more browsers, and kindly sort the y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize BAR SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize PIE SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC": 0.6,
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY name, id HAVING COUNT(browser_id) >= 2 ORDER BY id ASC": 0.3,
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY name, id HAVING COUNT(DISTINCT browser_id) >= 2 ORDER BY id ASC": 0.1
        }
    },
    {
        "record_name": "375@y_name@ASC",
        "db_id": "browser_web",
        "target": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "nlq": "What are the identifiers and names of the web accelerators that are compatible with two or more browsers? Visualize this information using a bar chart, and sort it in ascending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize BAR SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize PIE SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC": 0.6,
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY name HAVING COUNT(DISTINCT T2.browser_id) >= 2 ORDER BY name ASC": 0.3,
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY name HAVING COUNT(T2.browser_id) >= 2 ORDER BY name ASC": 0.1
        }
    },
    {
        "record_name": "375@y_name@ASC",
        "db_id": "browser_web",
        "target": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "nlq": "Create a bar chart to represent the IDs and names of web accelerators that are compatible with two or more browsers. Display the Y-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name ASC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY name DESC",
            "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize BAR SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize BAR SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id",
            "Visualize PIE SELECT T2.name , COUNT(T2.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T2.name ORDER BY T1.compatible_since_year DESC",
            "Visualize PIE SELECT T3.name , COUNT(T3.name) FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id = T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id = T3.id GROUP BY T3.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC": 0.6,
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id GROUP BY name, id HAVING COUNT(browser_id) >= 2 ORDER BY id ASC": 0.3,
            "Visualize BAR SELECT name , id FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id WHERE COUNT(browser_id) >= 2 ORDER BY id ASC": 0.1
        }
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees whose salary falls within the range of 8000 to 12000 and have a non-null commission or do not belong to department number 40, determine their hire_date and the sum of employee_id grouped by hire_date, and represent the data using a bar chart with the y-axis displayed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees with salaries ranging from 8000 to 12000, and with either non-null commission or department number not equal to 40, provide a comparison of the total employee_id sum grouped by hire_date bins over time using a bar chart. Please display the results in descending order by the total number count.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY QUARTER": 0.2
        }
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees with salaries ranging from 8000 to 12000, and either a non-null commission or a department number not equal to 40, create a bar chart illustrating the distribution of hire dates and the sum of employee IDs per hire date over time, with the Y-axis ranked in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY YEAR": 0.1
        }
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees with salaries ranging from 8000 to 12000 and a non-null commission or a department number not equal to 40, please display the distribution of hire dates and the sum of employee IDs binned by hire date in a bar chart. Please arrange the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.5,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1582@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees with salaries ranging from 8000 to 12000, and either a non-null commission or a department number not equal to 40, provide a comparison of the sum of employee_id over the hire_date bin hire_date sorted by time, and list the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEK": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY YEAR": 0.2
        }
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "nlq": "Visualize the correlation between Team_ID and All_Games_Percent, with the grouping attribute set to ACC_Home.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID, All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home": 0.4,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games": 0.3,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road": 0.2,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home": 0.1
        }
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "nlq": "Create a scatter plot illustrating the relationship between Team_ID and All_Games_Percent, grouped by the attribute ACC_Home.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID, All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home": 0.4,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road": 0.3,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home": 0.2,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road": 0.1
        }
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "nlq": "A grouping scatter chart illustrates the relationship between Team_ID and All_Games_Percent, categorized by the ACC_Home attribute.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID, All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home": 0.4,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road": 0.3,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games": 0.2,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Neutral": 0.1
        }
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "nlq": "Display the correlation between Team_ID and All_Games_Percent, and group them by the attribute ACC_Home in a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID, All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home": 0.4,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games_Percent": 0.3,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_ID": 0.2,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY School_ID": 0.1
        }
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "nlq": "Provide a scatter plot demonstrating the relationship between Team_ID and All_Games_Percent, with the data grouped according to the ACC_Home attribute.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID, All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home": 0.4,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games": 0.3,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road": 0.2,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home": 0.1
        }
    },
    {
        "record_name": "3082",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "nlq": "Create a scatterplot with team identification on the x-axis and all_games_percent on the y-axis. Color the points according to the ACC_Home category.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Team_ID, All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT ACC_Percent , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home": 0.4,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road": 0.3,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home": 0.2,
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road": 0.1
        }
    },
    {
        "record_name": "443@x_name@ASC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "nlq": "Bar chart to display the quantity of films directed by various directors, with the \"Directed_by\" category listed in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(*) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Directed_by , COUNT(*) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC": 0.5,
            "Visualize BAR SELECT Directed_by , COUNT(*) FROM film GROUP BY Directed_by ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Directed_by , COUNT(*) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC": 0.2
        }
    },
    {
        "record_name": "443@x_name@ASC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "nlq": "Provide me with a bar chart illustrating the quantity of films for each director, and arrange the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC": 0.5,
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC": 0.3,
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC": 0.2
        }
    },
    {
        "record_name": "443@x_name@ASC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "nlq": "What is the quantity of films for each director? Provide a bar graph, arranged in ascending order by the names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC": 0.6,
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC": 0.3,
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC": 0.1
        }
    },
    {
        "record_name": "3064@x_name@DESC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "nlq": "Create a bar chart for the quantity of package options for all TV channels that do not broadcast any cartoons directed by Ben Jones. Please arrange the names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.7,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Smith') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Johnson') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Davis') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1
        }
    },
    {
        "record_name": "3064@x_name@DESC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "nlq": "What are the available package choices for all TV channels that do not broadcast any cartoons directed by Ben Jones? Please present them in a bar chart, sorted from highest to lowest on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC": 0.7,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Johnson') GROUP BY Package_Option ORDER BY Package_Option DESC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Smith') GROUP BY Package_Option ORDER BY Package_Option DESC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Davis') GROUP BY Package_Option ORDER BY Package_Option DESC": 0.1
        }
    },
    {
        "record_name": "3064@x_name@DESC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "nlq": "Identify the package options of TV channels that do not include any cartoons directed by Ben Jones, and represent their count using a bar chart, listing them in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.6,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Smith') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Johnson') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Davis') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1
        }
    },
    {
        "record_name": "3064@x_name@DESC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "nlq": "What is the count of package choices for all TV channels that do not broadcast any cartoons under the direction of Ben Jones? Please sort the names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC": 0.7,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by != 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by <> 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC": 0.1
        }
    },
    {
        "record_name": "780@y_name@ASC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "nlq": "Display the quantity of documents with different ending dates categorized by weekdays and grouped by location code using a stacked bar chart, arranged in ascending order by the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY ORDER BY COUNT(Date_in_Locaton_To) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_To) ASC BIN Date_in_Location_To BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_To) ASC BIN Date_in_Location_To BY WEEKDAY": 0.4,
            "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_To) ASC BIN Date_in_Location_To BY DAY_NUMBER": 0.3,
            "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_To) ASC BIN Date_in_Location_To BY MONTH": 0.2,
            "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_To) ASC BIN Date_in_Location_To BY QUARTER": 0.1
        }
    },
    {
        "record_name": "780@y_name@ASC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "nlq": "Stacked bar chart depicting the dates in location \"to\" and the corresponding number of dates, with each bar color-coded based on the Location_Code. Please arrange the bars in ascending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_To) ASC BIN Date_in_Location_To BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_To) ASC BIN Date_in_Location_To BY WEEKDAY": 0.6,
            "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_To) DESC BIN Date_in_Location_To BY WEEKDAY": 0.2,
            "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY Date_in_Location_To ASC BIN Date_in_Location_To BY WEEKDAY": 0.1,
            "Visualize BAR SELECT Date_in_Location_To , COUNT(Date_in_Location_To) FROM Document_Locations GROUP BY Location_Code ORDER BY Date_in_Location_To DESC BIN Date_in_Location_To BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "nlq": "Quantify the number of captains below the age of 50 for each rank using a bar graph, and arrange them in ascending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY Rank ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank ASC": 0.5,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank DESC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY Rank ASC": 0.2
        }
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "nlq": "Create a bar graph illustrating the count of captains under the age of 50 in each rank, with the Y-axis arranged in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY COUNT(*) ASC": 0.4,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY COUNT(*)": 0.1
        }
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "nlq": "Determine the count of captains below the age of 50 for each rank, and list them in ascending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY Rank ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank ASC": 0.6,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY Rank ASC": 0.2,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY Rank ASCENDING": 0.1,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank ASCENDING": 0.1
        }
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "nlq": "Present a bar chart illustrating the number of captains under the age of 50 in each rank, with the y-axis listed in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY COUNT(*) ASC": 0.5,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 AND Rank != 'Admiral' GROUP BY Rank ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 AND Rank != 'Captain' GROUP BY Rank ORDER BY COUNT(*) ASC": 0.3
        }
    },
    {
        "record_name": "2737@y_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
        "nlq": "Show the count of captains under the age of 50 in each rank, with the y-axis arranged in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM captain GROUP BY rank ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY Rank ORDER BY Rank ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank ASC": 0.5,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY Rank DESC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(*) FROM captain WHERE Age < 50 GROUP BY Rank ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "2567",
        "db_id": "phone_market",
        "target": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "nlq": "Present the distribution of phone carriers along with the corresponding quantity of phones for each carrier using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "rag_dvqs": [
            "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize PIE SELECT Carrier , SUM(Memory_in_G) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "predict_debugged_db_ann": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "predict_dvq_set": {
            "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier": 0.4,
            "Visualize PIE SELECT Carrier , SUM(Num_of_stock) FROM phone_market JOIN phone ON phone_market.Phone_ID = phone.Phone_ID GROUP BY Carrier": 0.3,
            "Visualize PIE SELECT Carrier , AVG(Price) FROM phone GROUP BY Carrier": 0.2,
            "Visualize PIE SELECT Carrier , MAX(Memory_in_G) FROM phone GROUP BY Carrier": 0.1
        }
    },
    {
        "record_name": "2567",
        "db_id": "phone_market",
        "target": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "nlq": "Display the variety of phone carriers alongside the corresponding quantity of phones for each carrier.",
        "predict_rag_nlq": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "predict_debugged_db_ann": "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "predict_dvq_set": {
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier": 0.4,
            "Visualize BAR SELECT Carrier , SUM(Num_of_stock) FROM phone_market JOIN phone ON phone_market.Phone_ID = phone.Phone_ID GROUP BY Carrier": 0.3,
            "Visualize BAR SELECT Carrier , SUM(Num_of_stock) FROM phone_market JOIN phone ON phone_market.Phone_ID = phone.Phone_ID GROUP BY Carrier ORDER BY SUM(Num_of_stock) DESC": 0.2,
            "Visualize BAR SELECT Carrier , AVG(Price) FROM phone GROUP BY Carrier": 0.1
        }
    },
    {
        "record_name": "2567",
        "db_id": "phone_market",
        "target": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
        "nlq": "I would like to determine the ratio of the total quantity for each carrier.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize PIE SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT CARRIER , COUNT(CARRIER) FROM phone GROUP BY CARRIER",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT CARRIER , COUNT(CARRIER) FROM phone GROUP BY CARRIER": 0.4,
            "Visualize SCATTER SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier": 0.3,
            "Visualize SCATTER SELECT Carrier , COUNT(CARRIER) FROM phone GROUP BY Carrier": 0.3
        }
    },
    {
        "record_name": "26@x_name@ASC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
        "nlq": "A stacked bar chart displaying the given names of all the faculty members who took part in a certain activity, along with the count of activities they participated in. Please arrange them in ascending order based on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID ORDER BY Fname ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) ASC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name ASC",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY Rank ASC",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID ORDER BY Fname ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY Fname ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY Fname ASC": 0.4,
            "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY Fname DESC": 0.1
        }
    },
    {
        "record_name": "26@x_name@ASC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
        "nlq": "What are the given names of the faculty members who took part in at least one activity? Additionally, demonstrate the number of activities they participated in for each individual using a bar graph, listed in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) ASC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) ASC",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name ASC",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY count(*) DESC",
            "Visualize BAR SELECT activity_name , count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID = T2.actID GROUP BY T1.actID ORDER BY activity_name DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID = T2.advisor GROUP BY T1.rank ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY COUNT(*) DESC LIMIT 10": 0.1,
            "Visualize BAR SELECT Fname , COUNT(*) FROM Faculty AS T1 JOIN Faculty_Participates_in AS T2 ON T1.FacID = T2.FacID GROUP BY T1.Fname ORDER BY COUNT(*) ASC LIMIT 10": 0.1
        }
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "nlq": "Display a bar chart depicting all countries and the respective count of singers in each country. Please ensure that the chart is sorted in ascending order according to the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC": 0.6,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "nlq": "Provide me with a histogram depicting the distribution of singers based on their respective countries, sorting the names in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC": 0.6,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "nlq": "Create a bar graph illustrating the total number based on country, and arrange them in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC": 0.3,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country DESC": 0.3
        }
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "nlq": "Provide a bar graph illustrating the quantity of singers from each country, and arrange them in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC": 0.4,
            "Visualize BAR SELECT Country , COUNT(Singer_ID) FROM singer GROUP BY Country ORDER BY Country ASC": 0.3,
            "Visualize BAR SELECT Country , COUNT(Name) FROM singer GROUP BY Country ORDER BY Country ASC": 0.2,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC": 0.1
        }
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "nlq": "How many vocalists are from each country, I would like to represent this using a bar graph, with the bars arranged from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC": 0.6,
            "Visualize BAR SELECT Country , COUNT(Singer_ID) FROM singer GROUP BY Country ORDER BY COUNT(Singer_ID) ASC": 0.2,
            "Visualize BAR SELECT Country , COUNT(Singer_ID) FROM singer GROUP BY Country ORDER BY Country ASC": 0.2
        }
    },
    {
        "record_name": "690@x_name@ASC",
        "db_id": "concert_singer",
        "target": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
        "nlq": "Display a bar chart illustrating the countries and the respective number of singers in each country, sorted in ascending order based on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM singer GROUP BY Country ORDER BY Country ASC": 0.6,
            "Visualize BAR SELECT Country , COUNT(Singer_ID) FROM singer GROUP BY Country ORDER BY Country ASC": 0.2,
            "Visualize BAR SELECT Country , COUNT(Name) FROM singer GROUP BY Country ORDER BY Country ASC": 0.1,
            "Visualize BAR SELECT Country , COUNT(*) FROM singer GROUP BY Country ORDER BY Country ASC": 0.1
        }
    },
    {
        "record_name": "1961",
        "db_id": "hr_1",
        "target": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "nlq": "Using a pie chart, present the distribution of job IDs for all employees in the Finance department.",
        "predict_rag_nlq": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize PIE SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize PIE SELECT Name , SUM(Num_Employees) FROM department AS T1 JOIN management AS T2 ON T1.department_id = T2.department_id WHERE T2.temporary_acting = 'Yes' GROUP BY Name",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID",
        "predict_dvq_set": {
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID": 0.7,
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' AND T1.JOB_ID IS NOT NULL GROUP BY JOB_ID": 0.2,
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' AND T1.JOB_ID IS NOT NULL AND T1.JOB_ID != '' GROUP BY JOB_ID": 0.1
        }
    },
    {
        "record_name": "1416@x_name@ASC",
        "db_id": "flight_4",
        "target": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
        "nlq": "What is the altitude (or elevation) of the airports in the city of New York? Please present the data in a bar chart with the x-axis sorted in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation DESC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name DESC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York'",
            "Visualize PIE SELECT name , elevation FROM airports WHERE city = 'New York'",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name ASC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance ASC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE CITY = 'New York' ORDER BY ELEVATION ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE CITY = 'New York' ORDER BY ELEVATION ASC": 0.6,
            "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE CITY = 'New York' ORDER BY ELEVATION DESC": 0.2,
            "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE CITY = 'New York' ORDER BY ELEVATION": 0.1,
            "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE CITY = 'New York' ORDER BY ELEVATION DESCENDING": 0.1
        }
    },
    {
        "record_name": "1416@x_name@ASC",
        "db_id": "flight_4",
        "target": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
        "nlq": "Generate a bar chart displaying the altitude (or elevation) of airports within the city of New York, arranged in ascending order along the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation DESC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name DESC",
            "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York'",
            "Visualize PIE SELECT name , elevation FROM airports WHERE city = 'New York'",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name ASC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY name DESC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance ASC",
            "Visualize BAR SELECT name , distance FROM Aircraft ORDER BY distance DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY elevation ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE city = 'New York' ORDER BY ELEVATION ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE city = 'New York' ORDER BY ELEVATION ASC": 0.6,
            "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE city = 'New York' ORDER BY ELEVATION DESC": 0.2,
            "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE city = 'New York' ORDER BY NAME ASC": 0.1,
            "Visualize BAR SELECT NAME , ELEVATION FROM airports WHERE city = 'New York' ORDER BY NAME DESC": 0.1
        }
    },
    {
        "record_name": "44@x_name@ASC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
        "nlq": "Display the mean age for all female students, categorized by last name, using a bar graph, and arrange the bars in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY Fname"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) ASC": 0.4,
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'Female' GROUP BY LName ORDER BY AVG(Age) ASC": 0.3,
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) DESC": 0.2,
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC": 0.1
        }
    },
    {
        "record_name": "1139@y_name@ASC",
        "db_id": "department_store",
        "target": "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC",
        "nlq": "Display the mean price provided by supplier ID 3 for different product type codes in a bar graph, and sort the y-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC",
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) DESC",
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code",
            "Visualize BAR SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY SUM(product_price) ASC",
            "Visualize BAR SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY SUM(product_price) DESC",
            "Visualize BAR SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , SUM(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_type_code , AVG(product_price) FROM Product_Suppliers AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM Product_Suppliers AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC": 0.7,
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM Product_Suppliers AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) DESC": 0.2,
            "Visualize BAR SELECT product_type_code , AVG(product_price) FROM Product_Suppliers AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY product_type_code ASC": 0.1
        }
    },
    {
        "record_name": "2462",
        "db_id": "network_2",
        "target": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "nlq": "Illustrate a pie chart representing the minimum age requirement for each job title.",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job": 0.4,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job WHERE age > 0": 0.3,
            "Visualize PIE SELECT job , MIN(age) FROM Person WHERE age > 0 GROUP BY job": 0.2,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job ORDER BY MIN(age) ASC": 0.1
        }
    },
    {
        "record_name": "2462",
        "db_id": "network_2",
        "target": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "nlq": "Provide a pie chart illustrating the minimum age requirement for each job title.",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "PIE SELECT job , MIN(age) FROM Person GROUP BY job": 0.6,
            "PIE SELECT job , MIN(age) FROM Person GROUP BY job WHERE age > 0": 0.2,
            "PIE SELECT job , MIN(age) FROM Person GROUP BY job HAVING age > 0": 0.2
        }
    },
    {
        "record_name": "2462",
        "db_id": "network_2",
        "target": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "nlq": "What is the minimum age requirement for each job title? Please present the information in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job": 0.4,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job WHERE age > 0": 0.3,
            "Visualize PIE SELECT job , MIN(age) FROM Person WHERE age > 0 GROUP BY job": 0.2,
            "Visualize PIE SELECT job , MIN(age) FROM Person WHERE age > 18 GROUP BY job": 0.1
        }
    },
    {
        "record_name": "2462",
        "db_id": "network_2",
        "target": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "nlq": "Generate a pie chart illustrating the age of the youngest individual in each occupation.",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job": 0.4,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job WHERE age = (SELECT MIN(age) FROM Person)": 0.3,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job HAVING age = (SELECT MIN(age) FROM Person)": 0.2,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job ORDER BY age ASC": 0.1
        }
    },
    {
        "record_name": "2462",
        "db_id": "network_2",
        "target": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "nlq": "Pie chart. What is the age of the youngest individual for each occupation?",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job": 0.4,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job WHERE age = MIN(age)": 0.3,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job ORDER BY age ASC": 0.2,
            "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job HAVING age = MIN(age)": 0.1
        }
    },
    {
        "record_name": "2462",
        "db_id": "network_2",
        "target": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "nlq": "What is the minimum age for each occupation? Please display the percentage.",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "PIE SELECT job , MIN(age) FROM Person GROUP BY job": 0.4,
            "PIE SELECT city , MIN(age) FROM Person GROUP BY job": 0.2,
            "PIE SELECT job , MIN(age) FROM Person GROUP BY city": 0.2,
            "PIE SELECT gender , MIN(age) FROM Person GROUP BY job": 0.1,
            "PIE SELECT job , MAX(age) FROM Person GROUP BY job": 0.1
        }
    },
    {
        "record_name": "2462",
        "db_id": "network_2",
        "target": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "nlq": "Create a pie chart illustrating the lowest age across different job positions.",
        "predict_rag_nlq": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize PIE SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize PIE SELECT job , COUNT(job) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY min(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize PIE SELECT job , MIN(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "PIE SELECT job , MIN(age) FROM Person GROUP BY job": 0.4,
            "PIE SELECT job , MIN(age) FROM Person GROUP BY city": 0.3,
            "PIE SELECT job , MIN(age) FROM Person GROUP BY gender": 0.2,
            "PIE SELECT job , MIN(age) FROM Person GROUP BY name": 0.1
        }
    },
    {
        "record_name": "2349@y_name@ASC",
        "db_id": "mountain_photos",
        "target": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "nlq": "Create a bar chart to group and tally the brands for each camera lens, and arrange them in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) DESC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand ASC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand DESC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) DESC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) ASC",
            "Visualize PIE SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC": 0.6,
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) DESC": 0.2,
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand ASC": 0.1,
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand DESC": 0.1
        }
    },
    {
        "record_name": "2349@y_name@ASC",
        "db_id": "mountain_photos",
        "target": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "nlq": "Display the quantity of brands from each individual brand, and arrange the total number in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) DESC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand ASC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand DESC",
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) DESC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , COUNT(T1.name) FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id = T1.id WHERE T1.brand = 'Sigma' OR T1.brand = 'Olympus' GROUP BY T1.name ORDER BY COUNT(T1.name) ASC",
            "Visualize PIE SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC": 0.6,
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) DESC": 0.2,
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand ASC": 0.1,
            "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY brand DESC": 0.1
        }
    },
    {
        "record_name": "771",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
        "nlq": "Display the quantity of documents based on their respective starting dates, and categorize the starting dates into yearly intervals in a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To ASC BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To DESC BIN Date_in_Locaton_To BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY YEAR": 0.5,
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_Documents GROUP BY Date_Stored BIN Date_Stored BY YEAR": 0.3,
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY MONTH": 0.2
        }
    },
    {
        "record_name": "771",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
        "nlq": "How many documents are there for different starting dates? Please provide a line chart that groups the starting dates into intervals of one year.",
        "predict_rag_nlq": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY Date_in_Location_From DESC BIN Date_in_Location_From BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To ASC BIN Date_in_Locaton_To BY YEAR",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations  ORDER BY Date_in_Locaton_To DESC BIN Date_in_Locaton_To BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY YEAR": 0.6,
            "LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_Documents GROUP BY Date_Stored BIN Date_Stored BY YEAR": 0.2,
            "LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY MONTH": 0.1,
            "LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From BIN Date_in_Location_From BY QUARTER": 0.1
        }
    },
    {
        "record_name": "771",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR",
        "nlq": "Can you plot the trend of the number of dates in each location compared to the dates in the location from?",
        "predict_rag_nlq": "Visualize LINE SELECT Date_in_Location_From, COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From",
        "rag_dvqs": [
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From ORDER BY Date_in_Location_From ASC",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Date_in_Location_From ORDER BY Date_in_Location_From DESC",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To ASC",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To ASC",
            "Visualize LINE SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ,  Date_in_Locaton_To ORDER BY Date_in_Locaton_To DESC",
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY Date_in_Location_From ASC BIN Date_in_Location_From BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From ORDER BY Date_in_Location_From ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From ORDER BY Date_in_Location_From ASC",
        "predict_dvq_set": {
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From ORDER BY Date_in_Location_From ASC": 0.6,
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From ORDER BY Date_in_Location_From DESC": 0.3,
            "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Date_in_Location_From ORDER BY COUNT(Date_in_Location_From) ASC": 0.1
        }
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Display the distribution of Nationalities and the total sum of IDs, grouped by the Nationality attribute, in a bar chart, and arrange them in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.6,
            "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.3,
            "Visualize BAR SELECT Nationality , AVG(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.1
        }
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Create a bar chart illustrating the distribution of Nationality and the total sum of IDs, grouped by the attribute Nationality, and ordered from lowest to highest on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC": 0.5,
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY COUNT(ID) ASC": 0.2
        }
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Generate a stacked bar chart illustrating the breakdown of Nationalities and the total sum of IDs, grouped by the Nationality attribute, and please display the data on the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.5,
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2
        }
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Provide me with a comparison of the total sum of ID across different nationalities, grouped by the nationality attribute, and ordered in ascending order by nationality.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.4,
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC": 0.1
        }
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Display the total count of IDs for each nationality, arrange the bars in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY COUNT(ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY COUNT(ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY COUNT(ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY COUNT(ID) ASC": 0.5,
            "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY COUNT(ID) DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2
        }
    },
    {
        "record_name": "2906@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Provide me with a comparison of the total sum of ID based on nationality, and present it as a bar chart with the bars ordered from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC": 0.4,
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC": 0.1
        }
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "Generate a bar chart illustrating the count of music festival categories that have been \"Awarded\", sorted in descending order by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.4,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = 'Awarded' GROUP BY Category ORDER BY Category DESC": 0.2,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = 'Awarded' GROUP BY Category ORDER BY Category DESCENDING": 0.1
        }
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "Create a bar graph to present the count of music festival categories that have the outcome \"Awarded,\" and arrange the categories in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.5,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = 'Awarded' GROUP BY Category ORDER BY Category DESC": 0.2
        }
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "A bar graph indicating the quantity of music festival categories awarded, and I would like them arranged in decreasing order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.5,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC": 0.3,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Won\" GROUP BY Category ORDER BY Category DESC": 0.2
        }
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "What is the count of music festival categories categorized as \"Awarded\"? Display the results in descending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.5,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Category = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC": 0.2
        }
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "Provide the count of music festival categories that have been given the result \"Awarded,\" displayed in descending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.6,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC": 0.1
        }
    },
    {
        "record_name": "2439@x_name@DESC",
        "db_id": "music_4",
        "target": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "nlq": "What are the genres of music festivals that have been \"Awarded\", and display the count of each genre using a bar chart, arranging them in descending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) DESC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY COUNT(Category) ASC",
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.6,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = \"Awarded\" GROUP BY Category ORDER BY Category DESC": 0.2,
            "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE Result = 'Awarded' GROUP BY Category ORDER BY Category DESC": 0.2
        }
    },
    {
        "record_name": "2127@x_name@DESC",
        "db_id": "local_govt_in_alabama",
        "target": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "nlq": "Please create a histogram illustrating the total number of participants in each type code, and arrange them in descending order based on the Participant_Type_Code.",
        "predict_rag_nlq": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) ASC",
            "Visualize PIE SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC": 0.6,
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC": 0.3,
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC": 0.1
        }
    },
    {
        "record_name": "2127@x_name@DESC",
        "db_id": "local_govt_in_alabama",
        "target": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "nlq": "Bar chart with participant type codes on the x-axis and the corresponding number of participant type codes on the y-axis, displayed by descending bars, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PARTICIPANT_TYPE_CODE , COUNT(PARTICIPANT_TYPE_CODE) FROM Participants GROUP BY PARTICIPANT_TYPE_CODE ORDER BY COUNT(PARTICIPANT_TYPE_CODE) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT PARTICIPANT_TYPE_CODE , COUNT(PARTICIPANT_TYPE_CODE) FROM Participants GROUP BY PARTICIPANT_TYPE_CODE ORDER BY COUNT(PARTICIPANT_TYPE_CODE) DESC": 0.5,
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC": 0.3,
            "Visualize BAR SELECT Participant_Type_Code , COUNT(*) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "2127@x_name@DESC",
        "db_id": "local_govt_in_alabama",
        "target": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
        "nlq": "Compare the quantity of participants in each participant type code using a bar graph, arrange the bars in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code ASC",
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , SUM(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T1.Participant_Type_Code , AVG(count(*)) FROM Participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID = T2.Participant_ID GROUP BY T1.Participant_Type_Code ORDER BY T1.Participant_Type_Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PARTICIPANT_TYPE_CODE , COUNT(PARTICIPANT_TYPE_CODE) FROM Participants GROUP BY PARTICIPANT_TYPE_CODE ORDER BY COUNT(PARTICIPANT_TYPE_CODE) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT PARTICIPANT_TYPE_CODE , COUNT(PARTICIPANT_TYPE_CODE) FROM Participants GROUP BY PARTICIPANT_TYPE_CODE ORDER BY COUNT(PARTICIPANT_TYPE_CODE) DESC": 0.4,
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_Type_Code) DESC": 0.3,
            "Visualize BAR SELECT Participant_Type_Code , COUNT(*) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_ID) FROM Participants GROUP BY Participant_Type_Code ORDER BY COUNT(Participant_ID) DESC": 0.1
        }
    },
    {
        "record_name": "2498@y_name@ASC",
        "db_id": "party_host",
        "target": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
        "nlq": "Present the cumulative count of parties in the first year with the themes \"Spring\" or \"Technology\" in a bar graph. Group the first year into intervals based on weekdays and tally the count. Please arrange the y-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Technology\" GROUP BY First_year BIN First_year BY WEEKDAY ORDER BY COUNT(First_year) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) DESC BIN First_year BY WEEKDAY",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN First_year BY WEEKDAY",
            "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) ASC BIN Last_year BY WEEKDAY",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) ASC",
            "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(Last_year) DESC BIN Last_year BY WEEKDAY",
            "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" BIN Last_year BY WEEKDAY",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year ORDER BY COUNT(First_year) DESC",
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY First_year",
            "Visualize BAR SELECT Last_year , COUNT(Last_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\" GROUP BY Last_year ORDER BY COUNT(Last_year) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Technology\" GROUP BY First_year BIN First_year BY WEEKDAY ORDER BY COUNT(First_year) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Technology\" GROUP BY First_year BIN First_year BY WEEKDAY ORDER BY COUNT(First_year) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Technology\" GROUP BY First_year BIN First_year BY WEEKDAY ORDER BY COUNT(First_year) ASC": 0.5,
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Technology\" GROUP BY First_year BIN First_year BY MONTH ORDER BY COUNT(First_year) ASC": 0.3,
            "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Technology\" GROUP BY First_year BIN First_year BY QUARTER ORDER BY COUNT(First_year) ASC": 0.2
        }
    },
    {
        "record_name": "3075",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "nlq": "Provide me with a scatter chart that categorizes accidents on roads. The X-axis should represent the school ID, while the Y-axis should represent the percentage of accidents.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road": 0.3,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match WHERE ACC_Road > 0 GROUP BY ACC_Road": 0.2,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match WHERE ACC_Road < 0 GROUP BY ACC_Road": 0.2,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match WHERE ACC_Road = 1 GROUP BY ACC_Road": 0.3
        }
    },
    {
        "record_name": "3075",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "nlq": "Group the data by every ACC road and present the school id and All_Games_Percent in a scatter plot.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Road": 0.4,
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home": 0.3,
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Regular_Season": 0.2,
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Percent": 0.1
        }
    },
    {
        "record_name": "3075",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
        "nlq": "Create a scatterplot with school ID plotted on the x-axis and accuracy percentage on the y-axis. Color the points based on ACC_Road.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match": 0.3,
            "Visualize SCATTER SELECT School_ID , ACC_Percent , ACC_Road FROM basketball_match": 0.2,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM university": 0.1,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match WHERE ACC_Road > 0.5": 0.4
        }
    },
    {
        "record_name": "2617@x_name@DESC",
        "db_id": "products_for_hire",
        "target": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "nlq": "What are the dates of payment for payments with a payment amount higher than 300 or with a payment type of 'Check', and count them using a line chart, with the X-axis arranged in descending order from high to low, please.",
        "predict_rag_nlq": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "rag_dvqs": [
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date ASC",
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) DESC BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) DESC BIN payment_date BY WEEKDAY",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) ASC BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) ASC BIN payment_date BY WEEKDAY",
            "Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "predict_debugged_db_ann": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "predict_dvq_set": {
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC": 0.3,
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 AND payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC": 0.2,
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date ASC": 0.2,
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Cash' GROUP BY payment_date ORDER BY payment_date DESC": 0.1,
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 AND payment_type_code = 'Cash' GROUP BY payment_date ORDER BY payment_date DESC": 0.2
        }
    },
    {
        "record_name": "2617@x_name@DESC",
        "db_id": "products_for_hire",
        "target": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "nlq": "What are the dates of payment for payments with an amount greater than 300 or with a payment type of 'Check', and count them using a line chart, arranged in descending order by the payment date.",
        "predict_rag_nlq": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "rag_dvqs": [
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date ASC",
            "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) DESC BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) DESC BIN payment_date BY WEEKDAY",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) ASC BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check'  ORDER BY COUNT(payment_date) ASC BIN payment_date BY WEEKDAY",
            "Visualize LINE SELECT Date_Payment_Made , COUNT(Date_Payment_Made) FROM Payments GROUP BY Date_Payment_Made ORDER BY Date_Payment_Made ASC",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY MONTH",
            "Visualize BAR SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' BIN payment_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "predict_debugged_db_ann": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
        "predict_dvq_set": {
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC": 0.6,
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 AND payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC": 0.2,
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 OR payment_type_code = 'Cash' GROUP BY payment_date ORDER BY payment_date DESC": 0.1,
            "LINE SELECT payment_date , COUNT(payment_date) FROM Payments WHERE amount_paid > 300 GROUP BY payment_date ORDER BY payment_date DESC": 0.1
        }
    },
    {
        "record_name": "1437@x_name@ASC",
        "db_id": "formula_1",
        "target": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "nlq": "How many race events are conducted each year starting from 2014? Please display the data in a bar chart with the X-axis arranged in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC": 0.6,
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2014 GROUP BY year ORDER BY year ASC": 0.3,
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2014 GROUP BY year ORDER BY COUNT(year) DESC": 0.1
        }
    },
    {
        "record_name": "1437@x_name@ASC",
        "db_id": "formula_1",
        "target": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "nlq": "Present a bar chart illustrating the quantity of races conducted each year starting from 2014, with the names ranked in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) ASC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) DESC",
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY COUNT(year) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC": 0.6,
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2014 GROUP BY year ORDER BY year ASC": 0.3,
            "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceId = T2.raceId WHERE T1.year >= 2014 GROUP BY year ORDER BY COUNT(year) ASC": 0.1
        }
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "nlq": "For employees hired prior to 2002-06-21, create a line graph depicting the salary changes over hire_date, with the x-axis sorted in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC": 0.4,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY ASC": 0.3,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY DESC": 0.2,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE DESC": 0.1
        }
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "nlq": "For employees hired prior to 2002-06-21, create a line graph illustrating the salary changes over their hire dates, and arrange the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC": 0.5,
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY ASC": 0.3,
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY DESC": 0.2
        }
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "nlq": "For employees hired prior to 2002-06-21, please generate a line chart illustrating the salary change over hire date. Additionally, kindly arrange the data on the X-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC": 0.6,
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY ASC": 0.2,
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY DESC": 0.2
        }
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "nlq": "For the employees hired prior to 2002-06-21, present the salary changes over hire_date using a line chart, and kindly sort them on the X-axis in ascending order from low to high.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC": 0.5,
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY ASC": 0.3,
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY DESC": 0.2
        }
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "nlq": "For employees hired prior to 2002-06-21, a line graph illustrates the salary fluctuations over the hire dates, and arrange the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC": 0.5,
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY ASC": 0.3,
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY DESC": 0.2
        }
    },
    {
        "record_name": "1790@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "nlq": "For employees hired prior to 2002-06-21, please provide a line chart illustrating the trend of salary over hire_date. Arrange the data in ascending order based on the HIRE_DATE.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE ASC": 0.6,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE <= '2002-06-21' ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY SALARY ASC": 0.1
        }
    },
    {
        "record_name": "327@y_name@ASC",
        "db_id": "bike_1",
        "target": "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "nlq": "Display the quantity of longitudinal data in a histogram, and please arrange the y-axis in ascending order from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "rag_dvqs": [
            "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
            "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) DESC BIN long BY ZERO",
            "Visualize BAR SELECT long , COUNT(long) FROM station BIN long BY ZERO",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "predict_debugged_db_ann": "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "predict_dvq_set": {
            "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO": 0.4,
            "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY long ASC BIN long BY ZERO": 0.3,
            "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY long DESC BIN long BY ZERO": 0.2,
            "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY long ASC": 0.1
        }
    },
    {
        "record_name": "327@y_name@ASC",
        "db_id": "bike_1",
        "target": "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "nlq": "For each station, categorize its longitude divided by zero into buckets, and calculate the frequency in each bucket. Please display the information on the Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "rag_dvqs": [
            "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO",
            "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) DESC BIN long BY ZERO",
            "Visualize BAR SELECT long , COUNT(long) FROM station BIN long BY ZERO",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "predict_debugged_db_ann": "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO",
        "predict_dvq_set": {
            "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY ZERO": 0.6,
            "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY 1": 0.2,
            "Visualize BAR SELECT long , COUNT(long) FROM station ORDER BY COUNT(long) ASC BIN long BY 2": 0.2
        }
    },
    {
        "record_name": "2749@x_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
        "nlq": "Provide me with a bar chart depicting the cumulative count of ship classes lacking a captain, arranged in ascending order by the bars, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Class , COUNT(Class) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC": 0.5,
            "Visualize BAR SELECT Class , COUNT(Class) FROM Ship WHERE Captain_ID IS NULL GROUP BY Class ORDER BY COUNT(Class) ASC": 0.3,
            "Visualize BAR SELECT Class , COUNT(Class) FROM Ship WHERE Captain_ID = '' GROUP BY Class ORDER BY COUNT(Class) ASC": 0.2
        }
    },
    {
        "record_name": "2749@x_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
        "nlq": "For the ships without a captain, present the total count of their classes using a pie chart, and arrange them in ascending order by the bars, please.",
        "predict_rag_nlq": "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
        "rag_dvqs": [
            "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize PIE SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag",
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Class , avg(age) FROM captain GROUP BY CLASS"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain) GROUP BY Class",
        "predict_debugged_db_ann": "Visualize PIE SELECT Class , COUNT(Class) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Class",
        "predict_dvq_set": {
            "Visualize PIE SELECT Class , COUNT(Class) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Class": 0.5,
            "Visualize PIE SELECT Class , COUNT(Class) FROM Ship WHERE Captain_ID IS NULL GROUP BY Class": 0.3,
            "Visualize PIE SELECT Class , COUNT(Class) FROM Ship WHERE Captain_ID = '' GROUP BY Class": 0.2
        }
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "What is the mean rating of songs for each language? Display them as a bar chart, and could you arrange them in descending order based on the total count?",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY SUM(RATING) DESC": 0.3,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY LANGUAGES DESC": 0.1
        }
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "Display the average rating by languages in a histogram, arranged in descending order by the mean rating, please.",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC": 0.5,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) ASC": 0.3,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY LANGUAGES DESC": 0.2
        }
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "Provide me with a bar chart illustrating the average rating of songs for each language, and kindly sort the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC": 0.4,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) ASC": 0.3,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY LANGUAGES DESC": 0.2,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY LANGUAGES ASC": 0.1
        }
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "Create a bar graph illustrating the average song ratings for each language, arranged in descending order based on the mean rating, please.",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC": 0.6,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) ASC": 0.2,
            "Visualize BAR SELECT languages , AVG(rating) FROM song GROUP BY languages ORDER BY AVG(rating) DESC": 0.2
        }
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "Present a bar chart illustrating the average song rating for each language, and please sort the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC": 0.5,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) ASC": 0.3,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY LANGUAGES DESC": 0.2
        }
    },
    {
        "record_name": "2423@y_name@DESC",
        "db_id": "music_1",
        "target": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "nlq": "What is the mean song rating for each language? Plot them in a bar chart, and could you arrange them in descending order based on the total number?",
        "predict_rag_nlq": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages DESC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY languages ASC",
            "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize PIE SELECT languages , avg(rating) FROM song GROUP BY languages",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Country , AVG(Age) FROM singer GROUP BY Country ORDER BY AVG(Age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY AVG(RATING) DESC": 0.4,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY SUM(RATING) DESC": 0.2,
            "Visualize BAR SELECT LANGUAGES , AVG(RATING) FROM song GROUP BY LANGUAGES ORDER BY LANGUAGES DESC": 0.1
        }
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
        "nlq": "How many patients are cared for by each physician? Present their names and the number of patients they attend to in a bar chart, with the X-axis arranged in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT T1.Name , COUNT(T2.SSN) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(T2.SSN) ASC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(T2.Name) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(T2.Name) ASC": 0.1
        }
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
        "nlq": "What is the patient load per physician? Please provide a list of their names along with the corresponding number of patients they care for. Additionally, display this information in a bar chart, sorted in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
        "nlq": "Create a bar chart representing the number of patients cared for by each physician. Provide a list of their names alongside the corresponding number of patients, and arrange the data in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY T1.Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY T1.Name ASC": 0.5,
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
        "nlq": "Present the name of each doctor and the count of patients they attend to in a bar chart, sorted in ascending order by the bars, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC": 0.6,
            "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY count(*) ASC": 0.3,
            "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY count(*) DESC": 0.1
        }
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
        "nlq": "Provide the names of each doctor along with the number of patients they treat, sorted in ascending order based on the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC": 0.6,
            "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.SSN GROUP BY T1.EmployeeID ORDER BY count(*) ASC": 0.2,
            "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY count(*) ASC": 0.2
        }
    },
    {
        "record_name": "1535@x_name@ASC",
        "db_id": "hospital_1",
        "target": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
        "nlq": "Generate a bar chart illustrating the number of patients each physician is responsible for. Include their names and the corresponding number of patients they care for, and sort the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize PIE SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician = T2.EmployeeID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , count(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.EmployeeID ORDER BY COUNT(*) ASC": 0.4,
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT T1.Name , COUNT(*) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP GROUP BY T1.Name ORDER BY COUNT(*) ASC LIMIT 10": 0.1
        }
    },
    {
        "record_name": "3043@x_name@ASC",
        "db_id": "train_station",
        "target": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "nlq": "A bar chart displays the quantity of locations, sorted in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , sum(number_of_platforms) FROM station GROUP BY LOCATION ORDER BY Location ASC",
            "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC": 0.4,
            "Visualize BAR SELECT Name , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC": 0.2,
            "Visualize BAR SELECT Location , COUNT(Station_ID) FROM station GROUP BY Location ORDER BY Location ASC": 0.3,
            "Visualize BAR SELECT Location , COUNT(Total_Passengers) FROM station GROUP BY Location ORDER BY Location ASC": 0.1
        }
    },
    {
        "record_name": "3043@x_name@ASC",
        "db_id": "train_station",
        "target": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "nlq": "Bar chart to display the count of locations from various geographical areas, please arrange in ascending order based on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , sum(number_of_platforms) FROM station GROUP BY LOCATION ORDER BY Location ASC",
            "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM station GROUP BY Name ORDER BY Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM station GROUP BY Name ORDER BY Name ASC": 0.6,
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC": 0.3,
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC": 0.1
        }
    },
    {
        "record_name": "3043@x_name@ASC",
        "db_id": "train_station",
        "target": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "nlq": "What is the number of locations? Please draw a bar chart and list them on the X-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , sum(number_of_platforms) FROM station GROUP BY LOCATION ORDER BY Location ASC",
            "Visualize BAR SELECT Location , SUM(Number_of_Platforms) FROM station GROUP BY Location ORDER BY Location DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC": 0.6,
            "Visualize BAR SELECT COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC": 0.2,
            "Visualize BAR SELECT Location , COUNT(*) FROM station GROUP BY Location ORDER BY Location ASC": 0.2
        }
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the records pertaining to products and their respective manufacturers, create a scatter chart to illustrate the correlation between the product code and manufacturer. Additionally, group the data based on the attribute \"headquarter\".",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.6,
            "Visualize SCATTER SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2,
            "Visualize SCATTER SELECT T1.Code , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2
        }
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the data entries pertaining to products and their respective manufacturers, generate a scatter plot illustrating the correlation between the product code and manufacturer. Additionally, group the data based on the attribute \"headquarter.\"",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.6,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.2,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.1,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name": 0.1
        }
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the records pertaining to the products and their respective manufacturers, create a scatter plot illustrating the relationship between the product code and manufacturer. Additionally, group the data by the attribute of the manufacturer's headquarters.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.6,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.2,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.2
        }
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the data pertaining to the products and their respective manufacturers, visualize the correlation between the product code and the manufacturer, and group them based on the attribute of the headquarters.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.6,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.2,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.2
        }
    },
    {
        "record_name": "2284",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the data records of products and their respective manufacturers, a scatter chart illustrates the relationship between the product code and the manufacturer, grouping them based on the attribute of headquarters.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.7,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.2,
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.1
        }
    },
    {
        "record_name": "582@y_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
        "nlq": "Display the quantity of courses taught by each instructor in a stacked bar graph. The x-axis represents the instructor's first name, and the bars are grouped according to the course description. Please arrange the bars on the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY CRS_DESCRIPTION , EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY CRS_DESCRIPTION , EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T3.CRS_DESCRIPTION , T2.EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T3.CRS_DESCRIPTION , T2.EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC": 0.5,
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T2.EMP_FNAME , T3.CRS_DESCRIPTION ORDER BY COUNT(EMP_FNAME) DESC": 0.3,
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T2.EMP_FNAME , T3.CRS_DESCRIPTION ORDER BY COUNT(EMP_FNAME) ASC": 0.2
        }
    },
    {
        "record_name": "582@y_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
        "nlq": "Show me a stacked bar chart illustrating the number of courses taught by each teacher. The x-axis should represent the teacher's first name, grouped by course description, and ranked from greatest to least according to the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T3.CRS_DESCRIPTION , T2.EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY CRS_DESCRIPTION ,  EMP_FNAME",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code JOIN professor AS T4 ON T2.emp_num = T4.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T3.CRS_DESCRIPTION , T2.EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T3.CRS_DESCRIPTION , T2.EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T3.CRS_DESCRIPTION , T2.EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC": 0.5,
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T2.EMP_FNAME , T3.CRS_DESCRIPTION ORDER BY COUNT(EMP_FNAME) DESC": 0.3,
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM JOIN COURSE AS T3 ON T1.CRS_CODE = T3.CRS_CODE JOIN PROFESSOR AS T4 ON T2.EMP_NUM = T4.EMP_NUM GROUP BY T2.EMP_FNAME , T3.CRS_DESCRIPTION ORDER BY COUNT(EMP_FNAME) ASC": 0.2
        }
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
        "nlq": "What is the count of professors for various schools? Plot them in a bar chart and display the names in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT DEPT_ADDRESS , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_ADDRESS ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
        "nlq": "Provide a bar chart illustrating the quantity of professors for different schools, and display the names in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
        "nlq": "A bar chart illustrating the number of distinct professors for each different school, listed in descending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
        "nlq": "Display the number of distinct professors for the various schools in a bar chart, sorting the bars in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) DESC": 0.1,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE DESC": 0.1
        }
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
        "nlq": "Provide a bar chart depicting the number of distinct professors for each school, with the X-axis sorted in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) DESC": 0.1,
            "Visualize BAR SELECT EMP_NUM , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T2.EMP_NUM ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "574@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
        "nlq": "Provide me with a histogram illustrating the quantity of professors for different schools, with the X-axis sorted in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
        "nlq": "What is the count of professors for various schools? Plot them as a bar chart and arrange the X-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
        "nlq": "Provide me with a histogram illustrating the quantity of professors for different schools. Please arrange the histogram in ascending order based on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
        "nlq": "A bar chart illustrating the number of distinct professors for each school. Please organize the bars in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
        "nlq": "Generate a bar chart illustrating the number of distinct professors for each school, listed in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
        "nlq": "Generate a bar chart illustrating the number of professors for different schools. Please organize the bars in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC": 0.7,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "574@x_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
        "nlq": "Display the count of unique professors for each school using a bar chart, and arrange the bars in ascending order based on the SCHOOL_CODE.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(*) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(*) ASC": 0.5,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT T2.EMP_NUM) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY SCHOOL_CODE ASC": 0.3,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT T2.EMP_NUM) FROM DEPARTMENT AS T1 JOIN PROFESSOR AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.SCHOOL_CODE ORDER BY COUNT(DISTINCT T2.EMP_NUM) ASC": 0.2
        }
    },
    {
        "record_name": "401",
        "db_id": "candidate_poll",
        "target": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "nlq": "A scatterplot illustrating the relationship between the rates of support and opposition for each candidate.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Support_rate, Oppose_rate FROM candidate",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Consider_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Support_rate , Consider_rate FROM candidate",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize BAR SELECT Date , Vote_Percent FROM election",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize PIE SELECT Date , Vote_Percent FROM election"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate": 0.5,
            "Visualize SCATTER SELECT Support_rate , Unsure_rate FROM candidate": 0.3,
            "Visualize SCATTER SELECT Support_rate , Consider_rate FROM candidate": 0.2
        }
    },
    {
        "record_name": "401",
        "db_id": "candidate_poll",
        "target": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "nlq": "What is the correlation between the rates of support and opposition for each candidate?",
        "predict_rag_nlq": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Consider_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Support_rate , Consider_rate FROM candidate",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize BAR SELECT Date , Vote_Percent FROM election",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Date , Vote_Percent FROM election"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate": 0.5,
            "Visualize SCATTER SELECT Support_rate , Unsure_rate FROM candidate": 0.3,
            "Visualize SCATTER SELECT Oppose_rate , Consider_rate FROM candidate": 0.2
        }
    },
    {
        "record_name": "401",
        "db_id": "candidate_poll",
        "target": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "nlq": "Plot a scatter chart, representing the support rate on the x-axis and the oppose rate on the y-axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Support_rate, Oppose_rate FROM candidate",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Consider_rate , Oppose_rate FROM candidate",
            "Visualize SCATTER SELECT Support_rate , Consider_rate FROM candidate",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize BAR SELECT Date , Vote_Percent FROM election",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize PIE SELECT Date , Vote_Percent FROM election"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate": 0.5,
            "Visualize SCATTER SELECT Support_rate , Unsure_rate FROM candidate": 0.3,
            "Visualize SCATTER SELECT Consider_rate , Oppose_rate FROM candidate": 0.2
        }
    },
    {
        "record_name": "2396@y_name@DESC",
        "db_id": "movie_1",
        "target": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
        "nlq": "For every director, provide their name along with the corresponding rating value, excluding movies with NULL directors. Can you please create a bar chart based on the results, ordering them by the total number in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY director DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY director ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\""
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC": 0.5,
            "Visualize BAR SELECT director , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director IS NOT NULL GROUP BY director ORDER BY AVG(stars) DESC": 0.3,
            "Visualize BAR SELECT director , COUNT(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director IS NOT NULL GROUP BY director ORDER BY COUNT(stars) DESC": 0.2
        }
    },
    {
        "record_name": "130@y_name@ASC",
        "db_id": "assets_maintenance",
        "target": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC",
        "nlq": "Present the quantity of engineers for various additional details in a bar chart, and arrange the y-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC",
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) DESC",
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY other_details ASC",
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY other_details DESC",
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY COUNT(skill_description) ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY COUNT(skill_description) DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC": 0.6,
            "Visualize BAR SELECT first_name , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY first_name ORDER BY COUNT(other_details) ASC": 0.2,
            "Visualize BAR SELECT company_id , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY company_id ORDER BY COUNT(other_details) ASC": 0.2
        }
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For the data pertaining to the products and their respective manufacturers, please create a bar chart representing the distribution of names and the total sum of codes. Group the data by the attribute name and kindly display the chart with the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code DESC": 0.6,
            "Visualize BAR SELECT T1.NAME , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T1.NAME , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY COUNT(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "Generate a bar chart illustrating the distribution of names and the total code sum for the records from the products and their respective manufacturers. Group the data by the attribute name and display it in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC": 0.6,
            "Visualize BAR SELECT T1.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For the data pertaining to products and their respective manufacturers, present information about the distribution of names and the total sum of codes. Display this in a bar chart, grouping the data by the attribute name, and sorting it from highest to lowest based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.6,
            "Visualize BAR SELECT T2.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T2.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "Create a bar chart illustrating the distribution of names and the total sum of codes for the records from the products and their respective manufacturers. Group the data by the attribute name and display it in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code DESC": 0.6,
            "Visualize BAR SELECT T1.NAME , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T1.NAME , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY COUNT(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2211@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For the entries in the products dataset, retrieve the name and total sum of the code for each product's manufacturer. Group the results by attribute name and visualize them using a bar chart, sorted in descending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC": 0.6,
            "Visualize BAR SELECT T2.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T2.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "1802",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
        "nlq": "For employees whose first names end with the letter 'm', display the frequency of each first name using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) ASC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) DESC",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize PIE SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE '%m' GROUP BY FIRST_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE '%m' GROUP BY FIRST_NAME": 0.4,
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE 'm%' GROUP BY FIRST_NAME": 0.3,
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE '%m%' GROUP BY FIRST_NAME": 0.2,
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE 'm' GROUP BY FIRST_NAME": 0.1
        }
    },
    {
        "record_name": "1802",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
        "nlq": "For employees whose first names end with the letter \"m,\" categorize and tally the frequency of each first name to create a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) ASC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY COUNT(FIRST_NAME) DESC",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize PIE SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT FIRST_NAME , AVG(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME ORDER BY FIRST_NAME ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE '%m' GROUP BY FIRST_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE '%m' GROUP BY FIRST_NAME": 0.4,
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE '%%m' GROUP BY FIRST_NAME": 0.3,
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE '%m%' GROUP BY FIRST_NAME": 0.2,
            "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE FIRST_NAME LIKE 'm%' GROUP BY FIRST_NAME": 0.1
        }
    },
    {
        "record_name": "2931@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "nlq": "Identify the stadiums visited by Australian swimmers and present the count using a bar chart, arranging the total number in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize PIE SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON stadium.id = event.stadium_id WHERE swimmer.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T4.NAME , COUNT(T4.NAME) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY T4.NAME ORDER BY COUNT(T4.NAME) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T4.NAME , COUNT(T4.NAME) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY T4.NAME ORDER BY COUNT(T4.NAME) ASC": 0.5,
            "Visualize BAR SELECT stadium.name , COUNT(stadium.name) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY stadium.name ORDER BY COUNT(stadium.name) ASC": 0.3,
            "Visualize BAR SELECT stadium.name , COUNT(stadium.name) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY stadium.name ORDER BY COUNT(stadium.name) DESC": 0.2
        }
    },
    {
        "record_name": "2931@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "nlq": "Retrieve the count of stadium names that Australian swimmers have visited and display them in ascending order based on the number of names.",
        "predict_rag_nlq": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize PIE SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON stadium.id = event.stadium_id WHERE swimmer.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T4.NAME , COUNT(T4.NAME) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY T4.NAME ORDER BY COUNT(T4.NAME) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T4.NAME , COUNT(T4.NAME) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY T4.NAME ORDER BY COUNT(T4.NAME) ASC": 0.6,
            "Visualize BAR SELECT T4.NAME , COUNT(T4.NAME) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australian' GROUP BY T4.NAME ORDER BY COUNT(T4.NAME) ASC": 0.3,
            "Visualize BAR SELECT stadium.name , COUNT(stadium.name) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY stadium.name ORDER BY COUNT(stadium.name) ASC": 0.1
        }
    },
    {
        "record_name": "2931@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "nlq": "A bar chart to determine the quantity of stadium names that Australian swimmers have visited, and could you please display Y in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name ASC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY T4.name DESC",
            "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize PIE SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id WHERE RESULT = 'Win' GROUP BY name ORDER BY COUNT(name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer JOIN record ON swimmer.id = record.swimmer_id JOIN event ON record.event_id = event.id JOIN stadium ON stadium.id = event.stadium_id WHERE swimmer.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T4.NAME , COUNT(T4.NAME) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY T4.NAME ORDER BY COUNT(T4.NAME) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T4.NAME , COUNT(T4.NAME) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY T4.NAME ORDER BY COUNT(T4.NAME) ASC": 0.5,
            "Visualize BAR SELECT T4.NAME , COUNT(T4.NAME) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australian' GROUP BY T4.NAME ORDER BY COUNT(T4.NAME) ASC": 0.3,
            "Visualize BAR SELECT stadium.name , COUNT(stadium.name) FROM swimmer JOIN record ON swimmer.ID = record.Swimmer_ID JOIN event ON record.Event_ID = event.ID JOIN stadium ON stadium.ID = event.Stadium_ID WHERE swimmer.Nationality = 'Australia' GROUP BY stadium.name ORDER BY COUNT(stadium.name) ASC": 0.2
        }
    },
    {
        "record_name": "438",
        "db_id": "chinook_1",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "Display the names and IDs of the albums that have tracks with a unit price greater than 1 using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC": 0.6,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice >= 1 ORDER BY T1.Title ASC": 0.2,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC": 0.1,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC": 0.1
        }
    },
    {
        "record_name": "438",
        "db_id": "chinook_1",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "Display the names and IDs of albums that contain tracks with a unit price greater than 1. Visualize this information using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC": 0.6,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC": 0.2,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC": 0.2
        }
    },
    {
        "record_name": "438",
        "db_id": "chinook_1",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "Provide a histogram showcasing the titles and IDs of albums that include tracks with a unit price higher than 1.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC": 0.6,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice >= 1 ORDER BY T1.Title ASC": 0.2,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC": 0.1,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC": 0.1
        }
    },
    {
        "record_name": "438",
        "db_id": "chinook_1",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "Present a bar chart indicating the titles and IDs of albums that contain tracks with a unit price higher than 1.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT T2.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Price DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC": 0.6,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC": 0.2,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC": 0.2
        }
    },
    {
        "record_name": "438",
        "db_id": "chinook_1",
        "target": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "nlq": "What are the titles and IDs of albums that contain tracks with a unit price greater than 1?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title DESC",
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC",
            "Visualize SCATTER SELECT T1.AlbumId , COUNT(*) FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId GROUP BY T2.AlbumID",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC",
            "Visualize BAR SELECT T1.Name , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Price ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.Title ASC": 0.6,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice >= 1 ORDER BY T1.Title ASC": 0.2,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId ASC": 0.1,
            "Visualize BAR SELECT T1.Title , T1.AlbumId FROM Album AS T1 JOIN Track AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1 ORDER BY T1.AlbumId DESC": 0.1
        }
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees with salaries ranging from 8000 to 12000, and either with a non-null commission or not assigned to department number 40, create a bar chart illustrating the distribution of job_id and the average department_id. Please group the data by the job_id attribute, and order the chart in descending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.4,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND (COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40) GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.1
        }
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For the employees whose salary falls within the range of 8000 and 12000, and their commission is not null, or their department number is not equal to 40, retrieve the job_id and the average department_id. Group them by the job_id attribute and visualize the data using a bar chart. Sort the chart in descending order based on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC": 0.2,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC": 0.2,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.3
        }
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees whose salary falls between 8000 and 12000, and have a non-null commission or a department number not equal to 40, provide a comparison of the average department_id across job_id. Please group the data by job_id and sort it in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY DEPARTMENT_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC": 0.2
        }
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For the employees whose salary falls between 8000 and 12000 and have a non-null commission or their department number is not equal to 40, generate a bar chart illustrating the distribution of job_id and the average of department_id. Group the data by the job_id attribute and display the names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC": 0.6,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID = 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC": 0.2,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT = \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC": 0.1,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC": 0.1
        }
    },
    {
        "record_name": "1607@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000 and have a non-null commission or do not belong to department number 40, please provide a comparison of the average department ID across job IDs. Group the data by the job ID attribute and present it using a bar chart, with the x-axis ordered in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC": 0.6,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2,
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2
        }
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "nlq": "Bar chart with the X-axis representing the role code and the Y-axis representing the total number, where the data is displayed in descending order based on the role code.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code, COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC": 0.6,
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code ASC": 0.1
        }
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "nlq": "Display a bar chart depicting all role codes and the corresponding number of employees in each role. Please arrange the bars in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Role_Name , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Roles GROUP BY Role_Code ORDER BY COUNT(*) DESC": 0.1,
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Name ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "nlq": "Display the role codes and the corresponding number of employees in each role using a bar chart, arranged in descending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT role_code , count(*) FROM users GROUP BY role_code ORDER BY role_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC": 0.6,
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code ASC": 0.1
        }
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "nlq": "Display the code assigned to each role along with the corresponding number of employees in each role. Please present the information in a bar chart, with the x-axis arranged in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Role_Name , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Role_Code , COUNT(Employee_ID) FROM Employees GROUP BY Role_Code ORDER BY COUNT(Employee_ID) DESC": 0.2
        }
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "nlq": "Provide a histogram indicating the code for each role and the corresponding number of employees in each role. Please sort the X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT role_code , count(*) FROM users GROUP BY role_code ORDER BY role_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC": 0.6,
            "Visualize BAR SELECT Role_Name , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC": 0.2,
            "Visualize BAR SELECT Role_Code , COUNT(Employee_ID) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC": 0.2
        }
    },
    {
        "record_name": "782@x_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "nlq": "Provide a histogram displaying the code of each role and the corresponding number of employees in each role, and sort the X-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY T1.role_code DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY role_description DESC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT role_code , count(*) FROM users GROUP BY role_code ORDER BY role_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY Role_Code DESC": 0.6,
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Role_Code , COUNT(*) FROM Employees GROUP BY Role_Code ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper",
        "target": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "Display each author and the quantity of workshops they submitted to with a bar chart, and arrange them in ascending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC": 0.5,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) DESC": 0.3,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY AUTHOR ASC": 0.2
        }
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper",
        "target": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "How many workshops did each contributor submit to? Provide the contributor's name and the workshop count. Plot them in a bar graph and arrange them on the y-axis from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC": 0.5,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) DESC": 0.3,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) DESCENDING": 0.2
        }
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper",
        "target": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "How many workshops did each writer contribute to? Render the author's name and the number of workshops in a bar graph, and organize the Y-axis in ascending order from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC": 0.5,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) DESC": 0.3,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) DESCENDING": 0.2
        }
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper",
        "target": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "Visualize a bar chart representing the number of workshops submitted by each author. List the author's name and the count of workshops, sorted by workshop ID in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY T1.workshop_id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY AUTHOR ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY AUTHOR ASC": 0.4,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY WORKSHOP_ID ASC": 0.3,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC": 0.2,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY AUTHOR DESC": 0.1
        }
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper",
        "target": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "Display each author and the count of workshops they submitted to. Show this information in a bar chart, arranged in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC": 0.5,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) DESC": 0.3,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) DESCENDING": 0.2
        }
    },
    {
        "record_name": "3266@y_name@ASC",
        "db_id": "workshop_paper",
        "target": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "nlq": "Provide a histogram depicting the number of workshops submitted by each author. Present the author's name and the corresponding number of workshops, and arrange the total number in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY Author DESC",
            "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize PIE SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author ASC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY COUNT(Author) DESC",
            "Visualize BAR SELECT Author , COUNT(Author) FROM submission GROUP BY Author ORDER BY Author DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) ASC": 0.5,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.WORKSHOP_ID) DESC": 0.3,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY AUTHOR ASC": 0.1,
            "Visualize BAR SELECT AUTHOR , COUNT(DISTINCT T1.WORKSHOP_ID) FROM Acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY AUTHOR DESC": 0.1
        }
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals",
        "target": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "nlq": "Display the booking status codes and their respective number of bookings in a bar chart, and arrange them in descending order by their names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC": 0.5,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC": 0.2
        }
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals",
        "target": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "nlq": "Generate a bar chart illustrating the number of bookings for each booking status. Provide the booking status code and the corresponding count of bookings, ordered from highest to lowest based on the booking_status_code.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC": 0.6,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals",
        "target": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "nlq": "How many reservations are there for each reservation status? Please provide the reservation status code and the corresponding number of reservations, ordered in descending order by X.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC": 0.5,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals",
        "target": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "nlq": "Display the booking status code and the corresponding count of bookings in a bar graph, ordered from highest to lowest based on the names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC": 0.3,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC": 0.2
        }
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals",
        "target": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "nlq": "Display a bar chart illustrating the number of bookings for each booking status. Provide the booking status code and the corresponding number of bookings. Can you arrange the booking status codes in descending order, from highest to lowest?",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC": 0.2,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC": 0.2
        }
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals",
        "target": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "nlq": "Create a bar chart illustrating the total count grouped by booking status code, ranked from highest to lowest based on the names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC": 0.2,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC": 0.2
        }
    },
    {
        "record_name": "74@x_name@DESC",
        "db_id": "apartment_rentals",
        "target": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "nlq": "How many bookings are there for each booking status? Provide a bar chart with the booking status code and the corresponding number of bookings, ordered in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY apt_number ASC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) DESC",
            "Visualize BAR SELECT apt_number , COUNT(apt_number) FROM Apartment_Bookings AS T1 JOIN Apartments AS T2 ON T1.apt_id = T2.apt_id GROUP BY apt_number ORDER BY COUNT(apt_number) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC": 0.6,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC": 0.1
        }
    },
    {
        "record_name": "2096@y_name@ASC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "nlq": "Please utilize a bar chart to compare the quantity of customers based on their respective move-in dates, and arrange them in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY WEEKDAY",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC": 0.7,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC": 0.2,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC": 0.1
        }
    },
    {
        "record_name": "2096@y_name@ASC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "nlq": "What is the distribution of customer moves by date? Please provide a bar chart showing the number of moves, ordered in ascending order by the date moved in.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC": 0.6,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id WHERE date_moved_in IS NOT NULL GROUP BY date_moved_in ORDER BY date_moved_in ASC": 0.2,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id WHERE date_moved_in IS NOT NULL AND date_moved_in >= '2020-01-01' GROUP BY date_moved_in ORDER BY date_moved_in ASC": 0.1,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC": 0.1
        }
    },
    {
        "record_name": "329@y_name@ASC",
        "db_id": "bike_1",
        "target": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "nlq": "For the days with a minimum dew point lower than any day in zip code 94107, present the total count of such days using a bar graph. Please arrange the number of dates in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) DESC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date ASC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date DESC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) BIN date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC": 0.4,
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date ASC": 0.3,
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date DESC": 0.2,
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) DESC": 0.1
        }
    },
    {
        "record_name": "329@y_name@ASC",
        "db_id": "bike_1",
        "target": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "nlq": "Count the number of days and display in a bar graph the zip codes where the minimum dew point was lower than any day in zip code 94107. Please arrange the bars in ascending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT zip_code , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY zip_code ORDER BY COUNT(date) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) DESC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date ASC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY date DESC",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107)  ORDER BY COUNT(date) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) BIN date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DATE , COUNT(DATE) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY DATE ORDER BY COUNT(DATE) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DATE , COUNT(DATE) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY DATE ORDER BY COUNT(DATE) ASC": 0.6,
            "Visualize BAR SELECT zip_code , COUNT(zip_code) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY zip_code ORDER BY zip_code ASC": 0.2,
            "Visualize BAR SELECT zip_code , COUNT(zip_code) FROM weather WHERE min_dew_point_f <(SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY zip_code ORDER BY COUNT(zip_code) ASC": 0.2
        }
    },
    {
        "record_name": "1843@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "Compare the mean salary for each date of hire (categorized into monthly intervals) of employees using a bar graph, and sort the Y-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH ORDER BY AVG(SALARY) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY WEEK": 0.1,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY QUARTER": 0.1
        }
    },
    {
        "record_name": "1843@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "Provide a bar graph representing the average salary for each date of hire, and arrange the Y-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY DAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY DAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY DAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY DAY": 0.5,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY DAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY DAY": 0.2
        }
    },
    {
        "record_name": "1843@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "Display the average salary for each employee's hire date, and please group the hire dates into monthly intervals for the bar chart. Arrange the y-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH": 0.4,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY WEEK": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY YEAR": 0.1
        }
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "nlq": "Display a bar chart illustrating all template type codes and the count of documents utilizing each type. Please arrange the y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "nlq": "What are the various type codes for templates, and how many documents use each type? Please plot them as a bar chart, and arrange the Y-axis in ascending order, from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) ASCENDING": 0.1
        }
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "nlq": "Display a bar chart showcasing the template type codes and the corresponding number of documents that utilize each type. Please list them in ascending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "nlq": "A bar chart illustrating the different codes for template types and the corresponding number of documents that utilize each type. Kindly arrange the chart in ascending order along the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) ASCENDING": 0.1
        }
    },
    {
        "record_name": "744@y_name@ASC",
        "db_id": "cre_Doc_Template_Mgt",
        "target": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "nlq": "What are the distinct codes for template types, and how many documents are assigned to each type? Could you please display the quantities in ascending order along the y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code ASC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code ORDER BY Template_Type_Code DESC",
            "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates GROUP BY template_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT TEMPLATE_TYPE_CODE , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY Template_Type_Code ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Template_Type_Code , COUNT(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.Template_ID = T2.Template_ID GROUP BY T1.Template_Type_Code ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "3008@x_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "nlq": "Group all transaction dates into weekday intervals, calculate the total number of transactions in each interval, and then present the trend. Please display the results sorted by the date_of_transaction in descending order.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY WEEKDAY",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
        "predict_dvq_set": {
            "BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY": 0.6,
            "BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY WEEKDAY": 0.2,
            "BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction ASC BIN date_of_transaction BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "3008@x_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "nlq": "Plot the number of transaction dates against the dates of transaction in a line chart, and list the X-axis in descending order, please.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , SUM(share_count) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count < 10  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count >= 100 OR amount_of_transaction >= 100  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR": 0.4,
            "LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR": 0.3,
            "LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY MONTH": 0.2,
            "LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY QUARTER": 0.1
        }
    },
    {
        "record_name": "3008@x_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
        "nlq": "Provide me with a line graph that organizes all transaction dates into weekday intervals and displays the count for each interval, arranged in descending order based on the date of transaction.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS ORDER BY date_of_transaction DESC BIN date_of_transaction BY WEEKDAY",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY COUNT(date_of_transaction) ASC BIN date_of_transaction BY WEEKDAY",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS BIN date_of_transaction BY YEAR",
            "Visualize BAR SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY COUNT(date_of_transaction) DESC BIN date_of_transaction BY WEEKDAY",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE transaction_type_code = \"SALE\"  ORDER BY date_of_transaction ASC BIN date_of_transaction BY YEAR",
            "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS WHERE share_count > 100 OR amount_of_transaction > 1000  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS ORDER BY date_of_transaction DESC BIN date_of_transaction BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY WEEKDAY",
        "predict_dvq_set": {
            "LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY WEEKDAY": 0.4,
            "LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction ASC BIN date_of_transaction BY WEEKDAY": 0.3,
            "LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY DAY": 0.2,
            "LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM Transactions ORDER BY date_of_transaction DESC BIN date_of_transaction BY MONTH": 0.1
        }
    },
    {
        "record_name": "610",
        "db_id": "college_2",
        "target": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester",
        "nlq": "Represent the total number of courses offered by the Psychology department in each semester using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "rag_dvqs": [
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester",
            "Visualize BAR SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ,  year ORDER BY T1.title",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title BIN year BY YEAR",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize PIE SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year ORDER BY year ASC",
            "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY T3.Name",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year",
            "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "predict_debugged_db_ann": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "predict_dvq_set": {
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title": 0.6,
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' AND T2.semester = 'Fall' GROUP BY semester ORDER BY T1.title": 0.2,
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' AND T2.semester = 'Spring' GROUP BY semester ORDER BY T1.title": 0.1,
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' AND T2.semester = 'Summer' GROUP BY semester ORDER BY T1.title": 0.1
        }
    },
    {
        "record_name": "610",
        "db_id": "college_2",
        "target": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester",
        "nlq": "How many courses are offered in the Psychology department for every academic term? Generate a pie chart to illustrate the distribution.",
        "predict_rag_nlq": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "rag_dvqs": [
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester",
            "Visualize BAR SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ,  year ORDER BY T1.title",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title BIN year BY YEAR",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize PIE SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year ORDER BY year ASC",
            "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course ORDER BY T3.Name",
            "Visualize LINE SELECT year , COUNT(year) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY year",
            "Visualize PIE SELECT Course , COUNT(Course) FROM course_arrange AS T1 JOIN course AS T2 ON T1.Course_ID = T2.Course_ID JOIN teacher AS T3 ON T1.Teacher_ID = T3.Teacher_ID GROUP BY Course"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "predict_debugged_db_ann": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title",
        "predict_dvq_set": {
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester ORDER BY T1.title": 0.6,
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' AND T2.semester = 'Fall' GROUP BY semester ORDER BY T1.title": 0.2,
            "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' AND T2.semester = 'Spring' GROUP BY semester ORDER BY T1.title": 0.2
        }
    },
    {
        "record_name": "9@y_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "nlq": "Display the quantity of ranks from each rank, sorted by the Y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC": 0.4,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC": 0.2,
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC": 0.1
        }
    },
    {
        "record_name": "9@y_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "nlq": "Display the quantity of faculty members for each level in a bar graph, with the ranks arranged on the Y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC": 0.4,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank ASC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "9@y_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "nlq": "What is the count of faculty members for each classification? Represent it in a bar graph, sorted in descending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC": 0.5,
            "Visualize BAR SELECT Rank , COUNT(FacID) FROM Faculty GROUP BY Rank ORDER BY COUNT(FacID) DESC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "515@y_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "nlq": "Obtain the count of departments in each school. Present them in a bar chart, and arrange the y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPT_NAME) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPT_NAME) DESC": 0.6,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DEPT_NAME) DESC": 0.2,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DEPT_CODE) FROM DEPARTMENT ORDER BY COUNT(DEPT_CODE) DESC": 0.1,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(EMP_NUM) FROM DEPARTMENT ORDER BY COUNT(EMP_NUM) DESC": 0.1
        }
    },
    {
        "record_name": "515@y_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "nlq": "Display the number of departments in each school using a bar chart, and can you sort them by the total number in descending order, please?",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPT_NAME) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPT_NAME) DESC": 0.5,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DEPT_NAME) DESC": 0.3,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DEPT_CODE) FROM DEPARTMENT ORDER BY COUNT(DEPT_CODE) DESC": 0.2
        }
    },
    {
        "record_name": "515@y_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "nlq": "A bar chart illustrating the number of departments in each school, ordered in descending order based on the count of distinct department names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPT_NAME) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPT_NAME) DESC": 0.6,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DEPT_NAME) DESC": 0.2,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DEPT_NAME) FROM DEPARTMENT GROUP BY SCHOOL_CODE ORDER BY COUNT(DEPT_NAME) DESC": 0.2
        }
    },
    {
        "record_name": "515@y_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "nlq": "Provide a bar chart illustrating the quantity of departments in each school, and arrange them in descending order based on the total number, please.",
        "predict_rag_nlq": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE DESC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY count(DISTINCT dept_address) ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department ORDER BY SCHOOL_CODE ASC",
            "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_address) FROM department"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPT_NAME) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DISTINCT DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DISTINCT DEPT_NAME) DESC": 0.6,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DEPT_NAME) FROM DEPARTMENT ORDER BY COUNT(DEPT_NAME) DESC": 0.3,
            "Visualize BAR SELECT SCHOOL_CODE , COUNT(DEPT_CODE) FROM DEPARTMENT ORDER BY COUNT(DEPT_CODE) DESC": 0.1
        }
    },
    {
        "record_name": "1069@x_name@DESC",
        "db_id": "debate",
        "target": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "nlq": "Display the various parties of individuals along with the corresponding number of people in each party using a bar graph, and could you arrange them in descending order on the X-axis, please?",
        "predict_rag_nlq": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY Party DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC": 0.4,
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party ASC": 0.1
        }
    },
    {
        "record_name": "1069@x_name@DESC",
        "db_id": "debate",
        "target": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "nlq": "Depict various groups of individuals, accompanied by the corresponding number of people in each group. Represent them as a bar chart, and arrange them by names in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY Party DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC": 0.4,
            "Visualize BAR SELECT Name , COUNT(*) FROM people GROUP BY Name ORDER BY Name DESC": 0.3,
            "Visualize BAR SELECT District , COUNT(*) FROM people GROUP BY District ORDER BY District DESC": 0.2,
            "Visualize BAR SELECT Age , COUNT(*) FROM people GROUP BY Age ORDER BY Age DESC": 0.1
        }
    },
    {
        "record_name": "1069@x_name@DESC",
        "db_id": "debate",
        "target": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "nlq": "Bar chart to display the overall quantity from various political parties, sorted in descending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party ORDER BY Party DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party ORDER BY Party ASC",
            "Visualize BAR SELECT Party , count(*) FROM driver GROUP BY party ORDER BY Party DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC": 0.3,
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY COUNT(*) ASC": 0.3
        }
    },
    {
        "record_name": "2818@x_name@DESC",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
        "nlq": "What is the count of players with scores below 30 for each position? Plot them as a bar chart, and list them in descending order by name.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Score < 30 GROUP BY Position ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Goals < 30 GROUP BY Position ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Apps < 30 GROUP BY Position ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "2818@x_name@DESC",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
        "nlq": "What is the count of players with points below 30 for each position? Please arrange them in descending order by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY Position ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY Position ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY Position DESC": 0.3,
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY Position ASC": 0.2
        }
    },
    {
        "record_name": "2818@x_name@DESC",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
        "nlq": "Provide me with a histogram illustrating the count of players with points below 30 for each position, and I would like the bars to be sorted in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY Position DESC": 0.3,
            "Visualize BAR SELECT Position , COUNT(*) FROM player WHERE Points < 30 GROUP BY Position ORDER BY Position ASC": 0.2
        }
    },
    {
        "record_name": "1016@y_name@DESC",
        "db_id": "customers_campaigns_ecommerce",
        "target": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) DESC",
        "nlq": "Display the customer address count and group them by premises type and address type code in a stacked bar chart. The X-axis should represent the premises type, and I would like it to be sorted in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code , premises_type ORDER BY COUNT(premises_type) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) DESC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY COUNT(premises_type) DESC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY premises_type DESC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) ASC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY COUNT(premises_type) ASC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY premises_type DESC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY premises_type ASC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type ORDER BY premises_type ASC",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type",
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY premises_type"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code , premises_type ORDER BY COUNT(premises_type) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM Customer_Addresses AS T1 JOIN Premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY T1.address_type_code , T2.premises_type ORDER BY COUNT(premises_type) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM Customer_Addresses AS T1 JOIN Premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY T1.address_type_code , T2.premises_type ORDER BY COUNT(premises_type) DESC": 0.6,
            "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM Customer_Addresses AS T1 JOIN Premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY T2.premises_type , T1.address_type_code ORDER BY COUNT(premises_type) DESC": 0.3,
            "Visualize BAR SELECT T2.premises_type , COUNT(T2.premises_type) FROM Customer_Addresses AS T1 JOIN Premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY T1.address_type_code , T2.premises_type ORDER BY COUNT(T2.premises_type) DESC": 0.1
        }
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For the employees who work in departments without managers with IDs between 100 and 200, create a bar chart depicting the distribution of first names and commission percentages, sorted in descending order by the COMMISSION_PCT.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC": 0.4,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID >= 100 AND MANAGER_ID <= 200) ORDER BY COMMISSION_PCT DESC": 0.3,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY COMMISSION_PCT DESC": 0.2,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 OR MANAGER_ID < 200) ORDER BY COMMISSION_PCT DESC": 0.1
        }
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For the employees who are not employed in departments with managers whose IDs are between 100 and 200, display a bar chart illustrating the distribution of first_name and commission_pct, with the total number shown in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC": 0.4,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY COMMISSION_PCT DESC": 0.3,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC": 0.1
        }
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For employees who are not employed in departments managed by managers with IDs between 100 and 200, retrieve their first names and commission percentages. Visualize this data using a bar chart, listing them in descending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC": 0.4,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY COMMISSION_PCT DESC": 0.3,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC": 0.2,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 OR MANAGER_ID NOT BETWEEN 200) ORDER BY COMMISSION_PCT DESC": 0.1
        }
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For employees who are not part of departments where the manager's ID falls between 100 and 200, depict the distribution of first_name and commission_pct in a bar graph, and sort it in descending order along the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC": 0.4,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY COMMISSION_PCT DESC": 0.3,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC": 0.1
        }
    },
    {
        "record_name": "1692@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "nlq": "For the employees who work in departments without managers whose IDs fall between 100 and 200, generate a bar chart illustrating the distribution of first_name and commission_pct. Please arrange the Y-axis in descending order, from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT ASC",
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY LAST_NAME ASC",
            "Visualize BAR SELECT JOB_ID , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC": 0.4,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID >= 100 AND MANAGER_ID <= 200) ORDER BY COMMISSION_PCT DESC": 0.3,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY COMMISSION_PCT DESC": 0.2,
            "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID <= 200) ORDER BY COMMISSION_PCT DESC": 0.1
        }
    },
    {
        "record_name": "1542",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "nlq": "For every employee whose first name contains the letters D or S, create a bar chart illustrating the distribution of hire dates and the aggregated sum of salaries binned by hire date over time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1542",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of hire dates and the sum of salary grouped by hire date over time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME CONTAINS 'D' OR FIRST_NAME CONTAINS 'S' BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "1542",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees with the letters D or S in their first name, visualize a bar chart depicting the distribution of hire dates and the cumulative sum of salary bins by hire date over time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH": 0.4,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY YEAR": 0.1
        }
    },
    {
        "record_name": "1542",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees with the D or S letters in their first name, please present the distribution of hire dates and the sum of salary categorized by hire date over time in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY YEAR": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY QUARTER": 0.2
        }
    },
    {
        "record_name": "1542",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees whose first name contains the letters D or S, a bar chart illustrates the distribution of hire dates and the cumulative salary amount binned by hire date over time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE FIRST_NAME CONTAINS 'D' OR FIRST_NAME CONTAINS 'S' BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "852@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
        "nlq": "Present a stacked bar graph illustrating the quantity of documents per day for all documents in the 'Graph Database project'. Please categorize the document dates by weekday and group them by document name. Arrange the graph from highest to lowest on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' GROUP BY DOCUMENT_NAME ORDER BY COUNT(DOCUMENT_DATE) DESC BIN DOCUMENT_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' GROUP BY DOCUMENT_NAME ORDER BY COUNT(DOCUMENT_DATE) DESC BIN DOCUMENT_DATE BY WEEKDAY": 0.7,
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' GROUP BY DOCUMENT_NAME ORDER BY COUNT(DOCUMENT_DATE) DESC BIN DOCUMENT_DATE BY DAY": 0.2,
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' GROUP BY DOCUMENT_NAME ORDER BY COUNT(DOCUMENT_DATE) DESC BIN DOCUMENT_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "2337@y_name@ASC",
        "db_id": "mountain_photos",
        "target": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "nlq": "What are the identification numbers (IDs) and names of the mountains that have a minimum of 2 photographs? Please display the information in a bar chart, with the y-axis arranged in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize PIE SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC": 0.6,
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE COUNT(T2.id) >= 2 ORDER BY T1.id ASC": 0.3,
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING COUNT(T2.id) >= 2 ORDER BY T1.id ASC": 0.1
        }
    },
    {
        "record_name": "2337@y_name@ASC",
        "db_id": "mountain_photos",
        "target": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "nlq": "Present a bar chart showcasing the identification and names of mountains that possess a minimum of 2 photos. Please list them on the y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize PIE SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC": 0.6,
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE COUNT(T2.id) >= 2 ORDER BY T1.id ASC": 0.3,
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.name , T1.id HAVING COUNT(T2.id) >= 2 ORDER BY T1.id ASC": 0.1
        }
    },
    {
        "record_name": "2337@y_name@ASC",
        "db_id": "mountain_photos",
        "target": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "nlq": "Create a bar chart displaying the identification numbers and names of mountains that have a minimum of 2 photos. Please sort the chart in ascending order based on the identification numbers.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.name DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize PIE SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height ASC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T2.Height FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID = T2.Mountain_ID ORDER BY T2.Height DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC": 0.6,
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE COUNT(T2.id) >= 2 ORDER BY T1.id ASC": 0.3,
            "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id GROUP BY T1.id HAVING COUNT(T2.id) >= 2 ORDER BY T1.id ASC": 0.1
        }
    },
    {
        "record_name": "1000",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "nlq": "Compare the occurrence rate of product names using a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name": 0.4,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY COUNT(product_name) DESC": 0.3,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products WHERE product_type_code = 'XYZ' GROUP BY product_name": 0.2,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name LIMIT 10": 0.1
        }
    },
    {
        "record_name": "1000",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "nlq": "Display a bar chart illustrating the frequency of each product name.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name": 0.4,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY COUNT(product_name) DESC": 0.3,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name LIMIT 10": 0.2,
            "Visualize BAR SELECT product_name , SUM(product_price) FROM Products GROUP BY product_name": 0.1
        }
    },
    {
        "record_name": "1000",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "nlq": "Product name displayed on the x-axis of a bar chart, with the y-axis representing the quantity of each product name.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name": 0.5,
            "Visualize BAR SELECT product_name , SUM(order_quantity) FROM Products JOIN Order_Items ON Products.product_id = Order_Items.product_id GROUP BY product_name": 0.3,
            "Visualize BAR SELECT product_name , AVG(product_price) FROM Products GROUP BY product_name": 0.2
        }
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For the provided data on products and their respective manufacturers, generate a bar graph illustrating the distribution of product names and the total sum of codes. Group the data by the attribute name and display them in ascending order according to the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code ASC": 0.6,
            "Visualize BAR SELECT T1.NAME , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY SUM(T1.Code) ASC": 0.3,
            "Visualize BAR SELECT T1.NAME , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY COUNT(T1.Code) ASC": 0.1
        }
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For the records pertaining to products and their respective manufacturers, please present the distribution of names and the sum of codes. Display this information in a bar chart, grouped by the attribute name, and arrange the data in ascending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code ASC": 0.5,
            "Visualize BAR SELECT T1.NAME , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY SUM(T1.Code) ASC": 0.3,
            "Visualize BAR SELECT T1.NAME , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY COUNT(T1.Code) ASC": 0.2
        }
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For the entries pertaining to the products and their respective manufacturers, retrieve the name and the total sum of the code. Group them based on the attribute name and represent them visually using a bar chart. Please ensure that the bars are ordered in ascending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.NAME , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Code ASC": 0.6,
            "Visualize BAR SELECT T1.NAME , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY SUM(T1.Code) ASC": 0.3,
            "Visualize BAR SELECT T1.NAME , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY COUNT(T1.Code) ASC": 0.1
        }
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "For the data from the products and their respective manufacturers, create a bar chart that displays the distribution of names and the sum of codes. Group the data by the attribute name and sort the total number of codes in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code ASC": 0.6,
            "Visualize BAR SELECT T2.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY SUM(T1.Code) ASC": 0.3,
            "Visualize BAR SELECT T2.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T1.Code) ASC": 0.1
        }
    },
    {
        "record_name": "2205@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
        "nlq": "Create a bar chart illustrating the distribution of names and the cumulative sum of codes for the records from the products and their respective manufacturers. Group the data by the attribute name and display it in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC": 0.5,
            "Visualize BAR SELECT T2.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC": 0.3,
            "Visualize BAR SELECT T2.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC": 0.2
        }
    },
    {
        "record_name": "849",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY",
        "nlq": "Show the number of documents generated each day. Categorize the document dates by weekdays and group them by document type using a stacked bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN DOCUMENT_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN DOCUMENT_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name BIN DOCUMENT_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN DOCUMENT_DATE BY DAY": 0.1,
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN DOCUMENT_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "849",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY",
        "nlq": "Present the quantity of documents generated each day and categorize the document dates by weekdays, grouping them by document type using a stacked bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN DOCUMENT_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN DOCUMENT_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Name BIN DOCUMENT_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN DOCUMENT_DATE BY DAY": 0.1,
            "Visualize BAR SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description BIN DOCUMENT_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "2080@y_name@DESC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY COUNT(organization_details) DESC",
        "nlq": "Provide me with a stacked bar chart to illustrate the quantity of items across various types of each item, along with the corresponding ownership details. Please arrange the chart in descending order based on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details , Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY COUNT(organization_details) ASC",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY COUNT(organization_details) DESC",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY organization_details DESC",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY organization_details ASC",
            "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details , Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_details , Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_details , Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC": 0.5,
            "Visualize BAR SELECT service_type_code , COUNT(service_type_code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_details , service_type_code ORDER BY COUNT(service_type_code) DESC": 0.3,
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_details , Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC": 0.2
        }
    },
    {
        "record_name": "1709",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
        "nlq": "Create a scatter plot displaying the department ID and total salaries for each department that has more than two employees.",
        "predict_rag_nlq": "Visualize SCATTER SELECT DEPARTMENT_ID, SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID HAVING COUNT(*) > 2",
        "rag_dvqs": [
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary > ( SELECT AVG(salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID": 0.4,
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees WHERE COUNT(EMPLOYEE_ID) > 2 GROUP BY DEPARTMENT_ID": 0.3,
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees HAVING COUNT(EMPLOYEE_ID) > 2 GROUP BY DEPARTMENT_ID": 0.3
        }
    },
    {
        "record_name": "1709",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
        "nlq": "Plot a scatter plot showing the total salaries and department ID for each department that has more than two employees.",
        "predict_rag_nlq": "Visualize SCATTER SELECT SUM(salary) AS total_salaries, department_id FROM employees GROUP BY department_id HAVING COUNT(employee_id) > 2",
        "rag_dvqs": [
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE salary > ( SELECT AVG(salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID",
        "predict_dvq_set": {
            "SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID": 0.4,
            "SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees WHERE COUNT(EMPLOYEE_ID) > 2 GROUP BY DEPARTMENT_ID": 0.3,
            "SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees HAVING COUNT(EMPLOYEE_ID) > 2 GROUP BY DEPARTMENT_ID": 0.3
        }
    },
    {
        "record_name": "1709",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
        "nlq": "What is the combined salary and department identification for each department that has a workforce exceeding two employees? Please present this information in a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT SUM(salary) , department_id FROM employees GROUP BY department_id HAVING COUNT(employee_id) > 2",
        "rag_dvqs": [
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT DEPARTMENT_ID , AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees GROUP BY DEPARTMENT_ID": 0.4,
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees WHERE COUNT(EMPLOYEE_ID) > 2 GROUP BY DEPARTMENT_ID": 0.3,
            "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(SALARY) FROM employees HAVING COUNT(EMPLOYEE_ID) > 2 GROUP BY DEPARTMENT_ID": 0.3
        }
    },
    {
        "record_name": "1709",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
        "nlq": "Scatter plot to depict department identification on the x-axis and the total salary on the y-axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.SALARY , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.MANAGER_ID , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.MANAGER_ID , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.EMPLOYEE_ID , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.EMPLOYEE_ID , T1.MANAGER_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
            "Visualize SCATTER SELECT T1.DEPARTMENT_ID , T2.LOCATION_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T1.employee_id = T2.manager_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.EMPLOYEE_ID = T2.MANAGER_ID",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.EMPLOYEE_ID = T2.MANAGER_ID": 0.4,
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.EMPLOYEE_ID != T2.MANAGER_ID": 0.3,
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.EMPLOYEE_ID = T2.MANAGER_ID AND T1.SALARY > 5000": 0.2,
            "Visualize SCATTER SELECT T1.SALARY , T1.DEPARTMENT_ID FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.EMPLOYEE_ID = T2.MANAGER_ID AND T1.SALARY < 5000": 0.1
        }
    },
    {
        "record_name": "863@y_name@DESC",
        "db_id": "cre_Drama_Workshop_Groups",
        "target": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "nlq": "Provide me with a bar graph illustrating the quantity of actual delivery dates for each individual actual delivery date, and arrange the total count in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Actual_Delivery_Date, COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY ORDER BY COUNT(Actual_Delivery_Date) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
            "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
            "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY ### Note: The Original DVQ has been modified to mimic the style of the Reference DVQs while keeping the original column names intact .",
        "predict_debugged_db_ann": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings AS T1 GROUP BY Actual_Delivery_Date BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings AS T1 GROUP BY Actual_Delivery_Date BY WEEKDAY": 0.6,
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings AS T1 GROUP BY Actual_Delivery_Date BY MONTH": 0.2,
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings AS T1 GROUP BY Actual_Delivery_Date BY YEAR": 0.2
        }
    },
    {
        "record_name": "863@y_name@DESC",
        "db_id": "cre_Drama_Workshop_Groups",
        "target": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "nlq": "Display the actual delivery dates categorized by the day of the week in a bar chart, and sort them in descending order based on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) ASC BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS BIN Actual_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) DESC BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Planned_Delivery_Date) ASC BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Planned_Delivery_Date , COUNT(Planned_Delivery_Date) FROM BOOKINGS BIN Planned_Delivery_Date BY WEEKDAY",
            "Visualize BAR SELECT Order_Date , COUNT(Order_Date) FROM BOOKINGS BIN Order_Date BY WEEKDAY",
            "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY YEAR",
            "Visualize LINE SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY": 0.6,
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings ORDER BY Actual_Delivery_Date DESC BIN Actual_Delivery_Date BY WEEKDAY": 0.2,
            "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM Bookings ORDER BY Actual_Delivery_Date ASC BIN Actual_Delivery_Date BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "2997@y_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC",
        "nlq": "Display the identifiers and information of the investors who have made at least two transactions with the type code \"SALE\" using a bar chart, listing them in descending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details ASC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id ASC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\"",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\"",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC": 0.5,
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC": 0.3,
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id ASC": 0.2
        }
    },
    {
        "record_name": "2997@y_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC",
        "nlq": "Display the IDs and details of investors who have made at least two transactions with the type code \"SALE\". Represent this data in a bar chart, sorted in descending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Investor_details, investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" GROUP BY Investor_details, investor_id ORDER BY Investor_details DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details ASC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id ASC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\"",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.Investor_details DESC": 0.4,
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" GROUP BY T1.Investor_details, T1.investor_id ORDER BY COUNT(T2.transaction_id) DESC": 0.3,
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" HAVING COUNT(T2.transaction_id) >= 2 ORDER BY T1.Investor_details DESC": 0.3
        }
    },
    {
        "record_name": "2581@x_name@ASC",
        "db_id": "phone_market",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
        "nlq": "I would like to compare the quantity of phone names using a bar chart, and list them in ascending order by name.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY T3.Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY T3.Name ASC": 0.6,
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY T3.Name DESC": 0.2,
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY COUNT(Name) ASC": 0.1,
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY COUNT(Name) DESC": 0.1
        }
    },
    {
        "record_name": "2581@x_name@ASC",
        "db_id": "phone_market",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
        "nlq": "Display the quantity of phone names in a bar graph, sorted in ascending order by the name, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY T3.Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY T3.Name ASC": 0.6,
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY COUNT(Name) ASC": 0.2,
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY T3.Name ORDER BY COUNT(Name) DESC": 0.2
        }
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "nlq": "Provide a histogram illustrating the distribution of books across different categories. Please list the X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC": 0.5,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "nlq": "Display the total count for each category, with the bars listed in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category ASC": 0.2
        }
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "nlq": "Display a bar chart illustrating all book genres and the corresponding number of books in each category, arranged in descending order by their names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC": 0.6,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "nlq": "How many books are categorized within each category, and I would like them listed in descending order based on the bars, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC": 0.5,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "nlq": "Display all book genres and the quantity of books in each genre, I would like them listed in descending order based on the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY Category ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category ASC": 0.2
        }
    },
    {
        "record_name": "907@x_name@DESC",
        "db_id": "culture_company",
        "target": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
        "nlq": "Create a bar graph to illustrate the distribution of books across different categories, sorted by category names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Year , COUNT(Year) FROM book_club GROUP BY Year ORDER BY YEAR DESC",
            "Visualize PIE SELECT Category , count(*) FROM book_club GROUP BY category",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Category , COUNT(*) FROM music_festival GROUP BY Category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY Category DESC": 0.6,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Category , COUNT(*) FROM book_club GROUP BY Category ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "3063",
        "db_id": "tvshow",
        "target": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "nlq": "What are the package choices for all TV channels that exclude any cartoons directed by Ben Jones, and represent the count using a pie chart please.",
        "predict_rag_nlq": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "rag_dvqs": [
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize PIE SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_debugged_db_ann": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_dvq_set": {
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option": 0.7,
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Smith') GROUP BY Package_Option": 0.2,
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Johnson') GROUP BY Package_Option": 0.1
        }
    },
    {
        "record_name": "3063",
        "db_id": "tvshow",
        "target": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "nlq": "What is the count of package choices for all TV channels that exclude any cartoons directed by Ben Jones?",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option": 0.6,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'John Smith') GROUP BY Package_Option": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Emily Brown') GROUP BY Package_Option": 0.2
        }
    },
    {
        "record_name": "3063",
        "db_id": "tvshow",
        "target": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "nlq": "Identify the package options of the TV channel that do not include any cartoons directed by Ben Jones, and represent the count using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "rag_dvqs": [
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize PIE SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_debugged_db_ann": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_dvq_set": {
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option": 0.6,
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'John Smith') GROUP BY Package_Option": 0.2,
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Alice Brown') GROUP BY Package_Option": 0.2
        }
    },
    {
        "record_name": "3063",
        "db_id": "tvshow",
        "target": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "nlq": "A pie chart illustrating the distribution of package options for all TV channels excluding those that do not broadcast any cartoons directed by Ben Jones.",
        "predict_rag_nlq": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
        "rag_dvqs": [
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize PIE SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_debugged_db_ann": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option",
        "predict_dvq_set": {
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option": 0.5,
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Johnson') GROUP BY Package_Option": 0.3,
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Smith') GROUP BY Package_Option": 0.2
        }
    },
    {
        "record_name": "1576",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "nlq": "For all employees whose first names contain the letters D or S, a scatter plot illustrates the relationship between employee_id and commission_pct.",
        "predict_rag_nlq": "Visualize SCATTER SELECT EMPLOYEE_ID, COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_dvq_set": {
            "SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'": 0.5,
            "SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%'": 0.3,
            "SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME IN ('D', 'S')": 0.2
        }
    },
    {
        "record_name": "1576",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "nlq": "For all employees whose first name contains the letters D or S, what is the correlation between employee_id and commission_pct?",
        "predict_rag_nlq": "Visualize SCATTER SELECT EMPLOYEE_ID, COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_dvq_set": {
            "SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'": 0.6,
            "SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%'": 0.2,
            "SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME CONTAINS 'D' OR FIRST_NAME CONTAINS 'S'": 0.2
        }
    },
    {
        "record_name": "1576",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "nlq": "For all employees whose first names contain the letters D or S, create a scatter plot illustrating the relationship between employee_id and commission_pct.",
        "predict_rag_nlq": "Visualize SCATTER SELECT EMPLOYEE_ID, COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'": 0.6,
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%'": 0.2,
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%'": 0.1,
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%S%'": 0.1
        }
    },
    {
        "record_name": "1576",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "nlq": "For all employees whose first names contain the letters D or S, generate a scatter chart depicting the correlation between employee_id and commission_pct.",
        "predict_rag_nlq": "Visualize SCATTER SELECT EMPLOYEE_ID, COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'": 0.6,
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%'": 0.2,
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%'": 0.1,
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%S%'": 0.1
        }
    },
    {
        "record_name": "1576",
        "db_id": "hr_1",
        "target": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
        "nlq": "For all employees whose first names contain the letters D or S, create a scatter plot depicting the relationship between employee_id and commission_pct.",
        "predict_rag_nlq": "Visualize SCATTER SELECT EMPLOYEE_ID, COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT COMMISSION_PCT , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT SALARY , MANAGER_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%'": 0.5,
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%'": 0.3,
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' AND COMMISSION_PCT IS NOT NULL": 0.2
        }
    },
    {
        "record_name": "1899@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
        "nlq": "Utilize a histogram to present the ID of the department and the first names of the employees, and arrange them in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY LAST_NAME DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC": 0.4,
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC": 0.3,
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC": 0.2,
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY EMPLOYEE_ID DESC": 0.1
        }
    },
    {
        "record_name": "1899@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
        "nlq": "Present the department_id by first name in a histogram, with the Y-axis organized in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID ASC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT LAST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC": 0.5,
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME DESC": 0.3,
            "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY FIRST_NAME ASC": 0.2
        }
    },
    {
        "record_name": "583@x_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
        "nlq": "How many classes did each instructor teach? Please present the information in a bar graph and arrange the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC": 0.5,
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC": 0.3,
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC": 0.2
        }
    },
    {
        "record_name": "583@x_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
        "nlq": "Display the quantity of courses taught by each instructor in a bar graph, arranged in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME DESC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY EMP_FNAME ASC",
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ,  EMP_FNAME ORDER BY EMP_FNAME DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC": 0.6,
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) ASC": 0.3,
            "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN EMPLOYEE AS T2 ON T1.PROF_NUM = T2.EMP_NUM GROUP BY EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC": 0.1
        }
    },
    {
        "record_name": "834",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
        "nlq": "Display the quantity of documents for various budget type codes in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_dvq_set": {
            "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.5,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.3,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(Document_ID) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.2
        }
    },
    {
        "record_name": "834",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
        "nlq": "Present a pie chart illustrating the distribution of documents across various budget type codes.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_dvq_set": {
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.5,
            "Visualize PIE SELECT Budget_Type_Code , SUM(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.3,
            "Visualize PIE SELECT Budget_Type_Code , AVG(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.2
        }
    },
    {
        "record_name": "578@y_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
        "nlq": "Retrieve the count of students who enrolled in a particular course and earned either an A or C grade, grouped by last name, and present the data in a bar graph with the y-axis arranged in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY STU_LNAME ASC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) DESC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY STU_LNAME DESC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) ASC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) DESC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME ASC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME DESC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC": 0.5,
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'A' OR T2.ENROLL_GRADE = 'C' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC": 0.3,
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE IN ('A', 'C') GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC": 0.2
        }
    },
    {
        "record_name": "578@y_name@ASC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
        "nlq": "How many students enrolled in a course received an A or C grade? Present the data in a bar chart, grouping by students' last names, and arrange in ascending order based on the number of students' last names.",
        "predict_rag_nlq": "Visualize BAR SELECT STU_LNAME, COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY STU_LNAME ASC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) DESC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY STU_LNAME DESC",
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) ASC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY COUNT(STU_FNAME) DESC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME ASC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME ORDER BY STU_FNAME DESC",
            "Visualize BAR SELECT STU_FNAME , COUNT(STU_FNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_FNAME"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'C' OR T2.ENROLL_GRADE = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC": 0.5,
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE IN ('C', 'A') GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC": 0.3,
            "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM STUDENT AS T1 JOIN ENROLL AS T2 ON T1.STU_NUM = T2.STU_NUM WHERE T2.ENROLL_GRADE = 'A' OR T2.ENROLL_GRADE = 'C' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC": 0.2
        }
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Generate a scatter plot illustrating the total grants disbursed by each organization, and include a list of the organization IDs.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.organisation_id , SUM(T1.grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT SUM(GRANT_AMOUNT) , ORGANISATION_ID FROM Grants GROUP BY ORGANISATION_ID",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT SUM(GRANT_AMOUNT) , ORGANISATION_ID FROM Grants GROUP BY ORGANISATION_ID": 0.4,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id": 0.3,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id ORDER BY SUM(grant_amount) DESC": 0.2,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id SORT BY SUM(grant_amount) DESC": 0.1
        }
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Scatter plot. Provide the total sum of grants allocated by each organization, and include the organization ID in the list.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.organisation_id , SUM(T1.grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id": 0.4,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants WHERE grant_amount > 0 GROUP BY organisation_id": 0.3,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants WHERE grant_amount > 0 GROUP BY organisation_id ORDER BY SUM(grant_amount) DESC": 0.2,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id ORDER BY SUM(grant_amount) DESC": 0.1
        }
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "What is the cumulative value of grants awarded by each organization? Additionally, please provide the organization ID.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.organisation_id , SUM(T1.grant_amount) AS cumulative_grant_amount FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.ORGANISATION_DETAILS , T1.ORGANISATION_ID FROM Grants AS T1 JOIN Organisations AS T2 ON T1.ORGANISATION_ID = T2.ORGANISATION_ID GROUP BY T2.ORGANISATION_DETAILS",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.ORGANISATION_DETAILS , T1.ORGANISATION_ID FROM Grants AS T1 JOIN Organisations AS T2 ON T1.ORGANISATION_ID = T2.ORGANISATION_ID GROUP BY T2.ORGANISATION_DETAILS": 0.6,
            "Visualize BAR SELECT T2.ORGANISATION_DETAILS , T1.ORGANISATION_ID FROM Grants AS T1 JOIN Organisations AS T2 ON T1.ORGANISATION_ID = T2.ORGANISATION_ID GROUP BY T1.ORGANISATION_ID": 0.3,
            "Visualize BAR SELECT T2.ORGANISATION_DETAILS , T1.ORGANISATION_ID FROM Grants AS T1 JOIN Organisations AS T2 ON T1.ORGANISATION_ID = T2.ORGANISATION_ID GROUP BY T2.ORGANISATION_DETAILS, T1.ORGANISATION_ID": 0.1
        }
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Scatter plot. What is the aggregate sum of grant funds awarded to each institution and what is its identification number?",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.organisation_id , SUM(T1.grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id": 0.3,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id, organisation_id": 0.2,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id, organisation_id ORDER BY SUM(grant_amount) DESC": 0.3,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id, organisation_id ORDER BY SUM(grant_amount) DESC LIMIT 10": 0.2
        }
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Create a scatter plot depicting the total amount of grant money awarded to each organization and its corresponding ID.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.organisation_id , SUM(T1.grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize PIE SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id": 0.4,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id, organisation_id": 0.3,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id, organisation_id ORDER BY SUM(grant_amount) DESC": 0.2,
            "Visualize SCATTER SELECT SUM(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id ORDER BY SUM(grant_amount) DESC": 0.1
        }
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "What is the aggregate sum of grant funds allocated to each institution, and what is their corresponding identification number? Display the correlation between them.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.organisation_id , SUM(T1.grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_id",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.organisation_details , SUM(T1.grant_amount) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.ORGANISATION_DETAILS , SUM(T1.GRANT_AMOUNT) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.ORGANISATION_ID = T2.ORGANISATION_ID GROUP BY T2.ORGANISATION_DETAILS",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.ORGANISATION_DETAILS , SUM(T1.GRANT_AMOUNT) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.ORGANISATION_ID = T2.ORGANISATION_ID GROUP BY T2.ORGANISATION_DETAILS": 0.7,
            "Visualize BAR SELECT T2.ORGANISATION_ID , SUM(T1.GRANT_AMOUNT) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.ORGANISATION_ID = T2.ORGANISATION_ID GROUP BY T2.ORGANISATION_ID": 0.2,
            "Visualize BAR SELECT T2.ORGANISATION_DETAILS , AVG(T1.GRANT_AMOUNT) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.ORGANISATION_ID = T2.ORGANISATION_ID GROUP BY T2.ORGANISATION_DETAILS": 0.1
        }
    },
    {
        "record_name": "2961",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
        "nlq": "Plot a scatter chart, where the grant amount is summed by organization ID.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.organisation_id , SUM(T1.grant_amount) FROM Grants AS T1 GROUP BY T1.organisation_id",
        "rag_dvqs": [
            "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details",
            "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T1.organisation_id ASC",
            "Visualize BAR SELECT organisation_details , COUNT(organisation_details) FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY organisation_details ORDER BY organisation_details ASC",
            "Visualize BAR SELECT T2.organisation_details , T1.organisation_id FROM Grants AS T1 JOIN Organisations AS T2 ON T1.organisation_id = T2.organisation_id GROUP BY T2.organisation_details ORDER BY T2.organisation_details DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT organisation_id , SUM(grant_amount) FROM Grants GROUP BY organisation_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT ORGANISATION_ID , SUM(GRANT_AMOUNT) FROM Grants GROUP BY ORGANISATION_ID",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT ORGANISATION_ID , SUM(GRANT_AMOUNT) FROM Grants GROUP BY ORGANISATION_ID": 0.4,
            "Visualize SCATTER SELECT ORGANISATION_ID , AVG(GRANT_AMOUNT) FROM Grants GROUP BY ORGANISATION_ID": 0.3,
            "Visualize SCATTER SELECT ORGANISATION_ID , MAX(GRANT_AMOUNT) FROM Grants GROUP BY ORGANISATION_ID": 0.2,
            "Visualize SCATTER SELECT ORGANISATION_ID , MIN(GRANT_AMOUNT) FROM Grants GROUP BY ORGANISATION_ID": 0.1
        }
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "Generate a stacked bar chart illustrating the distribution of names and the total sum of codes for the records from the products and their respective manufacturers. Group the data by the attribute name and arrange them in descending order based on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC": 0.6,
            "Visualize BAR SELECT T1.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For the entries in the products and their respective manufacturers, retrieve the name and the sum of the codes, grouping them by attribute name. Visualize this data using a bar chart, ordered by the total number of codes from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Code DESC": 0.4,
            "Visualize BAR SELECT T2.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T2.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T1.Code) DESC": 0.2,
            "Visualize BAR SELECT T2.Name , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY AVG(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For the records pertaining to products and their respective manufacturers, create a bar chart representing the distribution of product names and the total code sum, grouped by the attribute name. Could you please list the y-axis in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC": 0.5,
            "Visualize BAR SELECT T1.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Code) DESC": 0.2
        }
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For the records pertaining to products and their respective manufacturers, create a bar chart that presents the distribution of names and the total sum of codes, grouped by the attribute name. Please display the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.5,
            "Visualize BAR SELECT T2.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.3,
            "Visualize BAR SELECT T2.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.2
        }
    },
    {
        "record_name": "2205@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, present the distribution of names and the sum of codes. Display this information in a bar chart, grouped by the attribute name, and sort the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Code DESC": 0.5,
            "Visualize BAR SELECT T1.Name , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Code) DESC": 0.2
        }
    },
    {
        "record_name": "3002@y_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
        "nlq": "Display all the details of investors and represent their count with a bar chart. Please rank them in descending order based on the number of investor details.",
        "predict_rag_nlq": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC": 0.6,
            "Visualize BAR SELECT Investor_details , COUNT(*) FROM Investors GROUP BY Investor_details ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Investor_details , COUNT(Investor_id) FROM Investors GROUP BY Investor_details ORDER BY COUNT(Investor_id) DESC": 0.1
        }
    },
    {
        "record_name": "3002@y_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
        "nlq": "Create a bar chart to represent the quantity of investor information grouped by investor details, with the Y-axis arranged in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY Investor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC": 0.4,
            "Visualize BAR SELECT Investor_details , COUNT(*) FROM Investors GROUP BY Investor_details ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Investor_details , COUNT(Investor_id) FROM Investors GROUP BY Investor_details ORDER BY COUNT(Investor_id) DESC": 0.2,
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors GROUP BY Investor_details ORDER BY Investor_details DESC": 0.1
        }
    },
    {
        "record_name": "1294@y_name@DESC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "nlq": "What is the enrollment date for the course titled \"Spanish\", and represent it using a bar chart, sorted in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY": 0.5,
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY date_of_enrolment DESC BIN date_of_enrolment BY WEEKDAY": 0.3,
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY date_of_enrolment ASC BIN date_of_enrolment BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1294@y_name@DESC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "nlq": "Find the count of dates when the \"Spanish\" course was enrolled, and display them in descending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY": 0.5,
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY date_of_enrolment DESC BIN date_of_enrolment BY WEEKDAY": 0.3,
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY date_of_enrolment ASC BIN date_of_enrolment BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1294@y_name@DESC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "nlq": "Find the enrollment dates for the \"Spanish\" course, and represent them with a bar chart, arranging the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id WHERE T2.test_result = \"Pass\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Student_Course_Enrolment BIN date_of_enrolment BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH": 0.5,
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY date_of_enrolment DESC BIN date_of_enrolment BY MONTH": 0.3,
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY date_of_enrolment ASC BIN date_of_enrolment BY MONTH": 0.2
        }
    },
    {
        "record_name": "1294@y_name@DESC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
        "nlq": "A stacked bar chart that represents the enrollment dates of the \"Spanish\" course, listed in descending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC STACKED BY date_of_enrolment",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY MONTH",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) ASC BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" BIN date_of_enrolment BY WEEKDAY",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY MONTH": 0.5,
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY date_of_enrolment DESC BIN date_of_enrolment BY MONTH": 0.3,
            "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\" ORDER BY date_of_enrolment ASC BIN date_of_enrolment BY MONTH": 0.2
        }
    },
    {
        "record_name": "2698@x_name@DESC",
        "db_id": "school_bus",
        "target": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
        "nlq": "Display the mean age of drivers from the identical city of residence using a bar chart, and kindly arrange the X-axis in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY COUNT(Home_city) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC": 0.3,
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver WHERE Home_city = Home_city GROUP BY Home_city ORDER BY AVG(Age) DESC": 0.2,
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC": 0.3,
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) ASC": 0.2
        }
    },
    {
        "record_name": "2698@x_name@DESC",
        "db_id": "school_bus",
        "target": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
        "nlq": "Create a bar chart depicting the average age grouped by hometown, and please sort the bars from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC": 0.5,
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) ASC": 0.3,
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC": 0.2
        }
    },
    {
        "record_name": "2698@x_name@DESC",
        "db_id": "school_bus",
        "target": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
        "nlq": "Compare the mean age of drivers from the identical city of origin using a bar graph, sorted in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city ASC",
            "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT Home_city , COUNT(Home_city) FROM driver GROUP BY Home_city ORDER BY Home_city DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY AVG(Age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT HOME_CITY , AVG(Age) FROM driver GROUP BY HOME_CITY ORDER BY AVG(Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT HOME_CITY , AVG(Age) FROM driver GROUP BY HOME_CITY ORDER BY AVG(Age) DESC": 0.4,
            "Visualize BAR SELECT HOME_CITY , AVG(Age) FROM driver WHERE Home_city = 'New York' GROUP BY HOME_CITY ORDER BY AVG(Age) DESC": 0.2,
            "Visualize BAR SELECT HOME_CITY , AVG(Age) FROM driver GROUP BY HOME_CITY ORDER BY AVG(Age) ASC": 0.2,
            "Visualize BAR SELECT HOME_CITY , AVG(Age) FROM driver WHERE Age > 30 GROUP BY HOME_CITY ORDER BY AVG(Age) DESC": 0.1,
            "Visualize BAR SELECT HOME_CITY , AVG(Age) FROM driver WHERE Age < 25 GROUP BY HOME_CITY ORDER BY AVG(Age) DESC": 0.1
        }
    },
    {
        "record_name": "328",
        "db_id": "bike_1",
        "target": "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
        "nlq": "For each station, simply present its longitude and the average duration of trips that originated from the station using a scatter plot.",
        "predict_rag_nlq": "Visualize SCATTER SELECT long , AVG(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY long",
        "rag_dvqs": [
            "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
            "Visualize SCATTER SELECT lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY lat",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
            "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id",
            "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY Location",
            "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
            "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
            "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY Work_Type",
            "Visualize SCATTER SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT long , AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT long , AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT long , AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id": 0.4,
            "Visualize SCATTER SELECT long , AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T1.long": 0.3,
            "Visualize SCATTER SELECT long , AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T1.id": 0.2,
            "Visualize SCATTER SELECT long , AVG(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id": 0.1
        }
    },
    {
        "record_name": "328",
        "db_id": "bike_1",
        "target": "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
        "nlq": "Please provide a scatter chart displaying the longitude of each start station and the average duration of trips initiated from each station.",
        "predict_rag_nlq": "Visualize SCATTER SELECT long , AVG(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY long",
        "rag_dvqs": [
            "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
            "Visualize SCATTER SELECT lat , min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY lat",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY LOCATION",
            "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id",
            "Visualize SCATTER SELECT sum(number_of_platforms) , sum(total_passengers) FROM station GROUP BY Location",
            "Visualize SCATTER SELECT lot_id , avg(amount_of_transaction) FROM TRANSACTIONS AS T1 JOIN Transactions_Lots AS T2 ON T1.transaction_id = T2.transaction_id GROUP BY T2.lot_id ORDER BY avg(amount_of_transaction)",
            "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
            "Visualize SCATTER SELECT avg(t1.age) , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY Work_Type",
            "Visualize SCATTER SELECT investor_id , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY investor_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT long , AVG(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T1.id",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT long , AVG(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T1.id",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT long , AVG(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T1.id": 0.5,
            "Visualize SCATTER SELECT lat , AVG(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T1.id": 0.3,
            "Visualize SCATTER SELECT long , AVG(duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.end_station_id GROUP BY T1.id": 0.2
        }
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "nlq": "Display the distribution of meter_700 and meter_100 in a stacked bar chart, arranged on the Y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC": 0.6,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC": 0.3,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC": 0.1
        }
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "nlq": "Display a bar chart depicting the meter_100 values for different meter 700 measurements, arranged in descending order based on the meter_100 values, please.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC": 0.6,
            "Visualize BAR SELECT meter_700 , meter_200 FROM swimmer ORDER BY meter_100 DESC": 0.2,
            "Visualize BAR SELECT meter_700 , meter_300 FROM swimmer ORDER BY meter_100 DESC": 0.1,
            "Visualize BAR SELECT meter_700 , meter_400 FROM swimmer ORDER BY meter_100 DESC": 0.1,
            "Visualize BAR SELECT meter_700 , meter_500 FROM swimmer ORDER BY meter_100 DESC": 0.05,
            "Visualize BAR SELECT meter_700 , meter_600 FROM swimmer ORDER BY meter_100 DESC": 0.05
        }
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "nlq": "Provide me with the comparison between meter_100 and meter_700, and sort them in descending order based on the meter_100 values.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC": 0.4,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC": 0.3,
            "Visualize BAR SELECT meter_100 , meter_700 FROM swimmer ORDER BY meter_100 DESC": 0.2,
            "Visualize BAR SELECT meter_100 , meter_700 FROM swimmer ORDER BY meter_700 DESC": 0.1
        }
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "nlq": "A bar chart illustrates the allocation of meter_700 and meter_100, with the y-axis displayed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC": 0.5,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC": 0.3,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC": 0.2
        }
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "nlq": "Locate values for meter_700 and meter_100, and present them visually in a bar chart. Please arrange the meter_100 values in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC": 0.5,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC": 0.3,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC": 0.2
        }
    },
    {
        "record_name": "2925@y_name@DESC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "nlq": "Create a bar chart illustrating the distribution of meter_700 and meter_100, with the meter_100 values displayed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_600 DESC",
            "Visualize BAR SELECT meter_500 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC",
            "Visualize BAR SELECT meter_400 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_300 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
            "Visualize BAR SELECT meter_600 , meter_100 FROM swimmer ORDER BY meter_100 ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC": 0.4,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 DESC": 0.3,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_700 ASC": 0.2,
            "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 ASC": 0.1
        }
    },
    {
        "record_name": "1518",
        "db_id": "gas_company",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "nlq": "Display the quantity of companies in each corporate headquarters using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters": 0.4,
            "Visualize BAR SELECT Main_Industry , COUNT(*) FROM company GROUP BY Headquarters": 0.3,
            "Visualize BAR SELECT Headquarters , SUM(Sales_billion) FROM company GROUP BY Headquarters": 0.2,
            "Visualize BAR SELECT Headquarters , AVG(Profits_billion) FROM company GROUP BY Headquarters": 0.1
        }
    },
    {
        "record_name": "1518",
        "db_id": "gas_company",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "nlq": "Show the number of companies for each headquarters in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY count(*) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters": 0.4,
            "Visualize BAR SELECT Headquarters , COUNT(Company_ID) FROM company GROUP BY Headquarters": 0.3,
            "Visualize BAR SELECT Headquarters , COUNT(Company) FROM company GROUP BY Headquarters": 0.2,
            "Visualize BAR SELECT Headquarters , COUNT(Main_Industry) FROM company GROUP BY Headquarters": 0.1
        }
    },
    {
        "record_name": "1518",
        "db_id": "gas_company",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "nlq": "Bar chart illustrating the number of headquarters for each individual headquarters.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters": 0.4,
            "Visualize BAR SELECT Headquarters , COUNT(Main_Industry) FROM company GROUP BY Headquarters": 0.3,
            "Visualize BAR SELECT Headquarters , SUM(Sales_billion) FROM company GROUP BY Headquarters": 0.2,
            "Visualize BAR SELECT Headquarters , AVG(Profits_billion) FROM company GROUP BY Headquarters": 0.1
        }
    },
    {
        "record_name": "1204@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
        "nlq": "Present the quantity of dogs owned by each individual in a bar chart that groups by the owner's surname, and arrange the x-axis in ascending order from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC": 0.6,
            "Visualize BAR SELECT last_name , COUNT(dog_id) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(dog_id) ASC": 0.3,
            "Visualize BAR SELECT last_name , COUNT(*) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "1204@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
        "nlq": "How many dogs does each owner possess? Provide a bar chart that groups the data by the owner's last name and arrange it in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC": 0.6,
            "Visualize BAR SELECT first_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC": 0.2,
            "Visualize BAR SELECT last_name , COUNT(owner_id) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC": 0.2
        }
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "nlq": "Create a stacked bar chart illustrating the distribution of Is_full_time and the corresponding number of occurrences. Group the bars based on the attribute Is_full_time. Please arrange the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY COUNT(IS_FULL_TIME) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY COUNT(IS_FULL_TIME) ASC": 0.5,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(*) FROM hiring GROUP BY IS_FULL_TIME ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC": 0.2
        }
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "nlq": "Create a bar chart comparing the number of individuals who are full-time versus the number of individuals who are not full-time, and I would like them listed in ascending order by the \"Is_full_time\" category.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME ASC": 0.5,
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC": 0.3,
            "Visualize BAR SELECT Is_full_time , COUNT(*) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC": 0.2
        }
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "nlq": "Generate a stacked bar chart illustrating the distribution and quantity of \"Is_full_time\". Group the data based on the attribute \"Is_full_time\" and list the bars on the X-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC": 0.5,
            "Visualize BAR SELECT Is_full_time , COUNT(*) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC": 0.3,
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC": 0.2
        }
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "nlq": "A bar chart illustrates the breakdown of Is_full_time and the corresponding count of Is_full_time, grouped by the Is_full_time attribute, and I would like to display it in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME ASC": 0.3,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY COUNT(IS_FULL_TIME) ASC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY COUNT(IS_FULL_TIME) DESC": 0.3
        }
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "nlq": "Provide a bar chart comparing the amounts of \"Is_full_time\" across different \"Is_full_time\" attributes. Group the data by the \"Is_full_time\" attribute and list them on the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME ASC": 0.3,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(*) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME ASC": 0.2,
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC": 0.3,
            "Visualize BAR SELECT Is_full_time , COUNT(*) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC": 0.2
        }
    },
    {
        "record_name": "1335@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
        "nlq": "Present the distribution and quantity of \"Is_full_time\" and group them based on the attribute \"Is_full_time\" in a bar chart, with the bars arranged in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Is_full_time) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY COUNT(IS_FULL_TIME) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY COUNT(IS_FULL_TIME) ASC": 0.5,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME ASC": 0.3,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(IS_FULL_TIME) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2
        }
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Display the distribution of All_Neutral and ACC_Percent in a bar graph, and please list the X-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.4,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC": 0.3,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.2,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC": 0.1
        }
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "A bar chart illustrates the distribution of All_Neutral and ACC_Percent, and arrange them in ascending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.5,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC": 0.3,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.2
        }
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Bar graph depicting the percentage of accuracy from each neutral source, and please arrange them in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.6,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC": 0.2,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC": 0.2
        }
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Generate a bar graph illustrating the distribution of All_Neutral and ACC_Percent. Please arrange the X-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC": 0.5,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.3,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.2
        }
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Create a bar chart representing the distribution of All_Neutral and ACC_Percent, and arrange them in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Road , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC": 0.5,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.3,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.2
        }
    },
    {
        "record_name": "3144@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Provide me with the comparison of the ACC_Percent in relation to the All_Neutral. Additionally, please arrange the All_Neutral in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.5,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC": 0.3,
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC": 0.2
        }
    },
    {
        "record_name": "2067",
        "db_id": "loan_1",
        "target": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "nlq": "For each account category, calculate the mean account balance of customers with a credit score below 50. Display the results in a pie chart.",
        "predict_rag_nlq": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "rag_dvqs": [
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC",
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_debugged_db_ann": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_dvq_set": {
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type": 0.6,
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type": 0.2,
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50": 0.1,
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC": 0.1
        }
    },
    {
        "record_name": "2067",
        "db_id": "loan_1",
        "target": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "nlq": "What is the average balance of accounts for customers with a credit score below 50 across the various types of accounts?",
        "predict_rag_nlq": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "rag_dvqs": [
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC",
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_debugged_db_ann": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_dvq_set": {
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type": 0.5,
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 AND acc_bal > 0 GROUP BY acc_type": 0.2,
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 AND acc_bal > 0 AND no_of_loans = 0 GROUP BY acc_type": 0.3
        }
    },
    {
        "record_name": "2067",
        "db_id": "loan_1",
        "target": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "nlq": "Present a pie chart illustrating the average account balance of customers with a credit score below 50 across various account types.",
        "predict_rag_nlq": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "rag_dvqs": [
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC",
            "Visualize PIE SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%'",
            "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize PIE SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
            "Visualize PIE SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_debugged_db_ann": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_dvq_set": {
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type": 0.4,
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 AND acc_bal > 0 GROUP BY acc_type": 0.2,
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 AND acc_bal IS NOT NULL GROUP BY acc_type": 0.3,
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 AND acc_bal > 0 AND acc_type IS NOT NULL GROUP BY acc_type": 0.1
        }
    },
    {
        "record_name": "2067",
        "db_id": "loan_1",
        "target": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "nlq": "What is the mean account balance of customers with a credit score below 50 for various account types? Display the proportion, please.",
        "predict_rag_nlq": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "rag_dvqs": [
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY acc_type DESC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) ASC",
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type ORDER BY avg(acc_bal) DESC",
            "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal ASC",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY acc_bal DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT cust_name , acc_bal FROM customer WHERE cust_name LIKE '%a%' ORDER BY cust_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_debugged_db_ann": "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
        "predict_dvq_set": {
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type": 0.6,
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 AND acc_bal > 0 GROUP BY acc_type": 0.2,
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 AND acc_bal > 0 AND no_of_loans = 0 GROUP BY acc_type": 0.1,
            "Visualize BAR SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 AND acc_bal > 0 AND no_of_loans = 0 AND state = 'NY' GROUP BY acc_type": 0.1
        }
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "nlq": "For the data entries pertaining to the products and their respective manufacturers, visualize the correlation between the product code and price, and group them based on the attribute \"founder\".",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code, T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder  ### Explanation: - No column names needed to be replaced in the Original DVQ as all the column names already exist in the database schemas.",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.7,
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2,
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.1
        }
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "nlq": "For the data pertaining to the products and their respective manufacturers, create a scatter plot illustrating the relationship between the product code and price, while grouping them by the founding attribute.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder  ### Explanation: - The column names in the original DVQ already exist in the database schemas, so no replacements are needed.",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.7,
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2,
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.1
        }
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "nlq": "For the given records of products and their respective manufacturers, generate a scatter plot illustrating the relationship between the product code and price. Additionally, group the data points based on the attribute \"founder\".",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.6,
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2,
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.2
        }
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "nlq": "For the records of products and their respective manufacturers, a scatter plot illustrates the relationship between the product code and price, grouped according to the attribute \"founder\".",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Price , Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Price , Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Price , Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder": 0.5,
            "Visualize SCATTER SELECT Price , Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.3,
            "Visualize SCATTER SELECT Price , Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Revenue": 0.2
        }
    },
    {
        "record_name": "2293",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
        "nlq": "For the records pertaining to the products and their respective manufacturers, please present the correlation between the product code and price in a scatter chart, categorized by the attribute \"founder\".",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Code, T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Price , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.6,
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2,
            "Visualize SCATTER SELECT T1.Code , T1.Price FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.2
        }
    },
    {
        "record_name": "3004",
        "db_id": "tracking_share_transactions",
        "target": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "nlq": "Display the mean transaction value for various types of transactions using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "rag_dvqs": [
            "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize PIE SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC",
            "Visualize PIE SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize PIE SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT TRANSACTION_TYPE_CODE , avg(AMOUNT_OF_TRANSACTION) FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE",
        "predict_dvq_set": {
            "Visualize PIE SELECT TRANSACTION_TYPE_CODE , avg(AMOUNT_OF_TRANSACTION) FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE": 0.3,
            "Visualize PIE SELECT TRANSACTION_TYPE_CODE , sum(AMOUNT_OF_TRANSACTION) FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE": 0.2,
            "Visualize PIE SELECT TRANSACTION_TYPE_DESCRIPTION , avg(AMOUNT_OF_TRANSACTION) FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE": 0.3,
            "Visualize PIE SELECT TRANSACTION_TYPE_CODE , avg(SHARE_COUNT) FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE": 0.2
        }
    },
    {
        "record_name": "3004",
        "db_id": "tracking_share_transactions",
        "target": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "nlq": "Visualize the mean transaction value for varying transaction categories using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM Transactions GROUP BY transaction_type_code",
        "rag_dvqs": [
            "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize PIE SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize PIE SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC",
            "Visualize PIE SELECT product_type_code , avg(product_price) FROM products GROUP BY product_type_code",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM Transactions GROUP BY transaction_type_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT TRANSACTION_TYPE_CODE , avg(AMOUNT_OF_TRANSACTION) FROM Transactions GROUP BY TRANSACTION_TYPE_CODE",
        "predict_dvq_set": {
            "Visualize PIE SELECT TRANSACTION_TYPE_CODE , avg(AMOUNT_OF_TRANSACTION) FROM Transactions GROUP BY TRANSACTION_TYPE_CODE": 0.4,
            "Visualize PIE SELECT TRANSACTION_TYPE_CODE , sum(AMOUNT_OF_TRANSACTION) FROM Transactions GROUP BY TRANSACTION_TYPE_CODE": 0.3,
            "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM Transactions GROUP BY transaction_type_code": 0.2,
            "Visualize PIE SELECT transaction_type_code , avg(share_count) FROM Transactions GROUP BY transaction_type_code": 0.1
        }
    },
    {
        "record_name": "3004",
        "db_id": "tracking_share_transactions",
        "target": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "nlq": "Calculate the total and average amount of transactions for each transaction type code and represent it as a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT transaction_type_code , sum(amount_of_transaction) , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "rag_dvqs": [
            "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize PIE SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC",
            "Visualize PIE SELECT transaction_type , count(*) FROM Financial_transactions GROUP BY transaction_type",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT TRANSACTION_TYPE_CODE , avg(AMOUNT_OF_TRANSACTION) FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE",
        "predict_dvq_set": {
            "Visualize PIE SELECT TRANSACTION_TYPE_CODE , avg(AMOUNT_OF_TRANSACTION) FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE": 0.6,
            "Visualize PIE SELECT TRANSACTION_TYPE_CODE , sum(AMOUNT_OF_TRANSACTION) FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE": 0.3,
            "Visualize PIE SELECT TRANSACTION_TYPE_CODE , sum(AMOUNT_OF_TRANSACTION) as total_amount, avg(AMOUNT_OF_TRANSACTION) as average_amount FROM TRANSACTIONS GROUP BY TRANSACTION_TYPE_CODE": 0.1
        }
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "nlq": "For employees whose salary falls between 8000 and 12000, and either have a non-null commission or belong to a department number other than 40, create a line chart illustrating the variation of commission_pct over hire_date. Please ensure that the X-axis is sorted in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.4,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL AND DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.2,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) ORDER BY HIRE_DATE ASC": 0.1
        }
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "nlq": "For employees with salaries between 8000 and 12000 and either a non-null commission or a department number not equal to 40, a line chart illustrates the variation in commission percentage over their hire dates, with the X-axis sorted in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.6,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40 ORDER BY HIRE_DATE ASC": 0.1
        }
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000, and either their commission is not null or their department number is not equal to 40, a line chart will display the trend of commission_pct over hire_date. Please arrange the X-axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.4,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL AND DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.2,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) ORDER BY HIRE_DATE ASC": 0.1
        }
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or belong to a department other than 40, please provide a line chart depicting the fluctuation of commission percentage over hire date, arranged in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.5,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL AND DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.2
        }
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or belong to a department other than 40, please present a line chart depicting the variation of commission_pct over hire_date. Please arrange the data in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.5,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL AND DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.2
        }
    },
    {
        "record_name": "1621@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "nlq": "For employees with salaries ranging between 8000 and 12000, and either a non-null commission or a department number not equal to 40, create a line chart illustrating the variation in commission_pct over hire_date. Please arrange the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.6,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC": 0.1
        }
    },
    {
        "record_name": "1002",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "nlq": "Display the name of the product and the total quantity of orders for each product using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
            "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY product_name",
            "Visualize BAR SELECT product_name , count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name",
            "Visualize PIE SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT T3.product_name , AVG(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize PIE SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity) ) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.PRODUCT_NAME , SUM(SUM(T2.ORDER_QUANTITY) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.PRODUCT_NAME , SUM(SUM(T2.ORDER_QUANTITY) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME": 0.3,
            "Visualize BAR SELECT T1.PRODUCT_NAME , SUM(T2.ORDER_QUANTITY) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME": 0.2,
            "Visualize BAR SELECT T1.PRODUCT_NAME , COUNT(T2.ORDER_QUANTITY) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME": 0.3,
            "Visualize BAR SELECT T1.PRODUCT_NAME , AVG(SUM(T2.ORDER_QUANTITY) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME": 0.2
        }
    },
    {
        "record_name": "1002",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "nlq": "Display the name of the product and the total quantity of orders for each product. Present the data in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT product_name , sum(T1.product_quantity) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name",
            "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY product_name",
            "Visualize BAR SELECT product_name , count(*) FROM Order_items AS T1 JOIN Products AS T2 ON T1.product_id = T2.product_id JOIN Orders AS T3 ON T3.order_id = T1.order_id GROUP BY T2.product_name",
            "Visualize PIE SELECT T1.product_name , SUM(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
            "Visualize BAR SELECT T3.product_name , AVG(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize PIE SELECT T3.product_name , SUM(count(*)) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_name",
            "Visualize BAR SELECT Name , SUM(Price) FROM products GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.product_name , SUM(sum(T2.order_quantity) ) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.PRODUCT_NAME , SUM(SUM(T2.ORDER_QUANTITY) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.PRODUCT_NAME , SUM(SUM(T2.ORDER_QUANTITY) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME": 0.5,
            "Visualize BAR SELECT T1.PRODUCT_NAME , COUNT(SUM(T2.ORDER_QUANTITY) ) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME": 0.3,
            "Visualize BAR SELECT T1.PRODUCT_NAME , SUM(T2.ORDER_QUANTITY) FROM Products AS T1 JOIN Order_Items AS T2 ON T1.PRODUCT_ID = T2.PRODUCT_ID GROUP BY T1.PRODUCT_NAME": 0.2
        }
    },
    {
        "record_name": "2852",
        "db_id": "store_1",
        "target": "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "nlq": "Enumerate the ten customers with the highest total gross sales. Contrast the total gross sales of customers based on their first name.",
        "predict_rag_nlq": "Visualize BAR SELECT first_name , SUM(total) AS total_gross_sales FROM customers JOIN invoices ON customers.id = invoices.customer_id GROUP BY first_name ORDER BY total_gross_sales DESC LIMIT 10",
        "rag_dvqs": [
            "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
            "Visualize BAR SELECT billing_country , SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name ASC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT billing_country , AVG(total) FROM invoices GROUP BY billing_country ORDER BY AVG(total) DESC LIMIT 10",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT first_name , SUM(total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY first_name ORDER BY SUM(total) DESC LIMIT 10",
        "predict_debugged_db_ann": "Visualize BAR SELECT first_name , SUM(total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY first_name ORDER BY SUM(total) DESC LIMIT 10",
        "predict_dvq_set": {
            "Visualize BAR SELECT first_name , SUM(total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY first_name ORDER BY SUM(total) DESC LIMIT 10": 0.4,
            "Visualize BAR SELECT first_name , SUM(total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY first_name ORDER BY SUM(total) ASC LIMIT 10": 0.2,
            "Visualize BAR SELECT first_name , SUM(total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY first_name ORDER BY SUM(total) DESC LIMIT 5": 0.2,
            "Visualize BAR SELECT first_name , SUM(total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY first_name ORDER BY SUM(total) DESC LIMIT 15": 0.2
        }
    },
    {
        "record_name": "2852",
        "db_id": "store_1",
        "target": "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "nlq": "Which first names appear in the top 10 customers with the highest gross sales, and what are their corresponding sales amounts?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.first_name , SUM(T1.unit_price * T1.quantity) AS gross_sales FROM invoice_lines AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id GROUP BY T2.first_name ORDER BY gross_sales DESC LIMIT 10",
        "rag_dvqs": [
            "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name ASC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.first_name , SUM(T1.unit_price * T1.quantity) FROM invoice_lines AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id GROUP BY T2.first_name ORDER BY SUM(T1.unit_price * T1.quantity) DESC LIMIT 10",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.first_name , SUM(T1.unit_price * T1.quantity) FROM invoice_lines AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id GROUP BY T2.first_name ORDER BY SUM(T1.unit_price * T1.quantity) DESC LIMIT 10",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.first_name , SUM(T1.unit_price * T1.quantity) FROM invoice_lines AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id GROUP BY T2.first_name ORDER BY SUM(T1.unit_price * T1.quantity) DESC LIMIT 10": 0.7,
            "Visualize BAR SELECT T2.first_name , SUM(T1.unit_price * T1.quantity) FROM invoice_lines AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id GROUP BY T2.first_name ORDER BY SUM(T1.unit_price * T1.quantity) ASC LIMIT 10": 0.2,
            "Visualize BAR SELECT T2.first_name , SUM(T1.unit_price * T1.quantity) FROM invoice_lines AS T1 JOIN customers AS T2 ON T1.customer_id = T2.id GROUP BY T2.first_name ORDER BY SUM(T1.unit_price * T1.quantity) DESC LIMIT 5": 0.1
        }
    },
    {
        "record_name": "2852",
        "db_id": "store_1",
        "target": "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "nlq": "Which first names belong to the top 10 customers with the highest gross sales, and what are their respective sales figures? Please present the results using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.first_name , SUM(T2.unit_price * T2.quantity) AS gross_sales FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY gross_sales DESC LIMIT 10",
        "rag_dvqs": [
            "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name ASC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.first_name , SUM(T2.unit_price * T2.quantity) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY SUM(T2.unit_price * T2.quantity) DESC LIMIT 10",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.first_name , SUM(T2.unit_price * T2.quantity) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY SUM(T2.unit_price * T2.quantity) DESC LIMIT 10",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.first_name , SUM(T2.unit_price * T2.quantity) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY SUM(T2.unit_price * T2.quantity) DESC LIMIT 10": 0.6,
            "Visualize BAR SELECT T1.first_name , SUM(T2.unit_price * T2.quantity) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY SUM(T2.unit_price * T2.quantity) ASC LIMIT 10": 0.2,
            "Visualize BAR SELECT T1.first_name , SUM(T2.unit_price * T2.quantity) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY SUM(T2.unit_price * T2.quantity) DESC LIMIT 5": 0.1,
            "Visualize BAR SELECT T1.first_name , SUM(T2.unit_price * T2.quantity) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY SUM(T2.unit_price * T2.quantity) DESC LIMIT 15": 0.1
        }
    },
    {
        "record_name": "443@x_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
        "nlq": "Provide me with a bar chart illustrating the quantity of films for each director, and I would like them to be displayed in descending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC": 0.5,
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC": 0.3,
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC": 0.2
        }
    },
    {
        "record_name": "443@x_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
        "nlq": "What is the film count for each director? Provide a bar graph and arrange the directors on the x-axis in descending order from highest to lowest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC": 0.5,
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC": 0.3,
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC": 0.2
        }
    },
    {
        "record_name": "443@x_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
        "nlq": "Bar chart illustrating the count of directors for different \"directed by\" categories, with the X-axis sorted in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY Directed_by ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY count(*) ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) DESC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY COUNT(Directed_by) ASC",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
            "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY directed_by",
            "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Directed_by , count(*) FROM film GROUP BY Directed_by ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Directed_by , COUNT(*) FROM film GROUP BY Directed_by ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Directed_by , COUNT(*) FROM film GROUP BY Directed_by ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Directed_by , COUNT(*) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC": 0.2,
            "Visualize BAR SELECT Directed_by , COUNT(*) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC": 0.2
        }
    },
    {
        "record_name": "1624@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "nlq": "Group and tally the city attribute of the location table to create a bar graph, displaying the names in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) ASC",
            "Visualize BAR SELECT STATE_PROVINCE , COUNT(STATE_PROVINCE) FROM locations GROUP BY STATE_PROVINCE ORDER BY COUNT(STATE_PROVINCE) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC": 0.5,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC": 0.3,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC": 0.2
        }
    },
    {
        "record_name": "1624@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "nlq": "Provide me with a bar graph that compares the quantity of departments situated in various cities, and arrange them in ascending order along the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM shop GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City ASC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC": 0.4,
            "Visualize BAR SELECT CITY , COUNT(DEPARTMENT_ID) FROM departments GROUP BY CITY ORDER BY CITY ASC": 0.3,
            "Visualize BAR SELECT CITY , COUNT(*) FROM departments GROUP BY CITY ORDER BY CITY ASC": 0.3
        }
    },
    {
        "record_name": "1624@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
        "nlq": "Create a bar chart illustrating the count of cities per city, with the bars arranged in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city ASC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) ASC",
            "Visualize BAR SELECT STATE_PROVINCE , COUNT(STATE_PROVINCE) FROM locations GROUP BY STATE_PROVINCE ORDER BY COUNT(STATE_PROVINCE) ASC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC": 0.6,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC": 0.3,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC": 0.1
        }
    },
    {
        "record_name": "2749@y_name@DESC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
        "nlq": "Present a bar graph illustrating the overall count of ship classes without a captain, displaying Y-axis values in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Class , COUNT(Class) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC": 0.5,
            "Visualize BAR SELECT Class , COUNT(Class) FROM Ship WHERE Captain_ID IS NULL GROUP BY Class ORDER BY COUNT(Class) DESC": 0.3,
            "Visualize BAR SELECT Class , COUNT(Class) FROM Ship WHERE Captain_ID = '' GROUP BY Class ORDER BY COUNT(Class) DESC": 0.2
        }
    },
    {
        "record_name": "2749@y_name@DESC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
        "nlq": "For the ships that do not have a captain, present the total number of their classifications using a pie chart, and arrange them in descending order based on the y-axis, please.",
        "predict_rag_nlq": "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
        "rag_dvqs": [
            "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize PIE SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class",
            "Visualize PIE SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
        "predict_debugged_db_ann": "Visualize PIE SELECT Class , COUNT(Class) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
        "predict_dvq_set": {
            "Visualize PIE SELECT Class , COUNT(Class) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC": 0.5,
            "Visualize PIE SELECT Type , COUNT(Type) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Type ORDER BY COUNT(Type) DESC": 0.3,
            "Visualize PIE SELECT Built_Year , COUNT(Built_Year) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain) GROUP BY Built_Year ORDER BY COUNT(Built_Year) DESC": 0.2
        }
    },
    {
        "record_name": "2055@y_name@ASC",
        "db_id": "journal_committee",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "nlq": "Plot a bar chart with the name of the x-axis as 'Location' and the name of the y-axis as 'Number of Locations', and please sort the data in ascending order based on the y-axis values.",
        "predict_rag_nlq": "Visualize BAR SELECT Location , COUNT(Location) FROM journal_committee GROUP BY Location ORDER BY COUNT(Location) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM party GROUP BY Location ORDER BY Location DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY COUNT(Location) ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM performance GROUP BY Location ORDER BY Location ASC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY COUNT(Location) DESC",
            "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location , COUNT(Location) FROM journal_committee GROUP BY Location ORDER BY COUNT(Location) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Editor_ID , COUNT(Editor_ID) FROM journal_committee GROUP BY Editor_ID ORDER BY COUNT(Editor_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Editor_ID , COUNT(Editor_ID) FROM journal_committee GROUP BY Editor_ID ORDER BY COUNT(Editor_ID) ASC": 0.5,
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee GROUP BY Name ORDER BY COUNT(Name) ASC": 0.3,
            "Visualize BAR SELECT Work_Type , COUNT(Work_Type) FROM journal_committee GROUP BY Work_Type ORDER BY COUNT(Work_Type) ASC": 0.2
        }
    },
    {
        "record_name": "2055@y_name@ASC",
        "db_id": "journal_committee",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "nlq": "Aggregate and tally the name attribute for the purpose of visualizing a bar chart, and depict the total count in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC": 0.5,
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name ASC": 0.2
        }
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "nlq": "How many students are there in each academic department? Please display the X-axis in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPT_CODE , count(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPT_CODE , count(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC": 0.2
        }
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "nlq": "Determine the student count for each department and present them in a bar graph, sorted in descending order by department names.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY DEPT_CODE DESC": 0.5,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "nlq": "Provide a histogram illustrating the distribution of students across different departments, and sort the departments in descending order by name.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPT_NAME, COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY DEPT_NAME DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY DEPT_NAME DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY DEPT_NAME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY DEPT_NAME DESC": 0.5,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY DEPT_NAME ASC": 0.2
        }
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "nlq": "Visualize the number of students in each department through a bar chart, and display the X-axis in descending order from highest to lowest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPT_NAME, COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY DEPT_NAME DESC": 0.1,
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY DEPT_NAME ASC": 0.1
        }
    },
    {
        "record_name": "564@x_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
        "nlq": "Create a bar chart indicating the total number versus the department code, with the bars arranged in descending order based on their height.",
        "predict_rag_nlq": "Visualize BAR SELECT DEPT_CODE, COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT DEPT_CODE , sum(stu_hrs) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM STUDENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM DEPARTMENT GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT DEPT_CODE , COUNT(*) FROM EMPLOYEE GROUP BY DEPT_CODE ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "3227",
        "db_id": "wine_1",
        "target": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR",
        "nlq": "For wines with a price greater than 100, calculate the total count for each year and arrange them in a bar chart sorted by year.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR",
            "Visualize BAR SELECT Grape , COUNT(Grape) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ORDER BY YEAR BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Year ORDER BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , COUNT(Year) FROM wine WHERE Price > 100 GROUP BY Year ORDER BY Year",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year , COUNT(Year) FROM wine WHERE Price > 100 GROUP BY Year ORDER BY Year": 0.5,
            "Visualize BAR SELECT Year , COUNT(Year) FROM wine WHERE Price > 100 GROUP BY Year ORDER BY Year DESC": 0.3,
            "Visualize BAR SELECT Year , COUNT(Year) FROM wine WHERE Price > 100 GROUP BY Year ORDER BY COUNT(Year) DESC": 0.2
        }
    },
    {
        "record_name": "2569@x_name@ASC",
        "db_id": "phone_market",
        "target": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "nlq": "Bar chart with carriers represented on the x-axis and the number of carriers displayed on the y-axis, arranged in ascending order by the x-values, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC": 0.5,
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC": 0.3,
            "Visualize BAR SELECT Carrier , COUNT(Phone_ID) FROM phone GROUP BY Carrier ORDER BY Carrier ASC": 0.2
        }
    },
    {
        "record_name": "2569@x_name@ASC",
        "db_id": "phone_market",
        "target": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "nlq": "What is the count of phone carriers? Please provide a bar chart with the X-axis sorted in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CARRIER , COUNT(CARRIER) FROM phone GROUP BY CARRIER ORDER BY COUNT(CARRIER) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CARRIER , COUNT(CARRIER) FROM phone GROUP BY CARRIER ORDER BY COUNT(CARRIER) ASC": 0.6,
            "Visualize BAR SELECT CARRIER , COUNT(CARRIER) FROM phone_market GROUP BY CARRIER ORDER BY COUNT(CARRIER) ASC": 0.2,
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC": 0.1,
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone_market GROUP BY Carrier ORDER BY COUNT(Carrier) ASC": 0.1
        }
    },
    {
        "record_name": "2569@x_name@ASC",
        "db_id": "phone_market",
        "target": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
        "nlq": "Can you please provide the specific data or values you would like to visualize on the bar chart for the number of carriers?",
        "predict_rag_nlq": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
        "rag_dvqs": [
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) ASC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY Carrier DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY COUNT(Carrier) DESC",
            "Visualize BAR SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier",
        "predict_debugged_db_ann": "Visualize BAR SELECT CARRIER , COUNT(CARRIER) FROM phone GROUP BY CARRIER",
        "predict_dvq_set": {
            "Visualize BAR SELECT CARRIER , COUNT(CARRIER) FROM phone GROUP BY CARRIER": 0.6,
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier": 0.2,
            "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier HAVING COUNT(Carrier) > 0": 0.2
        }
    },
    {
        "record_name": "160",
        "db_id": "baseball_1",
        "target": "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
        "nlq": "Provide me with a bar graph that categorizes the years into intervals of days of the week and displays the average number of times the Boston Red Stockings team has won in the postseasons.",
        "predict_rag_nlq": "Visualize BAR SELECT year, AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY AVG(count(*)) ASC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY AVG(count(*)) DESC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , SUM(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , SUM(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY SUM(count(*)) ASC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , SUM(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY SUM(count(*)) DESC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY COUNT(year) ASC BIN year BY WEEKDAY",
            "Visualize BAR SELECT year , COUNT(year) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' ORDER BY COUNT(year) DESC BIN year BY WEEKDAY",
            "Visualize LINE SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT year , AVG(count(*) ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT year , AVG(COUNT(*) ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT year , AVG(COUNT(*) ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY": 0.6,
            "Visualize BAR SELECT year , AVG(COUNT(*) ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY MONTH": 0.2,
            "Visualize BAR SELECT year , AVG(COUNT(*) ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY QUARTER": 0.1,
            "Visualize BAR SELECT year , AVG(COUNT(*) ) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY YEAR": 0.1
        }
    },
    {
        "record_name": "2694@y_name@DESC",
        "db_id": "school_bus",
        "target": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
        "nlq": "Display the category of schools and the quantity of buses for each category in a bar graph, with the y-axis arranged in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type",
            "Visualize PIE SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT Location , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Location ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY Type DESC": 0.1
        }
    },
    {
        "record_name": "2694@y_name@DESC",
        "db_id": "school_bus",
        "target": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
        "nlq": "Display the school type and the corresponding number of buses for each type, and arrange them in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type",
            "Visualize PIE SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY Type DESC": 0.1,
            "Visualize BAR SELECT Type , COUNT(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.Type ORDER BY Type ASC": 0.1
        }
    },
    {
        "record_name": "2551@x_name@DESC",
        "db_id": "pets_1",
        "target": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "nlq": "A bar chart displaying the identification (ID) and weight of each pet that is over one year old is requested. Could you kindly list them by name in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC",
            "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC": 0.3,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC": 0.2,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight ASC": 0.2,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID ASC": 0.3
        }
    },
    {
        "record_name": "2551@x_name@DESC",
        "db_id": "pets_1",
        "target": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "nlq": "What are the identification number and weight of each pet that is over 1 year old, and display them in descending order using bars.",
        "predict_rag_nlq": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
            "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC": 0.5,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight ASC": 0.3,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC": 0.2
        }
    },
    {
        "record_name": "2551@x_name@DESC",
        "db_id": "pets_1",
        "target": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "nlq": "Create a bar chart illustrating the identifier and weight of each pet that is older than 1, and list them in descending order based on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
            "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC": 0.3,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC": 0.2,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight ASC": 0.2,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID ASC": 0.3
        }
    },
    {
        "record_name": "2551@x_name@DESC",
        "db_id": "pets_1",
        "target": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "nlq": "Find the identification and weight of all pets whose age exceeds 1. Represent the data in a bar chart, sorted in descending order by the names.",
        "predict_rag_nlq": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight DESC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY weight ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY PetType ASC",
            "Visualize BAR SELECT PetType , avg(weight) FROM pets GROUP BY pettype ORDER BY PetType DESC",
            "Visualize BAR SELECT PetType , max(weight) FROM pets GROUP BY PetType ORDER BY max(weight) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID DESC": 0.5,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY weight DESC": 0.3,
            "Visualize BAR SELECT PetID , weight FROM Pets WHERE pet_age > 1 ORDER BY PetID ASC": 0.2
        }
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "nlq": "Retrieve the values for ACC_Road and Team_ID, group them based on the attribute ACC_Home, and represent them in a bar chart. Arrange the bars in descending order by Team_ID.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC": 0.4,
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC": 0.1,
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID ASC": 0.2
        }
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "nlq": "A grouped bar chart displays the distribution of ACC_Road and Team_ID, grouped by the ACC_Home attribute, and listed in descending order based on the Team_ID.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_HOME , ACC_ROAD ORDER BY Team_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_HOME , ACC_ROAD ORDER BY Team_ID DESC": 0.4,
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_HOME , Team_ID ORDER BY Team_ID DESC": 0.3,
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_HOME , ACC_Road ORDER BY Team_ID DESC": 0.2,
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_HOME , ACC_Road ORDER BY Team_ID ASC": 0.1
        }
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "nlq": "Provide me with a comparison of the Team_ID based on the ACC_Road attribute, grouped by the ACC_Home attribute, and display Y in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_ID , ACC_Road FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC": 0.5,
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY ACC_Road DESC": 0.3,
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY ACC_Home DESC": 0.2
        }
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "nlq": "Display a stacked bar chart representing the team_id for each ACC_Home in each ACC road, with the Y-axis arranged in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC": 0.5,
            "Visualize BAR SELECT ACC_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC": 0.3,
            "Visualize BAR SELECT Team_ID , ACC_ROAD FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC": 0.2
        }
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "nlq": "Create a bar chart illustrating the distribution of ACC_Road and Team_ID, grouped by the attribute ACC_Home, and list the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY ACC_Road DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY ACC_ROAD DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY ACC_ROAD DESC": 0.5,
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY ACC_Road DESC": 0.3,
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY ACC_Road ASC": 0.2
        }
    },
    {
        "record_name": "3090@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "nlq": "Present the distribution of ACC_Road and Team_ID, grouped by the ACC_Home attribute, in a bar chart. List the Team_ID in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_ROAD ORDER BY Team_ID DESC": 0.4,
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , ACC_Road ORDER BY Team_ID DESC": 0.3,
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , Team_ID ORDER BY Team_ID DESC": 0.2,
            "Visualize BAR SELECT ACC_ROAD , Team_ID FROM basketball_match GROUP BY ACC_Home , Team_ID ORDER BY ACC_ROAD DESC": 0.1
        }
    },
    {
        "record_name": "2760@y_name@ASC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "nlq": "What is the overall count of distinct nationalities among all ships? Provide me with a bar chart, and I would like the Y-axis to be listed in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC": 0.6,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC": 0.2,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality": 0.1,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship": 0.1
        }
    },
    {
        "record_name": "2760@y_name@ASC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "nlq": "Provide a bar chart illustrating the cumulative count of nationalities for the total number of ships, arranged in ascending order based on the frequency of each nationality.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC": 0.6,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC": 0.1
        }
    },
    {
        "record_name": "2760@y_name@ASC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "nlq": "Present the comparison of the overall count of nationalities for all ships using a bar graph, and exhibit them in ascending order based on the number of nationalities.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC": 0.6,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC": 0.2,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC": 0.1,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality": 0.1
        }
    },
    {
        "record_name": "2760@y_name@ASC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "nlq": "Bar chart illustrating the quantity of nationalities from diverse nationalities, arranged from least to greatest based on the number of nationalities.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY COUNT(Nationality) DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Type ,  Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC": 0.6,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY Nationality ASC": 0.1
        }
    },
    {
        "record_name": "1116@y_name@DESC",
        "db_id": "department_store",
        "target": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "nlq": "What is the maximum price of each product type? Display the information in a bar chart, listing the product types according to their highest prices in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT product_type_code, max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_type_code , max(product_price) FROM Products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_type_code , max(product_price) FROM Products GROUP BY product_type_code ORDER BY max(product_price) DESC": 0.4,
            "Visualize BAR SELECT product_type_code , min(product_price) FROM Products GROUP BY product_type_code ORDER BY min(product_price) DESC": 0.2,
            "Visualize BAR SELECT product_type_code , avg(product_price) FROM Products GROUP BY product_type_code ORDER BY avg(product_price) DESC": 0.3,
            "Visualize BAR SELECT product_type_code , sum(product_price) FROM Products GROUP BY product_type_code ORDER BY sum(product_price) DESC": 0.1
        }
    },
    {
        "record_name": "1116@y_name@DESC",
        "db_id": "department_store",
        "target": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "nlq": "Bar graph displaying the highest product price for each product type code, presented in descending order based on the maximum product price, please.",
        "predict_rag_nlq": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_type_code , max(product_price) FROM Products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "predict_dvq_set": {
            "BAR SELECT product_type_code , max(product_price) FROM Products GROUP BY product_type_code ORDER BY max(product_price) DESC": 0.6,
            "BAR SELECT product_type_code , min(product_price) FROM Products GROUP BY product_type_code ORDER BY min(product_price) DESC": 0.2,
            "BAR SELECT product_type_code , avg(product_price) FROM Products GROUP BY product_type_code ORDER BY avg(product_price) DESC": 0.1,
            "BAR SELECT product_type_code , sum(product_price) FROM Products GROUP BY product_type_code ORDER BY sum(product_price) DESC": 0.1
        }
    },
    {
        "record_name": "1116@y_name@DESC",
        "db_id": "department_store",
        "target": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "nlq": "Provide a bar chart illustrating the highest price of each product type, sorted in descending order based on the maximum product price, please.",
        "predict_rag_nlq": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code DESC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY product_type_code ASC",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code",
            "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_type_code , max(product_price) FROM Products GROUP BY product_type_code ORDER BY max(product_price) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_type_code , max(product_price) FROM Products GROUP BY product_type_code ORDER BY max(product_price) DESC": 0.5,
            "Visualize BAR SELECT product_type_code , min(product_price) FROM Products GROUP BY product_type_code ORDER BY min(product_price) DESC": 0.3,
            "Visualize BAR SELECT product_type_code , avg(product_price) FROM Products GROUP BY product_type_code ORDER BY avg(product_price) DESC": 0.2
        }
    },
    {
        "record_name": "1155",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "nlq": "Present the count of treatments for each dog belonging to the least common breed in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize PIE SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY date_departed DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 )",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 )": 0.6,
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 )": 0.3,
            "Visualize BAR SELECT breed_name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 )": 0.1
        }
    },
    {
        "record_name": "1155",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "nlq": "How many medical treatments does each dog of the least common breed receive? Please provide a bar chart to illustrate this.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize PIE SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY date_departed DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 )",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 )": 0.6,
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1 )": 0.3,
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1 ) GROUP BY name": 0.1
        }
    },
    {
        "record_name": "2735@x_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
        "nlq": "What is the cumulative count of flags of vessels without a captain holding the rank of Midshipman? Represent the result using a bar chart, and present it in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY COUNT(Flag) ASC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag DESC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY COUNT(Flag) DESC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag",
            "Visualize PIE SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag",
            "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
            "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
            "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
            "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain WHERE Rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain WHERE Rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC": 0.6,
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Captain_ID IS NULL OR Rank <> 'Midshipman' GROUP BY Flag ORDER BY Flag ASC": 0.2,
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Captain_ID IS NULL AND Rank <> 'Midshipman' GROUP BY Flag ORDER BY Flag ASC": 0.1,
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Captain_ID IS NULL AND Rank != 'Midshipman' GROUP BY Flag ORDER BY Flag ASC": 0.1
        }
    },
    {
        "record_name": "2735@x_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
        "nlq": "Display the overall count of flags from ships without any captain with the rank of Midshipman, using a bar chart arranged in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY COUNT(Flag) ASC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag DESC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY COUNT(Flag) DESC",
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag",
            "Visualize PIE SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag",
            "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag ASC",
            "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) ASC",
            "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY Flag DESC",
            "Visualize BAR SELECT Flag , count(*) FROM ship GROUP BY flag ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN(SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain WHERE Rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Ship_ID NOT IN(SELECT Ship_ID FROM captain WHERE Rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC": 0.6,
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Captain_ID IS NULL GROUP BY Flag ORDER BY Flag ASC": 0.2,
            "Visualize BAR SELECT Flag , COUNT(Flag) FROM Ship WHERE Rank != 'Midshipman' GROUP BY Flag ORDER BY Flag ASC": 0.2
        }
    },
    {
        "record_name": "344@y_name@DESC",
        "db_id": "bike_1",
        "target": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "nlq": "What are the cumulative cloud cover rates for the intervals (grouped by year) that had the highest 5 cloud cover rates? Could you please provide a bar chart for this, with the ranking arranged in descending order on the Y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR": 0.4,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY MONTH": 0.3,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY QUARTER": 0.2,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY DAY": 0.1
        }
    },
    {
        "record_name": "344@y_name@DESC",
        "db_id": "bike_1",
        "target": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "nlq": "For the dates with the top 5 highest cloud cover rates, please categorize the dates into yearly intervals and calculate the cumulative cloud cover for each interval. Please arrange the intervals in descending order based on the total cloud cover.",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR": 0.6,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY MONTH": 0.2,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY QUARTER": 0.2
        }
    },
    {
        "record_name": "344@y_name@DESC",
        "db_id": "bike_1",
        "target": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "nlq": "Plot a bar chart with the date on the x-axis and the total number of cloud cover on the y-axis, and display the y-axis in descending order from high to low, please.",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR": 0.4,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC": 0.3,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY DAY": 0.2,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY MONTH": 0.1
        }
    },
    {
        "record_name": "344@y_name@DESC",
        "db_id": "bike_1",
        "target": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "nlq": "I would like a bar chart displaying the cumulative cloud cover for the dates with the highest five cloud cover rates each year, ranked in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) ASC BIN date BY WEEKDAY",
            "Visualize BAR SELECT date , AVG(cloud_cover) FROM weather  ORDER BY AVG(cloud_cover) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) DESC BIN date BY YEAR",
            "Visualize BAR SELECT date , COUNT(date) FROM weather  ORDER BY COUNT(date) ASC BIN date BY YEAR",
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather BIN date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR": 0.4,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC LIMIT 5 BIN date BY YEAR": 0.3,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC TOP 5 BIN date BY YEAR": 0.2,
            "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather ORDER BY SUM(cloud_cover) DESC GROUP BY YEAR LIMIT 5": 0.1
        }
    },
    {
        "record_name": "1962",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "nlq": "For all employees in the Finance department, illustrate the comparison of the total count of distinct job IDs using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE",
            "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
            "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID": 0.5,
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' AND T1.JOB_ID IS NOT NULL GROUP BY JOB_ID": 0.3,
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' AND T1.JOB_ID IS NOT NULL AND T1.JOB_ID != '' GROUP BY JOB_ID": 0.2
        }
    },
    {
        "record_name": "1962",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "nlq": "Provide a grouped bar chart that tabulates and tallies the job IDs for all employees within the Finance department.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE",
            "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY T2.department_name",
            "Visualize BAR SELECT DEPARTMENT_NAME , COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id GROUP BY department_name",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID": 0.5,
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' AND T1.JOB_ID IS NOT NULL GROUP BY JOB_ID": 0.3,
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' AND T1.JOB_ID IS NOT NULL AND T1.JOB_ID != '' GROUP BY JOB_ID": 0.2
        }
    },
    {
        "record_name": "1284@x_name@DESC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "nlq": "Retrieve the dates of the examinations taken with the result \"Pass\", and represent them using a bar chart. Arrange the names in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC": 0.4,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" AND date_test_taken IS NOT NULL GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC": 0.3,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" AND date_test_taken IS NOT NULL GROUP BY date_test_taken ORDER BY date_test_taken DESC": 0.2,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" AND date_test_taken IS NOT NULL GROUP BY date_test_taken ORDER BY date_test_taken ASC": 0.1
        }
    },
    {
        "record_name": "1284@x_name@DESC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "nlq": "A stacked bar chart to determine the quantity of test dates with a \"Pass\" result, with the X-axis displayed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY",
            "Visualize BAR SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC": 0.5,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC": 0.3,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC": 0.2
        }
    },
    {
        "record_name": "1284@x_name@DESC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "nlq": "Determine the quantity of test dates with a \"Pass\" result, and I would like them to be listed in descending order by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC": 0.4,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC": 0.3,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC": 0.2,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken": 0.1
        }
    },
    {
        "record_name": "1284@x_name@DESC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "nlq": "Which examinations have yielded \"Pass\" outcomes? Provide the dates of these examinations, and represent their count using a bar chart, ordered in descending order based on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) DESC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY COUNT(date_test_taken) ASC BIN date_test_taken BY WEEKDAY",
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" BIN date_test_taken BY WEEKDAY",
            "Visualize LINE SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\"  ORDER BY date_test_taken DESC BIN date_test_taken BY DAY",
            "Visualize BAR SELECT test_result , COUNT(*) FROM Student_Tests_Taken GROUP BY test_result ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC": 0.5,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) DESC": 0.3,
            "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY COUNT(date_test_taken) ASC": 0.2
        }
    },
    {
        "record_name": "3195@x_name@ASC",
        "db_id": "voter_1",
        "target": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
        "nlq": "Enumerate the states of all ballots, calculate the total number of states, and determine the average vote identification number with a bar graph, arranged in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) DESC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) ASC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) DESC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , COUNT(state) FROM votes GROUP BY state ORDER BY COUNT(state) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY AVG(VOTE_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY AVG(VOTE_ID) ASC": 0.4,
            "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY state ASC": 0.3,
            "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY state DESC": 0.2,
            "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY AVG(VOTE_ID) DESC": 0.1
        }
    },
    {
        "record_name": "3195@x_name@ASC",
        "db_id": "voter_1",
        "target": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
        "nlq": "In a bar chart, represent the average vote ID on the y-axis, and list the bars in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT AVG(vote_id) FROM votes ORDER BY AVG(vote_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) DESC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) ASC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY SUM(vote_id) DESC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT Date , Vote_Percent FROM election ORDER BY Vote_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY AVG(vote_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY AVG(VOTE_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY AVG(VOTE_ID) ASC": 0.4,
            "Visualize BAR SELECT state , AVG(vote_id) FROM VOTES GROUP BY state ORDER BY AVG(vote_id) ASC": 0.3,
            "Visualize BAR SELECT state , AVG(vote_id) FROM VOTES GROUP BY state ORDER BY AVG(vote_id) DESC": 0.2,
            "Visualize BAR SELECT state , AVG(VOTE_ID) FROM VOTES GROUP BY state ORDER BY AVG(VOTE_ID) DESC": 0.1
        }
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees with salaries ranging from 8000 to 12000 and commission not null, or employees whose department number is not equal to 40, visualize a bar chart depicting the distribution of job IDs and the sum of department IDs. Please group the chart by the job ID attribute and sort the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.6,
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.1
        }
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees whose salary falls between 8000 and 12000 and either have a non-null commission or a department number that is not equal to 40, please provide a comparison of the total department_id for each job_id. Group the data by the job_id attribute and order the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.6,
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.1
        }
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees with a salary between 8000 and 12000, and either a non-null commission or a department number not equal to 40, create a bar chart illustrating the distribution of job_id and the sum of department_id. Please group the data by the attribute job_id and display the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.7,
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.2,
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.1
        }
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000 and have a non-null commission or a department number that is not equal to 40, please generate a bar chart illustrating the distribution of job_ids and the sum of department_ids. Group the data by the job_id attribute and display it in ascending order on the bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.7,
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.2,
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.1
        }
    },
    {
        "record_name": "1606@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees with salaries ranging from 8000 to 12000, and either having a non-null commission or not belonging to department 40, display a bar chart representing the distribution of job_id and the sum of department_id. Please group the bars based on the job_id attribute, and order them in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
        "predict_dvq_set": {
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.6,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.3,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC": 0.1
        }
    },
    {
        "record_name": "1566",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees whose first name contains the letters D or S, present me with the distribution of job IDs and the sum of department IDs, and group them by the attribute job ID in a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID",
        "predict_dvq_set": {
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID": 0.5,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' GROUP BY JOB_ID": 0.3,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME IN ('D', 'S') GROUP BY JOB_ID": 0.2
        }
    },
    {
        "record_name": "1566",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees whose first name contains the letters D or S, provide me with a comparison of the total sum of department_id across different job_id attributes, and group them by job_id.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID",
        "predict_dvq_set": {
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE (FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%') GROUP BY JOB_ID": 0.6,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE (FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%') GROUP BY JOB_ID": 0.2,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE (FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%') AND JOB_ID IS NOT NULL GROUP BY JOB_ID": 0.2
        }
    },
    {
        "record_name": "1566",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees whose first names contain the letters D or S, a bar chart displays the distribution of job IDs and the total sum of department IDs, grouped by the attribute job ID.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID",
        "predict_dvq_set": {
            "BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID": 0.5,
            "BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' GROUP BY JOB_ID": 0.3,
            "BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME IN ('D', 'S') GROUP BY JOB_ID": 0.2
        }
    },
    {
        "record_name": "1566",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of job_id and the total sum of department_id, grouping the data by the job_id attribute.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
        "predict_dvq_set": {
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC": 0.6,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2
        }
    },
    {
        "record_name": "1566",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "nlq": "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of job_id and the sum of department_id, grouped by the job_id attribute.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID",
        "predict_dvq_set": {
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' GROUP BY JOB_ID": 0.6,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' GROUP BY JOB_ID": 0.2,
            "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE FIRST_NAME IN ('D', 'S') GROUP BY JOB_ID": 0.2
        }
    },
    {
        "record_name": "2690@y_name@DESC",
        "db_id": "sakila_1",
        "target": "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "nlq": "Present the names and IDs of genres using a bar chart, sorted in descending order by the category ID.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , T1.CATEGORY_ID FROM film_category AS T1 JOIN category AS T2 ON T1.CATEGORY_ID = T2.CATEGORY_ID ORDER BY T1.CATEGORY_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.name , T1.CATEGORY_ID FROM film_category AS T1 JOIN category AS T2 ON T1.CATEGORY_ID = T2.CATEGORY_ID ORDER BY T1.CATEGORY_ID DESC": 0.6,
            "Visualize BAR SELECT T2.name , T1.CATEGORY_ID FROM film_category AS T1 JOIN category AS T2 ON T1.CATEGORY_ID = T2.CATEGORY_ID ORDER BY T2.name DESC": 0.3,
            "Visualize BAR SELECT T2.name , T1.CATEGORY_ID FROM film_category AS T1 JOIN category AS T2 ON T1.CATEGORY_ID = T2.CATEGORY_ID ORDER BY T2.name ASC": 0.1
        }
    },
    {
        "record_name": "2690@y_name@DESC",
        "db_id": "sakila_1",
        "target": "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "nlq": "What are the names and IDs of the distinct categories? Please display the bar chart listing the categories in descending order based on the category ID.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , T1.CATEGORY_ID FROM film_category AS T1 JOIN category AS T2 ON T1.CATEGORY_ID = T2.CATEGORY_ID ORDER BY T1.CATEGORY_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.name , T1.CATEGORY_ID FROM film_category AS T1 JOIN category AS T2 ON T1.CATEGORY_ID = T2.CATEGORY_ID ORDER BY T1.CATEGORY_ID DESC": 0.6,
            "Visualize BAR SELECT T2.name , T1.CATEGORY_ID FROM film_category AS T1 JOIN category AS T2 ON T1.CATEGORY_ID = T2.CATEGORY_ID ORDER BY T2.name DESC": 0.3,
            "Visualize BAR SELECT T2.name , T1.CATEGORY_ID FROM film_category AS T1 JOIN category AS T2 ON T1.CATEGORY_ID = T2.CATEGORY_ID ORDER BY T2.name ASC": 0.1
        }
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals",
        "target": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "nlq": "Retrieve the count of birthdates for all guests with the gender code \"Male\", and please display it on the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR": 0.4,
            "LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR": 0.3,
            "LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY MONTH": 0.2,
            "LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC": 0.1
        }
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals",
        "target": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "nlq": "What is the count of birth dates for all male guests? Please arrange the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) ASC BIN booking_start_date BY WEEKDAY",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT DATE_OF_BIRTH , COUNT(DATE_OF_BIRTH) FROM Guests WHERE GENDER_CODE = \"Male\" ORDER BY COUNT(DATE_OF_BIRTH) ASC BIN DATE_OF_BIRTH BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT DATE_OF_BIRTH , COUNT(DATE_OF_BIRTH) FROM Guests WHERE GENDER_CODE = \"Male\" ORDER BY COUNT(DATE_OF_BIRTH) ASC BIN DATE_OF_BIRTH BY WEEKDAY": 0.6,
            "Visualize BAR SELECT DATE_OF_BIRTH , COUNT(DATE_OF_BIRTH) FROM Guests WHERE GENDER_CODE = \"Male\" ORDER BY DATE_OF_BIRTH ASC BIN DATE_OF_BIRTH BY WEEKDAY": 0.3,
            "Visualize BAR SELECT DATE_OF_BIRTH , COUNT(DATE_OF_BIRTH) FROM Guests WHERE GENDER_CODE = \"Male\" ORDER BY DATE_OF_BIRTH DESC BIN DATE_OF_BIRTH BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals",
        "target": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "nlq": "What are the birth dates of all the male guests, and represent them using a line chart, listing the date_of_birth in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR": 0.4,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR": 0.3,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY MONTH": 0.2,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC": 0.1
        }
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals",
        "target": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "nlq": "Retrieve the dates of birth for all guests with the gender code \"Male\" and present them in a line chart, with the x-axis arranged in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR": 0.4,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR": 0.3,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY MONTH": 0.2,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC": 0.1
        }
    },
    {
        "record_name": "80@x_name@ASC",
        "db_id": "apartment_rentals",
        "target": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "nlq": "A line graph depicting the count of birth dates for all male guests, with the X-axis arranged in ascending order, please.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR",
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY YEAR",
            "Visualize BAR SELECT booking_start_date , COUNT(booking_start_date) FROM Apartment_Bookings AS T1 JOIN Guests AS T2 ON T1.guest_id = T2.guest_id WHERE T2.gender_code = \"Female\"  ORDER BY COUNT(booking_start_date) DESC BIN booking_start_date BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR": 0.4,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth DESC BIN date_of_birth BY YEAR": 0.3,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC BIN date_of_birth BY MONTH": 0.2,
            "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" ORDER BY date_of_birth ASC": 0.1
        }
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "nlq": "Present the IDs and details associated with projects that have more than two documents in a bar chart, arranged from highest to lowest based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_Details DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_Details DESC": 0.6,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID WHERE COUNT(T2.Document_ID) > 2 ORDER BY COUNT(T2.Document_ID) DESC": 0.3,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID HAVING COUNT(T2.Document_ID) > 2 ORDER BY COUNT(T2.Document_ID) DESC": 0.1
        }
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "nlq": "Retrieve the IDs and details corresponding to projects where there are more than two documents. Display the data in a bar chart and arrange it in descending order by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC": 0.6,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID WHERE COUNT(T2.Document_ID) > 2 ORDER BY T1.Project_ID DESC": 0.3,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID HAVING COUNT(T2.Document_ID) > 2 ORDER BY COUNT(T2.Document_ID) DESC": 0.1
        }
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "nlq": "What are the project identification numbers and details for projects that have at least two documents? Please plot them as a bar chart, ordering them on the y-axis from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC": 0.6,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID ORDER BY COUNT(T2.Document_ID) DESC": 0.3,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID HAVING COUNT(T2.Document_ID) >= 2 ORDER BY T1.Project_ID DESC": 0.1
        }
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "nlq": "Display a bar chart illustrating the project ID and project details for projects with at least two documents, and arrange them in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC": 0.6,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID HAVING COUNT(T2.Document_ID) >= 2 ORDER BY T1.Project_ID DESC": 0.3,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID HAVING COUNT(T2.Document_ID) >= 2 ORDER BY T1.Project_ID DESC": 0.1
        }
    },
    {
        "record_name": "824@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "nlq": "A bar chart illustrating the project ID and details for projects with a minimum of two documents, and arrange the y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details DESC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_Details ASC",
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize PIE SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_ID DESC",
            "Visualize BAR SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id ORDER BY T1.Customer_Details DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID ORDER BY T1.Project_ID DESC": 0.6,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID HAVING COUNT(T2.Document_ID) >= 2 ORDER BY T1.Project_ID DESC": 0.3,
            "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID HAVING COUNT(T2.Document_ID) >= 2 ORDER BY T1.Project_ID DESC": 0.1
        }
    },
    {
        "record_name": "2949@y_name@ASC",
        "db_id": "theme_gallery",
        "target": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
        "nlq": "Identify the themes and years for all exhibitions with ticket prices below 15, and present a stacked bar chart that groups by themes, counts years, and displays the X-axis as the Year, arranged in ascending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY Year ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Year"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC": 0.4,
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY Year ASC": 0.3,
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY Year DESC": 0.2,
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY Theme ASC": 0.1
        }
    },
    {
        "record_name": "2949@y_name@ASC",
        "db_id": "theme_gallery",
        "target": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
        "nlq": "Identify the themes and years for all exhibitions where ticket prices are below 15, group them based on themes, count the number of years, and plot the data on a graph with the x-axis representing the years arranged in ascending order, and the y-axis representing the count from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Year",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme ORDER BY COUNT(Year) ASC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme ORDER BY COUNT(Year) DESC",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Theme",
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition GROUP BY Year"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC": 0.6,
            "Visualize BAR SELECT Theme , COUNT(Year) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Year ORDER BY COUNT(Year) ASC": 0.3,
            "Visualize BAR SELECT Year , COUNT(Theme) FROM exhibition WHERE Ticket_Price < 15 GROUP BY Year ORDER BY COUNT(Year) ASC": 0.1
        }
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Obtain the values of All_Home and School_ID, and group them by the attribute ACC_Road. Visualize this data using a bar chart, sorting the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ALL_HOME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ALL_HOME ASC": 0.5,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ACC_ROAD ASC": 0.3,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ACC_ROAD DESC": 0.2
        }
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Visualize a stacked bar chart illustrating the distribution of All_Home and School_ID, with grouping by the ACC_Road attribute. Please sort the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ALL_HOME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ALL_HOME ASC": 0.3,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY SCHOOL_ID ASC": 0.4,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ACC_ROAD ASC": 0.2,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ALL_HOME DESC": 0.1
        }
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Provide me with a comparison of School_ID across All_Home, and group the attribute ACC_Road by a bar chart, with the names sorted in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID DESC": 0.2,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID DESCENDING": 0.2,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID": 0.3
        }
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Stacked bar chart comparing school IDs against ACC_Road for all households, and display the bars in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY ACC_Road ASC": 0.2,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC": 0.2,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID DESC": 0.3
        }
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Provide me with a comparison of the School_ID with respect to the All_Home, grouped by the ACC_Road attribute, and display the data in a bar chart in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ALL_HOME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ALL_HOME ASC": 0.5,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY ACC_ROAD ASC": 0.3,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_ROAD , ALL_HOME ORDER BY SCHOOL_ID ASC": 0.2
        }
    },
    {
        "record_name": "3087@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Create a stacked bar chart representing the distribution of All_Home and School_ID, grouped by the attribute ACC_Road, and arrange the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY School_ID ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY School_ID ASC": 0.5,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY ACC_Road ASC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road , All_Home ORDER BY All_Home ASC": 0.2
        }
    },
    {
        "record_name": "2725",
        "db_id": "scientist_1",
        "target": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "nlq": "Find the quantity of scientists engaged in projects that demand over 300 hours. Represent the data in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize PIE SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "predict_debugged_db_ann": "Visualize PIE SELECT Name , COUNT(*) FROM projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name",
        "predict_dvq_set": {
            "Visualize PIE SELECT Name , COUNT(*) FROM projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name": 0.6,
            "Visualize PIE SELECT Scientist , COUNT(*) FROM projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T2.Scientist": 0.2,
            "Visualize PIE SELECT Name , COUNT(*) FROM projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T2.Scientist": 0.2
        }
    },
    {
        "record_name": "2725",
        "db_id": "scientist_1",
        "target": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "nlq": "Provide a pie chart detailing the names of projects that necessitate over 300 hours, along with the respective number of scientists assigned to each.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name": 0.6,
            "Visualize PIE SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name": 0.3,
            "Visualize BAR SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 200 GROUP BY T1.Name": 0.1
        }
    },
    {
        "record_name": "2725",
        "db_id": "scientist_1",
        "target": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "nlq": "A pie chart illustrating the names of projects that necessitate more than 300 hours and the corresponding number of scientists assigned to each.",
        "predict_rag_nlq": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize PIE SELECT T2.Name , COUNT(T2.Name) FROM assignedto AS T1 JOIN projects AS T2 ON T1.project = T2.code JOIN scientists AS T3 ON T1.scientist = T3.SSN WHERE T3.name LIKE '%Smith%' GROUP BY T2.Name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "predict_debugged_db_ann": "Visualize PIE SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name",
        "predict_dvq_set": {
            "Visualize PIE SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name": 0.6,
            "Visualize PIE SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 200 GROUP BY T1.Name": 0.2,
            "Visualize PIE SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 400 GROUP BY T1.Name": 0.2
        }
    },
    {
        "record_name": "2725",
        "db_id": "scientist_1",
        "target": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
        "nlq": "What are the titles of projects that necessitate more than 300 hours, and the number of scientists assigned to each project?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , count(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project GROUP BY T1.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , count(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name ORDER BY T1.Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name ORDER BY T1.Name ASC": 0.6,
            "Visualize BAR SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 200 GROUP BY T1.Name ORDER BY T1.Name ASC": 0.2,
            "Visualize BAR SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 400 GROUP BY T1.Name ORDER BY T1.Name ASC": 0.1,
            "Visualize BAR SELECT Name , COUNT(*) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project WHERE T1.Hours > 300 GROUP BY T1.Name ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "3251@y_name@DESC",
        "db_id": "wine_1",
        "target": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "nlq": "Compare the mean maximum score of wines per annum, categorize the years into weekday intervals, and display on the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(max(Score) ) FROM WINE ORDER BY AVG(max(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_dvq_set": {
            "BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY": 0.5,
            "BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY MONTH": 0.3,
            "BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY QUARTER": 0.2
        }
    },
    {
        "record_name": "3251@y_name@DESC",
        "db_id": "wine_1",
        "target": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "nlq": "A stacked bar chart representing the yearly average maximum scores of wines, where the years are grouped into weekday intervals, and the bars are arranged in descending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(max(Score) ) FROM WINE ORDER BY AVG(max(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY": 0.4,
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY MONTH": 0.3,
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY QUARTER": 0.2,
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY YEAR": 0.1
        }
    },
    {
        "record_name": "3251@y_name@DESC",
        "db_id": "wine_1",
        "target": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "nlq": "Compare the mean of the highest score of wines each year, categorize the years into weekly intervals, and create a bar graph, listing Y-axis values in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(max(Score) ) FROM WINE ORDER BY AVG(max(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY": 0.5,
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY MONTH": 0.3,
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY QUARTER": 0.2
        }
    },
    {
        "record_name": "3251@y_name@DESC",
        "db_id": "wine_1",
        "target": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "nlq": "Provide me with a bar chart illustrating the average maximum score for each year, and display it on the Y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE  ORDER BY AVG(max(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , AVG(max(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE  ORDER BY SUM(avg(Price)) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , SUM(avg(Price)) FROM WINE BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM WINE  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , AVG(max(Score) ) FROM WINE ORDER BY AVG(max(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY WEEKDAY": 0.4,
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY MONTH": 0.3,
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY QUARTER": 0.2,
            "Visualize BAR SELECT Year , AVG(MAX(Score) ) FROM wine ORDER BY AVG(MAX(Score) ) DESC BIN Year BY YEAR": 0.1
        }
    },
    {
        "record_name": "185@y_name@DESC",
        "db_id": "behavior_monitoring",
        "target": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
        "nlq": "A bar graph to determine the quantity of assessment notes dates for students with the first name \"Fanny\", and arrange the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR": 0.6,
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR": 0.2,
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR": 0.2
        }
    },
    {
        "record_name": "185@y_name@DESC",
        "db_id": "behavior_monitoring",
        "target": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
        "nlq": "Retrieve the assessment note dates for students with the first name \"Fanny\", and present them in a bar chart. Sort the bars from highest to lowest on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR": 0.5,
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR": 0.3,
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR": 0.2
        }
    },
    {
        "record_name": "185@y_name@DESC",
        "db_id": "behavior_monitoring",
        "target": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
        "nlq": "Retrieve the count of assessment notes dates for students with the first name \"Fanny\", and sort them in descending order by the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY YEAR",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY",
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY COUNT(date_of_notes) ASC BIN date_of_notes BY WEEKDAY",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR",
            "Visualize LINE SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes  ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY YEAR": 0.6,
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY date_of_notes DESC BIN date_of_notes BY YEAR": 0.3,
            "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\" ORDER BY date_of_notes ASC BIN date_of_notes BY YEAR": 0.1
        }
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "nlq": "Provide a comparison of the quantity of individuals by their sex, and group the data by the sex attribute using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Sex , COUNT(*) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY count(*) ASC",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize BAR SELECT SEX , COUNT(SEX) FROM people GROUP BY SEX",
        "predict_dvq_set": {
            "Visualize BAR SELECT SEX , COUNT(SEX) FROM people GROUP BY SEX": 0.3,
            "Visualize BAR SELECT Name , COUNT(Sex) FROM people GROUP BY Sex": 0.2,
            "Visualize BAR SELECT Sex , COUNT(*) FROM people GROUP BY Sex": 0.3,
            "Visualize BAR SELECT Sex , COUNT(People_ID) FROM people GROUP BY Sex": 0.2
        }
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "nlq": "Generate a bar chart illustrating the distribution of gender and the corresponding quantity, grouped by the attribute \"gender\".",
        "predict_rag_nlq": "Visualize BAR SELECT Gender , COUNT(Gender) FROM people GROUP BY Gender",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY Gender ASC",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender",
            "Visualize BAR SELECT gender , count(*) FROM Person WHERE age < 40 GROUP BY gender ORDER BY gender ASC",
            "Visualize BAR SELECT Gender , COUNT(Gender) FROM player GROUP BY Gender ORDER BY COUNT(Gender) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize BAR SELECT SEX , COUNT(SEX) FROM people GROUP BY SEX",
        "predict_dvq_set": {
            "Visualize BAR SELECT SEX , COUNT(SEX) FROM people GROUP BY SEX": 0.4,
            "Visualize BAR SELECT Name , COUNT(Sex) FROM people GROUP BY Sex": 0.3,
            "Visualize BAR SELECT Sex , COUNT(*) FROM people GROUP BY Sex": 0.2,
            "Visualize BAR SELECT Sex , COUNT(Height) FROM people GROUP BY Sex": 0.1
        }
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "nlq": "Illustrate the Sex distribution and the corresponding quantities of Sex, with the grouping based on the Sex attribute, using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex ASC",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize BAR SELECT SEX , COUNT(SEX) FROM people GROUP BY SEX",
        "predict_dvq_set": {
            "Visualize BAR SELECT SEX , COUNT(SEX) FROM people GROUP BY SEX": 0.3,
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex": 0.2,
            "Visualize BAR SELECT Sex , COUNT(*) FROM people GROUP BY Sex": 0.3,
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC": 0.2
        }
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "nlq": "A stacked bar chart illustrates the distribution and quantity of sexes, grouped by the attribute \"sex\".",
        "predict_rag_nlq": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex ASC",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex": 0.5,
            "Visualize BAR SELECT Sex , COUNT(Name) FROM people GROUP BY Sex": 0.3,
            "Visualize BAR SELECT Sex , COUNT(Height) FROM people GROUP BY Sex": 0.2
        }
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "nlq": "Identify the gender and the respective count of each gender, group the data by the attribute \"gender,\" and represent it visually using a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex ASC",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex": 0.5,
            "Visualize BAR SELECT Sex , COUNT(Name) FROM people GROUP BY Sex": 0.3,
            "Visualize BAR SELECT Sex , COUNT(Height) FROM people GROUP BY Sex": 0.2
        }
    },
    {
        "record_name": "376",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "nlq": "Bar chart with the X-axis representing gender and the Y-axis indicating the number of individuals per gender.",
        "predict_rag_nlq": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) ASC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex ORDER BY COUNT(Sex) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY Sex ASC",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize BAR SELECT SEX , COUNT(SEX) FROM people GROUP BY SEX",
        "predict_dvq_set": {
            "Visualize BAR SELECT SEX , COUNT(SEX) FROM people GROUP BY SEX": 0.5,
            "Visualize BAR SELECT Name , COUNT(Sex) FROM people GROUP BY Name": 0.2,
            "Visualize BAR SELECT Sex , COUNT(Name) FROM people GROUP BY Sex": 0.3
        }
    },
    {
        "record_name": "990",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
        "nlq": "Display the quantity of accounts for each customer in a bar chart with grouping by the last name of the customer.",
        "predict_rag_nlq": "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
        "rag_dvqs": [
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
        "predict_dvq_set": {
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name": 0.6,
            "Visualize BAR SELECT customer_first_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name": 0.2,
            "Visualize BAR SELECT customer_last_name , COUNT(account_id) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name": 0.2
        }
    },
    {
        "record_name": "990",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
        "nlq": "Display the quantity of accounts for each customer in a bar chart, with grouping based on the customer's last name.",
        "predict_rag_nlq": "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
        "rag_dvqs": [
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY COUNT(customer_last_name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name",
        "predict_dvq_set": {
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name": 0.6,
            "Visualize BAR SELECT customer_first_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name": 0.2,
            "Visualize BAR SELECT customer_last_name , COUNT(account_id) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name": 0.2
        }
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000 and who have a non-null commission or a department number that is not equal to 40, provide a comparison of the total sum of manager_ids over the job_id. Group the data by the attribute job_id and display it in a bar chart, with the y-axis arranged in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.6,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.1
        }
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "nlq": "For employees with salaries ranging from 8000 to 12000, and either a non-null commission or a department number other than 40, retrieve the job_id and the sum of manager_id. Group them by the job_id attribute and visualize the data using a bar chart, with the Y-axis listed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.7,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.2,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.1
        }
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "nlq": "For the employees with salaries ranging from 8000 to 12000 and either a non-null commission or a department number not equal to 40, create a bar chart depicting the distribution of job IDs and the sum of manager IDs, grouped by the job ID attribute, and display the results on the y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.6,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.1
        }
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "nlq": "For employees with salaries ranging from 8000 to 12000, and either a non-null commission or a department number not equal to 40, please provide information on the distribution of job IDs and the sum of manager IDs. Represent this data in a bar chart, grouping it by job ID, and arrange the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.7,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.2,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.1
        }
    },
    {
        "record_name": "1604@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "nlq": "Visualize a bar chart depicting the distribution of job_id and the sum of manager_id for employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or belong to a department other than 40. Please group the data by the job_id attribute, and sort by the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.6,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC": 0.1
        }
    },
    {
        "record_name": "723",
        "db_id": "cre_Doc_Control_Systems",
        "target": "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "nlq": "Present a bar graph illustrating the distribution of employees across different roles.",
        "predict_rag_nlq": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
        "rag_dvqs": [
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
            "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
            "Visualize BAR SELECT role_code , count(*) FROM users GROUP BY role_code",
            "Visualize PIE SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
            "Visualize BAR SELECT T1.role_code , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT role_code , COUNT(*) FROM Employees GROUP BY role_code",
        "predict_dvq_set": {
            "Visualize BAR SELECT role_code , COUNT(*) FROM Employees GROUP BY role_code": 0.5,
            "Visualize BAR SELECT role_description , COUNT(*) FROM Employees GROUP BY role_code": 0.3,
            "Visualize BAR SELECT role_description , COUNT(*) FROM Roles GROUP BY role_code": 0.2
        }
    },
    {
        "record_name": "2059",
        "db_id": "journal_committee",
        "target": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "nlq": "Display the count of editor names who are part of the committee for journals with sales exceeding 3000.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name": 0.6,
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales >= 3000 GROUP BY Name": 0.2,
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 AND T1.Work_Type = 'Committee' GROUP BY Name": 0.2
        }
    },
    {
        "record_name": "2059",
        "db_id": "journal_committee",
        "target": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "nlq": "A pie chart illustrating the quantity of editors' names who are part of committees for journals with sales exceeding 3000.",
        "predict_rag_nlq": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_debugged_db_ann": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_dvq_set": {
            "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name": 0.5,
            "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 AND T1.Work_Type = 'Committee' GROUP BY Name": 0.3,
            "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 AND T2.Age > 30 GROUP BY Name": 0.2
        }
    },
    {
        "record_name": "2059",
        "db_id": "journal_committee",
        "target": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "nlq": "Display the identities of editors who serve on committees of journals with sales exceeding 3000, and represent their count using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "rag_dvqs": [
            "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Name , COUNT(*) FROM editor AS T1 JOIN journal_committee AS T2 ON T1.Editor_ID = T2.Editor_ID GROUP BY T1.editor_id ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_debugged_db_ann": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
        "predict_dvq_set": {
            "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name": 0.5,
            "Visualize PIE SELECT Editor_ID , COUNT(Editor_ID) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Editor_ID": 0.3,
            "Visualize PIE SELECT T2.Name , COUNT(T2.Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY T2.Name": 0.2
        }
    },
    {
        "record_name": "1435",
        "db_id": "formula_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "Determine the quantity of Japanese builders' names who have previously achieved a score higher than 5 points?",
        "predict_rag_nlq": "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "rag_dvqs": [
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize PIE SELECT T1.name , COUNT(T1.name) FROM club AS T1 JOIN player AS T2 ON T1.Club_ID = T2.Club_ID GROUP BY T1.name",
            "Visualize PIE SELECT Name , count(*) FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id = t2.manufacturer_id GROUP BY t1.manufacturer_id",
            "Visualize PIE SELECT pName , COUNT(pName) FROM player AS T1 JOIN tryout AS T2 ON T1.pID = T2.pID GROUP BY pName ORDER BY T1.pName",
            "Visualize PIE SELECT Name , count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id = T2.artist_id GROUP BY T1.artist_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_debugged_db_ann": "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_dvq_set": {
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name": 0.6,
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY constructorId": 0.2,
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY nationality": 0.1,
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY T1.name": 0.1
        }
    },
    {
        "record_name": "1435",
        "db_id": "formula_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "Please provide the specific context or dataset in order for me to assist you accurately in replacing the nouns in the sentences. Additionally, it would be helpful to clarify the meaning of \"constructors\" in this context.",
        "predict_rag_nlq": "Visualize SCATTER SELECT count(*) , constructorId FROM constructorStandings GROUP BY constructorId",
        "rag_dvqs": [
            "Visualize SCATTER SELECT count(*) , constructorId FROM constructorStandings GROUP BY constructorid",
            "Visualize SCATTER SELECT Count(*) , Id FROM MODEL_LIST AS T1 JOIN CAR_MAKERS AS T2 ON T1.Maker = T2.Id GROUP BY T2.id",
            "Visualize SCATTER SELECT Id , count(*) FROM CAR_MAKERS AS T1 JOIN MODEL_LIST AS T2 ON T1.Id = T2.Maker GROUP BY T1.Id",
            "Visualize SCATTER SELECT count(*) , customer_id FROM Accounts GROUP BY customer_id",
            "Visualize SCATTER SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
            "Visualize SCATTER SELECT customer_id , count(*) FROM Customers_cards GROUP BY customer_id",
            "Visualize SCATTER SELECT order_id , count(*) FROM Invoices GROUP BY order_id",
            "Visualize SCATTER SELECT customer_id , count(*) FROM Accounts GROUP BY customer_id",
            "Visualize SCATTER SELECT account_id , count(*) FROM Financial_transactions GROUP BY account_id",
            "Visualize SCATTER SELECT count(*) , Classroom FROM list GROUP BY classroom"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT count(*) , constructorId FROM constructorStandings GROUP BY constructorId",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT COUNT(*) , constructorId FROM constructorStandings GROUP BY constructorId",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT COUNT(*) , constructorId FROM constructorStandings GROUP BY constructorId": 0.3,
            "Visualize SCATTER SELECT COUNT(*) , constructorId FROM constructorResults GROUP BY constructorId": 0.2,
            "Visualize SCATTER SELECT COUNT(*) , constructorId FROM constructors GROUP BY constructorId": 0.3,
            "Visualize SCATTER SELECT COUNT(*) , constructorId FROM results GROUP BY constructorId": 0.2
        }
    },
    {
        "record_name": "1435",
        "db_id": "formula_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "A bar chart illustrating the count of Japanese constructors' names who have accumulated more than 5 points.",
        "predict_rag_nlq": "Visualize BAR SELECT name, COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC": 0.6,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 10 GROUP BY name ORDER BY COUNT(name) DESC": 0.2,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 3 GROUP BY name ORDER BY COUNT(name) DESC": 0.1,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 7 GROUP BY name ORDER BY COUNT(name) DESC": 0.1
        }
    },
    {
        "record_name": "1435",
        "db_id": "formula_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "A bar chart for determining the count of Japanese constructors' names who have previously earned more than 5 points.",
        "predict_rag_nlq": "Visualize BAR SELECT name, COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC": 0.7,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC": 0.2,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC": 0.1
        }
    },
    {
        "record_name": "1435",
        "db_id": "formula_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "What is the count of the names of Japanese constructors who have accumulated more than 5 points?",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name": 0.6,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY constructorId": 0.2,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY T1.name": 0.2
        }
    },
    {
        "record_name": "1435",
        "db_id": "formula_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
        "nlq": "Identify the names of Japanese builders who have achieved a score higher than 5 at least once, and represent the count using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize PIE SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) ASC": 0.5,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points >= 5 GROUP BY name ORDER BY COUNT(name) ASC": 0.3,
            "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorStandings AS T2 ON T1.constructorId = T2.constructorId WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name ORDER BY COUNT(name) DESC": 0.2
        }
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
        "nlq": "For the records pertaining to the products and their respective manufacturers, please present a bar chart illustrating the distribution and quantity of names. Group the data based on the attribute name.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name": 0.6,
            "Visualize BAR SELECT T1.Manufacturer , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Manufacturer": 0.2,
            "Visualize BAR SELECT T2.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name": 0.2
        }
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
        "nlq": "For the data pertaining to the products and their respective manufacturers, provide a comparison of the quantity of names against the name, and group them based on the attribute name.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name": 0.6,
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name": 0.2,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name": 0.2
        }
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
        "nlq": "For the records pertaining to products and their respective manufacturers, retrieve the name of each product and the count of occurrences for each name. Group the results by the attribute \"name\" and visualize them using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name": 0.6,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC": 0.2,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name HAVING COUNT(T1.Name) > 1": 0.1,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name LIMIT 10": 0.1
        }
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
        "nlq": "For the records pertaining to the products and their respective manufacturers, create a bar chart illustrating the distribution of names and the quantity of each name, grouped by the attribute name.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name": 0.6,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Code": 0.2,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name": 0.2
        }
    },
    {
        "record_name": "2204",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
        "nlq": "For the records pertaining to products and their respective manufacturers, create a bar chart illustrating the distribution of product names and the quantity of each name, grouped by the attribute \"name\".",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name": 0.6,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Code": 0.2,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name": 0.2
        }
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "nlq": "What is the association between School_ID and ACC_Percent, with grouping based on the attribute Team_Name?",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name": 0.4,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY School_ID": 0.3,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name, School_ID": 0.2,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Percent": 0.1
        }
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "nlq": "A scatter plot illustrates the relationship between School_ID and ACC_Percent, while grouping the data by the attribute Team_Name.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name  The column names in the original DVQ already exist in the database schemas, so no replacements are needed.",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name": 0.6,
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name": 0.2,
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name": 0.1,
            "Visualize SCATTER SELECT School_ID , ACC_Home FROM basketball_match GROUP BY Team_Name": 0.1
        }
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "nlq": "Present the correlation between School_ID and ACC_Percent, and organize them by the attribute Team_Name in a scatter plot.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name": 0.4,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name ORDER BY School_ID": 0.3,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name ORDER BY ACC_Percent": 0.2,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name ORDER BY Team_Name": 0.1
        }
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "nlq": "Create a scatter plot depicting the relationship between School_ID and ACC_Percent, and group the data according to the attribute Team_Name.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name": 0.4,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name, School_ID": 0.3,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name, ACC_Percent": 0.2,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY School_ID": 0.1
        }
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "nlq": "Provide a scatter chart illustrating the relationship between School_ID and ACC_Percent, with the grouping done based on the attribute Team_Name.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name  #### Explanation: - Since all the column names in the original DVQ already exist in the database schemas, no replacements are needed.",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name": 0.5,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY School_ID": 0.3,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Percent": 0.2
        }
    },
    {
        "record_name": "3163",
        "db_id": "university_basketball",
        "target": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "nlq": "Display the correlation between school ID and acceptance percentage for each Team Name using a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT School_ID, ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "rag_dvqs": [
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Regular_Season",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Home",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Games",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Neutral",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY All_Home",
            "Visualize SCATTER SELECT School_ID , All_Games_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT Team_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
            "Visualize SCATTER SELECT Team_ID , School_ID FROM basketball_match GROUP BY Team_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name": 0.3,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match WHERE ACC_Percent IS NOT NULL GROUP BY Team_Name": 0.2,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match WHERE Team_Name IS NOT NULL GROUP BY Team_Name": 0.2,
            "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match WHERE School_ID IS NOT NULL GROUP BY Team_Name": 0.3
        }
    },
    {
        "record_name": "2780",
        "db_id": "soccer_1",
        "target": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "nlq": "For the five players with the highest potential, categorize their birthdays into intervals of weekdays and present the distribution of their birthdays.",
        "predict_rag_nlq": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
            "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR",
            "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY": 0.6,
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5 BIN birthday BY MONTH": 0.2,
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR": 0.1,
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id ORDER BY potential DESC LIMIT 5 BIN birthday BY QUARTER": 0.1
        }
    },
    {
        "record_name": "2780",
        "db_id": "soccer_1",
        "target": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "nlq": "For the five players with the highest potential, group their birthdays into weekday intervals and display the count using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
            "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR",
            "Visualize LINE SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY YEAR",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer'  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) DESC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY COUNT(date_of_birth) ASC BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\" BIN date_of_birth BY WEEKDAY",
            "Visualize BAR SELECT date_of_birth , COUNT(date_of_birth) FROM Customers WHERE customer_status_code = 'Good Customer' BIN date_of_birth BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT BIRTHDAY , COUNT(BIRTHDAY) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN BIRTHDAY BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT BIRTHDAY , COUNT(BIRTHDAY) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN BIRTHDAY BY WEEKDAY": 0.6,
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY": 0.2,
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY MONTH": 0.1,
            "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id GROUP BY player_name ORDER BY potential DESC LIMIT 5 BIN birthday BY QUARTER": 0.1
        }
    },
    {
        "record_name": "763@y_name@DESC",
        "db_id": "cre_Doc_Template_Mgt",
        "target": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "nlq": "How many documents are there for each description? Please display a bar chart, sorted in descending order based on the number of document descriptions.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DOCUMENT_DESCRIPTION , COUNT(DOCUMENT_DESCRIPTION) FROM Documents GROUP BY DOCUMENT_DESCRIPTION ORDER BY COUNT(DOCUMENT_DESCRIPTION) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DOCUMENT_DESCRIPTION , COUNT(DOCUMENT_DESCRIPTION) FROM Documents GROUP BY DOCUMENT_DESCRIPTION ORDER BY COUNT(DOCUMENT_DESCRIPTION) DESC": 0.6,
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC": 0.2,
            "Visualize BAR SELECT Document_ID , COUNT(Document_ID) FROM Documents GROUP BY Document_ID ORDER BY COUNT(Document_ID) DESC": 0.1,
            "Visualize BAR SELECT Template_ID , COUNT(Template_ID) FROM Documents GROUP BY Template_ID ORDER BY COUNT(Template_ID) DESC": 0.1
        }
    },
    {
        "record_name": "763@y_name@DESC",
        "db_id": "cre_Doc_Template_Mgt",
        "target": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "nlq": "Present the quantity of documents for each description of document in a bar graph, with the sorting in descending order based on the number of document descriptions.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DOCUMENT_DESCRIPTION , COUNT(DOCUMENT_DESCRIPTION) FROM Documents GROUP BY DOCUMENT_DESCRIPTION ORDER BY COUNT(DOCUMENT_DESCRIPTION) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DOCUMENT_DESCRIPTION , COUNT(DOCUMENT_DESCRIPTION) FROM Documents GROUP BY DOCUMENT_DESCRIPTION ORDER BY COUNT(DOCUMENT_DESCRIPTION) DESC": 0.6,
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC": 0.2,
            "Visualize BAR SELECT Template_ID , COUNT(Template_ID) FROM Documents GROUP BY Template_ID ORDER BY COUNT(Template_ID) DESC": 0.1,
            "Visualize BAR SELECT Template_Type_Code , COUNT(Template_Type_Code) FROM Templates GROUP BY Template_Type_Code ORDER BY COUNT(Template_Type_Code) DESC": 0.1
        }
    },
    {
        "record_name": "763@y_name@DESC",
        "db_id": "cre_Doc_Template_Mgt",
        "target": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "nlq": "Bar chart with the X-axis representing document descriptions and the Y-axis representing the count of document descriptions. Please arrange the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name DESC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY COUNT(Document_Name) ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name ORDER BY Document_Name ASC",
            "Visualize BAR SELECT Document_Name , COUNT(Document_Name) FROM Documents GROUP BY Document_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DOCUMENT_DESCRIPTION , COUNT(DOCUMENT_DESCRIPTION) FROM Documents GROUP BY DOCUMENT_DESCRIPTION ORDER BY COUNT(DOCUMENT_DESCRIPTION) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DOCUMENT_DESCRIPTION , COUNT(DOCUMENT_DESCRIPTION) FROM Documents GROUP BY DOCUMENT_DESCRIPTION ORDER BY COUNT(DOCUMENT_DESCRIPTION) DESC": 0.6,
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC": 0.2,
            "Visualize BAR SELECT Document_Description , COUNT(*) FROM Documents GROUP BY Document_Description ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "3064@y_name@ASC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "nlq": "A bar chart illustrating the quantity of package options for all TV channels that do not broadcast any cartoons directed by Ben Jones, arranged in ascending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC": 0.6,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'John Smith') GROUP BY Package_Option ORDER BY Package_Option ASC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Alice Brown') GROUP BY Package_Option ORDER BY Package_Option ASC": 0.2
        }
    },
    {
        "record_name": "3064@y_name@ASC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "nlq": "Find the package options of TV channels that do not include any cartoons directed by Ben Jones, and represent them using a bar chart, ranked in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC": 0.7,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by != 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by <> 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC": 0.1
        }
    },
    {
        "record_name": "3064@y_name@ASC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "nlq": "What is the count of package choices for all TV channels that do not broadcast any cartoons directed by Ben Jones, and arrange them in ascending order based on the total number, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC": 0.7,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Smith') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Johnson') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Brown') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC": 0.1
        }
    },
    {
        "record_name": "3064@y_name@ASC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "nlq": "What are the available package choices for all TV channels that do not broadcast any cartoons directed by Ben Jones? Count them using a bar graph and rank them in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC": 0.7,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Smith') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Johnson') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC": 0.1
        }
    },
    {
        "record_name": "3214",
        "db_id": "wedding",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
        "nlq": "Display the count of countries for all individuals whose age is less than the mean, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age <(SELECT avg(age) FROM people) GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT avg(Age) FROM people) GROUP BY Country",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT avg(Age) FROM people) GROUP BY Country": 0.5,
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age >(SELECT avg(Age) FROM people) GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT median(Age) FROM people) GROUP BY Country": 0.2
        }
    },
    {
        "record_name": "3214",
        "db_id": "wedding",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
        "nlq": "A bar graph depicting the number of countries for individuals whose age is below the average.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , AVG(Age) FROM artist GROUP BY Country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age <(SELECT avg(age) FROM people) GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT avg(Age) FROM people) GROUP BY Country",
        "predict_dvq_set": {
            "BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT avg(Age) FROM people) GROUP BY Country": 0.4,
            "BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT avg(Age) FROM people) GROUP BY Country HAVING COUNT(Country) > 1": 0.3,
            "BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT avg(Age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC": 0.2,
            "BAR SELECT Country , COUNT(Country) FROM people WHERE Age <(SELECT avg(Age) FROM people) GROUP BY Country ORDER BY Country ASC": 0.1
        }
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "nlq": "A bar chart illustrates the distribution of ACC_Regular_Season and All_Games_Percent, with the bars displayed in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.5,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.2
        }
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "nlq": "Display the distribution of ACC_Regular_Season and All_Games_Percent in a bar graph, and please arrange the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.6,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.1
        }
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "nlq": "Generate a bar chart illustrating the percentage of all games across the ACC regular season, and please list ACC_Regular_Season in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.5,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC": 0.2
        }
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "nlq": "Provide a comparison of the All_Games_Percent during the ACC_Regular_Season, and present it using bars arranged in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.6,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.2,
            "Visualize BAR SELECT Team_Name , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.1,
            "Visualize BAR SELECT School , All_Games_Percent FROM university JOIN basketball_match ON university.School_ID = basketball_match.School_ID ORDER BY All_Games_Percent ASC": 0.1
        }
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "nlq": "Provide a bar chart comparing the All_Games_Percent across the ACC_Regular_Season, with the X-axis arranged in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.5,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC": 0.2
        }
    },
    {
        "record_name": "3137@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "nlq": "Locate ACC_Regular_Season and All_Games_Percent, and represent them using a bar graph with the X-axis arranged in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.6,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.1
        }
    },
    {
        "record_name": "2798@x_name@ASC",
        "db_id": "soccer_2",
        "target": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
        "nlq": "Bar graph to illustrate the minimum enrollment from various country names, with the X-axis displayed in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT cName , MIN(enr) FROM College GROUP BY cName ORDER BY MIN(enr) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
            "Visualize BAR SELECT cName , enr FROM College ORDER BY enr",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT cName , MIN(enr) FROM College GROUP BY cName ORDER BY MIN(enr) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT cName , MIN(enr) FROM College GROUP BY cName ORDER BY MIN(enr) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT cName , MIN(enr) FROM College GROUP BY cName ORDER BY MIN(enr) ASC": 0.5,
            "Visualize BAR SELECT cName , MIN(enr) FROM College GROUP BY cName ORDER BY MIN(enr) DESC": 0.3,
            "Visualize BAR SELECT cName , MIN(enr) FROM College GROUP BY cName ORDER BY cName ASC": 0.2
        }
    },
    {
        "record_name": "2798@x_name@ASC",
        "db_id": "soccer_2",
        "target": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
        "nlq": "Compare the minimum enrollment of schools in each state using a bar graph, and please display them in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC": 0.4,
            "Visualize BAR SELECT state , min(enr) FROM College GROUP BY state ORDER BY state ASC": 0.3,
            "Visualize BAR SELECT state , min(enr) FROM College GROUP BY state ORDER BY min(enr) ASC": 0.2,
            "Visualize BAR SELECT state , min(enr) FROM College GROUP BY state ORDER BY state DESC": 0.1
        }
    },
    {
        "record_name": "2798@x_name@ASC",
        "db_id": "soccer_2",
        "target": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
        "nlq": "What is the name of the school with the lowest enrollment in each state? I would like to list the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC": 0.3,
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY min(enr) ASC": 0.2,
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY min(enr) DESC": 0.2,
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName DESC": 0.3
        }
    },
    {
        "record_name": "2798@x_name@ASC",
        "db_id": "soccer_2",
        "target": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
        "nlq": "Provide a bar chart depicting the name of the school with the lowest enrollment in each state, arranged in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) ASC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY state DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state ORDER BY min(enr) DESC",
            "Visualize BAR SELECT state , min(enr) FROM college GROUP BY state"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName ASC": 0.4,
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY min(enr) ASC": 0.3,
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY min(enr) DESC": 0.2,
            "Visualize BAR SELECT cName , min(enr) FROM College GROUP BY state ORDER BY cName DESC": 0.1
        }
    },
    {
        "record_name": "17@x_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "nlq": "How many faculty members are there for each rank? Please display the information in a bar chart, with the ranks arranged in descending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC": 0.4,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank ASC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "17@x_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "nlq": "Display the quantity of faculty members for each level of rank in a bar graph, and list the X-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank DESC": 0.6,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY Rank ASC": 0.2,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "17@x_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
        "nlq": "Bar chart illustrating the total count for each rank, and please arrange the bars in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY count(Rank) ASC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY rank ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC": 0.6,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC": 0.1
        }
    },
    {
        "record_name": "2936@y_name@DESC",
        "db_id": "theme_gallery",
        "target": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "nlq": "For names of artists who are not from the United States, how many names are there in each year? Please sort the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) ASC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) ASC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC": 0.6,
            "Visualize BAR SELECT Year_Join , COUNT(Name) FROM artist WHERE Country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Name) DESC": 0.2,
            "Visualize BAR SELECT Year_Join , COUNT(Artist_ID) FROM artist WHERE Country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Artist_ID) DESC": 0.2
        }
    },
    {
        "record_name": "2936@y_name@DESC",
        "db_id": "theme_gallery",
        "target": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "nlq": "For non-United States artist names, please present a stacked chart where the x-axis represents the Year_Join and the y-axis groups the names. Arrange the chart in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) ASC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) ASC",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name",
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Year_Join",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM artist GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC": 0.6,
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Country != 'United States' GROUP BY Year_Join ORDER BY COUNT(Year_Join) DESC": 0.2,
            "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE Country != 'United States' GROUP BY Year_Join, Name ORDER BY COUNT(Year_Join) DESC": 0.2
        }
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals",
        "target": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "nlq": "Present the status code for bookings and the associated quantity of bookings using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_dvq_set": {
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code": 0.5,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code IS NOT NULL GROUP BY booking_status_code": 0.3,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code <> '' GROUP BY booking_status_code": 0.2
        }
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals",
        "target": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "nlq": "Display the booking status code and the corresponding quantity of bookings. Represent this information using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_dvq_set": {
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code": 0.5,
            "Visualize PIE SELECT booking_status_code , COUNT(apt_booking_id) FROM Apartment_Bookings GROUP BY booking_status_code": 0.3,
            "Visualize PIE SELECT booking_status_code , COUNT(booking_status_code) FROM Apartment_Bookings GROUP BY booking_status_code": 0.2
        }
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals",
        "target": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "nlq": "Pie chart depicting the distribution of bookings among different booking statuses. Provide a list of the booking status codes and the corresponding number of bookings for each status.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT BOOKING_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY BOOKING_STATUS_CODE",
        "predict_dvq_set": {
            "Visualize PIE SELECT BOOKING_STATUS_CODE , COUNT(*) FROM Apartment_Bookings GROUP BY BOOKING_STATUS_CODE": 0.6,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code": 0.3,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals",
        "target": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "nlq": "Create a pie chart to illustrate the distribution of bookings among different booking status categories. Provide the booking status code and the corresponding number of bookings for each category.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_dvq_set": {
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code": 0.5,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code IS NOT NULL GROUP BY booking_status_code": 0.3,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code <> '' GROUP BY booking_status_code": 0.2
        }
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals",
        "target": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "nlq": "How many bookings are there for each booking status? Represent the booking status code and the corresponding number of bookings in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_dvq_set": {
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code": 0.6,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code = 'confirmed' GROUP BY booking_status_code": 0.2,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code = 'cancelled' GROUP BY booking_status_code": 0.2
        }
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals",
        "target": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "nlq": "How many bookings are there for each booking status? Provide the booking status code and the corresponding number of bookings. Display the information in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_dvq_set": {
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code": 0.5,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code IS NOT NULL GROUP BY booking_status_code": 0.3,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings HAVING COUNT(*) > 0 GROUP BY booking_status_code": 0.2
        }
    },
    {
        "record_name": "73",
        "db_id": "apartment_rentals",
        "target": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "nlq": "Provide me with a pie chart illustrating the aggregate count of bookings based on various status codes.",
        "predict_rag_nlq": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "rag_dvqs": [
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
            "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT customer_status_code , count(*) FROM Customers GROUP BY customer_status_code",
            "Visualize PIE SELECT apt_type_code , COUNT(*) FROM Apartments GROUP BY apt_type_code ORDER BY COUNT(*) ASC",
            "Visualize PIE SELECT apt_type_code , min(room_count) FROM Apartments GROUP BY apt_type_code",
            "Visualize PIE SELECT bedType , count(*) FROM Rooms GROUP BY bedType"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
        "predict_dvq_set": {
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code": 0.6,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code IN ('CONFIRMED', 'PENDING', 'CANCELLED') GROUP BY booking_status_code": 0.2,
            "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings WHERE booking_status_code NOT IN ('COMPLETED') GROUP BY booking_status_code": 0.2
        }
    },
    {
        "record_name": "3191",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "nlq": "Determine the cumulative count of students enrolled in colleges established after the year 1850 for each type of affiliation. Display the results in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "predict_debugged_db_ann": "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation",
        "predict_dvq_set": {
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.5,
            "Visualize BAR SELECT Affiliation , COUNT(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.3,
            "Visualize BAR SELECT Affiliation , AVG(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.2
        }
    },
    {
        "record_name": "3191",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "nlq": "A bar graph illustrating the various affiliations and the total enrollment of schools established after 1850 for each enrollment category.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "predict_debugged_db_ann": "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation",
        "predict_dvq_set": {
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.5,
            "Visualize BAR SELECT Affiliation , AVG(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.3,
            "Visualize BAR SELECT Affiliation , MAX(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.2
        }
    },
    {
        "record_name": "3191",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "nlq": "Present a bar graph illustrating the various affiliations, and the total enrollment of schools established after 1850 for each enrollment category.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.4,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 AND Enrollment > 10000 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.3,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) DESC": 0.2,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 AND Enrollment < 5000 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.1
        }
    },
    {
        "record_name": "3191",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "nlq": "What are the distinct affiliations, and what is the total number of schools established after 1850 for each enrollment category? Represent the data using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation",
        "predict_debugged_db_ann": "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation",
        "predict_dvq_set": {
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.5,
            "Visualize BAR SELECT Affiliation , COUNT(School) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.3,
            "Visualize BAR SELECT Affiliation , AVG(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation": 0.2
        }
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "Generate a bar chart presenting the distribution of founders and the sum of codes for records pertaining to products and their respective manufacturers. Group the chart by the founder attribute and arrange the Y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC": 0.4,
            "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T2.Founder DESC": 0.3,
            "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY COUNT(T1.Code) DESC": 0.2,
            "Visualize BAR SELECT T2.Founder , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY SUM(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For the records of products and their respective manufacturers, a bar chart illustrates the distribution of founders and the total number of codes, grouped by the founder attribute. I would like the Y-axis to be sorted in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY COUNT(T1.Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT Founder , COUNT(Founder) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder ORDER BY COUNT(Founder) DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY COUNT(T1.Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY COUNT(T1.Code) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY COUNT(T1.Code) DESC": 0.6,
            "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T2.Founder DESC": 0.3,
            "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T2.Founder ASC": 0.1
        }
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For the records of products and their respective manufacturers, create a bar chart depicting the distribution of founders and the total code sum. Group the data by the founder attribute and display the total number of code in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC": 0.6,
            "Visualize BAR SELECT T2.Founder , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY COUNT(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, provide a comparison of the total code sum across the founders. Group the founder attribute and present it in a bar chart, with the Y-axis displayed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC": 0.4,
            "Visualize BAR SELECT T2.Founder , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY SUM(T1.Code) DESC": 0.3,
            "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY COUNT(T1.Code) DESC": 0.2,
            "Visualize BAR SELECT T2.Founder , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY AVG(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "2227@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "nlq": "For the entries related to the products and their respective manufacturers, please present the distribution of founders and the total code sum. Group the data by the founder attribute and display it in a bar chart, with the Y-axis arranged in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T2.Founder DESC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC",
            "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code DESC": 0.4,
            "Visualize BAR SELECT T2.Founder , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY T1.Code ASC": 0.3,
            "Visualize BAR SELECT T2.Founder , SUM(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY SUM(T1.Code) DESC": 0.2,
            "Visualize BAR SELECT T2.Founder , COUNT(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder ORDER BY COUNT(T1.Code) DESC": 0.1
        }
    },
    {
        "record_name": "466",
        "db_id": "cinema",
        "target": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
        "nlq": "Display the number of cinemas operating per year in a line graph.",
        "predict_rag_nlq": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Opening_year , COUNT(Opening_year) FROM cinema ORDER BY Opening_year ASC BIN Opening_year BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT Opening_year , COUNT(Opening_year) FROM cinema ORDER BY Opening_year ASC BIN Opening_year BY YEAR": 0.6,
            "LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR": 0.2
        }
    },
    {
        "record_name": "466",
        "db_id": "cinema",
        "target": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
        "nlq": "Plot the opening year against the frequency of opening years as a trend line.",
        "predict_rag_nlq": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Opening_year , COUNT(Opening_year) FROM cinema ORDER BY Opening_year ASC BIN Opening_year BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Opening_year , COUNT(Opening_year) FROM cinema ORDER BY Opening_year ASC BIN Opening_year BY YEAR": 0.4,
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR": 0.1,
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema ORDER BY Openning_year DESC BIN Openning_year BY YEAR": 0.2
        }
    },
    {
        "record_name": "451@x_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
        "nlq": "Display the mean price of each movie in a bar graph, with the names arranged in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Title DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Title ORDER BY Title DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Title ORDER BY Title DESC": 0.3,
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Title ORDER BY AVG(Price) DESC": 0.4,
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Title ORDER BY AVG(Price) ASC": 0.3
        }
    },
    {
        "record_name": "3058",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "nlq": "Display each language and the count of TV channels utilizing it in a bar graph, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "rag_dvqs": [
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predict_debugged_db_ann": "Visualize BAR SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language",
        "predict_dvq_set": {
            "Visualize BAR SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language": 0.4,
            "Visualize BAR SELECT Country , COUNT(*) FROM TV_Channel GROUP BY Country": 0.3,
            "Visualize BAR SELECT series_name , COUNT(*) FROM TV_Channel GROUP BY series_name": 0.2,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(*) FROM TV_Channel GROUP BY Pixel_aspect_ratio_PAR": 0.1
        }
    },
    {
        "record_name": "3058",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "nlq": "Enumerate each language and the corresponding count of TV channels utilizing it. Represent this information through a bar chart visualization.",
        "predict_rag_nlq": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "rag_dvqs": [
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predict_debugged_db_ann": "Visualize BAR SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language",
        "predict_dvq_set": {
            "Visualize BAR SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language": 0.6,
            "Visualize BAR SELECT Country , COUNT(*) FROM TV_Channel GROUP BY Country": 0.2,
            "Visualize BAR SELECT series_name , COUNT(*) FROM TV_Channel GROUP BY series_name": 0.1,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(*) FROM TV_Channel GROUP BY Pixel_aspect_ratio_PAR": 0.1
        }
    },
    {
        "record_name": "3058",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "nlq": "For every language, enumerate the count of TV channels that utilize it. Represent them visually as a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "rag_dvqs": [
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predict_debugged_db_ann": "Visualize BAR SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language",
        "predict_dvq_set": {
            "Visualize BAR SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language": 0.4,
            "Visualize BAR SELECT Country , COUNT(*) FROM TV_Channel GROUP BY Country": 0.3,
            "Visualize BAR SELECT series_name , COUNT(*) FROM TV_Channel GROUP BY series_name": 0.2,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(*) FROM TV_Channel GROUP BY Pixel_aspect_ratio_PAR": 0.1
        }
    },
    {
        "record_name": "3058",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "nlq": "Bar chart illustrating the aggregate count from each language.",
        "predict_rag_nlq": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "rag_dvqs": [
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize PIE SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
        "predict_debugged_db_ann": "Visualize BAR SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language",
        "predict_dvq_set": {
            "Visualize BAR SELECT Language , COUNT(*) FROM TV_Channel GROUP BY Language": 0.4,
            "Visualize BAR SELECT Country , COUNT(*) FROM TV_Channel GROUP BY Country": 0.3,
            "Visualize BAR SELECT series_name , COUNT(*) FROM TV_Channel GROUP BY series_name": 0.2,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(*) FROM TV_Channel GROUP BY Pixel_aspect_ratio_PAR": 0.1
        }
    },
    {
        "record_name": "11@y_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
        "nlq": "Stacked bar chart displaying the total count for each gender within each rank, arranged in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank , Sex ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank , Sex ORDER BY Rank DESC": 0.2
        }
    },
    {
        "record_name": "11@y_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
        "nlq": "Display a bar chart illustrating the total number of male and female faculty members for each rank, arranged in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank, Sex, COUNT(*) FROM Faculty GROUP BY Rank, Sex ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) ASC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , Sex , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , Sex , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , Sex , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Rank , Sex , COUNT(*) FROM Faculty WHERE Sex = 'Male' GROUP BY Sex , Rank ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Rank , Sex , COUNT(*) FROM Faculty WHERE Sex = 'Female' GROUP BY Sex , Rank ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "11@y_name@DESC",
        "db_id": "activity_1",
        "target": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
        "nlq": "How many faculty members do we have for each level and gender? Represent the data as a bar chart, with the rank arranged in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY Rank DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY Rank ASC",
            "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty GROUP BY Sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , count(*) FROM Faculty WHERE rank = \"AsstProf\" GROUP BY sex ORDER BY Sex ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex , Rank ORDER BY Rank DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY Rank DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Sex , Rank ORDER BY Rank DESC": 0.6,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank , Sex ORDER BY Rank DESC": 0.2,
            "Visualize BAR SELECT Rank , COUNT(*) FROM Faculty GROUP BY Rank , Sex ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "49",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
        "nlq": "Enumerate the surnames of students who do not possess any allergies to specific food types and represent the count of such students in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\") GROUP BY LName",
        "predict_dvq_set": {
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\") GROUP BY LName": 0.6,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"specific food\") GROUP BY LName": 0.2,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food types\") GROUP BY LName": 0.1,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"specific food types\") GROUP BY LName": 0.1
        }
    },
    {
        "record_name": "49",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
        "nlq": "What is the surname of each student who does not have any food allergies? Represent the count using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\") GROUP BY LName",
        "predict_dvq_set": {
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\") GROUP BY LName": 0.6,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\" AND T1.StuID = Student.StuID) GROUP BY LName": 0.2,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN(SELECT T1.StuID FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.AllergyType = \"food\" AND T1.StuID = Student.StuID) GROUP BY LName ORDER BY COUNT(LName) DESC": 0.2
        }
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "nlq": "Create a stacked bar chart illustrating the distribution of Is_full_time and the sum of Shop_ID, grouped by the Is_full_time attribute, and please arrange the bars in descending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.3,
            "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY SUM(Shop_ID) DESC": 0.4,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , AVG(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.1
        }
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "nlq": "Display the distribution of \"Is_full_time\" and the total sum of \"Shop_ID\" grouped by the attribute \"Is_full_time\" in a bar chart, listed in descending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.3,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , AVG(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , MAX(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , MIN(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.1
        }
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "nlq": "Create a grouped bar chart illustrating the distribution of \"Is_full_time\" and the sum of \"Shop_ID,\" with attribute \"Is_full_time\" as the grouping factor. Please arrange the bars in descending order along the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.4,
            "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY SUM(Shop_ID) DESC": 0.3,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , AVG(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.1
        }
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "nlq": "Provide a bar chart illustrating the distribution of Is_full_time and the sum of Shop_ID, grouped by the Is_full_time attribute, and please rank it in descending order by the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.3,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , AVG(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , MAX(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.2,
            "Visualize BAR SELECT IS_FULL_TIME , MIN(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.1
        }
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "nlq": "A stacked bar chart displays the distribution of Is_full_time and the total sum of Shop_ID, grouped by the Is_full_time attribute. I would like the X-axis to be listed in descending order from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC": 0.4,
            "Visualize BAR SELECT Is_full_time , COUNT(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY COUNT(Shop_ID) DESC": 0.3,
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY AVG(Shop_ID) DESC": 0.2,
            "Visualize BAR SELECT Is_full_time , MAX(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY MAX(Shop_ID) DESC": 0.1
        }
    },
    {
        "record_name": "1345@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "nlq": "Bar graph illustrating the total number of shop IDs for each full-time status, and I would like to list them in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Shop_ID) ASC",
            "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY SUM(Employee_ID) DESC",
            "Visualize BAR SELECT Is_full_time , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
            "Visualize BAR SELECT Is_full_time , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT IS_FULL_TIME , SUM(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.3,
            "Visualize BAR SELECT IS_FULL_TIME , COUNT(Shop_ID) FROM hiring GROUP BY IS_FULL_TIME ORDER BY IS_FULL_TIME DESC": 0.4,
            "Visualize BAR SELECT Is_full_time , COUNT(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC": 0.3
        }
    },
    {
        "record_name": "1654",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "nlq": "For employees who are not employed in departments where the managers have IDs between 100 and 200, create a line chart that illustrates the trend of department IDs over hire dates.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC": 0.4,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY HIRE_DATE ASC": 0.2,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 AND MANAGER_ID > 200) ORDER BY HIRE_DATE ASC": 0.1
        }
    },
    {
        "record_name": "1654",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "nlq": "For employees who are not employed in departments with managers whose IDs fall between 100 and 200, please depict the trend of department IDs over hire dates using a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC": 0.5,
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 200) ORDER BY HIRE_DATE ASC": 0.3,
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY HIRE_DATE ASC": 0.2
        }
    },
    {
        "record_name": "1654",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "nlq": "For employees who are not assigned to departments managed by managers with IDs between 100 and 200, generate a line chart illustrating the fluctuations in department ID over hire date.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY HIRE_DATE ASC": 0.2,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID <= 100 OR MANAGER_ID >= 200) ORDER BY HIRE_DATE ASC": 0.2
        }
    },
    {
        "record_name": "1654",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "nlq": "For employees who are not employed in departments where the manager's ID falls between 100 and 200, a line chart illustrates the progression of the department ID over the hire date.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC": 0.5,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 200) ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY HIRE_DATE ASC": 0.2
        }
    },
    {
        "record_name": "1654",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "nlq": "Provide me with the trend of the department_id over the hire_date for employees who are not in departments with managers whose IDs range from 100 to 200.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC": 0.4,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID >= 100 AND MANAGER_ID <= 200) ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY HIRE_DATE ASC": 0.2,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 OR MANAGER_ID < 200) ORDER BY HIRE_DATE ASC": 0.1
        }
    },
    {
        "record_name": "1654",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "nlq": "For employees who are not employed in departments where the manager's ID falls between 100 and 200, a line graph illustrates the fluctuation in department IDs over hire dates.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN (SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY HIRE_DATE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200 )",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200 )",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200 )": 0.5,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200 )": 0.3,
            "LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200 )": 0.2
        }
    },
    {
        "record_name": "1222@x_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "nlq": "What is the average age for each residence hall, and what are the names of each residence hall? Please plot them as a bar chart, and can you arrange them in descending order by the dorm_name?",
        "predict_rag_nlq": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY T3.dorm_name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY T3.dorm_name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY T3.dorm_name DESC": 0.5,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC": 0.3,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) ASC": 0.2
        }
    },
    {
        "record_name": "1222@x_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "nlq": "Calculate the mean age of students residing in each dormitory and display the dormitory names and corresponding averages as a bar chart. Please sort the bars in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC": 0.5,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) ASC": 0.2,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age)": 0.3
        }
    },
    {
        "record_name": "1222@x_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "nlq": "Present a bar chart depicting the average age for each dormitory, accompanied by the respective names of each dormitory. Kindly arrange the bars in descending order, from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC": 0.5,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) ASC": 0.2,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age)": 0.3
        }
    },
    {
        "record_name": "1222@x_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
        "nlq": "What is the mean age for each residence hall, and what are the designations of each residence hall, arranged in descending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY dorm_name ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dorm_name , count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid WHERE T1.age > 20 GROUP BY T3.dorm_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) DESC": 0.5,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY avg(T1.Age) ASC": 0.2,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC": 0.1,
            "Visualize BAR SELECT dorm_name , avg(T1.Age) FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.StuID JOIN Dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name ASC": 0.2
        }
    },
    {
        "record_name": "365@y_name@ASC",
        "db_id": "book_2",
        "target": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
        "nlq": "A bar chart displaying the quantity of release dates for books, and arrange them in ascending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date ASC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) DESC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date DESC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Price DESC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher ASC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher DESC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC": 0.4,
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date ASC": 0.3,
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date DESC": 0.2,
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date": 0.1
        }
    },
    {
        "record_name": "365@y_name@ASC",
        "db_id": "book_2",
        "target": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
        "nlq": "Bar chart with the x-axis representing publication dates and the y-axis representing the number of publications, arranged in ascending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date ASC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) DESC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date DESC",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date",
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Price DESC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher ASC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY Publisher DESC",
            "Visualize BAR SELECT Publisher , COUNT(*) FROM publication GROUP BY Publisher ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC": 0.5,
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date ASC": 0.3,
            "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY Publication_Date DESC": 0.2
        }
    },
    {
        "record_name": "2643@y_name@ASC",
        "db_id": "race_track",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "nlq": "Generate a bar chart illustrating the quantity of classes across different class categories, and organize the y-axis in ascending order from lowest to highest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC": 0.5,
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC": 0.3,
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC": 0.2
        }
    },
    {
        "record_name": "2643@y_name@ASC",
        "db_id": "race_track",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "nlq": "Present the distribution of individuals in each class across all races using a bar graph, and organize the bars in ascending order based on the number of classes.",
        "predict_rag_nlq": "Visualize BAR SELECT Class, COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY count(*) DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class ASC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS ORDER BY Class DESC",
            "Visualize BAR SELECT Class , count(*) FROM race GROUP BY CLASS"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC": 0.6,
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) DESC": 0.2,
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class ASC": 0.1,
            "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY Class DESC": 0.1
        }
    },
    {
        "record_name": "3064@y_name@DESC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "nlq": "Find the subscription package options of TV channels that do not include any cartoons directed by Ben Jones, and represent them using a bar chart, listing them in descending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.7,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by != 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by <> 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1
        }
    },
    {
        "record_name": "3064@y_name@DESC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "nlq": "What is the count of package choices for all TV channels that do not broadcast any cartoons directed by Ben Jones? Please present the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.6,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'John Smith') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Alice Brown') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.2
        }
    },
    {
        "record_name": "3064@y_name@DESC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "nlq": "A bar chart illustrating the quantity of package options for all TV channels excluding those that do not broadcast any cartoons directed by Ben Jones, arranged in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.6,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') AND Content = 'Cartoon' GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') AND Language = 'English' GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') AND Hight_definition_TV = 'Yes' GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1
        }
    },
    {
        "record_name": "3064@y_name@DESC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "nlq": "What are the package choices for all TV channels that do not air any cartoons directed by Ben Jones, and display them in a bar chart, ranking the number of package options in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option ASC",
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.6,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'John Smith') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.2,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Alice Brown') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1,
            "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN(SELECT Channel FROM Cartoon WHERE Directed_by = 'Sarah White') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC": 0.1
        }
    },
    {
        "record_name": "2459",
        "db_id": "network_2",
        "target": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "nlq": "Create a bar chart illustrating the average age for various job titles.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job": 0.3,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY city": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY gender": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY name": 0.1,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY year": 0.1,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job, city": 0.1
        }
    },
    {
        "record_name": "2459",
        "db_id": "network_2",
        "target": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "nlq": "A bar chart depicting the average age for various job titles.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job": 0.4,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY city": 0.3,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY gender": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY name": 0.1
        }
    },
    {
        "record_name": "2459",
        "db_id": "network_2",
        "target": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "nlq": "What is the mean age for different job titles? Represent this information through a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job": 0.3,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY city": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY gender": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY name": 0.1,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY year": 0.2
        }
    },
    {
        "record_name": "2459",
        "db_id": "network_2",
        "target": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "nlq": "Provide a histogram illustrating the average age of individuals in each occupation.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job": 0.4,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY city": 0.3,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY gender": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY city, gender": 0.1
        }
    },
    {
        "record_name": "2459",
        "db_id": "network_2",
        "target": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "nlq": "Present a bar graph illustrating the average age of individuals in each occupation.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job": 0.4,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY city": 0.3,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY gender": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY name": 0.1
        }
    },
    {
        "record_name": "2459",
        "db_id": "network_2",
        "target": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "nlq": "Display the average age of individuals for each occupation in a bar chart, please.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job": 0.3,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job WHERE age > 0": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC": 0.3,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job HAVING avg(age) > 30": 0.2
        }
    },
    {
        "record_name": "2459",
        "db_id": "network_2",
        "target": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "nlq": "Bar chart with the x-axis representing occupations and the y-axis displaying the average age.",
        "predict_rag_nlq": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "rag_dvqs": [
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY job DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job ORDER BY avg(age) DESC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , min(age) FROM Person GROUP BY job ORDER BY job ASC",
            "Visualize BAR SELECT job , avg(age) FROM Person WHERE gender = 'male' GROUP BY job ORDER BY job DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_debugged_db_ann": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job",
        "predict_dvq_set": {
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job": 0.4,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY city": 0.3,
            "Visualize BAR SELECT gender , avg(age) FROM Person GROUP BY gender": 0.2,
            "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY gender": 0.1
        }
    },
    {
        "record_name": "2387@y_name@ASC",
        "db_id": "movie_1",
        "target": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "nlq": "Please create a bar chart where the X-axis represents the director and the Y-axis represents their lowest rating among all movies. Please arrange the bars in ascending order based on the Y-axis values.",
        "predict_rag_nlq": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC",
            "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(stars) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY MIN(stars) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY MIN(stars) ASC": 0.4,
            "Visualize BAR SELECT director , MIN(rating) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY MIN(rating) ASC": 0.3,
            "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY MIN(stars) DESC": 0.2,
            "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC": 0.1
        }
    },
    {
        "record_name": "2387@y_name@ASC",
        "db_id": "movie_1",
        "target": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "nlq": "Display the director and their minimum rating among all movies in a bar chart, arranged in ascending order based on the number of stars, please.",
        "predict_rag_nlq": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC",
            "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(stars) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY MIN(stars) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY MIN(stars) ASC": 0.4,
            "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY MIN(stars) DESC": 0.3,
            "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC": 0.2,
            "Visualize BAR SELECT director , MIN(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC": 0.1
        }
    },
    {
        "record_name": "2387@y_name@ASC",
        "db_id": "movie_1",
        "target": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "nlq": "Compare the minimum rating among all films by each director using a bar graph, and could you list the Y-axis in ascending order, please?",
        "predict_rag_nlq": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC",
            "Visualize BAR SELECT title , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(stars) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(stars) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(stars) ASC": 0.4,
            "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(stars) DESC": 0.3,
            "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC": 0.2,
            "Visualize BAR SELECT director , min(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director DESC": 0.1
        }
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees whose salary falls between 8000 and 12000, and have a non-null commission or a department number other than 40, find the job_id and the average employee_id. Group them by the job_id attribute, and represent them visually in a bar chart. Could you display the X-axis in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.6,
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.1
        }
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees with salaries ranging from 8000 to 12000, who either have a non-null commission or are not in department number 40, create a bar chart depicting the distribution of job IDs and the average employee ID, grouped by the job ID attribute. Please display the job IDs on the X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.6,
            "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2,
            "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2
        }
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees whose salary falls between 8000 and 12000, and either have a non-null commission or are not in department number 40, generate a bar chart depicting the distribution of job ID and the average employee ID. Group the data by the job ID attribute and list it on the X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2
        }
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For the employees whose salary falls between 8000 and 12000, and either have a non-null commission or belong to a department other than 40, create a bar chart illustrating the distribution of job_ids along with the average employee_id, grouping them by the job_id attribute. Display the X-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2
        }
    },
    {
        "record_name": "1601@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees with a salary ranging from 8000 to 12000, and a non-null commission or a department number that is not equal to 40, please provide a bar chart illustrating the distribution of job_ids and the average employee_ids, grouped by job_id attribute. Please rank the X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.7,
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2,
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.1
        }
    },
    {
        "record_name": "2862@x_name@DESC",
        "db_id": "store_product",
        "target": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
        "nlq": "Find all categories of stores and their respective quantities, and visualize them using a bar chart. Could you please sort the X-axis in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY Type DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY Type DESC": 0.3,
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY Type ASC": 0.3
        }
    },
    {
        "record_name": "2862@x_name@DESC",
        "db_id": "store_product",
        "target": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
        "nlq": "In the bar chart, the X-axis represents the type of x, and the Y-axis represents the total number. Please order the names in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY COUNT(*) DESC": 0.5,
            "Visualize BAR SELECT Store_Name , COUNT(*) FROM store GROUP BY Store_Name ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT District_name , COUNT(*) FROM store_district GROUP BY District_name ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "2862@x_name@DESC",
        "db_id": "store_product",
        "target": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
        "nlq": "Plot the number of stores for each store type in a bar chart, and display them in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY Type DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY Type DESC": 0.3,
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Type , COUNT(*) FROM store GROUP BY Type ORDER BY Type ASC": 0.3
        }
    },
    {
        "record_name": "659",
        "db_id": "college_3",
        "target": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "nlq": "A bar graph illustrating the count of last names of female students, organized in descending order based on their age, please.",
        "predict_rag_nlq": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC": 0.5,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age ASC": 0.3,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age": 0.2
        }
    },
    {
        "record_name": "659",
        "db_id": "college_3",
        "target": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "nlq": "Retrieve the count of female (sex=F) students' last names in descending order of age.",
        "predict_rag_nlq": "Visualize BAR SELECT LName, COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_dvq_set": {
            "BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC": 0.6,
            "BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age ASC": 0.2,
            "BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age": 0.1,
            "BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC LIMIT 10": 0.1
        }
    },
    {
        "record_name": "659",
        "db_id": "college_3",
        "target": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "nlq": "Identify the surnames of female (sex=F) students, sorted in descending order by age, and represent the count using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC": 0.6,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age ASC": 0.2,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC LIMIT 10": 0.1,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC LIMIT 5": 0.1
        }
    },
    {
        "record_name": "659",
        "db_id": "college_3",
        "target": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "nlq": "What are the surnames of female students, sorted by age in descending order, and represent them using a bar chart to count their occurrences.",
        "predict_rag_nlq": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC": 0.5,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age ASC": 0.3,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC LIMIT 10": 0.2
        }
    },
    {
        "record_name": "659",
        "db_id": "college_3",
        "target": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "nlq": "A stacked bar chart to determine the count of last names of female (sex is F) students, arranged in descending order by age.",
        "predict_rag_nlq": "Visualize BAR SELECT LName, COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY AVG(Age) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC": 0.6,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age ASC": 0.2,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age": 0.1,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC LIMIT 10": 0.1
        }
    },
    {
        "record_name": "659",
        "db_id": "college_3",
        "target": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
        "nlq": "What is the count of surnames of female students, arranged in descending order by age?",
        "predict_rag_nlq": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) DESC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY COUNT(LName) ASC",
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName DESC",
            "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , COUNT(Fname) FROM Student WHERE Sex = 'F' GROUP BY Fname ORDER BY COUNT(Fname) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age DESC": 0.4,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age ASC": 0.3,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'M' GROUP BY LName ORDER BY Age DESC": 0.2,
            "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY Age": 0.1
        }
    },
    {
        "record_name": "437@y_name@DESC",
        "db_id": "chinook_1",
        "target": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "nlq": "Create a bar chart depicting the first names and support representative IDs of employees who serve 10 or more customers, and list the total numbers in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC": 0.4,
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.SupportRepId >= 10 ORDER BY T1.FirstName DESC": 0.3,
            "Visualize BAR SELECT T2.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC": 0.2,
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.FirstName HAVING COUNT(T1.CustomerId) >= 10 ORDER BY T1.FirstName DESC": 0.1
        }
    },
    {
        "record_name": "437@y_name@DESC",
        "db_id": "chinook_1",
        "target": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "nlq": "Display a bar graph depicting the first names and support rep IDs of employees who have served 10 or more customers. Please arrange them on the Y-axis in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC": 0.4,
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.CustomerId >= 10 ORDER BY T1.SupportRepId DESC": 0.3,
            "Visualize BAR SELECT T2.FirstName , T2.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC": 0.2,
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC": 0.1
        }
    },
    {
        "record_name": "437@y_name@DESC",
        "db_id": "chinook_1",
        "target": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "nlq": "What are the given names and support representative IDs for employees assisting 10 or more clients, and could you please provide a list in descending order of the total number?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC": 0.5,
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T2.EmployeeId IN (SELECT SupportRepId FROM Customer GROUP BY SupportRepId HAVING COUNT(CustomerId) >= 10) ORDER BY T1.SupportRepId DESC": 0.3,
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T2.EmployeeId IN (SELECT SupportRepId FROM Customer GROUP BY SupportRepId HAVING COUNT(CustomerId) >= 10) ORDER BY COUNT(T1.SupportRepId) DESC": 0.2
        }
    },
    {
        "record_name": "2831@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "nlq": "Enumerate the quantity of services by service type, and present the Y-axis in ascending order from least to greatest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "predict_dvq_set": {
            "BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC": 0.4,
            "BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC": 0.3,
            "BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC": 0.2,
            "BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC": 0.1
        }
    },
    {
        "record_name": "2831@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "nlq": "Provide me with a bar graph illustrating the quantity of services for each service category, with the y-axis arranged in ascending order from least to greatest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC": 0.4,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC": 0.3,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC": 0.2,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC": 0.1
        }
    },
    {
        "record_name": "2831@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "nlq": "Compare the quantity of services categorized by service type using a bar chart, with the Y-axis arranged in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC": 0.4,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC": 0.3,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC": 0.2,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC": 0.1
        }
    },
    {
        "record_name": "2831@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "nlq": "A bar graph illustrating the types of services and the corresponding quantity of services provided by all stations, arranged in ascending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC": 0.5,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC": 0.3,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC": 0.2
        }
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "Create a bar graph illustrating the distribution of hire dates and the average bin of employee IDs based on hire date for employees who have no prior job history. Sort the total number in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who have no prior job experience, retrieve their hire dates and calculate the average of employee ID groups based on their hire dates over time. Visualize this data with a bar chart, with the y-axis displayed in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who had no previous employment, create a bar chart depicting the distribution of hire dates and the average number of employee IDs binned by hire date over time. List the values on the Y-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who have no prior job experience, create a bar chart that illustrates the distribution of hire dates and the average of employee ID bins based on hire dates over time. Please arrange the Y-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY YEAR": 0.2
        }
    },
    {
        "record_name": "1713@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who have no prior job history, present the distribution of hire dates and the average of employee IDs binned by hire date over time in a bar graph, sorted from lowest to highest on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY YEAR": 0.2
        }
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, please present the distribution and quantity of product names using a bar chart. Group the data by the attribute name and sort the y-axis in ascending order from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC": 0.6,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name ASC": 0.1
        }
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For the data pertaining to the products and their respective manufacturers, provide a comparison of the quantity of names against the names themselves. Group the data by attribute name and rank the Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC": 0.5,
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.3,
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC": 0.2
        }
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For the records pertaining to products and their respective manufacturers, create a bar chart illustrating the distribution and quantity of product names. Please group the data by the name attribute and rank the y-axis from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC": 0.6,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC": 0.3,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name ASC": 0.1
        }
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For the records of products and their respective manufacturers, create a bar chart illustrating the distribution of names and the quantity of names. Group them according to the attribute name, and could you please order them in ascending order by the y-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC": 0.5,
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name ASC": 0.3,
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.2
        }
    },
    {
        "record_name": "2204@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
        "nlq": "For the records pertaining to products and their respective manufacturers, retrieve the names of the products and the count of occurrences for each name. Group the data by the attribute name and present it visually using a bar chart. Please ensure that the bars are ranked in ascending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name ASC",
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer = T2.code GROUP BY T2.name ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) ASC": 0.6,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY COUNT(T1.Name) DESC": 0.2,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name ASC": 0.1,
            "Visualize BAR SELECT T1.Name , COUNT(T1.Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC": 0.1
        }
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Display the names and average grades of each high school student using a bar chart, and I would like the bars to be ranked in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC": 0.5,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC": 0.3,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC": 0.2
        }
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Display the names and average grades of each high school student, and arrange them in descending order based on the bar.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC": 0.5,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC": 0.3,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC": 0.2
        }
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Bar chart illustrating the average grade by different titles, and can you arrange them in descending order according to the names, please?",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC": 0.5,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC": 0.3,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC": 0.2
        }
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Create a bar graph representing the names and average grades of each high school student, and arrange the bars in descending order for ranking.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC": 0.5,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC": 0.2,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC": 0.1,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC": 0.2
        }
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "What are the identities and mean scores for each secondary school student? Plot them as a bar graph, arranging them in descending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT ID , AVG(grade) FROM Highschooler GROUP BY ID ORDER BY ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ID , AVG(grade) FROM Highschooler GROUP BY ID ORDER BY ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ID , AVG(grade) FROM Highschooler GROUP BY ID ORDER BY ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ID , AVG(grade) FROM Highschooler GROUP BY ID ORDER BY ID DESC": 0.5,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC": 0.3,
            "Visualize BAR SELECT ID , AVG(grade) FROM Highschooler GROUP BY ID ORDER BY AVG(grade) DESC": 0.2
        }
    },
    {
        "record_name": "2453@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "nlq": "Present a bar chart representing the names of high school students and their respective average grades, and sort the X-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC": 0.5,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) DESC": 0.3,
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY AVG(grade) ASC": 0.2
        }
    },
    {
        "record_name": "2574",
        "db_id": "phone_market",
        "target": "Visualize PIE SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
        "nlq": "For every phone, display its names and the overall quantity of stocks.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY sum(T1.Num_of_stock) ASC",
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name ORDER BY sum(T1.Num_of_stock) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , SUM(Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name": 0.5,
            "Visualize BAR SELECT Name , COUNT(Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name": 0.3,
            "Visualize BAR SELECT Name , AVG(Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name": 0.2
        }
    },
    {
        "record_name": "3066@y_name@ASC",
        "db_id": "twitter_1",
        "target": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
        "nlq": "Find the names and partition IDs of users who have tweeted fewer than twice. Display the data in a bar chart and sort it in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY name ASC",
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid DESC",
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY name DESC",
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY name ASC",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY name DESC",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T2.uid"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY T1.partitionid ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY T1.partitionid ASC": 0.3,
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid WHERE COUNT(T2.id) < 2 ORDER BY T1.partitionid ASC": 0.4,
            "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid GROUP BY T1.name, T1.partitionid HAVING COUNT(T2.id) < 2 ORDER BY T1.partitionid ASC": 0.3
        }
    },
    {
        "record_name": "2446@x_name@DESC",
        "db_id": "musical",
        "target": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "nlq": "Show the quantity of musical nominees for the \"Bob Fosse\" or \"Cleavant Derricks\" awards, and sort the x-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.6,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" AND Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.3,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC": 0.1
        }
    },
    {
        "record_name": "2446@x_name@DESC",
        "db_id": "musical",
        "target": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "nlq": "A bar chart displaying the quantity of musical nominees with the \"Bob Fosse\" or \"Cleavant Derricks\" award, with the x-axis arranged in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.4,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.3,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" AND Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.2,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award IN (\"Bob Fosse\", \"Cleavant Derricks\") GROUP BY Nominee ORDER BY Nominee DESC": 0.1
        }
    },
    {
        "record_name": "2446@x_name@DESC",
        "db_id": "musical",
        "target": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "nlq": "Display a bar chart depicting the count of musical nominees for the \"Bob Fosse\" and \"Cleavant Derricks\" awards, and kindly list them in descending order by the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.4,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.3,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" AND Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.2,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC": 0.1
        }
    },
    {
        "record_name": "2446@x_name@DESC",
        "db_id": "musical",
        "target": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "nlq": "Who are the individuals nominated for either the Bob Fosse or Cleavant Derricks awards, and represent their count with a bar chart, with the x-axis displayed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) DESC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY COUNT(Nominee) ASC",
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY Nominee DESC",
            "Visualize BAR SELECT Nominee , COUNT(*) FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.6,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Bob Fosse\" AND Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC": 0.2,
            "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award IN (\"Bob Fosse\", \"Cleavant Derricks\") GROUP BY Nominee ORDER BY Nominee DESC": 0.2
        }
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For the employees whose salary falls within the range of 8000 to 12000 and have a non-null commission or do not belong to department number 40, please present a bar chart that illustrates the distribution of hire dates and the average of manager IDs grouped by hire date. Arrange the chart from lowest to highest on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or do not belong to department number 40, please create a bar chart displaying the distribution of hire_date. Bin the hire_date by time intervals and calculate the average of manager_id within each bin. The bars should be ordered in ascending order based on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or do not have a department number of 40, please provide a comparison of the average manager_id over the hire_date bins. Arrange the data on the y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees whose salary falls between 8000 and 12000 and have a non-null commission or a department number other than 40, create a bar chart illustrating the distribution of hire dates and the average of manager IDs grouped by hire date over time, ordered in ascending order by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1587@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "nlq": "For the employees whose salary falls within the range of 8000 and 12000, and whose commission is not null or department number is not equal to 40, provide a comparison of the average manager_id by the hire_date bin over time using a bar chart. Please list the results in ascending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH ORDER BY AVG(MANAGER_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40 ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "920",
        "db_id": "customers_and_addresses",
        "target": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR",
        "nlq": "Find the count of customers who utilize email as their contact channel for each year. Represent this information using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers JOIN customer_contact_channels ON customers.customer_id = customer_contact_channels.customer_id WHERE customer_contact_channels.channel_code = 'Email' BIN active_from_date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM Customers JOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' BIN active_from_date BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM Customers JOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' BIN active_from_date BY YEAR": 0.6,
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM Customers JOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' BIN active_from_date BY MONTH": 0.2,
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM Customers JOIN Customer_Contact_Channels ON Customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' BIN active_from_date BY QUARTER": 0.2
        }
    },
    {
        "record_name": "920",
        "db_id": "customers_and_addresses",
        "target": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR",
        "nlq": "Provide a bar chart illustrating the quantity of customers with an email contact channel code for each year.",
        "predict_rag_nlq": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY YEAR",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) ASC BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' GROUP BY customer_name BIN active_from_date BY WEEKDAY",
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' ORDER BY COUNT(active_from_date) DESC BIN active_from_date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers JOIN customer_contact_channels ON customers.customer_id = customer_contact_channels.customer_id WHERE customer_contact_channels.channel_code = 'Email' BIN active_from_date BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers JOIN Customer_Contact_Channels ON customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' BIN active_from_date BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers JOIN Customer_Contact_Channels ON customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' BIN active_from_date BY YEAR": 0.6,
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers JOIN Customer_Contact_Channels ON customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' BIN active_from_date BY MONTH": 0.2,
            "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers JOIN Customer_Contact_Channels ON customers.customer_id = Customer_Contact_Channels.customer_id WHERE Customer_Contact_Channels.channel_code = 'Email' BIN active_from_date BY QUARTER": 0.2
        }
    },
    {
        "record_name": "3236@x_name@ASC",
        "db_id": "wine_1",
        "target": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "nlq": "Compare the quantity of wineries for wines with a price higher than 100, and could you please arrange the bars in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC": 0.4,
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC": 0.3,
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC": 0.2,
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC": 0.1
        }
    },
    {
        "record_name": "3236@x_name@ASC",
        "db_id": "wine_1",
        "target": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "nlq": "Display the quantity of wineries for wines with a price greater than 100 in a bar graph, ranked from least to greatest by the names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC": 0.6,
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC": 0.2,
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC": 0.1,
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC": 0.1
        }
    },
    {
        "record_name": "3236@x_name@ASC",
        "db_id": "wine_1",
        "target": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "nlq": "Create a bar chart illustrating the quantity of wineries for wines priced higher than 100, and arrange the X-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY Winery DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) ASC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery ORDER BY COUNT(Winery) DESC",
            "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Winery"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
        "predict_dvq_set": {
            "SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC": 0.6,
            "SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY Winery DESC": 0.2,
            "SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) ASC": 0.1,
            "SELECT Winery , COUNT(Winery) FROM wine WHERE Price > 100 GROUP BY Winery ORDER BY COUNT(Winery) DESC": 0.1
        }
    },
    {
        "record_name": "459@y_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) DESC",
        "nlq": "For every entry in the schedule, present the total price for each day in a bar graph, and please list the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) DESC",
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) ASC",
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC",
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date ASC",
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date ASC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Date ORDER BY SUM(Price) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Date ORDER BY SUM(Price) DESC": 0.5,
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Date ORDER BY Date DESC": 0.3,
            "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Date ORDER BY Date ASC": 0.2
        }
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees who were hired prior to 2002-06-21, create a bar chart illustrating the distribution of job IDs and the average salary, grouped by the job ID attribute, with the X-axis listed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2
        }
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees hired prior to 2002-06-21, please provide a bar chart depicting the distribution of job IDs and the average salary. Group them by the job ID attribute and arrange them in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC": 0.2
        }
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees hired prior to 2002-06-21, generate a bar chart illustrating the distribution of job IDs and the average salary. Group the data by the job ID attribute and display it on the X-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC": 0.2
        }
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees who were hired prior to 2002-06-21, present a bar chart illustrating the distribution of job IDs and the average salary, grouped by the job ID attribute. Please ensure that the bars are ordered in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2
        }
    },
    {
        "record_name": "1777@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees hired before 2002-06-21, retrieve the job_id and average salary, and group them by the job_id attribute. Visualize this information in a bar chart, arranged in descending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.4,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC": 0.2,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.1
        }
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "nlq": "Provide me with a comparison of the total School_ID across all homes, grouped by the All_Home attribute, and displayed on the x-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.5,
            "Visualize BAR SELECT All_Home , COUNT(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.3,
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.2
        }
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "nlq": "Create a stacked bar chart illustrating the distribution of All_Home and the sum of School_ID, grouped by the All_Home attribute, and ordered in ascending order from lowest to highest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC": 0.5,
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.3,
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC": 0.2
        }
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "nlq": "Find the All_Home attribute and calculate the sum of School_ID. Group them based on the All_Home attribute and represent them visually using a bar chart. Please order them from low to high on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.4,
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.3,
            "Visualize BAR SELECT All_Home , COUNT(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.2,
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.1
        }
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "nlq": "Provide a bar chart illustrating the total number of school IDs for each respective household, and display the bars in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.5,
            "Visualize BAR SELECT All_Road , SUM(School_ID) FROM basketball_match GROUP BY All_Road ORDER BY All_Road ASC": 0.3,
            "Visualize BAR SELECT All_Games , SUM(School_ID) FROM basketball_match GROUP BY All_Games ORDER BY All_Games ASC": 0.2
        }
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "nlq": "Generate a bar graph illustrating the distribution of All_Home and the total number of School_ID, grouped by the All_Home attribute, and display the bars in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC": 0.5,
            "Visualize BAR SELECT All_Home , COUNT(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(School_ID) ASC": 0.3,
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY AVG(School_ID) ASC": 0.2
        }
    },
    {
        "record_name": "3104@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "nlq": "Present the distribution of All_Home and the total of School_ID, grouped by the All_Home attribute, in a bar chart. Please display the x-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(School_ID) DESC",
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home ORDER BY SUM(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.5,
            "Visualize BAR SELECT All_Home , COUNT(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.3,
            "Visualize BAR SELECT All_Home , AVG(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC": 0.2
        }
    },
    {
        "record_name": "413@y_name@DESC",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "nlq": "Create a bar chart representing the total average weight by grouping it by year, and arrange the bars in descending order along the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY Year ORDER BY avg(Weight) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year DESC",
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) ASC BIN Year BY WEEKDAY",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR ORDER BY Year ASC",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY Year DESC BIN Year BY YEAR",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA GROUP BY YEAR",
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY WEEKDAY",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY Year ASC BIN Year BY YEAR",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY YEAR",
            "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY": 0.6,
            "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY MONTH": 0.2,
            "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY QUARTER": 0.2
        }
    },
    {
        "record_name": "413@y_name@DESC",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "nlq": "Calculate the mean weight and classify the years into weekday intervals for a bar chart; sort in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM cars_data where weight between 3000 and 4000 BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM CARS_DATA  ORDER BY COUNT(Year) DESC BIN Year BY WEEKDAY",
            "Visualize BAR SELECT Year , COUNT(Year) FROM CARS_DATA  ORDER BY COUNT(Year) ASC BIN Year BY WEEKDAY",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY Year DESC BIN Year BY YEAR",
            "Visualize LINE SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY Year ASC BIN Year BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY": 0.4,
            "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY MONTH": 0.3,
            "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY QUARTER": 0.2,
            "Visualize BAR SELECT Year , avg(Weight) FROM cars_data ORDER BY avg(Weight) DESC BIN Year BY YEAR": 0.1
        }
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "nlq": "For employees who are not assigned to departments managed by managers with IDs between 100 and 200, create a bar chart illustrating the distribution of job IDs and manager IDs, sorted in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 200) ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY JOB_ID DESC": 0.2
        }
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "nlq": "For the employees who are not employed in departments with managers whose IDs fall between 100 and 200, please provide a bar chart illustrating the distribution of job IDs and manager IDs. Kindly sort the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC": 0.6,
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 200 OR MANAGER_ID < 100) ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY JOB_ID DESC": 0.1
        }
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "nlq": "For employees who are not working in departments where managers have IDs between 100 and 200, create a bar chart depicting the distribution of job IDs and manager IDs, listed in descending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY MANAGER_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC": 0.2
        }
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "nlq": "Provide a comparison of manager_ids over job_ids for employees who do not work in departments with manager_ids between 100 and 200. Please list them in descending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "predict_dvq_set": {
            "BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC": 0.4,
            "BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID > 100 AND MANAGER_ID < 200) ORDER BY MANAGER_ID DESC": 0.3,
            "BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY MANAGER_ID DESC": 0.2,
            "BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC": 0.1
        }
    },
    {
        "record_name": "1688@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
        "nlq": "For employees who are not employed in departments where the manager's ID falls between 100 and 200, I would like to see a bar chart illustrating the distribution of job ID and manager ID. Additionally, please display the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID ASC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY EMPLOYEE_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY DEPARTMENT_ID DESC",
            "Visualize BAR SELECT JOB_ID , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , EMPLOYEE_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY JOB_ID DESC": 0.2
        }
    },
    {
        "record_name": "1953",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
        "nlq": "When were the employees without the letter M in their first names hired? Please represent this data with a bar chart showing the count.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME NOT LIKE '%M%' AND HIRE_DATE IS NOT NULL BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME NOT LIKE '%M%' AND HIRE_DATE IS NOT NULL GROUP BY HIRE_DATE BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "1953",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH",
        "nlq": "On which dates were employees with first names lacking the letter \"M\" hired, and represent the count using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY": 0.5,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME NOT LIKE '%M%' GROUP BY HIRE_DATE": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME NOT LIKE '%M%' BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "nlq": "Visualize a bar chart illustrating the distribution of Team_Name and School_ID, and display it in descending order according to the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC": 0.4,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC": 0.3,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC": 0.2,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC": 0.1
        }
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "nlq": "Display a bar chart with the team names on the X-axis and the school IDs on the Y-axis, sorted in descending order along the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC": 0.4,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC": 0.3,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC": 0.2,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC": 0.1
        }
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "nlq": "Provide me with a comparison of School_ID across Team_Name, sorted by the total number in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC": 0.3,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC": 0.2,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY All_Games DESC": 0.2,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY All_Games_Percent DESC": 0.3
        }
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "nlq": "A bar chart displays the distribution of Team_Name and School_ID, and ranks the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC": 0.6,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC": 0.2,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY All_Games DESC": 0.1,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.1
        }
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "nlq": "Present the distribution of Team_Name and School_ID in a bar chart, with the Y-axis arranged in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC": 0.4,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC": 0.3,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC": 0.2,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC": 0.1
        }
    },
    {
        "record_name": "3111@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "nlq": "Generate a bar graph illustrating the distribution of Team_Name and School_ID, with the Y-axis listed in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name DESC",
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match ORDER BY Team_Name ASC",
            "Visualize BAR SELECT All_Road , School_ID FROM basketball_match ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC": 0.4,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name DESC": 0.3,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY Team_Name ASC": 0.2,
            "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID ASC": 0.1
        }
    },
    {
        "record_name": "1091",
        "db_id": "decoration_competition",
        "target": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "nlq": "Display the distinct nations and the count of individuals from each country using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(Member_ID) FROM member GROUP BY Country": 0.2,
            "Visualize BAR SELECT Country , COUNT(Name) FROM member GROUP BY Country": 0.2,
            "Visualize BAR SELECT Country , COUNT(DISTINCT Member_ID) FROM member GROUP BY Country": 0.3
        }
    },
    {
        "record_name": "1091",
        "db_id": "decoration_competition",
        "target": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "nlq": "Display the various nations and the quantity of members from each country. Visualize this information using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country": 0.4,
            "Visualize BAR SELECT Country , COUNT(Member_ID) FROM member GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(Name) FROM member GROUP BY Country": 0.2,
            "Visualize BAR SELECT Country , COUNT(DISTINCT Member_ID) FROM member GROUP BY Country": 0.1
        }
    },
    {
        "record_name": "1091",
        "db_id": "decoration_competition",
        "target": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "nlq": "Illustrate the cumulative count categorized by nation in the form of a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM member GROUP BY Country ORDER BY COUNT(Country) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT COUNTRY , COUNT(*) FROM member GROUP BY COUNTRY",
        "predict_dvq_set": {
            "Visualize BAR SELECT COUNTRY , COUNT(*) FROM member GROUP BY COUNTRY": 0.4,
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "2096@x_name@ASC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "nlq": "What is the distribution of customer movement dates? Please display a bar chart showing the proportion of each customer's move, with the X-axis sorted in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC": 0.6,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC": 0.3,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC": 0.1
        }
    },
    {
        "record_name": "2096@x_name@ASC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
        "nlq": "Please utilize a bar chart to compare the number of customers based on their move-in dates, and arrange the bars in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY WEEKDAY",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC": 0.6,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC": 0.3,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC": 0.1
        }
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "nlq": "Create a pie chart illustrating the distribution of All_Home and the corresponding quantity of All_Home.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_dvq_set": {
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home": 0.5,
            "Visualize PIE SELECT All_Games , COUNT(All_Games) FROM basketball_match GROUP BY All_Games": 0.2,
            "Visualize PIE SELECT All_Road , COUNT(All_Road) FROM basketball_match GROUP BY All_Road": 0.2,
            "Visualize PIE SELECT All_Neutral , COUNT(All_Neutral) FROM basketball_match GROUP BY All_Neutral": 0.1
        }
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "nlq": "Provide me with a pie chart illustrating the distribution of All_Home and the corresponding quantity of All_Home.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_dvq_set": {
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home": 0.5,
            "Visualize PIE SELECT All_Games , COUNT(All_Home) FROM basketball_match GROUP BY All_Home": 0.2,
            "Visualize PIE SELECT All_Home , COUNT(All_Games) FROM basketball_match GROUP BY All_Home": 0.3
        }
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "nlq": "Present the ratio between the quantity of All_Home and the quantity of All_Home in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , All_Home FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Games , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Road , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , All_Home FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT All_Home , All_Home FROM basketball_match",
        "predict_dvq_set": {
            "Visualize PIE SELECT All_Home , All_Home FROM basketball_match": 0.4,
            "Visualize PIE SELECT All_Home , All_Road FROM basketball_match": 0.3,
            "Visualize PIE SELECT All_Home , All_Neutral FROM basketball_match": 0.2,
            "Visualize PIE SELECT All_Home , All_Games FROM basketball_match": 0.1
        }
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "nlq": "Create a pie chart illustrating the distribution of All_Home and the corresponding quantity of All_Home.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_dvq_set": {
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home": 0.4,
            "Visualize PIE SELECT All_Games , COUNT(All_Home) FROM basketball_match GROUP BY All_Home": 0.3,
            "Visualize PIE SELECT All_Home , COUNT(All_Games) FROM basketball_match GROUP BY All_Home": 0.2,
            "Visualize PIE SELECT All_Home , SUM(All_Home) FROM basketball_match GROUP BY All_Home": 0.1
        }
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "nlq": "For the characteristic \"All_Home\" and the quantity of \"All_Home\", illustrate their respective proportions using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_dvq_set": {
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home": 0.5,
            "Visualize PIE SELECT All_Games , COUNT(All_Home) FROM basketball_match GROUP BY All_Home": 0.3,
            "Visualize PIE SELECT All_Home , COUNT(All_Games) FROM basketball_match GROUP BY All_Home": 0.2
        }
    },
    {
        "record_name": "3159",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "nlq": "Provide me with a pie chart displaying the distribution of the total number of homes across different categories of homes.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(Team_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize PIE SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) ASC",
            "Visualize PIE SELECT Home_team , COUNT(Home_team) FROM game GROUP BY Home_team",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home ORDER BY COUNT(All_Home) DESC",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_debugged_db_ann": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
        "predict_dvq_set": {
            "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home": 0.4,
            "Visualize PIE SELECT All_Road , COUNT(All_Road) FROM basketball_match GROUP BY All_Road": 0.3,
            "Visualize PIE SELECT ACC_Home , COUNT(ACC_Home) FROM basketball_match GROUP BY ACC_Home": 0.2,
            "Visualize PIE SELECT ACC_Road , COUNT(ACC_Road) FROM basketball_match GROUP BY ACC_Road": 0.1
        }
    },
    {
        "record_name": "2830@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "nlq": "Enumerate the quantity of local authorities based on the respective local authority, and organize the Y-axis in ascending order from least to greatest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY COUNT(LOCAL_AUTHORITY) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY COUNT(LOCAL_AUTHORITY) ASC": 0.5,
            "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY COUNT(LOCAL_AUTHORITY) DESC": 0.3,
            "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY LOCAL_AUTHORITY ASC": 0.2
        }
    },
    {
        "record_name": "2830@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "nlq": "A bar chart showcasing the different local authorities and the number of local authorities offered by each station, arranged in ascending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY LOCAL_AUTHORITY ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY LOCAL_AUTHORITY ASC": 0.4,
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC": 0.3,
            "Visualize BAR SELECT local_authority , COUNT(*) FROM station GROUP BY local_authority ORDER BY local_authority ASC": 0.2,
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASCENDING": 0.1
        }
    },
    {
        "record_name": "2830@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "nlq": "Bar chart displaying the quantity of local authorities from each respective local authority, arranged in ascending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY COUNT(LOCAL_AUTHORITY) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY COUNT(LOCAL_AUTHORITY) ASC": 0.4,
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC": 0.1,
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC": 0.2
        }
    },
    {
        "record_name": "2830@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "nlq": "Compare the quantity of local authorities by each individual local authority, and could you display it based on the total number in ascending order, please?",
        "predict_rag_nlq": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY COUNT(local_authority) DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority ASC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority ORDER BY local_authority DESC",
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY services ,  local_authority"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY COUNT(LOCAL_AUTHORITY) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(LOCAL_AUTHORITY) FROM station GROUP BY LOCAL_AUTHORITY ORDER BY COUNT(LOCAL_AUTHORITY) ASC": 0.5,
            "Visualize BAR SELECT LOCAL_AUTHORITY , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC": 0.3,
            "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC": 0.2
        }
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "A line chart depicting the fluctuation of the total number of Employee_IDs over the Start_from bin start_from by time, with the X-axis sorted in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR ORDER BY Start_from ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.4,
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY MONTH": 0.3,
            "LINE SELECT Start_from , COUNT(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.2,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.1
        }
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "Provide a line graph illustrating the progression of the cumulative sum of Employee_ID over different starting points in the \"start_from\" bin, organized in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR": 0.4,
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY MONTH": 0.3,
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY QUARTER": 0.2,
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY DAY": 0.1
        }
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "Create a line graph illustrating the fluctuation of the cumulative count of Employee_ID over different bins of start_from, sorted in ascending order along the x-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.3,
            "Visualize LINE SELECT Start_from , COUNT(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY MONTH": 0.2,
            "Visualize LINE SELECT Start_from , COUNT(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY QUARTER": 0.3,
            "Visualize LINE SELECT Start_from , COUNT(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY DAY": 0.2
        }
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "Create a line chart illustrating the variation in the total count of Employee_ID across different time intervals of Start_from, and arrange the display in ascending order based on the x-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , COUNT(Employee_ID) FROM hiring ORDER BY Start_from ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC",
            "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from DESC",
            "Visualize LINE SELECT Start_from , Employee_ID FROM hiring",
            "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring ORDER BY Start_from ASC",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring ORDER BY Start_from ASC",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , COUNT(Start_from) FROM hiring ORDER BY Start_from ASC": 0.5,
            "Visualize LINE SELECT Year_awarded , COUNT(Employee_ID) FROM hiring ORDER BY Year_awarded ASC": 0.3,
            "Visualize LINE SELECT Start_from , COUNT(Employee_ID) FROM hiring ORDER BY Start_from ASC": 0.2
        }
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "A line graph displays the trend of the cumulative sum of Employee_ID over the Start_from bin, sorted on the x-axis in ascending order from low to high.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR ORDER BY Start_from ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.5,
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.3,
            "LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY MONTH": 0.2
        }
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "Display the variation in the total sum of Employee_ID over different Start_from bins, categorized by time, in a line chart. Please sort the Start_from bins in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Start_from ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.3,
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY MONTH": 0.2,
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY QUARTER": 0.2,
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY DAY": 0.1,
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY WEEK": 0.2
        }
    },
    {
        "record_name": "1360@x_name@ASC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "nlq": "I would like to observe the trend of the total employee IDs based on their start dates, listed in ascending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from ASC",
            "Visualize LINE SELECT Start_from , Employee_ID FROM hiring ORDER BY Start_from DESC",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , Employee_ID FROM hiring",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.3,
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.2,
            "Visualize LINE SELECT Start_from , COUNT(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.3,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.2
        }
    },
    {
        "record_name": "2087@y_name@ASC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "nlq": "Compare the quantity of items in each category using a bar chart, and list them in ascending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT category_id , COUNT(category_id) FROM film_category GROUP BY category_id ORDER BY COUNT(category_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id ASC",
            "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.organization_details , COUNT(*) FROM Services AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_id ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.organization_details , COUNT(*) FROM Services AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_id ORDER BY COUNT(*) ASC": 0.5,
            "Visualize BAR SELECT T2.organization_details , COUNT(*) FROM Services AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY T1.organization_id ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT T2.organization_details , COUNT(*) FROM Services AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_details ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "2087@y_name@ASC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "nlq": "Display the quantity of thing codes for each type of thing code, and I would like the Y-axis to be ranked in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC",
            "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY organization_details ,  Type_of_Thing_Code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
        "predict_dvq_set": {
            "BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC": 0.6,
            "BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) DESC": 0.2,
            "BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code ASC": 0.1,
            "BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY Type_of_Thing_Code DESC": 0.1
        }
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "nlq": "Provide a bar chart illustrating the distribution of All_Home and School_ID, grouped by the ACC_Home attribute, with the X-axis sorted in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC": 0.5,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , School_ID ORDER BY ALL_HOME DESC": 0.3,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , School_ID ORDER BY School_ID DESC": 0.2
        }
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "nlq": "Create a bar chart illustrating the distribution of All_Home and School_ID, grouped by the ACC_Home attribute, and arrange the bars in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC": 0.5,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , School_ID ORDER BY All_Home DESC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , School_ID ORDER BY All_Home ASC": 0.2
        }
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "nlq": "Illustrate the distribution of All_Home and School_ID, grouped by the ACC_Home attribute, in a bar chart, and kindly arrange the bars in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC": 0.5,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.2
        }
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "nlq": "A stacked bar chart displays the distribution of All_Home and School_ID, grouped by the attribute ACC_Home, and the X-axis is sorted in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC": 0.5,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ACC_HOME DESC": 0.3,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY School_ID DESC": 0.2
        }
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "nlq": "Stacked bar chart comparing school IDs to ACC_Home based on all homes, and list the bars from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC": 0.5,
            "Visualize BAR SELECT ACC_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.2
        }
    },
    {
        "record_name": "3093@x_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "nlq": "Retrieve the All_Home and School_ID attributes, group them by the ACC_Home attribute, and represent them visually using a bar chart. Please ensure that the X-axis is sorted in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC": 0.6,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ACC_HOME DESC": 0.2,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY School_ID DESC": 0.1,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY School_ID ASC": 0.1
        }
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Create a bar chart illustrating the distribution of All_Home and Team_ID, grouped by the attribute ACC_Home, and please rank All_Home in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC": 0.5,
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , Team_ID ORDER BY All_Home ASC": 0.3,
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY Team_ID ASC": 0.2
        }
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Retrieve the values of All_Home and Team_ID, group them by the attribute ACC_Home, and represent them using a bar chart. Arrange the bars in ascending order based on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME ASC": 0.4,
            "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ACC_HOME ASC": 0.3,
            "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ACC_HOME DESC": 0.2,
            "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC": 0.1
        }
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Display the distribution of All_Home and Team_ID, grouped by the ACC_Home attribute, in a bar chart, with the x-axis ranked in ascending order from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC": 0.4,
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , Team_ID ORDER BY All_Home ASC": 0.3,
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home ASC": 0.2,
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.1
        }
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Provide a comparison of Team_ID based on the All_Home attribute, and group the results by the ACC_Home attribute using a bar chart, arranging them in ascending order according to the All_Home values.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC": 0.5,
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home ASC": 0.3,
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.2
        }
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Stacked bar chart comparing team_id and ACC_Home based on all home locations, and arrange them in ascending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME ASC": 0.6,
            "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ACC_HOME ASC": 0.2,
            "Visualize BAR SELECT ALL_HOME , Team_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY Team_ID ASC": 0.2
        }
    },
    {
        "record_name": "3092@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "nlq": "Provide me with a comparison of Team_ID across All_Home, grouped by the attribute ACC_Home, and I would like the All_Home values to be ranked in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY Team_ID DESC",
            "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , TEAM_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , TEAM_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME ASC": 0.4,
            "Visualize BAR SELECT ALL_HOME , TEAM_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC": 0.3,
            "Visualize BAR SELECT ALL_HOME , TEAM_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY TEAM_ID ASC": 0.2,
            "Visualize BAR SELECT ALL_HOME , TEAM_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY TEAM_ID DESC": 0.1
        }
    },
    {
        "record_name": "1746",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For those employees who have no previous job experience, create a line chart illustrating the salary changes over the hire_date.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )": 0.4,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) GROUP BY HIRE_DATE": 0.2,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) LIMIT 100": 0.1
        }
    },
    {
        "record_name": "1746",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For employees who have no job history, generate a line chart illustrating the salary changes over the hire date.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, SALARY FROM employees WHERE EMPLOYEE_ID NOT IN (SELECT EMPLOYEE_ID FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )": 0.4,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) ORDER BY HIRE_DATE ASC": 0.3,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) ORDER BY SALARY DESC": 0.2,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) GROUP BY HIRE_DATE": 0.1
        }
    },
    {
        "record_name": "1746",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For employees with no previous employment history, create a line chart illustrating the salary change over the hire date.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )": 0.5,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) ORDER BY HIRE_DATE ASC": 0.2,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) ORDER BY SALARY DESC": 0.3
        }
    },
    {
        "record_name": "1746",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For employees who have no prior job experience, please provide a line chart depicting the salary changes over their hire date.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )": 0.5,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) ORDER BY HIRE_DATE ASC": 0.2,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) GROUP BY HIRE_DATE": 0.1,
            "LINE SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) GROUP BY HIRE_DATE": 0.2
        }
    },
    {
        "record_name": "1746",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For employees with no prior job experience, please illustrate the trend of salary over hire_date using a line chart.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )": 0.4,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) ORDER BY HIRE_DATE": 0.3,
            "LINE SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) GROUP BY HIRE_DATE": 0.2,
            "LINE SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) GROUP BY HIRE_DATE": 0.1
        }
    },
    {
        "record_name": "1746",
        "db_id": "hr_1",
        "target": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "nlq": "For employees with no previous employment, provide me with the salary trend over their hire dates, please.",
        "predict_rag_nlq": "Visualize LINE SELECT HIRE_DATE, SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
        "rag_dvqs": [
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , MANAGER_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC",
            "Visualize LINE SELECT HIRE_DATE , EMPLOYEE_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE DESC",
            "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) ORDER BY HIRE_DATE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history )",
        "predict_debugged_db_ann": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )",
        "predict_dvq_set": {
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history )": 0.4,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) ORDER BY HIRE_DATE": 0.3,
            "LINE SELECT HIRE_DATE , SALARY FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) GROUP BY HIRE_DATE": 0.2,
            "LINE SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history ) GROUP BY HIRE_DATE": 0.1
        }
    },
    {
        "record_name": "2385",
        "db_id": "movie_1",
        "target": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
        "nlq": "Display the ratings of each director using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT director, AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
        "rag_dvqs": [
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize BAR SELECT title , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY title",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director ASC",
            "Visualize BAR SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
        "predict_dvq_set": {
            "Visualize BAR SELECT director , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director": 0.6,
            "Visualize BAR SELECT director , COUNT(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director": 0.2,
            "Visualize BAR SELECT director , SUM(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director": 0.1,
            "Visualize BAR SELECT director , MAX(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director": 0.1
        }
    },
    {
        "record_name": "2385",
        "db_id": "movie_1",
        "target": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
        "nlq": "Please provide a bar chart comparing the ratings by directors.",
        "predict_rag_nlq": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
        "rag_dvqs": [
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY director DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
        "predict_debugged_db_ann": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
        "predict_dvq_set": {
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID": 0.5,
            "Visualize BAR SELECT director , AVG(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director": 0.3,
            "Visualize BAR SELECT director , COUNT(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director": 0.2
        }
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Generate a bar chart depicting the frequency of different allergies among students, sorted in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType ASC": 0.5,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy ORDER BY Allergy ASC": 0.3,
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Display the cumulative count of each allergy, arranged in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC": 0.6,
            "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(Allergy) ASC": 0.2,
            "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy DESC": 0.1,
            "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(Allergy) DESC": 0.1
        }
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Display a bar chart illustrating all allergies along with the corresponding number of affected students, and please list them in ascending order along the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC": 0.6,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy DESC": 0.1
        }
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Display the number of students with each unique allergy in a bar chart, listing them in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC": 0.5,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "45@x_name@ASC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "nlq": "Display a bar chart presenting the allergies along with the corresponding number of students affected. Please arrange the chart in ascending order based on the X-axis, from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) ASC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC",
            "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY Allergy ASC": 0.6,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy GROUP BY Allergy ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "2345",
        "db_id": "mountain_photos",
        "target": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
        "nlq": "What is the correlation between the altitude and prominence of mountains that are not part of the 'Aberdare Range'? Please represent the results using a scatter chart.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range != 'Aberdare Range'": 0.6,
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range <> 'Aberdare Range'": 0.3,
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE Range NOT IN ('Aberdare Range')": 0.1
        }
    },
    {
        "record_name": "1969@y_name@DESC",
        "db_id": "inn_1",
        "target": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "nlq": "Provide me with a bar chart illustrating the average base price of each decoration, and please arrange the Y-axis in descending order, from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) ASC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC": 0.5,
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC": 0.3,
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC": 0.2
        }
    },
    {
        "record_name": "1969@y_name@DESC",
        "db_id": "inn_1",
        "target": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "nlq": "What is the mean price of the rooms for each distinct decor? Present me with a bar graph, and sort the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) ASC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC": 0.5,
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC": 0.3,
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC": 0.2
        }
    },
    {
        "record_name": "1969@y_name@DESC",
        "db_id": "inn_1",
        "target": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "nlq": "Display the mean price of the rooms in various interior designs using a bar graph, and please arrange the Y-axis in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) ASC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DECOR , avg(BASEPRICE) FROM Rooms GROUP BY DECOR ORDER BY avg(BASEPRICE) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DECOR , avg(BASEPRICE) FROM Rooms GROUP BY DECOR ORDER BY avg(BASEPRICE) DESC": 0.5,
            "Visualize BAR SELECT DECOR , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC": 0.3,
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC": 0.2
        }
    },
    {
        "record_name": "1969@y_name@DESC",
        "db_id": "inn_1",
        "target": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "nlq": "Please utilize a bar chart to demonstrate the mean cost of rooms with various decorations, and arrange the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY min(basePrice) ASC",
            "Visualize BAR SELECT decor , min(basePrice) FROM Rooms GROUP BY decor ORDER BY decor ASC",
            "Visualize BAR SELECT decor , count(*) FROM Rooms WHERE basePrice > 120 GROUP BY decor ORDER BY decor DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC": 0.6,
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) ASC": 0.2,
            "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY decor DESC": 0.2
        }
    },
    {
        "record_name": "3275",
        "db_id": "world_1",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "Retrieve the names of government forms and total population for each government form wherein the average life expectancy surpasses 72.",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.4,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.3,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY SUM(Population) ASC": 0.2,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY GovernmentForm DESC": 0.1
        }
    },
    {
        "record_name": "3275",
        "db_id": "world_1",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "Provide me with a histogram illustrating the various government forms and their respective total populations. Only include government forms with an average life expectancy greater than 72.",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.6,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY SUM(Population) ASC": 0.3,
            "Visualize BAR SELECT GovernmentForm , AVG(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY AVG(Population) DESC": 0.1
        }
    },
    {
        "record_name": "3275",
        "db_id": "world_1",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "Provide me with a bar graph illustrating the diverse forms of government and the corresponding total population for each government form with an average life expectancy exceeding 72.",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.6,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 AND GovernmentForm != 'Monarchy' GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.3,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 AND Population > 1000000 GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.1
        }
    },
    {
        "record_name": "3275",
        "db_id": "world_1",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "What are the distinct forms of government, and what is the total population for each government form with an average life expectancy exceeding 72? Represent the data using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNTRY_NAME DESC",
            "Visualize BAR SELECT COUNTRY_NAME , COUNT(COUNTRY_NAME) FROM countries GROUP BY COUNTRY_NAME ORDER BY COUNT(COUNTRY_NAME) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm ORDER BY SUM(Population) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.6,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 AND Population > 1000000 GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.3,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country WHERE LifeExpectancy > 72 AND Population > 1000000 AND Continent = 'Europe' GROUP BY GovernmentForm ORDER BY SUM(Population) DESC": 0.1
        }
    },
    {
        "record_name": "3275",
        "db_id": "world_1",
        "target": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "nlq": "Bar chart illustrating the overall population count across various governance systems.",
        "predict_rag_nlq": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "rag_dvqs": [
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY GovernmentForm DESC",
            "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
        "predict_debugged_db_ann": "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm",
        "predict_dvq_set": {
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM country GROUP BY GovernmentForm": 0.5,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM countrylanguage GROUP BY GovernmentForm": 0.2,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM city GROUP BY GovernmentForm": 0.1,
            "Visualize BAR SELECT GovernmentForm , SUM(Population) FROM countrylanguage WHERE IsOfficial='True' GROUP BY GovernmentForm": 0.2
        }
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "nlq": "Visualize the number of students affected by each type of allergy through a bar chart, and please display the total number in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY COUNT(AllergyType) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(AllergyType) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(AllergyType) DESC": 0.5,
            "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(Allergy) DESC": 0.3,
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType DESC": 0.2
        }
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "nlq": "Create a bar chart illustrating the quantity of students impacted by each type of allergy. Additionally, please arrange the total numbers in descending order for display.",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy ORDER BY COUNT(*) DESC": 0.1,
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType DESC": 0.1
        }
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "nlq": "Display a bar chart depicting the prevalence of each type of allergy among students, with the total number of students affected listed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType DESC": 0.5,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "nlq": "Display all types of allergies along with the corresponding number of students affected, represented visually through a bar chart. List the total number of allergies in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Allergy , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.Allergy ORDER BY COUNT(*) DESC": 0.1,
            "Visualize BAR SELECT AllergyType , COUNT(*) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType DESC": 0.1
        }
    },
    {
        "record_name": "38@y_name@DESC",
        "db_id": "allergy_1",
        "target": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "nlq": "A bar chart depicting the number of students affected by each allergy type, ordered in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY AllergyType ASC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY AllergyType DESC",
            "Visualize BAR SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype ORDER BY count(*) ASC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY COUNT(AllergyType) DESC",
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Allergy_type GROUP BY AllergyType ORDER BY AllergyType DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY COUNT(AllergyType) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(AllergyType) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(AllergyType) DESC": 0.6,
            "Visualize BAR SELECT Allergy , COUNT(Allergy) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY COUNT(Allergy) DESC": 0.2,
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType DESC": 0.1,
            "Visualize BAR SELECT AllergyType , COUNT(AllergyType) FROM Has_Allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy GROUP BY T2.AllergyType ORDER BY AllergyType ASC": 0.1
        }
    },
    {
        "record_name": "474@x_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
        "nlq": "Create a bar graph representing the capacity for each name, and arrange the names in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC": 0.4,
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC": 0.3,
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name ASC": 0.2,
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC": 0.1
        }
    },
    {
        "record_name": "474@x_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
        "nlq": "Display the seating capacity for each cinema in a bar graph, listing the x-axis in descending order from highest to lowest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
            "Visualize BAR SELECT Location , count(*) FROM cinema GROUP BY LOCATION ORDER BY Location ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC": 0.4,
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC": 0.3,
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC": 0.2,
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name ASC": 0.1
        }
    },
    {
        "record_name": "1624@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "nlq": "Aggregate and tally the city attribute from the location table to create a bar graph, sorted in descending order based on the number of cities.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC": 0.6,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC": 0.2,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC": 0.2
        }
    },
    {
        "record_name": "1624@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "nlq": "Provide a bar chart for comparing the quantity of departments located in various cities, and list the y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC": 0.5,
            "Visualize BAR SELECT CITY , COUNT(DEPARTMENT_ID) FROM departments GROUP BY CITY ORDER BY COUNT(DEPARTMENT_ID) DESC": 0.3,
            "Visualize BAR SELECT CITY , COUNT(DEPARTMENT_NAME) FROM departments GROUP BY CITY ORDER BY COUNT(DEPARTMENT_NAME) DESC": 0.2
        }
    },
    {
        "record_name": "1624@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "nlq": "Generate a bar chart illustrating the quantity of cities across different cities, and arrange them in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY city DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY count(*) DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT City , count(*) FROM employee GROUP BY city ORDER BY City DESC",
            "Visualize BAR SELECT city , COUNT(*) FROM station GROUP BY city ORDER BY COUNT(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC": 0.4,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY DESC": 0.3,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC": 0.2,
            "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY": 0.1
        }
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "Generate a bar chart illustrating the distribution of names and codes for products with prices ranging from 60 to 120. Please sort the Y-axis in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC": 0.4,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price >= 60 AND Price <= 120 ORDER BY Code ASC": 0.3,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price > 60 AND Price < 120 ORDER BY Code ASC": 0.2,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price >= 60 AND Price < 120 ORDER BY Code ASC": 0.1
        }
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For the products with a price ranging from 60 to 120, create a bar chart illustrating the distribution of names and codes, and arrange them in ascending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Name ASC": 0.5,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price >= 60 AND Price <= 120 ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price > 60 AND Price < 120 ORDER BY Name ASC": 0.2
        }
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For products with a price ranging from 60 to 120, present a bar chart illustrating the distribution of names and codes. Please list the Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Name ASC": 0.5,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price >= 60 AND Price <= 120 ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price > 60 AND Price < 120 ORDER BY Name ASC": 0.2
        }
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For the products with a price ranging from 60 to 120, create a bar chart representing the distribution of names and codes. Please sort the chart in ascending order based on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC": 0.6,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price >= 60 AND Price <= 120 ORDER BY Code ASC": 0.3,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price >= 60 AND Price <= 120 ORDER BY Name ASC": 0.1
        }
    },
    {
        "record_name": "2189@y_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "nlq": "For the products with a price ranging from 60 to 120, retrieve the names and codes, and represent them using a bar chart. Please list the Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price ASC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Price FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Price DESC",
            "Visualize BAR SELECT Name , Manufacturer FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price BETWEEN 60 AND 120 ORDER BY Code ASC": 0.4,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price >= 60 AND Price <= 120 ORDER BY Code ASC": 0.3,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price > 60 AND Price < 120 ORDER BY Code ASC": 0.2,
            "Visualize BAR SELECT Name , Code FROM Products WHERE Price >= 60 AND Price <= 120 ORDER BY Name ASC": 0.1
        }
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees whose first name contains the letters D or S, create a bar chart illustrating the distribution of their hire dates and the total count of manager IDs per hire date over time. Please sort the Y-axis in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , COUNT(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of hire dates and the sum of manager IDs binned by hire date over time. Sort the Y-axis in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY YEAR": 0.1
        }
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees whose first name contains the letters D or S, provide a comparison of the sum of manager IDs over the hire date bins, categorized by time, using a bar chart, and display them in descending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH": 0.4,
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY YEAR": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY QUARTER": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEK": 0.1
        }
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees whose first name contains the letters D or S, a bar chart illustrates the distribution of hire dates and the cumulative sum of manager IDs grouped by hire date over time. Please sort the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY YEAR": 0.2
        }
    },
    {
        "record_name": "1544@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For all employees whose first name contains the letters D or S, provide a comparison of the sum of manager IDs grouped by hire date bins, and order them in descending order by the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH": 0.2,
            "BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY QUARTER": 0.1,
            "BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY YEAR": 0.1
        }
    },
    {
        "record_name": "490",
        "db_id": "climbing",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "A bar graph representing the count of countries with mountains exceeding a height of 5000.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country": 0.5,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height >= 5000 GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 AND Prominence > 1000 GROUP BY Country": 0.2
        }
    },
    {
        "record_name": "490",
        "db_id": "climbing",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "What are the nations where mountains have heights greater than 5000, and represent them in a bar chart with their respective counts?",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM mountain WHERE Height > 5000 GROUP BY COUNTRY",
        "predict_dvq_set": {
            "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM mountain WHERE Height > 5000 GROUP BY COUNTRY": 0.5,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC": 0.2
        }
    },
    {
        "record_name": "490",
        "db_id": "climbing",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "Provide a bar chart depicting the count of countries with mountains exceeding a height of 5000, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM mountain WHERE Height > 5000 GROUP BY COUNTRY",
        "predict_dvq_set": {
            "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM mountain WHERE Height > 5000 GROUP BY COUNTRY": 0.5,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country": 0.2
        }
    },
    {
        "record_name": "490",
        "db_id": "climbing",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "Provide the count of countries containing mountains with heights greater than 5000.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country": 0.6,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 AND Country IN (SELECT DISTINCT Country FROM mountain WHERE Height > 5000) GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 HAVING COUNT(Country) > 0 GROUP BY Country": 0.1
        }
    },
    {
        "record_name": "490",
        "db_id": "climbing",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "What is the count of countries that have mountains exceeding a height of 5000?",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country": 0.4,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 AND Country != 'Unknown' GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 AND Country != 'Unknown' AND Country != 'N/A' GROUP BY Country": 0.2,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 AND Country != 'Unknown' AND Country != 'N/A' AND Country != 'None' GROUP BY Country": 0.1
        }
    },
    {
        "record_name": "490",
        "db_id": "climbing",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "nlq": "A bar graph illustrating the count of countries with mountains exceeding a height of 5000, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize PIE SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Country , COUNT(*) FROM climber GROUP BY Country ORDER BY COUNT(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country": 0.4,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height < 5000 GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height >= 5000 GROUP BY Country": 0.2,
            "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height = 5000 GROUP BY Country": 0.1
        }
    },
    {
        "record_name": "1000@x_name@ASC",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "nlq": "Bar chart with product names on the x-axis and the corresponding quantity of each product on the y-axis. Please display the chart in ascending order based on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC": 0.5,
            "Visualize BAR SELECT product_name , SUM(order_quantity) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY product_name ORDER BY product_name ASC": 0.3,
            "Visualize BAR SELECT product_name , COUNT(order_item_id) FROM Order_Items JOIN Products ON Order_Items.product_id = Products.product_id GROUP BY product_name ORDER BY product_name ASC": 0.2
        }
    },
    {
        "record_name": "1000@x_name@ASC",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "nlq": "Compare the occurrence rate of product names using a bar graph and list the x-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC": 0.5,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY COUNT(product_name) ASC": 0.3,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY COUNT(product_name) DESC": 0.2
        }
    },
    {
        "record_name": "1000@x_name@ASC",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "nlq": "Present a bar chart depicting the names of products and their corresponding frequencies, arranged in ascending order based on the names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name DESC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY product_name ASC": 0.6,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY COUNT(product_name) ASC": 0.3,
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM Products GROUP BY product_name ORDER BY COUNT(product_name) DESC": 0.1
        }
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For the employees who are not employed in departments where managers have IDs between 100 and 200, present a bar chart illustrating the distribution of hire dates and the sum of salary grouped by weekdays. Please arrange the chart from the least to the greatest on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For employees who are not assigned to departments where the managers' IDs fall between 100 and 200, please create a bar chart that illustrates the distribution of hire dates and the sum of salary bins by weekday. Please rank them in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.5,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For employees who are not part of departments with managers whose IDs fall between 100 and 200, generate a bar chart illustrating the distribution of hire dates and total salary sum bins, grouped by weekdays. Please arrange the bars in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY HIRE_DATE ASC BIN SUM(SALARY) BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For employees who are not assigned to departments with managers whose IDs fall between 100 and 200, present a bar chart illustrating the distribution of hire dates and the sum of salary categorized by weekdays. Arrange the Y-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "1657@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For employees who are not part of departments with managers whose IDs fall between 100 and 200, create a bar chart illustrating the distribution of hire date and the sum of salary grouped by weekday. Arrange the chart's Y-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN(SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID NOT BETWEEN 100 AND 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE DEPARTMENT_ID NOT IN(SELECT DEPARTMENT_ID FROM departments WHERE MANAGER_ID < 100 OR MANAGER_ID > 200) ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "855",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY YEAR",
        "nlq": "Display the quantity of documents per day for all documents related to the 'Graph Database project', and organize the document dates into yearly intervals using a line graph.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'  ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY",
            "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) ASC BIN Document_Date BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' BIN DOCUMENT_DATE BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' BIN DOCUMENT_DATE BY YEAR": 0.6,
            "LINE SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' BIN DOCUMENT_DATE BY DAY": 0.2,
            "LINE SELECT DOCUMENT_DATE , COUNT(DOCUMENT_DATE) FROM Documents AS T1 JOIN Projects AS T2 ON T1.Project_ID = T2.Project_ID WHERE T2.Project_Details = 'Graph Database project' BIN DOCUMENT_DATE BY MONTH": 0.2
        }
    },
    {
        "record_name": "2845@y_name@ASC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
        "nlq": "Retrieve the names of trains that pass through stations within the jurisdiction of the Chiltern local authority, and present a bar graph to compare the total count of names, sorted in ascending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) ASC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time ASC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE station.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT network_name , COUNT(network_name) FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE station.local_authority = \"Chiltern\" GROUP BY network_name ORDER BY COUNT(network_name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT network_name , COUNT(network_name) FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE station.local_authority = \"Chiltern\" GROUP BY network_name ORDER BY COUNT(network_name) ASC": 0.6,
            "Visualize BAR SELECT name , COUNT(name) FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE station.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC": 0.3,
            "Visualize BAR SELECT train_number , COUNT(train_number) FROM station JOIN route ON station.id = route.station_id JOIN train ON route.train_id = train.id WHERE station.local_authority = \"Chiltern\" GROUP BY train_number ORDER BY COUNT(train_number) ASC": 0.1
        }
    },
    {
        "record_name": "1759",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "nlq": "For employees hired prior to 2002-06-21, create a bar chart depicting the distribution of hire dates and the average salary binned by hire date over time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY QUARTER": 0.2
        }
    },
    {
        "record_name": "1759",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "nlq": "For employees hired prior to 2002-06-21, present a bar chart illustrating the distribution of hire dates and the average salary range based on hire date.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY QUARTER": 0.2
        }
    },
    {
        "record_name": "1759",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who were hired prior to 2002-06-21, retrieve their hire_date and the average salary grouped by hire_date over time, and present the data in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY HIRE_DATE": 0.1,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY QUARTER": 0.1
        }
    },
    {
        "record_name": "1759",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "nlq": "For employees hired prior to 2002-06-21, provide a comparison of the average salary based on the hire date grouped into time intervals.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY QUARTER": 0.1,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY WEEK": 0.1
        }
    },
    {
        "record_name": "1759",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "nlq": "For employees hired prior to 2002-06-21, please present a bar chart illustrating the distribution of hire dates and the average salary in each hire date time bin.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY TIME",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY AVG(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY QUARTER": 0.1,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY AVG(SALARY) DESC BIN HIRE_DATE BY WEEK": 0.1
        }
    },
    {
        "record_name": "460@y_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC",
        "nlq": "For every entry in the schedule, display the average price for each day in a bar graph, with the Y-axis ranked in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date DESC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY Date ASC",
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY AVG(Price) ASC",
            "Visualize BAR SELECT Name , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Date ORDER BY AVG(Price) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Date ORDER BY AVG(Price) DESC": 0.5,
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Date ORDER BY Date DESC": 0.3,
            "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID JOIN cinema AS T3 ON T1.Cinema_ID = T3.Cinema_ID GROUP BY Date ORDER BY Date ASC": 0.2
        }
    },
    {
        "record_name": "2451@y_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "nlq": "Bar chart illustrating the quantity of names from various names, presented in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC": 0.6,
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC": 0.2,
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC": 0.2
        }
    },
    {
        "record_name": "2451@y_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "nlq": "Can you please provide a bar chart that illustrates the number of individuals with varying names among high schoolers? Additionally, I would like to see the names ranked in descending order based on frequency.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC": 0.5,
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC": 0.3,
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC": 0.2
        }
    },
    {
        "record_name": "2451@y_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "nlq": "Tabulate the names of each high school student using a bar graph, arranged in descending order based on the frequency of names.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY SUM(grade) ASC",
            "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC": 0.6,
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) ASC": 0.2,
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name": 0.1,
            "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY name DESC": 0.1
        }
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "nlq": "Draw a bar chart illustrating the distribution of ACC_Regular_Season and Team_ID.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.2,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.2,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC": 0.3
        }
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "nlq": "Provide a bar chart comparing the Team_ID in relation to the ACC_Regular_Season.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC": 0.4,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.3
        }
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "nlq": "Provide me with a comparison of Team_ID during the ACC Regular Season.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season, Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC": 0.4,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.2,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.1
        }
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "nlq": "Visualize a bar chart showcasing the distribution of ACC_Regular_Season and Team_ID.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season, Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC": 0.4,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.3
        }
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "nlq": "A bar chart displays the distribution of ACC_Regular_Season and Team_ID.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season, Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC": 0.5,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.2
        }
    },
    {
        "record_name": "3112",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "nlq": "Display the team ID based on the regular season performance in an histogram, please.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID DESC",
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC",
            "Visualize BAR SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize BAR SELECT Team_Name , Team_ID FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY Team_ID ASC": 0.4,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season DESC": 0.3,
            "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match ORDER BY ACC_Regular_Season ASC": 0.3
        }
    },
    {
        "record_name": "3191@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
        "nlq": "Present a bar chart illustrating the various affiliations, along with the total enrollment of schools established after 1850 for each enrollment category. Arrange the bars in ascending order based on their height.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.5,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) DESC": 0.3,
            "Visualize BAR SELECT Affiliation , AVG(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY AVG(Enrollment) ASC": 0.2
        }
    },
    {
        "record_name": "3191@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
        "nlq": "Calculate the cumulative number of students enrolled in colleges established after the year 1850, categorized by affiliation type. Display the data in a bar chart, with the X-axis sorted in ascending order from lowest to highest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY sum(Enrollment) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.6,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded >= 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.2,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) DESC": 0.1,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation ASC": 0.1
        }
    },
    {
        "record_name": "3191@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
        "nlq": "What are the various affiliations and the total enrollment of schools established after 1850 for each enrollment type? Please visualize this information using a bar chart, and list the bars in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.6,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded >= 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.2,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) DESC": 0.1,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation ASC": 0.1,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation DESC": 0.0
        }
    },
    {
        "record_name": "3191@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
        "nlq": "A bar chart illustrating the various affiliations and the total enrollment of schools established after 1850 for each enrollment type. Please sort the X-axis in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
            "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY sum(Enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation ASC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation ORDER BY Affiliation DESC",
            "Visualize BAR SELECT Affiliation , sum(enrollment) FROM university GROUP BY affiliation"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation ASC": 0.5,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY SUM(Enrollment) ASC": 0.3,
            "Visualize BAR SELECT Affiliation , SUM(Enrollment) FROM university WHERE Founded > 1850 GROUP BY Affiliation ORDER BY Affiliation DESC": 0.2
        }
    },
    {
        "record_name": "1043",
        "db_id": "customers_card_transactions",
        "target": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "nlq": "Display the quantity of cards for various card type codes in a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT card_type_code , count(*) FROM Customers_Cards GROUP BY card_type_code",
        "rag_dvqs": [
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_Cards GROUP BY card_type_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(CARD_TYPE_CODE) FROM Customers_Cards GROUP BY CARD_TYPE_CODE",
        "predict_dvq_set": {
            "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(CARD_TYPE_CODE) FROM Customers_Cards GROUP BY CARD_TYPE_CODE": 0.6,
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_Cards GROUP BY card_type_code": 0.3,
            "Visualize BAR SELECT card_type_code , COUNT(*) FROM Customers_Cards GROUP BY card_type_code": 0.1
        }
    },
    {
        "record_name": "1043",
        "db_id": "customers_card_transactions",
        "target": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "nlq": "Show the quantity of cards for various card type codes in a bar chart, please.",
        "predict_rag_nlq": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "rag_dvqs": [
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(CARD_TYPE_CODE) FROM Customers_Cards GROUP BY CARD_TYPE_CODE",
        "predict_dvq_set": {
            "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(CARD_TYPE_CODE) FROM Customers_Cards GROUP BY CARD_TYPE_CODE": 0.5,
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_Cards GROUP BY card_type_code": 0.3,
            "Visualize BAR SELECT card_type_code , COUNT(*) FROM Customers_Cards GROUP BY card_type_code": 0.2
        }
    },
    {
        "record_name": "1043",
        "db_id": "customers_card_transactions",
        "target": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "nlq": "Present the frequency of card type codes organized by card type code in a histogram.",
        "predict_rag_nlq": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "rag_dvqs": [
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) ASC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code ORDER BY COUNT(card_type_code) DESC",
            "Visualize BAR SELECT card_type_code , count(*) FROM Customers_cards GROUP BY card_type_code ORDER BY card_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(CARD_TYPE_CODE) FROM Customers_Cards GROUP BY CARD_TYPE_CODE",
        "predict_dvq_set": {
            "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(CARD_TYPE_CODE) FROM Customers_Cards GROUP BY CARD_TYPE_CODE": 0.5,
            "Visualize BAR SELECT CARD_TYPE_CODE , COUNT(card_id) FROM Customers_Cards GROUP BY CARD_TYPE_CODE": 0.2,
            "Visualize BAR SELECT card_id , COUNT(card_id) FROM Customers_Cards GROUP BY CARD_TYPE_CODE": 0.1,
            "Visualize BAR SELECT card_id , COUNT(card_id) FROM Customers_Cards GROUP BY card_id": 0.2
        }
    },
    {
        "record_name": "1317@x_name@DESC",
        "db_id": "election",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "nlq": "Which committees have representatives from the Democratic party, and display the count using a bar chart, with the x-axis ranked in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC": 0.3,
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC": 0.4,
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC": 0.3
        }
    },
    {
        "record_name": "1317@x_name@DESC",
        "db_id": "election",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
        "nlq": "Provide a bar chart that counts and displays in descending order all the committees that have delegates from the Democratic party.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC": 0.5,
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC": 0.3,
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC": 0.2
        }
    },
    {
        "record_name": "2834@x_name@DESC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "nlq": "Create a bar graph comparing services based on the quantity of services provided, and can you sort the names in descending order for display?",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC": 0.5,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC": 0.3,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC": 0.2
        }
    },
    {
        "record_name": "2834@x_name@DESC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "nlq": "Group the services attribute in the station table and calculate the total count of services using a bar graph, with the x-axis displayed in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SERVICES , COUNT(SERVICES) FROM station GROUP BY SERVICES ORDER BY SERVICES DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SERVICES , COUNT(SERVICES) FROM station GROUP BY SERVICES ORDER BY SERVICES DESC": 0.4,
            "Visualize BAR SELECT SERVICES , COUNT(SERVICES) FROM station GROUP BY SERVICES ORDER BY COUNT(SERVICES) DESC": 0.3,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC": 0.2,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC": 0.1
        }
    },
    {
        "record_name": "2834@x_name@DESC",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "nlq": "Provide me with a bar chart where the X-axis represents the services and the Y-axis represents the count of services, listed in descending order by their names, please.",
        "predict_rag_nlq": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services",
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT SERVICES , COUNT(SERVICES) FROM station GROUP BY SERVICES ORDER BY SERVICES DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT SERVICES , COUNT(SERVICES) FROM station GROUP BY SERVICES ORDER BY SERVICES DESC": 0.4,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC": 0.3,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) DESC": 0.2,
            "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services ASC": 0.1
        }
    },
    {
        "record_name": "2703",
        "db_id": "school_finance",
        "target": "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "nlq": "Present a bar chart that lists the name of each donor and the respective endowment amount, arranged in descending order based on the amount of endowment.",
        "predict_rag_nlq": "Visualize BAR SELECT donator_name , amount FROM endowment ORDER BY amount DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees ORDER BY SALARY DESC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY SALARY DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DONATOR_NAME , SUM(AMOUNT) FROM endowment GROUP BY DONATOR_NAME ORDER BY SUM(AMOUNT) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DONATOR_NAME , SUM(AMOUNT) FROM endowment GROUP BY DONATOR_NAME ORDER BY SUM(AMOUNT) DESC": 0.6,
            "Visualize BAR SELECT DONATOR_NAME , SUM(AMOUNT) FROM endowment GROUP BY DONATOR_NAME ORDER BY SUM(AMOUNT) ASC": 0.2,
            "Visualize BAR SELECT DONATOR_NAME , AMOUNT FROM endowment GROUP BY DONATOR_NAME ORDER BY AMOUNT DESC": 0.1,
            "Visualize BAR SELECT DONATOR_NAME , AMOUNT FROM endowment GROUP BY DONATOR_NAME ORDER BY AMOUNT ASC": 0.1
        }
    },
    {
        "record_name": "2703",
        "db_id": "school_finance",
        "target": "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "nlq": "List each donor's name and the endowed amount in descending order according to the endowed amount. Represent them in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT donator_name , amount FROM endowment ORDER BY amount DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees ORDER BY SALARY DESC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT FIRST_NAME , SALARY FROM employees ORDER BY FIRST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees ORDER BY SALARY DESC",
            "Visualize BAR SELECT name , SUM(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DONATOR_NAME , SUM(AMOUNT) FROM endowment GROUP BY DONATOR_NAME ORDER BY SUM(AMOUNT) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DONATOR_NAME , SUM(AMOUNT) FROM endowment GROUP BY DONATOR_NAME ORDER BY SUM(AMOUNT) DESC": 0.6,
            "Visualize BAR SELECT DONATOR_NAME , SUM(AMOUNT) FROM endowment GROUP BY DONATOR_NAME ORDER BY SUM(AMOUNT) ASC": 0.2,
            "Visualize BAR SELECT DONATOR_NAME , AMOUNT FROM endowment GROUP BY DONATOR_NAME ORDER BY AMOUNT DESC": 0.1,
            "Visualize BAR SELECT DONATOR_NAME , AMOUNT FROM endowment GROUP BY DONATOR_NAME ORDER BY AMOUNT ASC": 0.1
        }
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees whose first names contain the letters D or S, provide a bar chart illustrating the distribution of hire dates and the number of hire dates categorized by the weekday. Please arrange the chart from highest to lowest on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees whose first names contain the letters D or S, retrieve their hire dates and group them by weekday. Visualize the data using a bar chart and sort the bars in descending order based on the number of hire dates.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY ORDER BY COUNT(HIRE_DATE) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME IN ('D', 'S') ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.1,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME REGEX 'D|S' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees whose first names contain the letters D or S, provide me with a bar chart comparing the quantity of hire dates across the hire date bins, grouped by weekdays. Sort the y-axis from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY": 0.1,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of hire dates and the frequency of hire date bins categorized by weekday. Please ensure that the y-axis is arranged in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY WEEKDAY": 0.1,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1539@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees with the letters D or S in their first name, create a bar chart illustrating the distribution of hire dates and the number of hire date bins by weekday. Please rank the total number in descending order from high to low.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY WEEKDAY": 0.1,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "2397",
        "db_id": "movie_1",
        "target": "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
        "nlq": "For each director, retrieve the director's name along with the highest rating among all of their movies, excluding movies with a NULL director. Can you visualize the result using a pie chart?\n\n",
        "predict_rag_nlq": "Visualize PIE SELECT director, max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
        "rag_dvqs": [
            "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
            "Visualize PIE SELECT title , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY title",
            "Visualize PIE SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director",
            "Visualize PIE SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize PIE SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
            "Visualize PIE SELECT director , count(*) FROM Movie AS T1 JOIN Rating AS T2 ON T1.mID = T2.mID GROUP BY T1.director",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY director ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) ASC",
            "Visualize BAR SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director ORDER BY max(T1.stars) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT director , max(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
        "predict_debugged_db_ann": "Visualize PIE SELECT director , MAX(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
        "predict_dvq_set": {
            "Visualize PIE SELECT director , MAX(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director": 0.6,
            "Visualize PIE SELECT director , MAX(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director IS NOT NULL GROUP BY director": 0.3,
            "Visualize PIE SELECT director , MAX(stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director <> \"null\" GROUP BY director": 0.1
        }
    },
    {
        "record_name": "1234",
        "db_id": "dorm_1",
        "target": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "nlq": "Find the count of students whose age is higher than the average age for each gender. Represent this information using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize PIE SELECT Sex , max(age) FROM student GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC",
            "Visualize PIE SELECT Sex , count(*) FROM Faculty GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , count(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex": 0.5,
            "Visualize PIE SELECT Gender , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Gender": 0.3,
            "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex HAVING COUNT(*) > 0": 0.2
        }
    },
    {
        "record_name": "1234",
        "db_id": "dorm_1",
        "target": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "nlq": "Create a pie chart depicting the distribution of students, grouped by gender, who are older than the average age.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize PIE SELECT Sex , max(age) FROM student GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC",
            "Visualize PIE SELECT Sex , count(*) FROM Faculty GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , count(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex": 0.6,
            "Visualize PIE SELECT Gender , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Gender": 0.2,
            "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Gender": 0.1,
            "Visualize PIE SELECT Gender , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex": 0.1
        }
    },
    {
        "record_name": "1234",
        "db_id": "dorm_1",
        "target": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "nlq": "Provide a pie chart illustrating the distribution of students, separated by gender, who are older than the average age.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize PIE SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize PIE SELECT Sex , max(age) FROM student GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC",
            "Visualize PIE SELECT Sex , count(*) FROM Faculty GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , count(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex": 0.6,
            "Visualize PIE SELECT Gender , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Gender": 0.2,
            "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex HAVING COUNT(*) > 0": 0.1,
            "Visualize PIE SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "1234",
        "db_id": "dorm_1",
        "target": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "nlq": "How many students of each gender are above the average age.",
        "predict_rag_nlq": "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
        "rag_dvqs": [
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) ASC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex ORDER BY count(*) DESC",
            "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex",
            "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex",
            "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , avg(age) FROM Student GROUP BY sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , avg(age) FROM student GROUP BY sex ORDER BY avg(age) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Sex , count(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize BAR SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize BAR SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex": 0.6,
            "Visualize BAR SELECT Gender , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Gender": 0.2,
            "Visualize BAR SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex HAVING COUNT(*) > 1": 0.1,
            "Visualize BAR SELECT Sex , COUNT(*) FROM Student WHERE Age >(SELECT AVG(Age) FROM Student) GROUP BY Sex ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll",
        "target": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "nlq": "Present the distribution of the combined sum of Height and the individual sum of Height in a pie chart, please.",
        "predict_rag_nlq": "Visualize PIE SELECT 'Combined Height' , SUM(Height) FROM people UNION SELECT Name , SUM(Height) FROM people GROUP BY Name",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) DESC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize PIE SELECT Party , COUNT(*) FROM people GROUP BY Party"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT 'Combined Height' , SUM(Height) FROM people UNION SELECT Name , SUM(Height) FROM people GROUP BY Name",
        "predict_debugged_db_ann": "Visualize PIE SELECT 'Combined Height' , SUM(Height) FROM people UNION SELECT Name , SUM(Height) FROM people GROUP BY Name",
        "predict_dvq_set": {
            "Visualize PIE SELECT 'Combined Height' , SUM(Height) FROM people UNION SELECT Name , SUM(Height) FROM people GROUP BY Name": 0.5,
            "Visualize PIE SELECT 'Combined Weight' , SUM(Height) FROM people UNION SELECT Name , SUM(Height) FROM people GROUP BY Name": 0.3,
            "Visualize PIE SELECT 'Combined Height' , SUM(Weight) FROM people UNION SELECT Name , SUM(Height) FROM people GROUP BY Name": 0.2
        }
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll",
        "target": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "nlq": "For the characteristic \"Sex\" and the total height, demonstrate their ratio using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , min(weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex": 0.3,
            "Visualize PIE SELECT Sex , AVG(Height) FROM people GROUP BY Sex": 0.2,
            "Visualize PIE SELECT Sex , MAX(Height) FROM people GROUP BY Sex": 0.2,
            "Visualize PIE SELECT Sex , MIN(Height) FROM people GROUP BY Sex": 0.1,
            "Visualize PIE SELECT Sex , COUNT(Height) FROM people GROUP BY Sex": 0.2
        }
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll",
        "target": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "nlq": "Visualize a pie chart representing the distribution of genders and the aggregate of heights.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , min(weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex": 0.5,
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex": 0.3,
            "Visualize PIE SELECT Sex , AVG(Height) FROM people GROUP BY Sex": 0.2
        }
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll",
        "target": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "nlq": "A pie chart displays the distribution of sexes and the total height.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , min(weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex": 0.5,
            "Visualize PIE SELECT Name , SUM(Height) FROM people GROUP BY Name": 0.2,
            "Visualize PIE SELECT Sex , AVG(Height) FROM people GROUP BY Sex": 0.3
        }
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll",
        "target": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "nlq": "Generate a pie chart illustrating the distribution of sexes and the total height.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , min(weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex": 0.3,
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex": 0.2,
            "Visualize PIE SELECT Sex , AVG(Height) FROM people GROUP BY Sex": 0.3,
            "Visualize PIE SELECT Sex , COUNT(*) FROM people GROUP BY Sex": 0.2
        }
    },
    {
        "record_name": "388",
        "db_id": "candidate_poll",
        "target": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "nlq": "Create a pie chart illustrating the total height distribution by gender.",
        "predict_rag_nlq": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "rag_dvqs": [
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , avg(weight) FROM people GROUP BY sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
            "Visualize PIE SELECT Sex , count(*) FROM people WHERE weight > 85 GROUP BY sex",
            "Visualize PIE SELECT Sex , min(weight) FROM people GROUP BY Sex",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY SUM(Height) ASC",
            "Visualize BAR SELECT Sex , SUM(Height) FROM people GROUP BY Sex ORDER BY Sex DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_debugged_db_ann": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
        "predict_dvq_set": {
            "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex": 0.5,
            "Visualize PIE SELECT Sex , SUM(Weight) FROM people GROUP BY Sex": 0.3,
            "Visualize PIE SELECT Name , SUM(Height) FROM people GROUP BY Name": 0.2
        }
    },
    {
        "record_name": "988",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
        "nlq": "Display the quantity of accounts for each individual in a bar graph with grouping based on the customer's first name.",
        "predict_rag_nlq": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT customer_first_name , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT customer_first_name , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC": 0.6,
            "Visualize BAR SELECT customer_first_name , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY customer_first_name ASC": 0.3,
            "Visualize BAR SELECT customer_first_name , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_first_name ORDER BY customer_first_name ASC": 0.1
        }
    },
    {
        "record_name": "988",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
        "nlq": "What is the count of accounts per customer? Please present a bar chart that groups the data based on the first name of the customer.",
        "predict_rag_nlq": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT customer_first_name , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT customer_first_name , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC": 0.6,
            "Visualize BAR SELECT customer_first_name , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_first_name ORDER BY customer_first_name DESC": 0.3,
            "Visualize BAR SELECT customer_first_name , COUNT(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY customer_first_name DESC": 0.1
        }
    },
    {
        "record_name": "116@y_name@ASC",
        "db_id": "assets_maintenance",
        "target": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "nlq": "How many engineers were contacted by each staff member? Display both the staff contact names and the number of engineers contacted in a bar chart, ranking from lowest to highest on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT staff_name, COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) ASC": 0.6,
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) DESC": 0.2,
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY staff_name ASC": 0.1,
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY staff_name DESC": 0.1
        }
    },
    {
        "record_name": "116@y_name@ASC",
        "db_id": "assets_maintenance",
        "target": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "nlq": "Provide a bar chart depicting the number of engineers contacted by each staff member. Include both the name of the staff member and the count of engineers contacted. Please arrange the chart in ascending order based on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT staff_name, COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(engineer_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(staff_name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(staff_name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(staff_name) ASC": 0.6,
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(engineer_id) ASC": 0.3,
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(engineer_id) DESC": 0.1
        }
    },
    {
        "record_name": "116@y_name@ASC",
        "db_id": "assets_maintenance",
        "target": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "nlq": "How many engineers were contacted by each staff member? Provide a list of both the staff member's name and the number of engineers they contacted. Plot this information as a bar chart and display the total number in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT staff_name, COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(engineer_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(staff_name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(staff_name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(staff_name) ASC": 0.7,
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY COUNT(staff_name) DESC": 0.2,
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC": 0.1
        }
    },
    {
        "record_name": "116@y_name@ASC",
        "db_id": "assets_maintenance",
        "target": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
        "nlq": "Provide a histogram illustrating the number of engineers contacted by each staff member. Please list the names of the contact staff and the corresponding number of engineers contacted. Kindly arrange the data in ascending order based on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT staff_name, COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY COUNT(staff_name) DESC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name ASC",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name ORDER BY staff_name DESC",
            "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name",
            "Visualize BAR SELECT staff_name , COUNT(staff_name) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id = T3.engineer_id GROUP BY staff_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) ASC": 0.6,
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY COUNT(engineer_id) DESC": 0.3,
            "Visualize BAR SELECT staff_name , COUNT(engineer_id) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY staff_name ORDER BY staff_name ASC": 0.1
        }
    },
    {
        "record_name": "1112",
        "db_id": "department_management",
        "target": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
        "nlq": "Display the mean age of department heads, categorized by the state in which they were born, using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
        "rag_dvqs": [
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state ASC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) ASC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state DESC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) DESC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY born_state ASC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY born_state DESC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) ASC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
        "predict_debugged_db_ann": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
        "predict_dvq_set": {
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state": 0.4,
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state WHERE age > 0": 0.2,
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) DESC": 0.3,
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state ASC": 0.1
        }
    },
    {
        "record_name": "1112",
        "db_id": "department_management",
        "target": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
        "nlq": "Display the average age categorized by the state of birth in a histogram, please.",
        "predict_rag_nlq": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
        "rag_dvqs": [
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state ASC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) ASC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY born_state DESC",
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state ORDER BY AVG(age) DESC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY born_state ASC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY born_state DESC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) ASC",
            "Visualize BAR SELECT born_state , COUNT(born_state) FROM head GROUP BY born_state ORDER BY COUNT(born_state) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
        "predict_debugged_db_ann": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state",
        "predict_dvq_set": {
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state": 0.3,
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY age": 0.2,
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY name": 0.1,
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY department_ID": 0.2,
            "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY head_ID": 0.2
        }
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "Display the names of high school students and their respective number of friends. Represent this data as a bar chart, and arrange the bars in descending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , SUM(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC": 0.4,
            "Visualize BAR SELECT T2.name , COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT T2.name , COUNT(friend_id) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY COUNT(friend_id) DESC": 0.2,
            "Visualize BAR SELECT T2.name , COUNT(*) AS friend_count FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY friend_count DESC": 0.1
        }
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "Create a bar chart illustrating the names of high school students and the number of friends each student has, and display the X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , AVG(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , AVG(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.name , AVG(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC": 0.4,
            "Visualize BAR SELECT T2.name , COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT T2.name , COUNT(friend_id) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY COUNT(friend_id) DESC": 0.2,
            "Visualize BAR SELECT T2.name , COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC": 0.1
        }
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "Present a bar graph illustrating the names of high school students and the number of friends each student has, with the bars arranged in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) ASC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , SUM(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*) ) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY SUM(COUNT(*) ) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY SUM(COUNT(*) ) DESC": 0.3,
            "Visualize BAR SELECT T2.name , COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT T2.name , COUNT(friend_id) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY COUNT(friend_id) DESC": 0.3
        }
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "Display the names of high school students and their respective number of friends in a bar graph, arranged in descending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , SUM(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC": 0.3,
            "Visualize BAR SELECT T2.name , COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT T2.name , COUNT(*) AS num_friends FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY num_friends DESC": 0.3
        }
    },
    {
        "record_name": "2456@x_name@DESC",
        "db_id": "network_1",
        "target": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "nlq": "Display the names of the high school students and the number of friends each student has in a bar chart, and arrange them in descending order based on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) DESC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY SUM(count(*)) ASC",
            "Visualize BAR SELECT T2.name , SUM(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY AVG(count(*)) DESC",
            "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , SUM(count(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.name , SUM(COUNT(*) ) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC": 0.3,
            "Visualize BAR SELECT T2.name , COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT T2.name , COUNT(*) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.ID GROUP BY T2.name ORDER BY T2.name DESC": 0.3
        }
    },
    {
        "record_name": "1258",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Retrieve the login_name and author_id, and represent them visually using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME": 0.4,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY family_name": 0.3,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY author_id": 0.2,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors WHERE gender_mf='M' ORDER BY PERSONAL_NAME": 0.1
        }
    },
    {
        "record_name": "1258",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Visualize a bar chart depicting the distribution of \"login_name\" and \"author_id\".",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME": 0.4,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY login_name": 0.3,
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY login_name": 0.2,
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name": 0.1
        }
    },
    {
        "record_name": "1258",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Present a bar chart illustrating the distribution of login_name and author_id.",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME": 0.4,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY family_name": 0.3,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY author_id": 0.2,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY gender_mf": 0.1
        }
    },
    {
        "record_name": "1258",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Display the distribution of login names and author IDs in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME": 0.4,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY FAMILY_NAME": 0.3,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY author_id": 0.2,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY login_name": 0.1
        }
    },
    {
        "record_name": "1258",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "nlq": "Draw a bar chart representing the distribution of login names and author IDs.",
        "predict_rag_nlq": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "rag_dvqs": [
            "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT login_name , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT personal_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT middle_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT password , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize BAR SELECT family_name , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY PERSONAL_NAME": 0.4,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY FAMILY_NAME": 0.3,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY author_id": 0.2,
            "Visualize BAR SELECT LOGIN_NAME , AUTHOR_ID FROM Course_Authors_and_Tutors ORDER BY login_name": 0.1
        }
    },
    {
        "record_name": "3050@x_name@ASC",
        "db_id": "train_station",
        "target": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC",
        "nlq": "Visualize the names and total number of passengers for all train stations excluding London using a bar chart, and please sort the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers DESC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
            "Visualize PIE SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location ASC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) ASC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location DESC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Location != 'London' ORDER BY Total_Passengers ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Location != 'London' ORDER BY Total_Passengers ASC": 0.5,
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Location != 'London' ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Location != 'London' ORDER BY Name DESC": 0.2
        }
    },
    {
        "record_name": "3050@x_name@ASC",
        "db_id": "train_station",
        "target": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC",
        "nlq": "Present the names and total number of passengers for all train stations excluding London in a bar chart, and kindly arrange them on the X-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers DESC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
            "Visualize PIE SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London'",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location ASC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) ASC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY Location DESC",
            "Visualize BAR SELECT Location , sum(total_passengers) FROM station GROUP BY LOCATION ORDER BY sum(total_passengers) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Total_Passengers ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Location != 'London' ORDER BY Total_Passengers ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Location != 'London' ORDER BY Total_Passengers ASC": 0.5,
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Location != 'London' ORDER BY Total_Passengers DESC": 0.3,
            "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE Location != 'London' ORDER BY Name ASC": 0.2
        }
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees hired prior to 2002-06-21, create a bar chart illustrating the distribution of hire_date and the number of employees in each hire_date bin, sorted in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY YEAR": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY QUARTER": 0.1
        }
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who were hired prior to 2002-06-21, create a bar chart illustrating the distribution of hire_date based on the time period of hire_date bins, and display the Y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH ORDER BY COUNT(HIRE_DATE) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY YEAR": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY QUARTER": 0.2
        }
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees hired prior to 2002-06-21, retrieve the hire_date and the count of hire_date grouped by time intervals. Visualize this data using a bar chart, sorting the bars in descending order based on the frequency of hire dates.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH ORDER BY COUNT(HIRE_DATE) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY YEAR": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY QUARTER": 0.1
        }
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees hired prior to 2002-06-21, please present a bar chart illustrating the distribution of hire_date across hire_date bins according to time. Sort the chart in descending order based on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH ORDER BY COUNT(HIRE_DATE) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY YEAR": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' BIN HIRE_DATE BY QUARTER": 0.2
        }
    },
    {
        "record_name": "1754@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "nlq": "For employees hired prior to 2002-06-21, generate a bar chart illustrating the distribution of hire dates and the count of employees per hire date bin, with the Y-axis displayed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE HIRE_DATE < '2002-06-21' ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY YEAR": 0.1
        }
    },
    {
        "record_name": "553",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "nlq": "How many divisions does each course have?",
        "predict_rag_nlq": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC": 0.5,
            "Visualize BAR SELECT CRS_CODE , COUNT(DISTINCT CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC": 0.3,
            "Visualize BAR SELECT CRS_CODE , COUNT(DISTINCT CLASS_ROOM) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC": 0.2
        }
    },
    {
        "record_name": "553",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "nlq": "Create a bar chart to depict the number of sections for each course.",
        "predict_rag_nlq": "Visualize BAR SELECT CRS_CODE, COUNT(*) FROM CLASS GROUP BY CRS_CODE",
        "rag_dvqs": [
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS GROUP BY CRS_CODE",
        "predict_debugged_db_ann": "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS GROUP BY CRS_CODE",
        "predict_dvq_set": {
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS GROUP BY CRS_CODE": 0.4,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE": 0.3,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE, CLASS_SECTION": 0.2,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE HAVING COUNT(CLASS_SECTION) > 1": 0.1
        }
    },
    {
        "record_name": "553",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "nlq": "How many segments does each course have? Represent this information visually using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE DESC": 0.4,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE DESC": 0.3,
            "Visualize BAR SELECT CRS_CODE , COUNT(DISTINCT CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE DESC": 0.2,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_ROOM) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE DESC": 0.1
        }
    },
    {
        "record_name": "553",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "nlq": "Create a bar graph illustrating the number of sections for each course.",
        "predict_rag_nlq": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "rag_dvqs": [
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE",
        "predict_debugged_db_ann": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE",
        "predict_dvq_set": {
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE": 0.4,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE": 0.3,
            "Visualize BAR SELECT CRS_CODE , COUNT(DISTINCT CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE": 0.2,
            "Visualize BAR SELECT CRS_DESCRIPTION , COUNT(CLASS_SECTION) FROM COURSE JOIN CLASS ON COURSE.CRS_CODE = CLASS.CRS_CODE GROUP BY CRS_DESCRIPTION": 0.1
        }
    },
    {
        "record_name": "553",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "nlq": "Provide me with a histogram illustrating the distribution of the number of sections for each course.",
        "predict_rag_nlq": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE ORDER BY COUNT(CLASS_SECTION) DESC": 0.3,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE DESC": 0.2,
            "Visualize BAR SELECT CRS_CODE , COUNT(CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC": 0.1
        }
    },
    {
        "record_name": "553",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "nlq": "How many divisions are there in each course? Represent this information visually using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC": 0.5,
            "Visualize BAR SELECT CRS_CODE , COUNT(DISTINCT CLASS_SECTION) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC": 0.3,
            "Visualize BAR SELECT CRS_CODE , COUNT(DISTINCT CLASS_ROOM) FROM CLASS GROUP BY CRS_CODE ORDER BY CRS_CODE ASC": 0.2
        }
    },
    {
        "record_name": "553",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
        "nlq": "Bar chart with the X-axis labeled as \"CRS code\" and the Y-axis representing the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE",
        "rag_dvqs": [
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY CRS_CODE DESC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) ASC",
            "Visualize BAR SELECT CRS_CODE , COUNT(CRS_CODE) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num GROUP BY CRS_CODE ORDER BY COUNT(CRS_CODE) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY CRS_CODE",
        "predict_debugged_db_ann": "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE",
        "predict_dvq_set": {
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM CLASS GROUP BY CRS_CODE": 0.4,
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM COURSE GROUP BY CRS_CODE": 0.2,
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM ENROLL GROUP BY CRS_CODE": 0.2,
            "Visualize BAR SELECT CRS_CODE , COUNT(*) FROM STUDENT GROUP BY CRS_CODE": 0.2
        }
    },
    {
        "record_name": "1311",
        "db_id": "election",
        "target": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "nlq": "Display the quantity of delegates in each political party using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.4,
            "Visualize BAR SELECT T2.Party , SUM(T1.Delegate) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.3,
            "Visualize BAR SELECT T2.Party , COUNT(T1.Delegate) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.2,
            "Visualize BAR SELECT T2.Party , SUM(T2.Delegate) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.1
        }
    },
    {
        "record_name": "1311",
        "db_id": "election",
        "target": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "nlq": "For each political party, employ a bar graph to depict the quantity of delegates associated with it.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.5,
            "Visualize BAR SELECT T2.Party , SUM(T1.Delegate) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.3,
            "Visualize BAR SELECT T2.Party , AVG(T1.Delegate) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.2
        }
    },
    {
        "record_name": "1380@x_name@DESC",
        "db_id": "epinions_1",
        "target": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
        "nlq": "Retrieve the name and average trust score of each target user and represent it through a bar chart, arranging it in descending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name ASC",
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY avg(trust) DESC",
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY avg(trust) ASC",
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id",
            "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY name DESC",
            "Visualize PIE SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id",
            "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY name ASC",
            "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY avg(T2.rating) DESC",
            "Visualize BAR SELECT name , avg(T2.rating) FROM useracct AS T1 JOIN review AS T2 ON T1.u_id = T2.u_id GROUP BY T2.u_id ORDER BY avg(T2.rating) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC": 0.4,
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY avg(trust) DESC": 0.3,
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T1.name ORDER BY avg(trust) DESC": 0.2,
            "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T1.name ORDER BY name DESC": 0.1
        }
    },
    {
        "record_name": "1394@x_name@ASC",
        "db_id": "film_rank",
        "target": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title ASC",
        "nlq": "For each category, utilize a bar chart to visualize the quantity of films, sorted in ascending order along the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT name , COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY name DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT name , count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name ASC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T2.name DESC",
            "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.name , COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY T2.name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.NAME , COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY T2.NAME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.NAME , COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY T2.NAME ASC": 0.5,
            "Visualize BAR SELECT T2.NAME , COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY T2.NAME DESC": 0.3,
            "Visualize BAR SELECT T2.NAME , COUNT(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id GROUP BY T1.category_id ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "Provide me with a bar chart illustrating the charge_amount for each type of charge, with the x-axis listed in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC": 0.5,
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC": 0.3,
            "Visualize BAR SELECT charge_type , SUM(charge_amount) FROM Charges GROUP BY charge_type ORDER BY charge_type ASC": 0.2
        }
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "Present a bar chart depicting the amount for each type of charge. Arrange the bars in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC": 0.5,
            "Visualize BAR SELECT charge_type , SUM(charge_amount) FROM Charges GROUP BY charge_type ORDER BY SUM(charge_amount) ASC": 0.3,
            "Visualize BAR SELECT charge_type , AVG(charge_amount) FROM Charges GROUP BY charge_type ORDER BY AVG(charge_amount) ASC": 0.2
        }
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "Present each category of charges and its corresponding amount in a bar graph, arranged in ascending order along the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY avg(amount_of_transaction) ASC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC": 0.6,
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC": 0.2,
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC": 0.2
        }
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "Present a bar chart illustrating the cost of each charge type. Display both the charge type and the corresponding amount, and sort the charge types in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC": 0.5,
            "Visualize BAR SELECT charge_type , SUM(charge_amount) FROM Charges GROUP BY charge_type ORDER BY SUM(charge_amount) ASC": 0.3,
            "Visualize BAR SELECT charge_type , AVG(charge_amount) FROM Charges GROUP BY charge_type ORDER BY AVG(charge_amount) ASC": 0.2
        }
    },
    {
        "record_name": "1174@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
        "nlq": "What are the costs associated with each charge type? Please provide a list of both the charge type and the corresponding amount. Can you present the information in a bar chart, arranged in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type DESC",
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges",
            "Visualize PIE SELECT charge_type , charge_amount FROM Charges",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type DESC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY transaction_type ASC",
            "Visualize BAR SELECT transaction_type , sum(transaction_amount) FROM Financial_transactions GROUP BY transaction_type ORDER BY sum(transaction_amount) DESC",
            "Visualize BAR SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code ORDER BY transaction_type_code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_amount ASC": 0.4,
            "Visualize BAR SELECT charge_type , SUM(charge_amount) FROM Charges GROUP BY charge_type ORDER BY SUM(charge_amount) ASC": 0.3,
            "Visualize BAR SELECT charge_type , AVG(charge_amount) FROM Charges GROUP BY charge_type ORDER BY AVG(charge_amount) ASC": 0.2,
            "Visualize BAR SELECT charge_type , MAX(charge_amount) FROM Charges GROUP BY charge_type ORDER BY MAX(charge_amount) ASC": 0.1
        }
    },
    {
        "record_name": "2902",
        "db_id": "student_transcripts_tracking",
        "target": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "nlq": "Calculate the count of section descriptions, and create a bar chart with section description grouped accordingly.",
        "predict_rag_nlq": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "rag_dvqs": [
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT SECTION_DESCRIPTION , COUNT(SECTION_DESCRIPTION) FROM Sections GROUP BY SECTION_DESCRIPTION",
        "predict_dvq_set": {
            "Visualize BAR SELECT SECTION_DESCRIPTION , COUNT(SECTION_DESCRIPTION) FROM Sections GROUP BY SECTION_DESCRIPTION": 0.5,
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description": 0.3,
            "Visualize BAR SELECT section_description , COUNT(*) FROM Sections GROUP BY section_description": 0.2
        }
    },
    {
        "record_name": "2902",
        "db_id": "student_transcripts_tracking",
        "target": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "nlq": "Display the quantity of section descriptions for each respective section description.",
        "predict_rag_nlq": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "rag_dvqs": [
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description ASC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY section_description DESC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) ASC",
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description ORDER BY COUNT(section_description) DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description ASC",
            "Visualize BAR SELECT Description , COUNT(Description) FROM aircraft GROUP BY Description",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY Document_Description DESC",
            "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
        "predict_dvq_set": {
            "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description": 0.5,
            "Visualize BAR SELECT section_name , COUNT(section_name) FROM Sections GROUP BY section_name": 0.3,
            "Visualize BAR SELECT course_id , COUNT(course_id) FROM Sections GROUP BY course_id": 0.2
        }
    },
    {
        "record_name": "1990",
        "db_id": "insurance_fnol",
        "target": "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY",
        "nlq": "Retrieve the closing dates of all policies linked to the customer whose name includes \"Diana\", categorize the closing dates into intervals based on the day of the week, and generate a bar chart to display the count of policies in each interval.",
        "predict_rag_nlq": "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY",
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Closed) ASC BIN Date_Closed BY WEEKDAY",
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Closed) DESC BIN Date_Closed BY WEEKDAY",
            "Visualize BAR SELECT Date_Opened , COUNT(Date_Opened) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Opened BY WEEKDAY",
            "Visualize BAR SELECT Date_Opened , COUNT(Date_Opened) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Opened) ASC BIN Date_Opened BY WEEKDAY",
            "Visualize BAR SELECT Date_Opened , COUNT(Date_Opened) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"  ORDER BY COUNT(Date_Opened) DESC BIN Date_Opened BY WEEKDAY",
            "Visualize BAR SELECT order_date , COUNT(order_date) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\" GROUP BY customer_name BIN order_date BY WEEKDAY",
            "Visualize BAR SELECT order_date , COUNT(order_date) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id = t2.customer_id WHERE order_status = \"Delivered\" BIN order_date BY WEEKDAY",
            "Visualize BAR SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20 BIN date_became_customer BY WEEKDAY",
            "Visualize BAR SELECT date_became_customer , COUNT(date_became_customer) FROM customers WHERE customer_id BETWEEN 10 AND 20  ORDER BY COUNT(date_became_customer) ASC BIN date_became_customer BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers JOIN customers_policies ON customers.customer_id = customers_policies.customer_id WHERE customers.customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers JOIN customers_policies ON customers.Customer_ID = customers_policies.Customer_ID WHERE customers.Customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers JOIN customers_policies ON customers.Customer_ID = customers_policies.Customer_ID WHERE customers.Customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY": 0.6,
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers JOIN customers_policies ON customers.Customer_ID = customers_policies.Customer_ID WHERE customers.Customer_name LIKE \"%Diana%\" BIN Date_Closed BY MONTH": 0.2,
            "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers JOIN customers_policies ON customers.Customer_ID = customers_policies.Customer_ID WHERE customers.Customer_name LIKE \"%Diana%\" BIN Date_Closed BY DAY": 0.2
        }
    },
    {
        "record_name": "3019",
        "db_id": "tracking_share_transactions",
        "target": "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "nlq": "Display the identification numbers and information for the investors with the highest three transaction counts in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize PIE SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor",
            "Visualize PIE SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor",
            "Visualize SCATTER SELECT investor_id , COUNT(*) FROM TRANSACTIONS GROUP BY investor_id",
            "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor , COUNT(*) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Investor , COUNT(Investor) FROM entrepreneur GROUP BY Investor ORDER BY COUNT(Investor) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "predict_dvq_set": {
            "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3": 0.6,
            "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) ASC LIMIT 3": 0.2,
            "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 5": 0.1,
            "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "3019",
        "db_id": "tracking_share_transactions",
        "target": "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
        "nlq": "Show the identification and information for the investors who have the highest three counts of transactions. Display the proportion.",
        "predict_rag_nlq": "Visualize BAR SELECT Investor_details , COUNT(*) AS transaction_count FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY Investor_details ORDER BY transaction_count DESC LIMIT 3",
        "rag_dvqs": [
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY Investor_details ASC",
            "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.share_count > 100 GROUP BY Investor_details",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details DESC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC",
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY Investor_details ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC LIMIT 3",
        "predict_debugged_db_ann": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC LIMIT 3",
        "predict_dvq_set": {
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC LIMIT 3": 0.6,
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY Investor_details ORDER BY COUNT(Investor_details) ASC LIMIT 3": 0.2,
            "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM Investors AS T1 JOIN Transactions AS T2 ON T1.investor_id = T2.investor_id GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC LIMIT 5": 0.2
        }
    },
    {
        "record_name": "525",
        "db_id": "college_1",
        "target": "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "nlq": "Obtain the enrollment count for each department with the three highest student populations, and represent it using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT T1.DEPT_NAME, COUNT(T2.STU_NUM) FROM DEPARTMENT AS T1 JOIN STUDENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_NAME ORDER BY COUNT(T2.STU_NUM) DESC LIMIT 3",
        "rag_dvqs": [
            "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize BAR SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code = T2.crs_code GROUP BY dept_code",
            "Visualize BAR SELECT T1.dept_name , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY count(DISTINCT T3.id) DESC",
            "Visualize BAR SELECT T1.dept_name , count(DISTINCT T2.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY count(DISTINCT T2.id) DESC",
            "Visualize BAR SELECT T1.dept_name , count(DISTINCT T3.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY T1.dept_name DESC",
            "Visualize BAR SELECT T1.dept_name , count(DISTINCT T2.id) FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name ORDER BY T1.dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT DEPT_NAME , COUNT(STU_NUM) FROM DEPARTMENT AS T1 JOIN STUDENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(STU_NUM) DESC LIMIT 3",
        "predict_debugged_db_ann": "Visualize PIE SELECT DEPT_NAME , COUNT(STU_NUM) FROM DEPARTMENT AS T1 JOIN STUDENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(STU_NUM) DESC LIMIT 3",
        "predict_dvq_set": {
            "Visualize PIE SELECT DEPT_NAME , COUNT(STU_NUM) FROM DEPARTMENT AS T1 JOIN STUDENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(STU_NUM) DESC LIMIT 3": 0.6,
            "Visualize PIE SELECT DEPT_NAME , COUNT(STU_NUM) FROM DEPARTMENT AS T1 JOIN STUDENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(STU_NUM) ASC LIMIT 3": 0.2,
            "Visualize PIE SELECT DEPT_NAME , COUNT(STU_NUM) FROM DEPARTMENT AS T1 JOIN STUDENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(STU_NUM) DESC LIMIT 5": 0.2
        }
    },
    {
        "record_name": "525",
        "db_id": "college_1",
        "target": "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "nlq": "Which three departments have the highest number of students? Represent the department names and number of students using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT DEPT_NAME, COUNT(*) FROM STUDENT GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC LIMIT 3",
        "rag_dvqs": [
            "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize PIE SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize PIE SELECT DEPT_ADDRESS , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize PIE SELECT DEPT_CODE , max(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT DEPT_NAME , COUNT(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY T1.DEPT_CODE ORDER BY COUNT(*) DESC LIMIT 3",
        "predict_debugged_db_ann": "Visualize PIE SELECT DEPT_NAME , COUNT(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC LIMIT 3",
        "predict_dvq_set": {
            "Visualize PIE SELECT DEPT_NAME , COUNT(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC LIMIT 3": 0.6,
            "Visualize PIE SELECT DEPT_NAME , COUNT(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(*) ASC LIMIT 3": 0.2,
            "Visualize PIE SELECT DEPT_NAME , COUNT(*) FROM STUDENT AS T1 JOIN DEPARTMENT AS T2 ON T1.DEPT_CODE = T2.DEPT_CODE GROUP BY DEPT_NAME ORDER BY COUNT(*) DESC LIMIT 5": 0.2
        }
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "nlq": "Present the budget type codes and the count of documents in each budget type using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_dvq_set": {
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.5,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code IS NOT NULL GROUP BY Budget_Type_Code": 0.3,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses HAVING COUNT(*) > 0 GROUP BY Budget_Type_Code": 0.2
        }
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "nlq": "Display the codes of budget types and the quantity of documents in each budget type. Show the proportion.",
        "predict_rag_nlq": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_dvq_set": {
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.5,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code IS NOT NULL GROUP BY Budget_Type_Code": 0.2
        }
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "nlq": "Present a pie chart illustrating the various types of budget codes, along with the corresponding number of documents for each.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_dvq_set": {
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.6,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.2,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code IS NOT NULL GROUP BY Budget_Type_Code": 0.1,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code IS NOT NULL GROUP BY Budget_Type_Code ORDER BY Budget_Type_Code ASC": 0.1
        }
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "nlq": "Provide the distribution of various budget type codes and the corresponding number of documents for each code, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "rag_dvqs": [
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) ASC",
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "predict_debugged_db_ann": "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_dvq_set": {
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.6,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code = 'Travel' GROUP BY Budget_Type_Code": 0.2,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code = 'Training' GROUP BY Budget_Type_Code": 0.2
        }
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "nlq": "What are the distinct codes for budget types, and what is the count of documents for each code? Present the information in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code, COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_debugged_db_ann": "Visualize PIE SELECT BUDGET_TYPE_CODE , COUNT(BUDGET_TYPE_CODE) FROM Documents_with_Expenses GROUP BY BUDGET_TYPE_CODE",
        "predict_dvq_set": {
            "Visualize PIE SELECT BUDGET_TYPE_CODE , COUNT(BUDGET_TYPE_CODE) FROM Documents_with_Expenses GROUP BY BUDGET_TYPE_CODE": 0.5,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(Budget_Type_Code) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.3,
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.2
        }
    },
    {
        "record_name": "802",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "nlq": "Calculate the overall number by budget type code and represent it as a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "rag_dvqs": [
            "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize PIE SELECT Document_Type_Code , count(*) FROM Documents GROUP BY document_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
        "predict_debugged_db_ann": "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code",
        "predict_dvq_set": {
            "Visualize PIE SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.6,
            "Visualize PIE SELECT Budget_Type_Code , SUM(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.2,
            "Visualize PIE SELECT Budget_Type_Code , AVG(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.1,
            "Visualize PIE SELECT Budget_Type_Code , MAX(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code": 0.1
        }
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "nlq": "Calculate the aggregate revenue for each manufacturer and represent the data as a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name": 0.6,
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM Manufacturers GROUP BY Headquarter": 0.2,
            "Visualize BAR SELECT Founder , SUM(Revenue) FROM Manufacturers GROUP BY Founder": 0.1,
            "Visualize BAR SELECT Name , AVG(Revenue) FROM Manufacturers GROUP BY Name": 0.1
        }
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "nlq": "A bar chart representing the cumulative revenue of each producer.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY max(revenue) ASC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY sum(revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name ORDER BY sum(revenue) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name ORDER BY SUM(Revenue) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name ORDER BY SUM(Revenue) ASC": 0.4,
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name ORDER BY SUM(Revenue) DESC": 0.3,
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name ORDER BY Name ASC": 0.2,
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name ORDER BY Name DESC": 0.1
        }
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "nlq": "Provide a bar chart illustrating the cumulative revenue of each manufacturer.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name": 0.6,
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Headquarter": 0.2,
            "Visualize BAR SELECT Founder , SUM(Revenue) FROM Manufacturers GROUP BY Founder": 0.1,
            "Visualize BAR SELECT Name , AVG(Revenue) FROM Manufacturers GROUP BY Name": 0.1
        }
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "nlq": "What is the cumulative income of each producer?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name": 0.4,
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Code": 0.3,
            "Visualize BAR SELECT Founder , SUM(Revenue) FROM Manufacturers GROUP BY Founder": 0.2,
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM Manufacturers GROUP BY Headquarter": 0.1
        }
    },
    {
        "record_name": "2181",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "nlq": "Bar chart to display the total revenue from various names.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) ASC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name ORDER BY sum(revenue) DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter",
            "Visualize BAR SELECT Name , max(revenue) FROM manufacturers GROUP BY Headquarter ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Revenue FROM manufacturers ORDER BY revenue DESC",
            "Visualize BAR SELECT Founder , sum(revenue) FROM manufacturers GROUP BY founder ORDER BY Founder ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Name": 0.4,
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Products GROUP BY Name": 0.3,
            "Visualize BAR SELECT Name , SUM(Revenue) FROM Manufacturers GROUP BY Headquarter": 0.2,
            "Visualize BAR SELECT Name , AVG(Revenue) FROM Manufacturers GROUP BY Name": 0.1
        }
    },
    {
        "record_name": "2646",
        "db_id": "race_track",
        "target": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "nlq": "Display the names and seating capacities of tracks opened after 2000 in a bar graph, ordered by seating capacity.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating ASC": 0.6,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened >= 2000 ORDER BY Seating ASC": 0.3,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating DESC": 0.1
        }
    },
    {
        "record_name": "2646",
        "db_id": "race_track",
        "target": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "nlq": "Display the names and seating capacities, sorted by seating capacity, for all tracks that were opened after the year 2000. Represent them in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating": 0.4,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened >= 2001 ORDER BY Seating": 0.3,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 SORT BY Seating": 0.2,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating ASC": 0.1
        }
    },
    {
        "record_name": "2646",
        "db_id": "race_track",
        "target": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "nlq": "Provide a histogram of the names and seating capacities for all tracks that were opened after the year 2000, ordered by seating capacity.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating": 0.6,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened >= 2000 ORDER BY Seating": 0.2,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating DESC": 0.1,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating ASC": 0.1
        }
    },
    {
        "record_name": "2646",
        "db_id": "race_track",
        "target": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "nlq": "Provide a bar chart displaying the names and seating capacities of all tracks opened after 2000, ordered by seating capacity.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY Seating",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , count(*) FROM race AS T1 JOIN track AS T2 ON T1.track_id = T2.track_id GROUP BY T1.track_id ORDER BY T2.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating": 0.5,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened >= 2000 ORDER BY Seating": 0.3,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating DESC": 0.2
        }
    },
    {
        "record_name": "2646",
        "db_id": "race_track",
        "target": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
        "nlq": "What are the titles and capacities for all tracks that opened after 2000, sorted by capacity. Display the information using a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Capacity FROM track WHERE Year_Opened > 2000 ORDER BY Capacity",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
            "Visualize PIE SELECT Name , Seating FROM track WHERE year_opened > 2000",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Capacity DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Capacity FROM cinema",
            "Visualize BAR SELECT name , COUNT(name) FROM races WHERE YEAR BETWEEN 2009 AND 2011 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT Name , Manufacturer_ID FROM manufacturer ORDER BY open_year",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Capacity FROM track WHERE Year_Opened > 2000 ORDER BY Capacity",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Seating": 0.5,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Name": 0.3,
            "Visualize BAR SELECT Name , Seating FROM track WHERE Year_Opened > 2000 ORDER BY Name DESC": 0.2
        }
    },
    {
        "record_name": "636@y_name@DESC",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "nlq": "Find the mean of credit units for courses that have multiple prerequisites for each course title, and present it in a bar chart. Please arrange the bars in descending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) DESC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) ASC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC": 0.4,
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) ASC": 0.3,
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC": 0.2,
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC": 0.1
        }
    },
    {
        "record_name": "636@y_name@DESC",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "nlq": "What is the mean credit value of courses that have more than one prerequisite for each title? Please present the results in a bar graph, ordered in descending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY COUNT(prereq_id) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) DESC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY SUM(credits) ASC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT title , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC": 0.4,
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id WHERE COUNT(prereq_id) > 1 GROUP BY title ORDER BY AVG(credits) DESC": 0.3,
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id HAVING COUNT(prereq_id) > 1 GROUP BY title ORDER BY AVG(credits) DESC": 0.2,
            "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title HAVING COUNT(prereq_id) > 1 ORDER BY AVG(credits) DESC": 0.1
        }
    },
    {
        "record_name": "2149@y_name@DESC",
        "db_id": "local_govt_in_alabama",
        "target": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
        "nlq": "Provide a bar chart illustrating the quantity of event details for events that involve multiple participants, arranged in descending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) ASC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY Event_Details DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY Event_Details ASC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY EVENT_DETAILS ORDER BY COUNT(EVENT_DETAILS) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY EVENT_DETAILS ORDER BY COUNT(EVENT_DETAILS) DESC": 0.4,
            "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID WHERE COUNT(Participant_ID) > 1 GROUP BY EVENT_DETAILS ORDER BY COUNT(EVENT_DETAILS) DESC": 0.3,
            "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY EVENT_DETAILS HAVING COUNT(Participant_ID) > 1 ORDER BY COUNT(EVENT_DETAILS) DESC": 0.2,
            "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY EVENT_DETAILS ORDER BY COUNT(EVENT_DETAILS) DESC LIMIT 10": 0.1
        }
    },
    {
        "record_name": "2149@y_name@DESC",
        "db_id": "local_govt_in_alabama",
        "target": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
        "nlq": "For events that involve multiple participants, tally the details of each event for a bar graph, and sort them in descending order along the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) ASC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY Event_Details DESC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY Event_Details ASC",
            "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_ID DESC",
            "Visualize BAR SELECT T1.Event_Details , T1.Event_ID FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY T1.Event_Details ORDER BY T1.Event_Details ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY EVENT_DETAILS ORDER BY COUNT(EVENT_DETAILS) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY EVENT_DETAILS ORDER BY COUNT(EVENT_DETAILS) DESC": 0.5,
            "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY EVENT_DETAILS ORDER BY EVENT_DETAILS DESC": 0.3,
            "Visualize BAR SELECT EVENT_DETAILS , COUNT(EVENT_DETAILS) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY EVENT_DETAILS ORDER BY EVENT_DETAILS ASC": 0.2
        }
    },
    {
        "record_name": "709",
        "db_id": "county_public_safety",
        "target": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Present a bar chart illustrating the number of police forces associated with each county.",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County DESC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) DESC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY COUNT(T2.Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC": 0.6,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "709",
        "db_id": "county_public_safety",
        "target": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Provide a bar graph illustrating the number of police forces associated with each county.",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_dvq_set": {
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.6,
            "Visualize BAR SELECT County_ID , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.2,
            "Visualize BAR SELECT Name , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.1,
            "Visualize BAR SELECT Location , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.1
        }
    },
    {
        "record_name": "709",
        "db_id": "county_public_safety",
        "target": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "What is the number of counties corresponding to each police force?",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_dvq_set": {
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.6,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY County_ID": 0.2,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Name": 0.1,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Population": 0.1
        }
    },
    {
        "record_name": "709",
        "db_id": "county_public_safety",
        "target": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Create a bar chart illustrating the aggregate count across the police force.",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC": 0.6,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Police_force , SUM(Population) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC": 0.1,
            "Visualize BAR SELECT Police_force , AVG(Crime_rate) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC": 0.1
        }
    },
    {
        "record_name": "1580",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or belong to a department other than 40, create a bar chart illustrating the distribution of hire dates. The hire dates should be grouped into bins based on time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(*) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , MAX(SALARY) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1580",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "nlq": "For the employees whose salary falls within the range of 8000 and 12000, and their commission is not null or their department number is not equal to 40, provide a comparison of the hire_date amount across different hire_date bins by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1580",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "nlq": "For employees whose salary falls between 8000 and 12000, and either have a non-null commission or their department number is not 40, please depict the distribution of hire dates and the number of employees hired on each hire date using a bar chart. Bin the hire dates by time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40  BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1580",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "nlq": "For employees with salaries ranging from 8000 to 12000, and having non-null commission or not belonging to department number 40, determine the hire_date and categorize them into bins based on hire_date intervals. Finally, visualize this data using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL AND DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "1580",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000 and have a non-null commission or do not belong to department number 40, create a bar chart illustrating the distribution of hire dates and bin hire dates based on time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH": 0.1,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "2177@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
        "nlq": "What is the count of product names in the store? Please sort them in descending order by name.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC": 0.5,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC": 0.2
        }
    },
    {
        "record_name": "2177@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
        "nlq": "Provide me with a bar chart illustrating the frequency of each name occurrence, with the bars arranged from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY COUNT(product_name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC": 0.4,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC": 0.2,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC": 0.1
        }
    },
    {
        "record_name": "2177@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
        "nlq": "Tally the names of all the products in the store and provide me with a bar graph, could you sort the X-axis in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY Product_Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC": 0.2,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC": 0.2,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC": 0.3
        }
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the data pertaining to products and their respective manufacturers, create a scatter plot illustrating the relationship between the manufacturer and revenue. Additionally, group the data based on the attribute of the manufacturer's headquarters.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.Revenue, T2.Headquarter FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T2.Revenue , T2.Headquarter FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T2.Revenue , T2.Headquarter FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T2.Revenue , T2.Headquarter FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.6,
            "Visualize SCATTER SELECT T2.Revenue , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2,
            "Visualize SCATTER SELECT T2.Revenue , T2.Headquarter FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code": 0.2
        }
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the records pertaining to products and their respective manufacturers, generate a scatter chart illustrating the correlation between the manufacturer and revenue, while grouping the data based on the attribute \"headquarter.\"",
        "predict_rag_nlq": "Visualize SCATTER SELECT T2.Code , T2.Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT T2.Code , T2.Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT T2.Code , T2.Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT T2.Code , T2.Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.6,
            "Visualize SCATTER SELECT T2.Name , T2.Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2,
            "Visualize SCATTER SELECT T2.Headquarter , T2.Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.2
        }
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the data regarding product records and their respective manufacturers, please present the correlation between the manufacturer and revenue in a scatter chart, grouping them by the attribute \"headquarter\".",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Manufacturer, T2.Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Manufacturer , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Name , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Name , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter": 0.4,
            "Visualize SCATTER SELECT Name , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Founder": 0.3,
            "Visualize SCATTER SELECT Name , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name": 0.2,
            "Visualize SCATTER SELECT Name , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Revenue": 0.1
        }
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the records pertaining to products and the respective manufacturers, a scatter chart illustrates the relationship between the manufacturer and revenue, grouped by the attribute of the manufacturer's headquarters.",
        "predict_rag_nlq": "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.4,
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder": 0.3,
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Name": 0.2,
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Revenue": 0.1
        }
    },
    {
        "record_name": "2291",
        "db_id": "manufactory_1",
        "target": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the records pertaining to the products and their respective manufacturers, create a scatter chart illustrating the relationship between the manufacturer and revenue, and group them based on the attribute of headquarters.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Manufacturer, Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Code , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT Price , Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize SCATTER SELECT T1.Manufacturer , T2.Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Name",
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Manufacturer , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Manufacturer , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.6,
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder": 0.2,
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Name": 0.1,
            "Visualize SCATTER SELECT Manufacturer , Revenue FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Revenue": 0.1
        }
    },
    {
        "record_name": "1481@y_name@ASC",
        "db_id": "game_injury",
        "target": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
        "nlq": "How many injured players, excluding those with knee problems, are there in each match? Please show me a bar chart, grouping by the number of matches, and ranking them on the y-axis from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches DESC",
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) DESC",
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY COUNT(Date) ASC",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY COUNT(Date) DESC",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY Date DESC",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date ORDER BY Date ASC",
            "Visualize BAR SELECT Date , COUNT(Date) FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id GROUP BY Date"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE Injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE Injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC": 0.5,
            "Visualize BAR SELECT Number_of_matches , COUNT(Player) FROM injury_accident WHERE Injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC": 0.3,
            "Visualize BAR SELECT Number_of_matches , COUNT(Player) FROM injury_accident WHERE Injury != 'Knee problems' GROUP BY Number_of_matches ORDER BY Number_of_matches ASC": 0.2
        }
    },
    {
        "record_name": "1157",
        "db_id": "dog_kennels",
        "target": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "nlq": "Present the quantity of dogs belonging to the least common breed on each day of treatment using a grouping line chart organized by the treatment date.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) GROUP BY date_of_treatment ORDER BY date_of_treatment",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY DAY",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived ASC",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived DESC",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1) GROUP BY date_of_treatment ORDER BY date_of_treatment",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY date_of_treatment ORDER BY date_of_treatment",
        "predict_dvq_set": {
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY date_of_treatment ORDER BY date_of_treatment": 0.5,
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY date_of_treatment ORDER BY date_of_treatment": 0.3,
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY date_of_treatment ORDER BY COUNT(date_of_treatment) DESC": 0.2
        }
    },
    {
        "record_name": "1157",
        "db_id": "dog_kennels",
        "target": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
        "nlq": "How many dogs of the least common breed are there on each day of treatment? Create a line graph with grouping by treatment date, please.",
        "predict_rag_nlq": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) GROUP BY date_of_treatment",
        "rag_dvqs": [
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY DAY",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 ) name BIN date_of_treatment BY WEEKDAY",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived ASC",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived ORDER BY date_arrived DESC",
            "Visualize LINE SELECT date_arrived , COUNT(date_arrived) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_arrived",
            "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id GROUP BY date_departed ORDER BY COUNT(date_departed) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code =(SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1) GROUP BY date_of_treatment",
        "predict_debugged_db_ann": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY date_of_treatment",
        "predict_dvq_set": {
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY date_of_treatment": 0.5,
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) DESC LIMIT 1) GROUP BY date_of_treatment": 0.3,
            "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = (SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY COUNT(*) ASC LIMIT 1) GROUP BY date_of_treatment ORDER BY date_of_treatment ASC": 0.2
        }
    },
    {
        "record_name": "2629@y_name@ASC",
        "db_id": "protein_institute",
        "target": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
        "nlq": "In a bar chart, arrange the institution types on the X-axis and display the number of institutions for each type on the Y-axis. Please rank them from lowest to highest using the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY Type ASC": 0.1
        }
    },
    {
        "record_name": "2629@y_name@ASC",
        "db_id": "protein_institute",
        "target": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
        "nlq": "Could you please provide me with a bar chart indicating the types of institutions, accompanied by the respective count of institutions for each type? Additionally, arrange the chart from lowest to highest on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) ASC": 0.5,
            "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY Type ASC": 0.2
        }
    },
    {
        "record_name": "2629@y_name@ASC",
        "db_id": "protein_institute",
        "target": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
        "nlq": "Create a bar graph representing the relationship between type and the total count, and arrange the bars in ascending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) ASC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE ORDER BY sum(enrollment) DESC",
            "Visualize BAR SELECT Type , sum(enrollment) FROM institution GROUP BY TYPE"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) ASC": 0.5,
            "Visualize BAR SELECT Type , COUNT(*) FROM Institution GROUP BY Type ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Type , SUM(Enrollment) FROM Institution GROUP BY Type ORDER BY SUM(Enrollment) ASC": 0.2
        }
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the data pertaining to products and their respective manufacturers, a bar chart can display the distribution of headquarters and the average of manufacturers, grouped by the attribute \"headquarter\".",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT HEADQUARTER , AVG(MANUFACTURER) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY HEADQUARTER",
        "predict_dvq_set": {
            "Visualize BAR SELECT HEADQUARTER , AVG(MANUFACTURER) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY HEADQUARTER": 0.5,
            "Visualize BAR SELECT HEADQUARTER , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY HEADQUARTER": 0.3,
            "Visualize BAR SELECT HEADQUARTER , COUNT(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY HEADQUARTER": 0.2
        }
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the data pertaining to the products and their respective manufacturers, provide me with a comparison of the average values of manufacturers across different headquarters, and group them by the attribute \"headquarter\".",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.6,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.2,
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.1,
            "Visualize BAR SELECT Headquarter , AVG(Founder) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.1
        }
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the records pertaining to products and their respective manufacturers, create a bar chart illustrating the distribution of headquarters and the average information about the manufacturers, categorized by the \"headquarter\" attribute.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.6,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.3,
            "Visualize BAR SELECT Headquarter , COUNT(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.1
        }
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the given records of products and their respective manufacturers, generate a bar chart illustrating the distribution of headquarters and the average manufacturer attribute, grouping them based on the headquarter attribute.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.6,
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.3,
            "Visualize BAR SELECT Headquarter , COUNT(Name) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.1
        }
    },
    {
        "record_name": "2221",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
        "nlq": "For the entries related to the products and their respective manufacturers, identify the headquarters location and calculate the average manufacturer attribute. Group the data by the headquarters attribute and visualize it using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , AVG(T2.Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter": 0.6,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Founder": 0.2,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Name": 0.1,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Revenue": 0.1
        }
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees hired prior to 2002-06-21, create a bar chart displaying the distribution of job_ids and the sum of employee_ids, grouped by the job_id attribute, and sorted in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , COUNT(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC": 0.2
        }
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees who were hired prior to 2002-06-21, retrieve the job_id and calculate the sum of employee_id, then group them by the job_id attribute. Visualize this data using a bar chart, and please order the X-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC": 0.2
        }
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees who were hired prior to 2002-06-21, create a bar chart depicting the distribution of job_id and the sum of employee_id, grouped by the job_id attribute, and display the bars in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , COUNT(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(EMPLOYEE_ID) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY AVG(SALARY) DESC": 0.2
        }
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees hired before 2002-06-21, generate a bar chart illustrating the distribution of job_id and the sum of employee_id, grouped by the job_id attribute. Please ensure that the X-axis is ordered in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , COUNT(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(EMPLOYEE_ID) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2
        }
    },
    {
        "record_name": "1774@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For employees hired prior to 2002-06-21, please present the distribution of job IDs and the total sum of employee IDs. Group the data by the job ID attribute and display the information in a bar graph, with the bars arranged in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(SALARY) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(DEPARTMENT_ID) DESC",
            "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY SUM(EMPLOYEE_ID) DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , COUNT(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY COUNT(EMPLOYEE_ID) DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE HIRE_DATE < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.2
        }
    },
    {
        "record_name": "1408",
        "db_id": "flight_1",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "Display the complete list of destinations and the corresponding number of flights to each destination using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT destination, COUNT(*) FROM Flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT destination , COUNT(destination) FROM flight GROUP BY destination",
        "predict_dvq_set": {
            "Visualize BAR SELECT destination , COUNT(destination) FROM flight GROUP BY destination": 0.4,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination": 0.3,
            "Visualize BAR SELECT destination , COUNT(flno) FROM flight GROUP BY destination": 0.2,
            "Visualize BAR SELECT destination , COUNT(DISTINCT flno) FROM flight GROUP BY destination": 0.1
        }
    },
    {
        "record_name": "1408",
        "db_id": "flight_1",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "Display all the places and the corresponding count of flights to each place. Represent them in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination ORDER BY COUNT(*) ASC": 0.4,
            "Visualize BAR SELECT origin , COUNT(*) FROM flight GROUP BY origin ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT origin , COUNT(*) FROM flight GROUP BY origin ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "1408",
        "db_id": "flight_1",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "Create a bar chart illustrating the destinations and the corresponding number of flights to each destination.",
        "predict_rag_nlq": "Visualize BAR SELECT destination, COUNT(*) FROM Flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(*) FROM Flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT DESTINATION , COUNT(*) FROM flight GROUP BY DESTINATION",
        "predict_dvq_set": {
            "Visualize BAR SELECT DESTINATION , COUNT(*) FROM flight GROUP BY DESTINATION": 0.4,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination": 0.3,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "1408",
        "db_id": "flight_1",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "A bar chart illustrating the destinations and the corresponding number of flights to each destination.",
        "predict_rag_nlq": "Visualize BAR SELECT destination, count(*) FROM Flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT destination , COUNT(destination) FROM flight GROUP BY destination",
        "predict_dvq_set": {
            "Visualize BAR SELECT destination , COUNT(destination) FROM flight GROUP BY destination": 0.6,
            "Visualize BAR SELECT origin , COUNT(destination) FROM flight GROUP BY origin": 0.2,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination": 0.2
        }
    },
    {
        "record_name": "1408",
        "db_id": "flight_1",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "What are the locations and the respective number of flights to each destination? Please represent this information visually using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(*) FROM Flight GROUP BY destination",
        "predict_debugged_db_ann": "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination",
        "predict_dvq_set": {
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination": 0.5,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight WHERE destination != 'origin' GROUP BY destination": 0.3,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight WHERE departure_date >= '2022-01-01' GROUP BY destination": 0.2
        }
    },
    {
        "record_name": "1408",
        "db_id": "flight_1",
        "target": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
        "nlq": "Draw a bar chart comparing different destinations based on the total number of visits.",
        "predict_rag_nlq": "Visualize BAR SELECT destination, COUNT(*) FROM flight GROUP BY destination ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY count(*) ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination DESC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY COUNT(destination) ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination ORDER BY destination ASC",
            "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination",
            "Visualize BAR SELECT destination , COUNT(destination) FROM Flight GROUP BY destination"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT destination , COUNT(destination) FROM flight GROUP BY destination ORDER BY COUNT(destination) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT destination , COUNT(destination) FROM flight GROUP BY destination ORDER BY COUNT(destination) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT destination , COUNT(destination) FROM flight GROUP BY destination ORDER BY COUNT(destination) DESC": 0.6,
            "Visualize BAR SELECT origin , COUNT(destination) FROM flight GROUP BY origin ORDER BY COUNT(destination) DESC": 0.2,
            "Visualize BAR SELECT destination , COUNT(*) FROM flight GROUP BY destination ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "850@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "nlq": "Display the count of documents created per day. Categorize the document date by yearly intervals and group them based on the description of document type. Use a grouping line chart to visualize the data, with the X-axis arranged in ascending order, please.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored DESC BIN Date_Stored BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR": 0.6,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR": 0.2,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY MONTH": 0.1,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY QUARTER": 0.1
        }
    },
    {
        "record_name": "850@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "nlq": "Display the quantity of documents generated each day, categorize the document dates into yearly intervals, and group them based on the description of the document type using a grouping line chart. Please arrange the data on the x-axis in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored DESC BIN Date_Stored BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR": 0.5,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR": 0.3,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY MONTH": 0.2
        }
    },
    {
        "record_name": "850@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "nlq": "Display the quantity of documents created each day and categorize the document date into year intervals. Group the data by document type description and present it in a line chart. Please sort the chart by the document date in ascending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored DESC BIN Date_Stored BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR": 0.5,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR": 0.3,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY MONTH": 0.2
        }
    },
    {
        "record_name": "850@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "nlq": "Display the count of documents created each day. Categorize the document date into year intervals and group them by document type description using a grouping line chart. Arrange the chart in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code  ORDER BY Document_Date DESC BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code BIN Document_Date BY YEAR",
            "Visualize LINE SELECT Date_Stored , COUNT(Date_Stored) FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored = T2.calendar_date  ORDER BY Date_Stored DESC BIN Date_Stored BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR": 0.6,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Date DESC BIN Document_Date BY YEAR": 0.2,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC BIN Document_Date BY YEAR": 0.1,
            "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC BIN Document_Date BY YEAR": 0.1
        }
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "nlq": "A scatter plot depicts the relationship between Shop_ID and Employee_ID.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring": 0.3,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM shop": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM employee": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM evaluation": 0.1,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring WHERE Is_full_time = true": 0.2
        }
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "nlq": "Create a scatter plot illustrating the relationship between the Shop_ID and Employee_ID.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring": 0.3,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM shop": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM employee": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM evaluation": 0.1,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring WHERE Is_full_time = true": 0.2
        }
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "nlq": "Visualize the correlation between Shop_ID and Employee_ID.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring": 0.3,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM employee": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM shop": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM evaluation": 0.1,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring WHERE Is_full_time = true": 0.2
        }
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "nlq": "Provide a scatter plot illustrating the relationship between Shop_ID and Employee_ID.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring": 0.3,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM shop": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM employee": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM evaluation": 0.1,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring WHERE Is_full_time = true": 0.2
        }
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "nlq": "Visualize a scatter plot illustrating the relationship between Shop_ID and Employee_ID.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID, Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT MANAGER_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring": 0.3,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM shop": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM employee": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM evaluation": 0.1,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring WHERE Is_full_time = true": 0.2
        }
    },
    {
        "record_name": "1357",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "nlq": "Scatter plot depicting shop ID on the x-axis and employee ID on the y-axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring GROUP BY Is_full_time",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT MIN(salary) , DEPARTMENT_ID FROM employees",
            "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE hire_date < '2002-06-21'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , DEPARTMENT_ID FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
            "Visualize SCATTER SELECT EMPLOYEE_ID , SALARY FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
            "Visualize SCATTER SELECT EMPLOYEE_ID , MANAGER_ID FROM employees WHERE hire_date < '2002-06-21'"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring": 0.3,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM shop": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM employee": 0.2,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM evaluation": 0.1,
            "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring WHERE Is_full_time = true": 0.2
        }
    },
    {
        "record_name": "657@y_name@ASC",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "nlq": "How many departments have a budget higher than the average budget in each building? Please provide a bar chart, listing the departments in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC": 0.5,
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY dept_name ORDER BY COUNT(dept_name) ASC": 0.3,
            "Visualize BAR SELECT building , COUNT(dept_name) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(dept_name) ASC": 0.2
        }
    },
    {
        "record_name": "657@y_name@ASC",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
        "nlq": "Provide a bar chart illustrating the number of departments with a budget greater than the average for each building, and arrange the buildings in ascending order from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY building DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) ASC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY building DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building ORDER BY COUNT(building) DESC",
            "Visualize BAR SELECT building , COUNT(building) FROM department GROUP BY building"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC": 0.5,
            "Visualize BAR SELECT building , COUNT(dept_name) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY building ASC": 0.3,
            "Visualize BAR SELECT building , COUNT(dept_name) FROM department WHERE budget >(SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(dept_name) ASC": 0.2
        }
    },
    {
        "record_name": "619",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
        "nlq": "Find the lowest wage for the departments with an average salary higher than the average payment of all instructors. Visualize them in a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name ORDER BY MIN(salary) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name ORDER BY MIN(salary) ASC": 0.4,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE AVG(salary) > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY MIN(salary) ASC": 0.3,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE AVG(salary) > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY AVG(salary) ASC": 0.2,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE AVG(salary) > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY dept_name ASC": 0.1
        }
    },
    {
        "record_name": "619",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
        "nlq": "Present a bar graph illustrating the minimum salary in departments where the average salary exceeds the overall average.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name ORDER BY MIN(salary) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name ORDER BY MIN(salary) ASC": 0.4,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE AVG(salary) > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY MIN(salary) ASC": 0.3,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE AVG(salary) > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY MIN(salary) DESC": 0.2,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE AVG(salary) > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY AVG(salary) ASC": 0.1
        }
    },
    {
        "record_name": "619",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
        "nlq": "Provide me with a histogram illustrating the minimum salary in departments where the average salary is higher than the overall average.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name ORDER BY MIN(salary) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name ORDER BY MIN(salary) ASC": 0.4,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE salary > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY MIN(salary) ASC": 0.3,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE salary > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY dept_name ASC": 0.2,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE salary > (SELECT AVG(salary) FROM instructor) GROUP BY dept_name ORDER BY dept_name DESC": 0.1
        }
    },
    {
        "record_name": "619",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
        "nlq": "What is the minimum salary in departments with an average salary higher than the overall average? Represent this data as a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name, MIN(salary) FROM instructor GROUP BY dept_name",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name",
        "predict_dvq_set": {
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name": 0.4,
            "Visualize BAR SELECT MIN(salary) FROM instructor GROUP BY dept_name HAVING AVG(salary) > (SELECT AVG(salary) FROM instructor)": 0.3,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE salary > (SELECT AVG(salary) FROM instructor)": 0.2,
            "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor WHERE AVG(salary) > (SELECT AVG(salary) FROM instructor)": 0.1
        }
    },
    {
        "record_name": "619",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
        "nlq": "Bar chart displaying the lowest salary for each department name.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY min(salary) DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name",
        "predict_dvq_set": {
            "BAR SELECT dept_name , MIN(salary) FROM instructor GROUP BY dept_name": 0.6,
            "BAR SELECT dept_name , MIN(salary) FROM instructor WHERE salary > 0 GROUP BY dept_name": 0.2,
            "BAR SELECT dept_name , MIN(salary) FROM instructor WHERE salary IS NOT NULL GROUP BY dept_name": 0.2
        }
    },
    {
        "record_name": "471",
        "db_id": "cinema",
        "target": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
        "nlq": "Provide me with a line chart displaying the average capacity of cinemas that were open for each year, please.",
        "predict_rag_nlq": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year",
        "rag_dvqs": [
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) ASC",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) DESC",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year",
        "predict_debugged_db_ann": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year",
        "predict_dvq_set": {
            "LINE SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year": 0.4,
            "LINE SELECT Openning_year , AVG(Capacity) FROM cinema WHERE Openning_year IS NOT NULL GROUP BY Openning_year": 0.3,
            "LINE SELECT Openning_year , AVG(Capacity) FROM cinema WHERE Openning_year > 0 GROUP BY Openning_year": 0.2,
            "LINE SELECT Openning_year , AVG(Capacity) FROM cinema WHERE Openning_year >= 1900 GROUP BY Openning_year": 0.1
        }
    },
    {
        "record_name": "471",
        "db_id": "cinema",
        "target": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
        "nlq": "Can you create a line graph illustrating the trend of the average capacity over the years of opening?",
        "predict_rag_nlq": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
            "Visualize LINE SELECT Openning_year , SUM(Capacity) FROM cinema  ORDER BY Openning_year DESC BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year",
            "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Opening_year , AVG(Capacity) FROM cinema ORDER BY Opening_year ASC BIN Opening_year BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Opening_year , AVG(Capacity) FROM cinema ORDER BY Opening_year ASC BIN Opening_year BY YEAR": 0.4,
            "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema ORDER BY Openning_year ASC BIN Openning_year BY YEAR": 0.3
        }
    },
    {
        "record_name": "672",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "nlq": "Create a scatter plot illustrating the relationship between \"Instructor\" and \"DNO\".",
        "predict_rag_nlq": "Visualize SCATTER SELECT Instructor, DNO FROM Course ORDER BY Instructor",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_tutor_ATB , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT Instructor , DNO FROM Faculty ORDER BY FacID": 0.2,
            "Visualize SCATTER SELECT Instructor , DNO FROM Member_of ORDER BY DNO": 0.2,
            "Visualize SCATTER SELECT Instructor , DNO FROM Enrolled_in ORDER BY Grade": 0.1,
            "Visualize SCATTER SELECT Instructor , DNO FROM Student ORDER BY Age": 0.1
        }
    },
    {
        "record_name": "672",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "nlq": "Provide a scatter plot illustrating the relationship between the variables \"Instructor\" and \"DNO\".",
        "predict_rag_nlq": "Visualize SCATTER SELECT Instructor, DNO FROM Course ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY CID": 0.2,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY CName": 0.2,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Hours": 0.2
        }
    },
    {
        "record_name": "672",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "nlq": "Create a scatter chart illustrating the correlation between Instructor and DNO.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT author_tutor_ATB , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY CID": 0.3,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Hours": 0.2,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY CName": 0.1
        }
    },
    {
        "record_name": "672",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "nlq": "Illustrate the correlation between Instructor and DNO.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT author_tutor_ATB , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits DESC": 0.3,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits ASC": 0.3
        }
    },
    {
        "record_name": "672",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
        "nlq": "Illustrate the relationship between Instructor and DNO in a scatter plot, please.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Instructor, DNO FROM Course",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Advisor , count(*) FROM STUDENT GROUP BY Advisor"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits DESC": 0.3,
            "Visualize SCATTER SELECT Instructor , DNO FROM Course ORDER BY Credits ASC": 0.3
        }
    },
    {
        "record_name": "1204@x_name@DESC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
        "nlq": "Provide a bar chart that groups the number of dogs each owner has by their last name, and display it in descending order based on the last name.",
        "predict_rag_nlq": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC": 0.4,
            "Visualize BAR SELECT first_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC": 0.3,
            "Visualize BAR SELECT last_name , COUNT(dog_id) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC": 0.2,
            "Visualize BAR SELECT last_name , COUNT(owner_id) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC": 0.1
        }
    },
    {
        "record_name": "1204@x_name@DESC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
        "nlq": "Display the number of dogs owned by each owner. Generate a bar chart that groups the data by the owner's last name and arrange the x-axis in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , COUNT(first_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY first_name ORDER BY COUNT(first_name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC": 0.4,
            "Visualize BAR SELECT first_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(last_name) DESC": 0.3,
            "Visualize BAR SELECT last_name , COUNT(dog_id) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(dog_id) DESC": 0.2,
            "Visualize BAR SELECT last_name , COUNT(*) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For the employees with salaries ranging from 8000 to 12000 and commission not null or department number not equal to 40, create a bar chart illustrating the distribution of hire dates and the sum of employee IDs binned by weekday. Please order the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For the employees with salaries ranging from 8000 to 12000 and either a non-null commission or a department number not equal to 40, retrieve the hire_date and calculate the sum of employee_id grouped by the weekday of the hire_date. Visualize this data using a bar chart and sort it in descending order based on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY HIRE_DATE DESC BIN HIRE_DATE BY WEEKDAY SORT Y DESC": 0.2
        }
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For employees with salaries ranging from 8000 to 12000 and having non-null commission or department number not equal to 40, present the distribution of hire dates and the sum of employee IDs binned by weekday in a bar graph, sorted in descending order along the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For employees whose salary ranges from 8000 to 12000, and either have a non-null commission or their department number is not equal to 40, create a bar chart illustrating the distribution of hire dates and bin the hire dates by weekday. Display the chart with the y-axis in descending order based on the sum of employee IDs.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "1590@y_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000 and have a non-null commission or belong to a department other than 40, please provide a bar chart depicting the distribution of hire dates and the sum of employee IDs binned by weekdays. List the results in descending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" AND DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "2753@x_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "nlq": "What is the cumulative count of captains with varying categories? Please present it based on the Class in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC": 0.6,
            "Visualize BAR SELECT Class , COUNT(Captain_ID) FROM captain GROUP BY Class ORDER BY Class ASC": 0.2,
            "Visualize BAR SELECT Class , COUNT(*) FROM captain GROUP BY Class ORDER BY Class ASC": 0.2
        }
    },
    {
        "record_name": "2753@x_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "nlq": "Create a bar chart illustrating the quantity of classes, grouped by class, ordered in ascending order by the class.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC": 0.5,
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC": 0.3,
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC": 0.2
        }
    },
    {
        "record_name": "2753@x_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "nlq": "Present a bar chart that compares the total count of captains from distinct classifications, and arrange the bars in ascending order based on the class, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC": 0.6,
            "Visualize BAR SELECT Class , COUNT(Captain_ID) FROM captain GROUP BY Class ORDER BY Class ASC": 0.3,
            "Visualize BAR SELECT Rank , COUNT(Class) FROM captain GROUP BY Rank ORDER BY Rank ASC": 0.1
        }
    },
    {
        "record_name": "2753@x_name@ASC",
        "db_id": "ship_1",
        "target": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "nlq": "Compare the overall count of captains across distinct categories using a bar chart, arranged in ascending order by the Class.",
        "predict_rag_nlq": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY COUNT(Class) DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY Class DESC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) ASC",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class",
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Rank ,  Class ORDER BY COUNT(Class) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC": 0.6,
            "Visualize BAR SELECT Class , COUNT(Captain_ID) FROM captain GROUP BY Class ORDER BY Class ASC": 0.3,
            "Visualize BAR SELECT Class , COUNT(*) FROM captain GROUP BY Class ORDER BY Class ASC": 0.1
        }
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "nlq": "Create a grouped bar chart depicting the distribution of Nationality and the total amount of meter_100, with Nationality as the grouping attribute. Sort the chart in ascending order based on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.4,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC": 0.1
        }
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "nlq": "Generate a grouped bar chart illustrating the distribution of Nationality and the sum of meter_100, sorted by the total number in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.6,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2
        }
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "nlq": "Bar chart with nationality on the x-axis and the sum of meters (100) on the y-axis, ranked in ascending order by the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.6,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_200) ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_300) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_300) ASC": 0.1,
            "Visualize BAR SELECT Nationality , SUM(meter_400) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_400) ASC": 0.1
        }
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "nlq": "Create a stacked bar chart illustrating the distribution of Nationality and the total sum of meter_100, grouped by the Nationality attribute, and arrange the display based on the ascending order of the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.5,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.3
        }
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "nlq": "Provide a comparison of the total sum of meter_100 across different nationalities, grouped by the attribute of nationality, and list the Y-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.5,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2
        }
    },
    {
        "record_name": "2908@y_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "nlq": "Retrieve the Nationality and the sum of meter_100, and group them by the attribute Nationality. Visualize this data using a bar chart, with the Y-axis ranked in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.5,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(meter_100) + SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.2
        }
    },
    {
        "record_name": "3269@x_name@DESC",
        "db_id": "world_1",
        "target": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "nlq": "For every continent where the average life expectancy is less than 72, create a bar graph to illustrate their average life expectancy, and arrange them in descending order by the continent.",
        "predict_rag_nlq": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC": 0.4,
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country WHERE avg(LifeExpectancy) < 72 GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC": 0.3,
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC": 0.2,
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent ORDER BY Continent DESC": 0.1
        }
    },
    {
        "record_name": "3269@x_name@DESC",
        "db_id": "world_1",
        "target": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "nlq": "Create a bar graph illustrating the relationship between continents and the average life expectancy, and arrange them in descending order based on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC": 0.4,
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC": 0.3,
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC": 0.2,
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC": 0.1
        }
    },
    {
        "record_name": "3269@x_name@DESC",
        "db_id": "world_1",
        "target": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "nlq": "Provide a bar chart illustrating the average life expectancy for each continent where the average life expectancy is less than 72, arranged in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY avg(LifeExpectancy) ASC",
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) DESC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY Continent ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72 ORDER BY sum(Population) ASC",
            "Visualize BAR SELECT Continent , sum(Population) FROM country GROUP BY Continent HAVING avg(LifeExpectancy) < 72"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country WHERE avg(LifeExpectancy) < 72 GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC": 0.6,
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent ORDER BY avg(LifeExpectancy) DESC": 0.3,
            "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country WHERE LifeExpectancy < 72 GROUP BY Continent ORDER BY Continent DESC": 0.1
        }
    },
    {
        "record_name": "2657@y_name@DESC",
        "db_id": "railway",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "nlq": "A bar chart illustrating the quantity of countries with managers aged above 50 or below 46, listed in descending order according to the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize PIE SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC": 0.6,
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC": 0.2,
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country ASC": 0.2
        }
    },
    {
        "record_name": "2657@y_name@DESC",
        "db_id": "railway",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "nlq": "Display the quantity of countries with managers aged above 50 or below 46, and could you arrange them in descending order by the total number, please?",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize PIE SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC": 0.5,
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age <= 46 GROUP BY Country ORDER BY COUNT(Country) DESC": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age >= 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC": 0.2
        }
    },
    {
        "record_name": "2657@y_name@DESC",
        "db_id": "railway",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
        "nlq": "Display the nations with managers aged above 50 or below 46, and represent them with a bar chart. Please arrange the countries in descending order based on the count.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize PIE SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country ORDER BY COUNT(Country) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY Country DESC": 0.5,
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) ASC": 0.2
        }
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "nlq": "Bar chart with the x-axis representing the ACC Road and the y-axis representing the average school ID. Please sort the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC": 0.5,
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC": 0.3,
            "Visualize BAR SELECT ACC_Road , AVG(Enrollment) FROM university GROUP BY ACC_Road ORDER BY AVG(Enrollment) ASC": 0.2
        }
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "nlq": "Create a bar chart illustrating the distribution of ACC_Road and the average of School_ID, grouped by the ACC_Road attribute. Please arrange the names in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC": 0.4,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC": 0.3,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC": 0.2,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road": 0.1
        }
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "nlq": "A grouped bar chart displays the distribution of ACC_Road and the average of School_ID, categorized by ACC_Road attribute, with names sorted in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC": 0.5,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC": 0.3,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC": 0.2
        }
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "nlq": "Display the distribution of ACC_Road and the average of School_ID, grouped by the ACC_Road attribute, in a bar chart. Please sort the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC": 0.3,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC": 0.2,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC": 0.2,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road": 0.3
        }
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "nlq": "Retrieve the ACC_Road attribute and calculate the average of the School_ID attribute. Group the data by ACC_Road and represent it visually using a bar chart. Please arrange the bars in ascending order, from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY SUM(School_ID) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC": 0.3,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC": 0.2,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC": 0.2,
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road": 0.3
        }
    },
    {
        "record_name": "3101@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "nlq": "Provide a comparison of the average School_ID across different ACC_Road attributes using a bar chart, and please sort the names in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) ASC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(School_ID) DESC",
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road DESC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) ASC",
            "Visualize BAR SELECT ACC_Road , SUM(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
            "Visualize BAR SELECT ACC_Road , AVG(Team_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY AVG(Team_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC": 0.5,
            "Visualize BAR SELECT ACC_Road , AVG(Enrollment) FROM university GROUP BY ACC_Road ORDER BY ACC_Road ASC": 0.3,
            "Visualize BAR SELECT ACC_Road , AVG(Founded) FROM university GROUP BY ACC_Road ORDER BY ACC_Road ASC": 0.2
        }
    },
    {
        "record_name": "541",
        "db_id": "college_1",
        "target": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "nlq": "Discover the correlation between the minimum and average GPA of all students in each department using a scatter plot grouped by department code.",
        "predict_rag_nlq": "Visualize SCATTER SELECT avg(stu_gpa), min(stu_gpa) FROM student GROUP BY dept_code",
        "rag_dvqs": [
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize PIE SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY avg(stu_gpa) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT avg(STU_GPA) , min(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT avg(STU_GPA) , min(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE": 0.5,
            "Visualize SCATTER SELECT min(STU_GPA) , avg(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE": 0.3,
            "Visualize SCATTER SELECT avg(STU_GPA) , min(STU_GPA) FROM STUDENT GROUP BY DEPT_NAME": 0.2
        }
    },
    {
        "record_name": "541",
        "db_id": "college_1",
        "target": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "nlq": "What is the correlation between the minimum and average student GPA for each department? Please provide a scatter plot with the departments grouped by department code.",
        "predict_rag_nlq": "Visualize SCATTER SELECT min(stu_gpa), avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "rag_dvqs": [
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize PIE SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT min(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT MIN(STU_GPA) , AVG(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT MIN(STU_GPA) , AVG(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE": 0.6,
            "Visualize SCATTER SELECT MIN(STU_GPA) , AVG(STU_GPA) FROM STUDENT GROUP BY DEPT_NAME": 0.2,
            "Visualize SCATTER SELECT MIN(STU_GPA) , AVG(STU_GPA) FROM STUDENT GROUP BY DEPT_ADDRESS": 0.1,
            "Visualize SCATTER SELECT MIN(STU_GPA) , AVG(STU_GPA) FROM STUDENT GROUP BY DEPT_EXTENSION": 0.1
        }
    },
    {
        "record_name": "541",
        "db_id": "college_1",
        "target": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "nlq": "Scatterplot of the minimum student GPA versus the average student GPA grouped by department code.",
        "predict_rag_nlq": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY dept_code",
        "rag_dvqs": [
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , avg(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize SCATTER SELECT max(stu_gpa) , min(stu_gpa) FROM student",
            "Visualize PIE SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , avg(stu_gpa) FROM student GROUP BY dept_code ORDER BY avg(stu_gpa) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT avg(STU_GPA) , min(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT avg(STU_GPA) , min(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE": 0.5,
            "Visualize SCATTER SELECT min(STU_GPA) , avg(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE": 0.3,
            "Visualize SCATTER SELECT min(STU_GPA) , avg(STU_GPA) FROM STUDENT GROUP BY DEPT_CODE ORDER BY avg(STU_GPA)": 0.2
        }
    },
    {
        "record_name": "683@x_name@DESC",
        "db_id": "company_employee",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "nlq": "Display the quantity of headquarters from each corporate office, and arrange them on the X-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC": 0.6,
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC": 0.2,
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC": 0.2
        }
    },
    {
        "record_name": "683@x_name@DESC",
        "db_id": "company_employee",
        "target": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "nlq": "What is the count of companies for each headquarters? Please visualize it using a bar chart and sort it in descending order by the headquarters.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters ASC",
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY COUNT(Headquarters) ASC",
            "Visualize BAR SELECT Headquarters , count(*) FROM company GROUP BY headquarters ORDER BY Headquarters DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC": 0.6,
            "Visualize BAR SELECT Headquarters , COUNT(Company_ID) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC": 0.2,
            "Visualize BAR SELECT Headquarters , COUNT(Name) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC": 0.1,
            "Visualize BAR SELECT Headquarters , COUNT(*) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC": 0.1
        }
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Generate a bar chart illustrating the distribution of Nationality and the total sum of meter_100, grouped by the attribute Nationality. Please arrange the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.6,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2
        }
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Create a bar chart illustrating the distribution of Nationality and the total of meter_100, grouped by the Nationality attribute. Please ensure that the X-axis is sorted in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.6,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_300) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.1,
            "Visualize BAR SELECT Nationality , SUM(meter_400) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.1
        }
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Provide me with a comparison of the total meter_100 values across different nationalities, grouped by the attribute 'Nationality', and arrange the x-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.6,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.2
        }
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Construct a bar chart depicting the distribution of Nationality and the cumulative sum of meter_100, grouped by the Nationality attribute, and arrange the bars in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.6,
            "Visualize BAR SELECT Nationality , SUM(meter_200) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.1,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC": 0.1
        }
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Bar chart with the nationality on the x-axis and the sum on the y-axis, with the x-axis ordered in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100 + meter_200 + meter_300 + meter_400 + meter_500 + meter_600 + meter_700) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY AVG(meter_100) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100 + meter_200 + meter_300 + meter_400 + meter_500 + meter_600 + meter_700) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100 + meter_200 + meter_300 + meter_400 + meter_500 + meter_600 + meter_700) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100 + meter_200 + meter_300 + meter_400 + meter_500 + meter_600 + meter_700) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.5,
            "Visualize BAR SELECT Nationality , SUM(meter_100 + meter_200 + meter_300 + meter_400 + meter_500 + meter_600 + meter_700) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100 + meter_200 + meter_300 + meter_400 + meter_500 + meter_600 + meter_700) ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(meter_100 + meter_200 + meter_300 + meter_400 + meter_500 + meter_600 + meter_700) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC": 0.2
        }
    },
    {
        "record_name": "2908@x_name@ASC",
        "db_id": "swimming",
        "target": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Retrieve the Nationality and the total sum of meter_100, and group them by the attribute Nationality. Visualize the data using a bar chart, and arrange the bars in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) ASC",
            "Visualize BAR SELECT Nationality , AVG(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY SUM(ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC": 0.4,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality DESC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) DESC": 0.1
        }
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Create a bar graph displaying the percentage of all games across all neutral locations, and arrange the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.6,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC": 0.2,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.1,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.1
        }
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Display the distribution of All_Neutral and All_Games_Percent in a bar chart, and arrange the bars in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.6,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.2,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.2
        }
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Provide me with the comparison between the All_Games_Percent and the All_Neutral, and sort it in ascending order based on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.5,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.3,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.2
        }
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Provide a bar chart that compares the All_Games_Percent to the All_Neutral, and arrange it in ascending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.6,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.3,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC": 0.1
        }
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Produce a bar graph depicting the distribution of All_Neutral and All_Games_Percent, arranged in ascending order based on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , Team_ID FROM basketball_match ORDER BY All_Neutral DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.5,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.3,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.2
        }
    },
    {
        "record_name": "3146@x_name@ASC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
        "nlq": "Find the data for All_Neutral and All_Games_Percent, and represent them in a bar graph, with the names ranked from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral DESC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent ASC",
            "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY ACC_Percent DESC",
            "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC": 0.6,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC": 0.2,
            "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral DESC": 0.2
        }
    },
    {
        "record_name": "2594",
        "db_id": "poker_player",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "What are the various nationalities of individuals and the respective population count for each nationality?",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality": 0.4,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people WHERE Nationality IS NOT NULL GROUP BY Nationality": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people WHERE Nationality <> '' GROUP BY Nationality": 0.2,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "2594",
        "db_id": "poker_player",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Generate a bar graph illustrating the various nationalities of individuals and the corresponding count of people from each country.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality": 0.5,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people WHERE Nationality != 'Unknown' GROUP BY Nationality": 0.2
        }
    },
    {
        "record_name": "2594",
        "db_id": "poker_player",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "What are the various ethnicities of individuals and their respective population sizes from each country? Represent this data using a bar chart, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY Country DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC": 0.5,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "2594",
        "db_id": "poker_player",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Create a bar graph depicting the population count for each nationality.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality": 0.4,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people WHERE Nationality IS NOT NULL GROUP BY Nationality": 0.2,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality LIMIT 10": 0.1
        }
    },
    {
        "record_name": "2594",
        "db_id": "poker_player",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Visualize a bar chart representing the population count for each nationality.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC": 0.4,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC": 0.2,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC": 0.1
        }
    },
    {
        "record_name": "2594",
        "db_id": "poker_player",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Display the quantity of individuals per nationality. Visualize this using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality": 0.4,
            "Visualize BAR SELECT Nationality , COUNT(People_ID) FROM people GROUP BY Nationality": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(Name) FROM people GROUP BY Nationality": 0.2,
            "Visualize BAR SELECT Nationality , COUNT(DISTINCT People_ID) FROM people GROUP BY Nationality": 0.1
        }
    },
    {
        "record_name": "2594",
        "db_id": "poker_player",
        "target": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "nlq": "Create a bar chart comparing nationality to the total number of individuals.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality",
            "Visualize BAR SELECT Country , count(*) FROM people GROUP BY country",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , COUNT(*) FROM HOST GROUP BY Nationality ORDER BY Nationality DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality": 0.4,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Name": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM poker_player GROUP BY Nationality": 0.2,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM poker_player GROUP BY People_ID": 0.1
        }
    },
    {
        "record_name": "468@x_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
        "nlq": "Provide a bar chart illustrating the total capacity for each year of establishment, and arrange the bars in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) ASC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) DESC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) ASC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY COUNT(Openning_year) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Opening_year , SUM(Capacity) FROM cinema GROUP BY Opening_year ORDER BY SUM(Capacity) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Opening_year , SUM(Capacity) FROM cinema GROUP BY Opening_year ORDER BY SUM(Capacity) DESC": 0.5,
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC": 0.3,
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) ASC": 0.2
        }
    },
    {
        "record_name": "468@x_name@DESC",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
        "nlq": "A bar chart displaying the total capacity of open cinemas for each year, could you please sort it in descending order based on the x-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) DESC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY SUM(Capacity) ASC",
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC",
            "Visualize BAR SELECT Openning_year , AVG(Capacity) FROM cinema GROUP BY Openning_year ORDER BY AVG(Capacity) DESC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
            "Visualize BAR SELECT Openning_year , COUNT(Openning_year) FROM cinema GROUP BY Openning_year ORDER BY openning_year DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Opening_year , SUM(Capacity) FROM cinema GROUP BY Opening_year ORDER BY Opening_year DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Opening_year , SUM(Capacity) FROM cinema GROUP BY Opening_year ORDER BY Opening_year DESC": 0.5,
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC": 0.3,
            "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year ASC": 0.2
        }
    },
    {
        "record_name": "1182@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "nlq": "Present the count of dogs that have departed each day using a grouped bar chart, where the bars are arranged in ascending order, based on the departure date.",
        "predict_rag_nlq": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC": 0.5,
            "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs WHERE date_departed IS NOT NULL GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC": 0.3,
            "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs WHERE date_departed IS NOT NULL AND date_departed <> '' GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC": 0.2
        }
    },
    {
        "record_name": "1182@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "nlq": "Display the quantity of departures for each departure date, and please arrange them in ascending order based on the date_departed.",
        "predict_rag_nlq": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC",
        "predict_dvq_set": {
            "BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC": 0.6,
            "BAR SELECT DATE_DEPARTED , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC": 0.2,
            "BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC": 0.2
        }
    },
    {
        "record_name": "1182@x_name@ASC",
        "db_id": "dog_kennels",
        "target": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "nlq": "How many canines left each day? Please visualize this using a bar chart that groups the data by the departure date. Could you sort the date_departed in ascending order?",
        "predict_rag_nlq": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) ASC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY COUNT(date_departed) DESC",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs BIN date_departed BY DAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) ASC BIN date_departed BY WEEKDAY",
            "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs  ORDER BY COUNT(date_departed) DESC BIN date_departed BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC": 0.5,
            "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED DESC": 0.3,
            "Visualize BAR SELECT DATE_DEPARTED , COUNT(DATE_DEPARTED) FROM Dogs WHERE DATE_DEPARTED IS NOT NULL GROUP BY DATE_DEPARTED ORDER BY DATE_DEPARTED ASC": 0.2
        }
    },
    {
        "record_name": "1510",
        "db_id": "gas_company",
        "target": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "nlq": "Display the quantity of companies in each primary sector that do not have a gas station using a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "rag_dvqs": [
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY Main_Industry ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY Main_Industry DESC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC",
            "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN(SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "predict_debugged_db_ann": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) GROUP BY Main_Industry",
        "predict_dvq_set": {
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) GROUP BY Main_Industry": 0.6,
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) AND Main_Industry != 'Gas Station' GROUP BY Main_Industry": 0.3,
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) AND Main_Industry != 'Petroleum' GROUP BY Main_Industry": 0.1
        }
    },
    {
        "record_name": "1510",
        "db_id": "gas_company",
        "target": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "nlq": "How many businesses without a fuel station are there in each primary sector? Create a bar chart to illustrate.",
        "predict_rag_nlq": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "rag_dvqs": [
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY Main_Industry ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY Main_Industry DESC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) DESC",
            "Visualize PIE SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY COUNT(Main_Industry) ASC",
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE headquarters != 'USA' GROUP BY Main_Industry ORDER BY Main_Industry ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN(SELECT company_id FROM station_company) GROUP BY Main_Industry",
        "predict_debugged_db_ann": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) GROUP BY Main_Industry",
        "predict_dvq_set": {
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) GROUP BY Main_Industry": 0.6,
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Station_ID IS NULL GROUP BY Main_Industry": 0.2,
            "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE Company_ID NOT IN(SELECT Company_ID FROM station_company) AND Main_Industry IS NOT NULL GROUP BY Main_Industry": 0.2
        }
    },
    {
        "record_name": "447",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "nlq": "A bar chart illustrating the titles and maximum prices of each film.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title",
        "predict_dvq_set": {
            "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title": 0.4,
            "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY max(T1.Price) DESC": 0.3,
            "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title HAVING max(T1.Price) > 10": 0.2,
            "Visualize BAR SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title LIMIT 10": 0.1
        }
    },
    {
        "record_name": "447",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "nlq": "Generate a bar chart showcasing the title and maximum price of each film.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Price DESC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY max(Price) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY max(Price) DESC": 0.4,
            "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY max(Price) ASC": 0.3,
            "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title DESC": 0.2,
            "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title ASC": 0.1
        }
    },
    {
        "record_name": "447",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "nlq": "What is the title and highest price of each movie?",
        "predict_rag_nlq": "Visualize PIE SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "rag_dvqs": [
            "Visualize PIE SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize PIE SELECT Title , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize PIE SELECT Title , COUNT(Title) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize PIE SELECT Name , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize PIE SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "predict_debugged_db_ann": "Visualize PIE SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title",
        "predict_dvq_set": {
            "Visualize PIE SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title": 0.4,
            "Visualize PIE SELECT Title , max(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title , max(T1.Price)": 0.3,
            "Visualize PIE SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title": 0.2,
            "Visualize PIE SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title , max(Price)": 0.1
        }
    },
    {
        "record_name": "447",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "nlq": "Present the title and maximum price for each movie in a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Price DESC",
            "Visualize BAR SELECT Title , Price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Name ,  Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY max(Price) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY max(Price) DESC": 0.4,
            "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY max(Price) ASC": 0.2,
            "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title DESC": 0.2,
            "Visualize BAR SELECT Title , max(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title ASC": 0.2
        }
    },
    {
        "record_name": "447",
        "db_id": "cinema",
        "target": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "nlq": "Provide the title and maximum price for each movie. Display the information in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "rag_dvqs": [
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) ASC",
            "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title ORDER BY max(T1.price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title ASC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) DESC",
            "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY AVG(Price) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
        "predict_debugged_db_ann": "Visualize BAR SELECT Title , MAX(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title",
        "predict_dvq_set": {
            "Visualize BAR SELECT Title , MAX(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title": 0.4,
            "Visualize BAR SELECT Title , MAX(T1.Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title, Price": 0.3,
            "Visualize BAR SELECT Title , MAX(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title": 0.2,
            "Visualize BAR SELECT Title , MAX(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title, Price": 0.1
        }
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "A grouping line chart illustrates the fluctuation of the average of Employee_ID across Start_from, categorized by the attribute Is_full_time and binned by time intervals. Please present the data on the x-axis in descending order from high to low.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.3,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY MONTH": 0.2,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY QUARTER": 0.2,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY DAY": 0.1,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY WEEK": 0.2
        }
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "Present the fluctuations in the average of Employee_ID across Start_from, classified by the attribute Is_full_time and categorizing Start_from by time intervals, in a line chart. Arrange the data on the X-axis in descending order, please.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.5,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY MONTH": 0.3,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY QUARTER": 0.2
        }
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "Present the trend of the average Employee_ID across Start_from, and group it by the attribute Is_full_time, with Start_from binned by time intervals, using a line chart. Please ensure that the X-axis is sorted in descending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.4,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY MONTH": 0.3,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY QUARTER": 0.2,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY DAY": 0.1
        }
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "Provide me with the trend in the average of Employee_ID over Start_from, grouping by the attribute Is_full_time and categorizing Start_from into time intervals. Display the results on the x-axis in descending order from high to low.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.3,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY MONTH": 0.2,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY QUARTER": 0.2,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY DAY": 0.1,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY WEEK": 0.2
        }
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "Create a line graph depicting the fluctuation of the average Employee_ID over Start_from, categorizing them based on the attribute Is_full_time and grouping Start_from into time intervals. Please sort Start_from in descending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.4,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY MONTH": 0.3,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY QUARTER": 0.2,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY DAY": 0.1
        }
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "For the mean of Employee_ID and Start_from, represent the pattern graphically and present it with the x-axis ordered from highest to lowest.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.3,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY MONTH": 0.2,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY QUARTER": 0.2,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY DAY": 0.1,
            "LINE SELECT Start_from , AVG(Employee_ID) FROM hiring ORDER BY Start_from DESC BIN Start_from BY WEEK": 0.2
        }
    },
    {
        "record_name": "1353@x_name@DESC",
        "db_id": "employee_hire_evaluation",
        "target": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "nlq": "I would like to visualize the average employee ID trend over time, grouped by the \"Is_full_time\" variable, and sorted on the X-axis in descending order.",
        "predict_rag_nlq": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "rag_dvqs": [
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR",
            "Visualize LINE SELECT Start_from , AVG(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR"
        ],
        "predict_debugged_ref_dvqs": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_debugged_db_ann": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR",
        "predict_dvq_set": {
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR": 0.3,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from ASC BIN Start_from BY YEAR": 0.2,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY MONTH": 0.3,
            "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY QUARTER": 0.2
        }
    },
    {
        "record_name": "2517@x_name@ASC",
        "db_id": "party_people",
        "target": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
        "nlq": "Which ministers do not belong to the Progress Party, and display them in a bar chart, listing the ministers from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister)",
        "rag_dvqs": [
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister )",
        "predict_debugged_db_ann": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE Party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister)",
        "predict_dvq_set": {
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE Party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister)": 0.5,
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE Party_name <> 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister)": 0.3,
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE Party_name NOT LIKE 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister)": 0.2
        }
    },
    {
        "record_name": "2517@x_name@ASC",
        "db_id": "party_people",
        "target": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
        "nlq": "Display a bar chart showing all ministers who are not affiliated with the Progress Party, and arrange them in ascending order based on the length of the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) ASC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY COUNT(Minister) DESC",
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party GROUP BY Minister ORDER BY Minister ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE Party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE Party_name != 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC": 0.6,
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE Party_name <> 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC": 0.3,
            "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE NOT Party_name = 'Progress Party' GROUP BY Minister ORDER BY COUNT(Minister) ASC": 0.1
        }
    },
    {
        "record_name": "1962@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "Provide a stacked bar chart that groups and tallies the job IDs for all employees in the Finance department, and please list them in descending order by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) DESC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE DESC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE ASC",
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2
        }
    },
    {
        "record_name": "1962@x_name@DESC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
        "nlq": "For all employees in the Finance department, compare the total count of distinct job IDs using a bar graph, and please list them in descending order by the bars.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , COUNT(DISTINCT JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(DISTINCT JOB_ID) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) DESC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY COUNT(JOB_TITLE) ASC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE DESC",
            "Visualize BAR SELECT JOB_TITLE , COUNT(JOB_TITLE) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id = T2.job_id WHERE T1.department_id = 80 GROUP BY JOB_TITLE ORDER BY JOB_TITLE ASC",
            "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID ORDER BY COUNT(JOB_ID) DESC": 0.5,
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC": 0.3,
            "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.DEPARTMENT_NAME = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2
        }
    },
    {
        "record_name": "682@x_name@DESC",
        "db_id": "company_employee",
        "target": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "nlq": "Industry-wise bar chart with the number of industries represented on the y-axis, sorted in descending order by the industry.",
        "predict_rag_nlq": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry ASC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC": 0.5,
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC": 0.3,
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) ASC": 0.2
        }
    },
    {
        "record_name": "682@x_name@DESC",
        "db_id": "company_employee",
        "target": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
        "nlq": "Generate a bar chart depicting the quantity of companies within each industry, arranging them from highest to lowest based on the length of the bars, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) ASC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry DESC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry ORDER BY Industry ASC",
            "Visualize BAR SELECT Industry , COUNT(*) FROM Companies GROUP BY Industry"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY COUNT(Industry) DESC": 0.6,
            "Visualize BAR SELECT Industry , COUNT(Company_ID) FROM company GROUP BY Industry ORDER BY COUNT(Company_ID) DESC": 0.3,
            "Visualize BAR SELECT Industry , COUNT(*) FROM company GROUP BY Industry ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "2563@y_name@DESC",
        "db_id": "pets_1",
        "target": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "nlq": "What are the distinct given names and ages of the students who possess pets? Please represent this information in a bar chart, arranging the Y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESC": 0.5,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age ASC": 0.3,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Fname DESC": 0.2
        }
    },
    {
        "record_name": "2563@y_name@DESC",
        "db_id": "pets_1",
        "target": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "nlq": "Provide me with a histogram that represents the various first names and ages of the students who own pets. Please sort the data in descending order on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESC": 0.4,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age ASC": 0.3,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Fname DESC": 0.2,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Fname ASC": 0.1
        }
    },
    {
        "record_name": "2563@y_name@DESC",
        "db_id": "pets_1",
        "target": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "nlq": "Create a bar graph depicting the distinct first names and ages of students who own pets, and arrange them in descending order based on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESC": 0.5,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age ASC": 0.3,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Fname DESC": 0.2
        }
    },
    {
        "record_name": "2563@y_name@DESC",
        "db_id": "pets_1",
        "target": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "nlq": "Retrieve the given names and ages of students who possess a pet, and present the ages in descending order, from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname DESC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Fname ASC",
            "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize PIE SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age ASC",
            "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESC": 0.4,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age ASC": 0.3,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age DESCENDING": 0.2,
            "Visualize BAR SELECT Fname , Age FROM Student AS T1 JOIN Has_Pet AS T2 ON T1.StuID = T2.StuID ORDER BY Age ASCENDING": 0.1
        }
    },
    {
        "record_name": "2684",
        "db_id": "roller_coaster",
        "target": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "nlq": "Provide a scatter plot illustrating the lengths and heights of roller coasters.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT ID , meter_100 FROM swimmer",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster": 0.4,
            "Visualize SCATTER SELECT Length , Speed FROM roller_coaster": 0.3,
            "Visualize SCATTER SELECT Height , Speed FROM roller_coaster": 0.2,
            "Visualize SCATTER SELECT Speed , Length FROM roller_coaster": 0.1
        }
    },
    {
        "record_name": "2684",
        "db_id": "roller_coaster",
        "target": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "nlq": "What are the dimensions and heights of roller coasters?",
        "predict_rag_nlq": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT ID , meter_100 FROM swimmer",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster": 0.3,
            "Visualize SCATTER SELECT Dimensions , Height FROM roller_coaster": 0.2,
            "Visualize SCATTER SELECT Length , Dimensions FROM roller_coaster": 0.2,
            "Visualize SCATTER SELECT Dimensions , Dimensions FROM roller_coaster": 0.3
        }
    },
    {
        "record_name": "2684",
        "db_id": "roller_coaster",
        "target": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "nlq": "What are the dimensions (lengths and heights) of roller coasters? Please illustrate them in a scatter plot.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT ID , meter_100 FROM swimmer",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster": 0.4,
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster WHERE Status = 'Operating'": 0.3,
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster WHERE Park = 'Six Flags'": 0.2,
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster WHERE Country_ID = 1": 0.1
        }
    },
    {
        "record_name": "2684",
        "db_id": "roller_coaster",
        "target": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "nlq": "Scatter plot to illustrate the relationship between length on the x-axis and height on the y-axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT Height , Weight FROM people",
            "Visualize SCATTER SELECT People_ID , Height FROM people",
            "Visualize SCATTER SELECT max(Accelerate) , Cylinders FROM CARS_DATA",
            "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
            "Visualize SCATTER SELECT ID , meter_100 FROM swimmer",
            "Visualize SCATTER SELECT People_ID , Weight FROM people",
            "Visualize SCATTER SELECT id , duration FROM trip ORDER BY duration DESC LIMIT 3",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Length , Height FROM roller_coaster",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster": 0.4,
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster WHERE Status = 'Open'": 0.2,
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster WHERE Park = 'Six Flags'": 0.2,
            "Visualize SCATTER SELECT Length , Height FROM roller_coaster WHERE Country_ID = 'US'": 0.2
        }
    },
    {
        "record_name": "2392@x_name@ASC",
        "db_id": "movie_1",
        "target": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC",
        "nlq": "Exclude movies with NULL directors. For each director, display the titles and ratings of all the movies they reviewed. Present the results in a bar chart, and arrange the X-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\"",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY director ASC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY director DESC",
            "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\""
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director != \"null\" ORDER BY title ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director != \"null\" ORDER BY title ASC": 0.4,
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director IS NOT NULL ORDER BY title ASC": 0.3,
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director <> \"null\" ORDER BY title ASC": 0.2,
            "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE T2.director NOT LIKE \"null\" ORDER BY title ASC": 0.1
        }
    },
    {
        "record_name": "129@x_name@ASC",
        "db_id": "assets_maintenance",
        "target": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description ASC",
        "nlq": "A stacked bar chart illustrating the quantity of engineers for various skill descriptions. The x-axis represents skill descriptions, categorized by other details, and I would like it to be sorted in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details , skill_description ORDER BY skill_description ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY COUNT(skill_description) ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY COUNT(skill_description) DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY skill_description ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY skill_description DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY COUNT(skill_description) ASC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description ORDER BY COUNT(skill_description) DESC",
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY skill_description"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details , skill_description ORDER BY skill_description ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY T1.other_details , skill_description ORDER BY skill_description ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY T1.other_details , skill_description ORDER BY skill_description ASC": 0.7,
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY T1.other_details , skill_description ORDER BY COUNT(skill_description) ASC": 0.2,
            "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY T1.other_details , skill_description ORDER BY COUNT(skill_description) DESC": 0.1
        }
    },
    {
        "record_name": "2821",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "nlq": "Enumerate the player positions with an average points scored higher than 20, and compare the quantity of positions.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY COUNT(Position) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY COUNT(Position) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY COUNT(Position) ASC": 0.3,
            "Visualize BAR SELECT Position , AVG(Points) FROM player GROUP BY Position HAVING AVG(Points) > 20 ORDER BY AVG(Points) ASC": 0.4,
            "Visualize BAR SELECT Position , COUNT(Position) FROM player WHERE Points > 20 GROUP BY Position ORDER BY COUNT(Position) ASC": 0.2,
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING AVG(Points) > 20 ORDER BY COUNT(Position) ASC": 0.1
        }
    },
    {
        "record_name": "2821",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "nlq": "Enumerate the player positions for which the average points scored by that position exceed 20, and provide a bar chart illustrating the quantity of different positions.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "predict_dvq_set": {
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20": 0.4,
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Goals) >= 20": 0.3,
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Tries) >= 20": 0.2,
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Apps) >= 20": 0.1
        }
    },
    {
        "record_name": "2821",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
        "nlq": "Stacked bar chart to represent the position of the x-axis and the number of positions on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY Position DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) ASC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20 ORDER BY COUNT(Position) DESC",
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) ASC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY Position DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION ORDER BY avg(Points) DESC",
            "Visualize BAR SELECT Position , avg(Points) FROM player GROUP BY POSITION"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY Position ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY Position ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY Position ASC": 0.4,
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY Position DESC": 0.3,
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY COUNT(Position) ASC": 0.2,
            "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position ORDER BY COUNT(Position) DESC": 0.1
        }
    },
    {
        "record_name": "140",
        "db_id": "assets_maintenance",
        "target": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "nlq": "Display the quantity of assets and categorize them by the make of the asset in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "rag_dvqs": [
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "predict_debugged_db_ann": "Visualize BAR SELECT ASSET_MAKE , COUNT(ASSET_MAKE) FROM Assets GROUP BY ASSET_MAKE",
        "predict_dvq_set": {
            "Visualize BAR SELECT ASSET_MAKE , COUNT(ASSET_MAKE) FROM Assets GROUP BY ASSET_MAKE": 0.5,
            "Visualize BAR SELECT ASSET_MODEL , COUNT(ASSET_MODEL) FROM Assets GROUP BY ASSET_MODEL": 0.3,
            "Visualize BAR SELECT asset_details , COUNT(asset_details) FROM Assets GROUP BY asset_details": 0.2
        }
    },
    {
        "record_name": "140",
        "db_id": "assets_maintenance",
        "target": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "nlq": "Bar chart to display the quantity of assets produced by various asset manufacturers.",
        "predict_rag_nlq": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "rag_dvqs": [
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) ASC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY asset_make DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC",
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
        "predict_debugged_db_ann": "Visualize BAR SELECT ASSET_MAKE , COUNT(ASSET_MAKE) FROM Assets GROUP BY ASSET_MAKE",
        "predict_dvq_set": {
            "Visualize BAR SELECT ASSET_MAKE , COUNT(ASSET_MAKE) FROM Assets GROUP BY ASSET_MAKE": 0.6,
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make": 0.3,
            "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make ORDER BY COUNT(asset_make) DESC": 0.1
        }
    },
    {
        "record_name": "2097@y_name@DESC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "nlq": "Please utilize a stacked bar chart to compare the count of customers based on their move-in date, with the move-in dates grouped into yearly intervals. Please ensure that the total count is listed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR": 0.7,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY MONTH": 0.2,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY QUARTER": 0.1
        }
    },
    {
        "record_name": "2097@y_name@DESC",
        "db_id": "local_govt_and_lot",
        "target": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "nlq": "What is the distribution of customer moves by date? Could you please provide a bar chart that groups move-in dates into year intervals and sorts them in descending order based on the number of moves in each interval?",
        "predict_rag_nlq": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "rag_dvqs": [
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM customer_events  ORDER BY COUNT(date_moved_in) ASC BIN date_moved_in BY YEAR",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "predict_debugged_db_ann": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR",
        "predict_dvq_set": {
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR": 0.6,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in DESC BIN date_moved_in BY YEAR": 0.2,
            "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC BIN date_moved_in BY YEAR": 0.2
        }
    },
    {
        "record_name": "3062@y_name@ASC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "nlq": "Provide me with a bar graph that illustrates the comparison of the pixel aspect ratio and the country of TV channels that do not utilize English, displayed by the total number in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC": 0.5,
            "Visualize BAR SELECT Country , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Country ORDER BY Country ASC": 0.3,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Country) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC": 0.2
        }
    },
    {
        "record_name": "3062@y_name@ASC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "nlq": "What are the pixel aspect ratio and country of origin for all non-English TV channels? Present the comparison of the total count of pixel aspect ratio in a bar graph, ordering it in ascending order by the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC": 0.5,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' AND Country = 'USA' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC": 0.3,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' AND Country != 'USA' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC": 0.2
        }
    },
    {
        "record_name": "3062@y_name@ASC",
        "db_id": "tvshow",
        "target": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "nlq": "Obtain the pixel aspect ratio and identify the countries of the TV channels that do not broadcast in English. Display the number of distinct pixel aspect ratios using a bar chart, and list them in ascending order based on the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR ASC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY Pixel_aspect_ratio_PAR DESC",
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize PIE SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY count(*) DESC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language ASC",
            "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE ORDER BY Language DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC": 0.5,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language = 'Non-English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC": 0.3,
            "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM TV_Channel WHERE Language <> 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC": 0.2
        }
    },
    {
        "record_name": "2072",
        "db_id": "loan_1",
        "target": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "nlq": "Determine the aggregate loan amount provided by each branch of the bank.",
        "predict_rag_nlq": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "rag_dvqs": [
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname DESC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC",
            "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "predict_debugged_db_ann": "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname",
        "predict_dvq_set": {
            "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname": 0.6,
            "Visualize BAR SELECT city , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.city": 0.2,
            "Visualize BAR SELECT state , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.state": 0.2
        }
    },
    {
        "record_name": "2072",
        "db_id": "loan_1",
        "target": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "nlq": "Provide a bar chart illustrating the names of the distinct bank branches and their corresponding total loan amounts.",
        "predict_rag_nlq": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "rag_dvqs": [
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname DESC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC",
            "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "predict_debugged_db_ann": "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname",
        "predict_dvq_set": {
            "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname": 0.4,
            "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname ORDER BY SUM(amount) DESC": 0.3,
            "Visualize BAR SELECT bname , AVG(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname": 0.2,
            "Visualize BAR SELECT city , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.city": 0.1
        }
    },
    {
        "record_name": "2072",
        "db_id": "loan_1",
        "target": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "nlq": "What are the titles of the various bank branches, and what are their aggregate loan sums? Please present the information in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "rag_dvqs": [
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) ASC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY bname DESC",
            "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname ORDER BY sum(amount) DESC",
            "Visualize PIE SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY cust_name ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score ASC",
            "Visualize BAR SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id ORDER BY credit_score DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
        "predict_debugged_db_ann": "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname",
        "predict_dvq_set": {
            "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname": 0.6,
            "Visualize BAR SELECT bname , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname ORDER BY SUM(amount) DESC": 0.2,
            "Visualize BAR SELECT city , SUM(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.city": 0.1,
            "Visualize BAR SELECT bname , AVG(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.bname": 0.1
        }
    },
    {
        "record_name": "2993@y_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "nlq": "A stacked bar chart categorizes the lot details and calculates the count of each lot detail, listed in descending order based on the number of lot details.",
        "predict_rag_nlq": "Visualize BAR SELECT lot_details, COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY COUNT(LOT_DETAILS) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY COUNT(LOT_DETAILS) DESC": 0.5,
            "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY LOT_DETAILS DESC": 0.3,
            "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY LOT_DETAILS ASC": 0.2
        }
    },
    {
        "record_name": "2993@y_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "nlq": "Bar chart with the X-axis representing the details of the lots, and the Y-axis representing the number of lot details, with the list arranged in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY COUNT(LOT_DETAILS) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY COUNT(LOT_DETAILS) DESC": 0.5,
            "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY LOT_DETAILS DESC": 0.3,
            "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY LOT_DETAILS ASC": 0.2
        }
    },
    {
        "record_name": "2993@y_name@DESC",
        "db_id": "tracking_share_transactions",
        "target": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "nlq": "Retrieve the details of the lots, group them based on the lot details, calculate the quantity of each lot detail, and list them in descending order along the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY lot_details ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details ORDER BY COUNT(lot_details) ASC",
            "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM INVESTORS AS T1 JOIN LOTS AS T2 ON T1.investor_id = T2.investor_id WHERE T1.Investor_details = \"l\" GROUP BY lot_details"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY COUNT(LOT_DETAILS) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY COUNT(LOT_DETAILS) DESC": 0.5,
            "Visualize BAR SELECT LOT_DETAILS , COUNT(LOT_DETAILS) FROM Lots GROUP BY LOT_DETAILS ORDER BY LOT_DETAILS DESC": 0.3,
            "Visualize BAR SELECT LOT_DETAILS , SUM(share_count) FROM Lots GROUP BY LOT_DETAILS ORDER BY SUM(share_count) DESC": 0.2
        }
    },
    {
        "record_name": "613",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
        "nlq": "Provide a bar chart illustrating the distribution of department names and the corresponding quantity of each department name, grouped by the attribute \"dept_name\".",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM student GROUP BY DEPT_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM student GROUP BY DEPT_NAME": 0.4,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM student GROUP BY dept_name": 0.3,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM department GROUP BY dept_name": 0.1
        }
    },
    {
        "record_name": "613",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
        "nlq": "Create a bar chart depicting the distribution of department names and the corresponding quantities of each department, with the categories grouped by the attribute \"dept_name\".",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM student GROUP BY DEPT_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM student GROUP BY DEPT_NAME": 0.4,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM student GROUP BY dept_name": 0.3,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM department GROUP BY dept_name": 0.2,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM student GROUP BY dept_name ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "613",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
        "nlq": "Retrieve the department names and their corresponding department amounts, group them by the attribute dept_name, and represent them visually using a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) ASC",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , AVG(salary) FROM instructor GROUP BY dept_name ORDER BY AVG(salary) DESC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name ORDER BY dept_name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY salary",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_NAME , SUM(salary) FROM instructor GROUP BY DEPT_NAME ORDER BY SUM(salary)",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_NAME , SUM(salary) FROM instructor GROUP BY DEPT_NAME ORDER BY SUM(salary)": 0.5,
            "Visualize BAR SELECT dept_name , SUM(salary) FROM instructor GROUP BY dept_name ORDER BY SUM(salary)": 0.3,
            "Visualize BAR SELECT dept_name , SUM(budget) FROM department GROUP BY dept_name ORDER BY SUM(budget)": 0.2
        }
    },
    {
        "record_name": "613",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
        "nlq": "Present the distribution and quantity of department names, and group them by the department name attribute in a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , COUNT(*) FROM student GROUP BY dept_name",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM student GROUP BY dept_name ORDER BY tot_cred"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , COUNT(*) FROM student GROUP BY dept_name",
        "predict_debugged_db_ann": "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM student GROUP BY DEPT_NAME",
        "predict_dvq_set": {
            "Visualize BAR SELECT DEPT_NAME , COUNT(*) FROM student GROUP BY DEPT_NAME": 0.4,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM student GROUP BY dept_name": 0.3,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM department GROUP BY dept_name": 0.1
        }
    },
    {
        "record_name": "613",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
        "nlq": "A bar chart displays the distribution and quantity of department names (dept_name), organized by grouping according to the dept_name attribute.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE ASC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
            "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , count(*) FROM student GROUP BY dept_name ORDER BY count(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dept_name , COUNT(*) FROM student GROUP BY dept_name ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dept_name , COUNT(*) FROM student GROUP BY dept_name ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM department GROUP BY dept_name ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM instructor GROUP BY dept_name ORDER BY COUNT(*) ASC": 0.1,
            "Visualize BAR SELECT dept_name , COUNT(*) FROM course GROUP BY dept_name ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "2757",
        "db_id": "ship_mission",
        "target": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "nlq": "What is the overall count of each classification of ships? Present it to me in the form of a pie chart, please.",
        "predict_rag_nlq": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "rag_dvqs": [
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE",
            "Visualize PIE SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
            "Visualize PIE SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "predict_debugged_db_ann": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "predict_dvq_set": {
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type": 0.6,
            "Visualize PIE SELECT Nationality , COUNT(Type) FROM ship GROUP BY Nationality": 0.2,
            "Visualize PIE SELECT Type , COUNT(Ship_ID) FROM ship GROUP BY Type": 0.2
        }
    },
    {
        "record_name": "2757",
        "db_id": "ship_mission",
        "target": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "nlq": "Provide me with the ratio of each ship type in relation to the total number.",
        "predict_rag_nlq": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "rag_dvqs": [
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE",
            "Visualize PIE SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
            "Visualize PIE SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "predict_debugged_db_ann": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "predict_dvq_set": {
            "PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type": 0.4,
            "PIE SELECT Type , COUNT(Ship_ID) FROM ship GROUP BY Type": 0.3,
            "PIE SELECT Type , COUNT(*) FROM ship GROUP BY Type": 0.2,
            "PIE SELECT Type , COUNT(Name) FROM ship GROUP BY Type": 0.1
        }
    },
    {
        "record_name": "2757",
        "db_id": "ship_mission",
        "target": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "nlq": "Present a pie chart illustrating the overall count for each category of ship type.",
        "predict_rag_nlq": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "rag_dvqs": [
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE",
            "Visualize PIE SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize PIE SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality",
            "Visualize PIE SELECT Flag , count(*) FROM ship GROUP BY flag",
            "Visualize PIE SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "predict_debugged_db_ann": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "predict_dvq_set": {
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type": 0.6,
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY Type": 0.3,
            "Visualize PIE SELECT Type , COUNT(Name) FROM ship GROUP BY Type": 0.1
        }
    },
    {
        "record_name": "2757",
        "db_id": "ship_mission",
        "target": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
        "nlq": "I would like to determine the ratio of each category.",
        "predict_rag_nlq": "Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE",
        "rag_dvqs": [
            "Visualize PIE SELECT Type , count(*) FROM store GROUP BY TYPE",
            "Visualize PIE SELECT Type , COUNT(*) FROM artwork GROUP BY TYPE",
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize PIE SELECT Type , count(*) FROM institution GROUP BY TYPE",
            "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE",
            "Visualize PIE SELECT Product_Type_Code , COUNT(*) FROM Products GROUP BY Product_Type_Code",
            "Visualize PIE SELECT AllergyType , count(*) FROM Allergy_type GROUP BY allergytype",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY Type",
        "predict_debugged_db_ann": "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY Type",
        "predict_dvq_set": {
            "Visualize PIE SELECT Type , COUNT(*) FROM ship GROUP BY Type": 0.4,
            "Visualize PIE SELECT Nationality , COUNT(*) FROM ship GROUP BY Nationality": 0.3,
            "Visualize PIE SELECT Tonnage , COUNT(*) FROM ship GROUP BY Tonnage": 0.2,
            "Visualize PIE SELECT Name , COUNT(*) FROM ship GROUP BY Name": 0.1
        }
    },
    {
        "record_name": "2475@x_name@ASC",
        "db_id": "news_report",
        "target": "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type ASC",
        "nlq": "Calculate the mean age of journalists based on their respective role types, and present the outcome using a bar graph, listing the x-axis values in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(t1.age) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(t1.age) ASC",
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(t1.age) DESC",
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type ASC",
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type DESC",
            "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(Years_working) ASC",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY avg(Years_working) DESC",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type ASC",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type DESC",
            "Visualize BAR SELECT Work_Type , avg(Years_working) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Work_Type , avg(journalist.age) FROM journalist JOIN news_report ON journalist.journalist_id = news_report.journalist_id GROUP BY news_report.work_type ORDER BY avg(journalist.age) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Work_Type , avg(journalist.Age) FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY news_report.Work_Type ORDER BY avg(journalist.Age) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Work_Type , avg(journalist.Age) FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY news_report.Work_Type ORDER BY avg(journalist.Age) ASC": 0.3,
            "Visualize BAR SELECT Work_Type , avg(journalist.Age) FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY news_report.Work_Type ORDER BY avg(journalist.Age) DESC": 0.2,
            "Visualize BAR SELECT Work_Type , avg(journalist.Age) FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY news_report.Work_Type ORDER BY Work_Type ASC": 0.2,
            "Visualize BAR SELECT Work_Type , avg(journalist.Age) FROM journalist JOIN news_report ON journalist.journalist_ID = news_report.journalist_ID GROUP BY news_report.Work_Type ORDER BY Work_Type DESC": 0.3
        }
    },
    {
        "record_name": "653@y_name@DESC",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "nlq": "What is the number of instructors for each course in 2008? Please display a bar chart with the courses grouped by title, and arrange them in descending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT title, COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE year = 2008 GROUP BY title ORDER BY COUNT(name) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) ASC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE year = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT TITLE , COUNT(TITLE) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY TITLE ORDER BY COUNT(TITLE) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT TITLE , COUNT(TITLE) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY TITLE ORDER BY COUNT(TITLE) DESC": 0.5,
            "Visualize BAR SELECT TITLE , COUNT(TITLE) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY TITLE ORDER BY TITLE DESC": 0.3,
            "Visualize BAR SELECT TITLE , COUNT(TITLE) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY TITLE ORDER BY TITLE ASC": 0.2
        }
    },
    {
        "record_name": "653@y_name@DESC",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "nlq": "Provide a bar chart that illustrates the quantity of instructors for each course in the year 2008, arranged in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title DESC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) ASC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY title ASC",
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY COUNT(name) ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name ORDER BY name ASC",
            "Visualize BAR SELECT name , COUNT(name) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY title ORDER BY COUNT(title) DESC": 0.5,
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2008 GROUP BY title ORDER BY COUNT(title) ASC": 0.3,
            "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.ID = T3.ID WHERE T2.year = 2009 GROUP BY title ORDER BY COUNT(title) DESC": 0.2
        }
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Draw a bar graph illustrating the distribution of \"Name\" and \"Height\".",
        "predict_rag_nlq": "Visualize BAR SELECT Name, Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC": 0.4,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.1
        }
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Retrieve the names and heights, and represent them using a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC": 0.3
        }
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Generate a bar chart illustrating the distribution of individuals' names and their corresponding heights.",
        "predict_rag_nlq": "Visualize BAR SELECT Name, Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT ASC": 0.4,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC": 0.1
        }
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Provide a bar chart that compares the height for each name, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT ASC": 0.4,
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC": 0.3,
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY NAME ASC": 0.2,
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY NAME DESC": 0.1
        }
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "A bar chart displays the distribution of Name and Height.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC": 0.5,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC": 0.2
        }
    },
    {
        "record_name": "394",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people",
        "nlq": "Create a bar chart illustrating the relationship between name and height.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Weight FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC": 0.4,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC": 0.1
        }
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees with salaries ranging from 8000 to 12000 and either a non-null commission or a department number that is not equal to 40, please present the distribution of job IDs and the average manager ID. Display this information in a bar chart grouped by the job ID attribute, listed in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.6,
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.1
        }
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees whose salary falls between 8000 and 12000, and have a non-null commission or are not in department number 40, provide a comparison of the average manager_id across job_id, grouping the data by job_id, and ranking it in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "predict_dvq_set": {
            "BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC": 0.5,
            "BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL AND DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC": 0.3,
            "BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC": 0.2
        }
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For the employees whose salary falls between 8000 and 12000, and either have a non-null commission or their department number is not equal to 40, generate a bar chart illustrating the distribution of job_id and the average manager_id. Group the data by the job_id attribute and list it in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_dvq_set": {
            "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.4,
            "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.3,
            "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2,
            "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.1
        }
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees whose salary falls within the range of 8000 and 12000, and have a non-null commission or a department number that is not equal to 40, provide a comparison of the average manager_id across job_id attributes. Please represent this data using a bar chart, and arrange the bars in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(EMPLOYEE_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(DEPARTMENT_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(SALARY) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT != \"null\" OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC": 0.5,
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC": 0.3,
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID <> 40) GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC": 0.2
        }
    },
    {
        "record_name": "1605@x_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "nlq": "For employees whose salary falls between 8000 and 12000 and have a non-null commission or do not belong to department number 40, generate a bar chart illustrating the distribution of job_id and the average of manager_id. Group the data by job_id and rank it in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) ASC",
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY AVG(MANAGER_ID) DESC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
            "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
            "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.6,
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND COMMISSION_PCT IS NOT NULL AND DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.2,
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY >= 8000 AND SALARY <= 12000 AND COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.1,
            "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE SALARY BETWEEN 8000 AND 12000 AND (COMMISSION_PCT IS NOT NULL OR DEPARTMENT_ID != 40) GROUP BY JOB_ID ORDER BY JOB_ID ASC": 0.1
        }
    },
    {
        "record_name": "2613@x_name@ASC",
        "db_id": "products_for_hire",
        "target": "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name ASC",
        "nlq": "How many bookings did each customer make? Display the customer ID on the Y-axis and the first name on the X-axis in a bar graph. Please sort the X-axis in ascending order from low to high.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name ASC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name ASC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY first_name DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT first_name , count(*) FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT first_name , customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY first_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT FIRST_NAME , CUSTOMER_ID FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY FIRST_NAME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT FIRST_NAME , CUSTOMER_ID FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY FIRST_NAME ASC": 0.4,
            "Visualize BAR SELECT CUSTOMER_ID , FIRST_NAME FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY FIRST_NAME ASC": 0.3,
            "Visualize BAR SELECT COUNT(booking_id) , customer_id FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_id ORDER BY customer_id ASC": 0.2,
            "Visualize BAR SELECT COUNT(booking_id) , customer_id FROM Customers AS T1 JOIN Bookings AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_id ORDER BY COUNT(booking_id) ASC": 0.1
        }
    },
    {
        "record_name": "671",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "nlq": "Create a scatter plot illustrating the relationship between CID and Instructor.",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID, Instructor FROM Course ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY CID": 0.3,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY DNO": 0.2,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Hours": 0.1
        }
    },
    {
        "record_name": "671",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "nlq": "Provide a scatter plot illustrating the relationship between CID and Instructor.",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID, Instructor FROM Course ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits": 0.3,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY CID": 0.2,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY DNO": 0.1,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Hours": 0.2,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY DNO DESC": 0.2
        }
    },
    {
        "record_name": "671",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "nlq": "Visualize the correlation between CID and Instructor.",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID, Instructor FROM COURSE ORDER BY CID",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits DESC": 0.3,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY CID": 0.2,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY CID DESC": 0.1
        }
    },
    {
        "record_name": "671",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "nlq": "A scatter plot displays the relationship between CID and Instructor.",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits DESC": 0.3,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY CID": 0.2,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY CID DESC": 0.1
        }
    },
    {
        "record_name": "671",
        "db_id": "college_3",
        "target": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
        "nlq": "What is the connection or correlation between the CID (Course ID) and the Instructor?",
        "predict_rag_nlq": "Visualize SCATTER SELECT CID, Instructor FROM Course ORDER BY CID",
        "rag_dvqs": [
            "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT CID , Credits FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , Instructor FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT Credits , DNO FROM COURSE ORDER BY Credits",
            "Visualize SCATTER SELECT ID , salary FROM instructor ORDER BY salary",
            "Visualize SCATTER SELECT author_id , author_tutor_ATB FROM Course_Authors_and_Tutors ORDER BY personal_name",
            "Visualize SCATTER SELECT Classroom , Grade FROM list",
            "Visualize SCATTER SELECT author_id , gender_mf FROM Course_Authors_and_Tutors ORDER BY personal_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits": 0.4,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits DESC": 0.3,
            "Visualize SCATTER SELECT CID , Instructor FROM Course ORDER BY Credits ASC": 0.3
        }
    },
    {
        "record_name": "1718",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who have no prior job history, provide a comparison of the total department_id sum across different time bins of hire_date using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY YEAR": 0.2,
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY QUARTER": 0.2
        }
    },
    {
        "record_name": "1718",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "nlq": "Visualize a bar chart illustrating the distribution of hire dates for employees who have not previously held any jobs. Additionally, group the hire dates by time and display the sum of department IDs within each bin.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY YEAR": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY QUARTER": 0.1
        }
    },
    {
        "record_name": "1718",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who have no prior job experience, please present a bar chart depicting the distribution of hire dates and the total number of department IDs grouped by hire date over time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH": 0.5,
            "Visualize BAR SELECT HIRE_DATE , COUNT(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , COUNT(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) GROUP BY HIRE_DATE": 0.2
        }
    },
    {
        "record_name": "1718",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "nlq": "For employees who have no past job experience, generate a bar chart illustrating the distribution of hire dates and the sum of department IDs grouped by hire date over time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY YEAR": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY QUARTER": 0.1
        }
    },
    {
        "record_name": "1718",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "nlq": "For employees with no prior job experience, a bar chart illustrates the distribution of hire dates and the accumulation of department IDs grouped by hire date over time.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(DEPARTMENT_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN(SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH": 0.3,
            "Visualize BAR SELECT HIRE_DATE , AVG(DEPARTMENT_ID) FROM employees WHERE EMPLOYEE_ID NOT IN(SELECT EMPLOYEE_ID FROM job_history) BIN HIRE_DATE BY MONTH": 0.1
        }
    },
    {
        "record_name": "436",
        "db_id": "chinook_1",
        "target": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "nlq": "Provide a pie chart illustrating the distribution of first names and support rep IDs for employees who serve 10 or more customers.",
        "predict_rag_nlq": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize PIE SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize PIE SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id",
            "Visualize PIE SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize PIE SELECT customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "predict_dvq_set": {
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.4,
            "Visualize PIE SELECT T2.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.3,
            "Visualize PIE SELECT T1.FirstName , T2.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.2,
            "Visualize PIE SELECT T2.FirstName , T2.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.1
        }
    },
    {
        "record_name": "436",
        "db_id": "chinook_1",
        "target": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "nlq": "Create a pie chart illustrating the distribution of first names and support representative IDs for employees handling 10 or more customers.",
        "predict_rag_nlq": "Visualize PIE SELECT T1.FirstName, T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize PIE SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize PIE SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id",
            "Visualize PIE SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize PIE SELECT customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "predict_dvq_set": {
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.4,
            "Visualize PIE SELECT T2.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.3,
            "Visualize PIE SELECT T1.FirstName , T2.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.2,
            "Visualize PIE SELECT T2.FirstName , T2.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.1
        }
    },
    {
        "record_name": "436",
        "db_id": "chinook_1",
        "target": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "nlq": "What are the given names and support representative identification numbers for employees who are assisting 10 or more clients? Illustrate this information using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId ASC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.FirstName DESC",
            "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
            "Visualize PIE SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize PIE SELECT T1.Customer_Details , T1.Customer_ID FROM Customers AS T1 JOIN Customer_Policies AS T2 ON T1.Customer_id = T2.Customer_id",
            "Visualize PIE SELECT cust_name , credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id = T2.cust_id",
            "Visualize PIE SELECT customer_name , count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId",
        "predict_dvq_set": {
            "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.6,
            "Visualize PIE SELECT T2.FirstName , T2.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.2,
            "Visualize PIE SELECT T1.FirstName , T2.SupportRepId FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId": 0.2
        }
    },
    {
        "record_name": "2412",
        "db_id": "museum_visit",
        "target": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
        "nlq": "Display the name and age of visitors who visited multiple museums using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC",
            "Visualize SCATTER SELECT ID , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
            "Visualize SCATTER SELECT ID , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY Name",
            "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID",
            "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID",
            "Visualize BAR SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY T1.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.id = visit.visitor_id",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID": 0.4,
            "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE COUNT(DISTINCT visit.Museum_ID) > 1": 0.3,
            "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY Name , Age HAVING COUNT(DISTINCT visit.Museum_ID) > 1": 0.3
        }
    },
    {
        "record_name": "2412",
        "db_id": "museum_visit",
        "target": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
        "nlq": "Histogram displaying the name on the X-axis and the age on the Y-axis for visitors who have visited certain museums more than once.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age ASC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id ORDER BY Age DESC",
            "Visualize SCATTER SELECT ID , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
            "Visualize SCATTER SELECT ID , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id GROUP BY Name",
            "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID",
            "Visualize BAR SELECT T1.Name , T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID",
            "Visualize BAR SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.friend WHERE T1.age > (SELECT avg(age) FROM person) ORDER BY T1.name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.id = visit.visitor_id",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID": 0.4,
            "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID WHERE Num_of_Ticket > 1": 0.3,
            "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID HAVING COUNT(*) > 1": 0.2,
            "Visualize BAR SELECT Name , Age FROM visitor JOIN visit ON visitor.ID = visit.visitor_ID GROUP BY Name , Age HAVING COUNT(*) > 1": 0.1
        }
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, please present the distribution of headquarters and the average revenue. Group the data based on the attribute \"headquarters\" and represent it in a bar chart, with the X-axis arranged in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC": 0.5,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter DESC": 0.3,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC": 0.2
        }
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "Generate a bar chart illustrating the distribution of headquarters and the average revenue for the product records, grouped by the headquarter attribute. Please ensure that the bars are listed in ascending order based on the headquarter attribute.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC": 0.6,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC": 0.2,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC": 0.1,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter DESC": 0.1
        }
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, create a bar chart illustrating the distribution of headquarters and the average revenue, and group them based on the \"headquarter\" attribute, listing them in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC": 0.5,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC": 0.3,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC": 0.2
        }
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For the records pertaining to the products and the respective manufacturers, provide a comparison of the average revenue across different headquarters. Group the data by the headquarter attribute and list them in ascending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC": 0.5,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC": 0.3,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC": 0.2
        }
    },
    {
        "record_name": "2225@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "nlq": "For the records pertaining to products and their respective manufacturers, create a bar chart depicting the distribution of headquarters and the average revenue. Group the data by the headquarter attribute, and kindly arrange the bars in ascending order based on the headquarter attribute.",
        "predict_rag_nlq": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , AVG(Price) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
            "Visualize BAR SELECT Headquarter , SUM(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY SUM(Revenue) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY Headquarter ASC": 0.6,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) ASC": 0.2,
            "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY Headquarter ORDER BY AVG(Revenue) DESC": 0.2
        }
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "nlq": "A pie chart displays the ratio of ACC_Regular_Season and All_Games_Percent.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_dvq_set": {
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match": 0.5,
            "Visualize PIE SELECT ACC_Percent , All_Games_Percent FROM basketball_match": 0.2,
            "Visualize PIE SELECT ACC_Regular_Season , All_Home FROM basketball_match": 0.1,
            "Visualize PIE SELECT ACC_Regular_Season , All_Road FROM basketball_match": 0.1,
            "Visualize PIE SELECT ACC_Regular_Season , All_Neutral FROM basketball_match": 0.1
        }
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "nlq": "Create a pie chart illustrating the distribution of ACC_Regular_Season and All_Games_Percent.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_dvq_set": {
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match": 0.5,
            "Visualize PIE SELECT ACC_Percent , All_Games_Percent FROM basketball_match": 0.2,
            "Visualize PIE SELECT ACC_Regular_Season , All_Home FROM basketball_match": 0.1,
            "Visualize PIE SELECT All_Games_Percent , All_Road FROM basketball_match": 0.2
        }
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "nlq": "Present the proportion of All_Games_Percent and All_Games_Percent in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Games_Percent , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , Team_ID FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , School_ID FROM basketball_match",
            "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games_Percent ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Games_Percent , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT All_Games_Percent , All_Games_Percent FROM basketball_match",
        "predict_dvq_set": {
            "Visualize PIE SELECT All_Games_Percent , All_Games_Percent FROM basketball_match": 0.4,
            "Visualize PIE SELECT All_Games_Percent , All_Games FROM basketball_match": 0.3,
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match": 0.2,
            "Visualize PIE SELECT All_Games , All_Games FROM basketball_match": 0.1
        }
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "nlq": "Generate a pie chart illustrating the distribution or ratio of ACC_Regular_Season and All_Games_Percent.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_dvq_set": {
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match": 0.5,
            "Visualize PIE SELECT ACC_Percent , All_Games_Percent FROM basketball_match": 0.3,
            "Visualize PIE SELECT ACC_Regular_Season , All_Home FROM basketball_match": 0.2
        }
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "nlq": "For the attribute ACC_Regular_Season and All_Games_Percent, represent their respective proportions using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , School_ID FROM basketball_match",
            "Visualize PIE SELECT All_Road , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "predict_dvq_set": {
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match": 0.5,
            "Visualize PIE SELECT ACC_Regular_Season FROM basketball_match": 0.2,
            "Visualize PIE SELECT All_Games_Percent FROM basketball_match": 0.2,
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM university": 0.1
        }
    },
    {
        "record_name": "3136",
        "db_id": "university_basketball",
        "target": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
        "nlq": "Create a pie chart illustrating the distribution of all_games_percent throughout the ACC regular season.",
        "predict_rag_nlq": "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
        "rag_dvqs": [
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match",
            "Visualize PIE SELECT Team_Name , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Road , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Neutral , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , Team_ID FROM basketball_match",
            "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
            "Visualize PIE SELECT All_Games , School_ID FROM basketball_match",
            "Visualize BAR SELECT All_Games , All_Games_Percent FROM basketball_match ORDER BY All_Games ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
        "predict_debugged_db_ann": "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match",
        "predict_dvq_set": {
            "Visualize PIE SELECT All_Games , All_Games_Percent FROM basketball_match": 0.4,
            "Visualize PIE SELECT All_Games , ACC_Regular_Season FROM basketball_match": 0.2,
            "Visualize PIE SELECT All_Games , ACC_Percent FROM basketball_match": 0.2,
            "Visualize PIE SELECT All_Games , All_Home FROM basketball_match": 0.1,
            "Visualize PIE SELECT All_Games , All_Road FROM basketball_match": 0.1
        }
    },
    {
        "record_name": "1805",
        "db_id": "hr_1",
        "target": "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m'",
        "nlq": "For employees whose first name ends with the letter 'm', please illustrate their salaries based on their last names using a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT LAST_NAME, SALARY FROM employees WHERE first_name LIKE '%m'",
        "rag_dvqs": [
            "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m'",
            "Visualize PIE SELECT FIRST_NAME , SUM(SALARY) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m'",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY LAST_NAME ASC",
            "Visualize PIE SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY SALARY ASC",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY LAST_NAME DESC",
            "Visualize BAR SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m' ORDER BY SALARY DESC",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%'",
            "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE first_name NOT LIKE '%M%'"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m'",
        "predict_debugged_db_ann": "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE FIRST_NAME LIKE '%m'",
        "predict_dvq_set": {
            "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE FIRST_NAME LIKE '%m'": 0.5,
            "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE FIRST_NAME LIKE '%m' AND SALARY > 5000": 0.2,
            "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE FIRST_NAME LIKE '%m' AND SALARY < 5000": 0.3
        }
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For the entries related to the products and their respective manufacturers, provide a comparison of the average code across different headquarters. Present this comparison in a bar chart, grouping the headquarters by the attribute \"headquarter,\" and sorting them in descending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.5,
            "Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.3,
            "Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY AVG(T1.Code) DESC": 0.2
        }
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For the data pertaining to the products and their respective manufacturers, create a bar chart illustrating the distribution of headquarters and the average of codes. Group the data by the attribute \"headquarter\" and rank the categories in descending order based on their names.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.6,
            "Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.3,
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T1.Code DESC": 0.1
        }
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "Generate a bar chart illustrating the distribution of headquarters and the average code for the records from the products and their respective manufacturers. Group the data by the headquarter attribute and arrange the Headquarter values in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter, T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.6,
            "Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.3,
            "Visualize BAR SELECT T2.Headquarter , T1.Headquarter FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.1
        }
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For the entries pertaining to products and their respective manufacturers, locate the headquarters and calculate the average code. Group them based on the headquarter attribute and visualize the data in a bar chart, with the x-axis ordered in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter, AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter DESC",
            "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY AVG(Manufacturer) DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.5,
            "\"Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY AVG(T1.Code) DESC\"": 0.3,
            "\"Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC\"": 0.2
        }
    },
    {
        "record_name": "2223@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "nlq": "For the records pertaining to products and their respective manufacturers, create a bar chart illustrating the distribution of headquarters and the average code value. Group the data by the \"headquarters\" attribute and arrange the bars on the X-axis in descending order from high to low, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T1.Code DESC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC",
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.6,
            "Visualize BAR SELECT T2.Headquarter , AVG(T1.Code) FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC": 0.2,
            "Visualize BAR SELECT T2.Headquarter , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Headquarter ORDER BY AVG(T1.Code) DESC": 0.2
        }
    },
    {
        "record_name": "434",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "nlq": "Create a bar graph illustrating the number of car manufacturers present in each continent. Provide the name of the continent and its corresponding count.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId ORDER BY T1.Continent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC": 0.5,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT T2.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T2.Continent ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "434",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "nlq": "How many automobile manufacturers are there in each continent? Provide a list of the continent names and their respective counts.",
        "predict_rag_nlq": "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "rag_dvqs": [
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "predict_debugged_db_ann": "Visualize PIE SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "predict_dvq_set": {
            "Visualize PIE SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent": 0.7,
            "Visualize PIE SELECT T2.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T2.Continent": 0.2,
            "Visualize PIE SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T2.Continent": 0.1
        }
    },
    {
        "record_name": "434",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "nlq": "Show the count of car manufacturers in each continent using a bar chart, indicating the name of the continent and the corresponding count.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId ORDER BY T1.Continent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC": 0.5,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "434",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "nlq": "How many automobile manufacturers exist in each continent? Provide a list of the continent names and their respective counts. Visualize this data using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent": 0.6,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country WHERE T3.Country = 'Germany' GROUP BY T1.Continent": 0.2,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country WHERE T3.Country = 'Japan' GROUP BY T1.Continent": 0.2
        }
    },
    {
        "record_name": "434",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "nlq": "A bar chart displaying the names of each continent and the respective number of car makers in each continent.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId ORDER BY T1.Continent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC": 0.5,
            "Visualize BAR SELECT T2.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T2.Continent ORDER BY T2.Continent ASC": 0.3,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "434",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "nlq": "Present a bar graph depicting the names of each continent and the corresponding count of car makers in each continent.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId ORDER BY T1.Continent ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC": 0.5,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT T2.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T2.Continent ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "434",
        "db_id": "car_1",
        "target": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "nlq": "What are the names of each continent and the number of car manufacturers in each? Plot them in a bar chart, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY T1.Continent DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY count(*) DESC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY T1.Continent ASC",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) ASC",
            "Visualize PIE SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
            "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent GROUP BY T1.ContId ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.ContId",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent": 0.6,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent HAVING COUNT(*) > 0": 0.1,
            "Visualize BAR SELECT T1.Continent , COUNT(*) FROM continents AS T1 JOIN countries AS T2 ON T1.ContId = T2.Continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent LIMIT 10": 0.1
        }
    },
    {
        "record_name": "1320@y_name@ASC",
        "db_id": "election",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "nlq": "How many delegates are in each committee? Please provide a bar chart that displays the committees in ascending order based on the number of delegates.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC": 0.6,
            "Visualize BAR SELECT Committee , COUNT(Delegate) FROM election GROUP BY Committee ORDER BY COUNT(Delegate) ASC": 0.2,
            "Visualize BAR SELECT Committee , SUM(Delegate) FROM election GROUP BY Committee ORDER BY SUM(Delegate) ASC": 0.1,
            "Visualize BAR SELECT Committee , COUNT(District) FROM election GROUP BY Committee ORDER BY COUNT(District) ASC": 0.1
        }
    },
    {
        "record_name": "1320@y_name@ASC",
        "db_id": "election",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "nlq": "Display the quantity of committees from each committee, sorted in ascending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC": 0.5,
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC": 0.3,
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC": 0.2
        }
    },
    {
        "record_name": "1320@y_name@ASC",
        "db_id": "election",
        "target": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "nlq": "Display the quantity of delegates in each committee using a bar chart, and please arrange the y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) ASC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY COUNT(Committee) DESC",
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC": 0.5,
            "Visualize BAR SELECT Committee , COUNT(Delegate) FROM election GROUP BY Committee ORDER BY COUNT(Delegate) ASC": 0.3,
            "Visualize BAR SELECT Committee , SUM(Delegate) FROM election GROUP BY Committee ORDER BY SUM(Delegate) ASC": 0.2
        }
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, please present the distribution of the product names and manufacturers. Generate a bar chart that groups the data by the attribute name, and display the manufacturers in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.NAME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.NAME ASC": 0.6,
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Manufacturer ORDER BY T1.NAME DESC": 0.3,
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Manufacturer ORDER BY T1.Manufacturer DESC": 0.1
        }
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "Generate a stacked bar chart illustrating the distribution of names and manufacturers for the records from the products, grouped by the attribute name, and ordered in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC": 0.6,
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Manufacturer ORDER BY T1.Name DESC": 0.3,
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Manufacturer ORDER BY COUNT(T1.Name) DESC": 0.1
        }
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "Create a bar chart illustrating the distribution of product names and manufacturers for the given records, grouping them by the attribute name. Please ensure that the Y-axis is sorted in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC": 0.6,
            "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Name DESC": 0.2,
            "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.2
        }
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, retrieve the name of the product and the name of the manufacturer. Group them by the attribute name and present them in a bar chart. Sort the manufacturers in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T2.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T2.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Manufacturer DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T2.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T2.Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T2.Name DESC": 0.5,
            "Visualize BAR SELECT T1.Name , T2.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Name DESC": 0.3,
            "Visualize BAR SELECT T2.Name , T1.Name FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T1.Name DESC": 0.2
        }
    },
    {
        "record_name": "2239@y_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, provide me with a comparison of manufacturers based on their names, and group the attribute names using a bar chart, displaying them from highest to lowest according to the manufacturer.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Code ORDER BY T1.Manufacturer DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name , T1.Code ORDER BY T1.Manufacturer DESC": 0.6,
            "Visualize BAR SELECT T2.Name , T2.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name , T2.Code ORDER BY T2.Manufacturer DESC": 0.3,
            "Visualize BAR SELECT T2.Name , T2.Code FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name , T2.Code ORDER BY T2.Name DESC": 0.1
        }
    },
    {
        "record_name": "2487@x_name@ASC",
        "db_id": "news_report",
        "target": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Visualize the nationalities and total ages of journalists using a bar chart, with the X-axis arranged in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC": 0.4,
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality": 0.1
        }
    },
    {
        "record_name": "2487@x_name@ASC",
        "db_id": "news_report",
        "target": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Bar chart displaying the total age for each nationality, please arrange the X-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC": 0.5,
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC": 0.2
        }
    },
    {
        "record_name": "2487@x_name@ASC",
        "db_id": "news_report",
        "target": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Provide a histogram illustrating the nationalities and cumulative ages of journalists. Please arrange the X-axis in ascending order from least to greatest.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC": 0.6,
            "Visualize BAR SELECT Nationality , SUM(Years_working) FROM journalist GROUP BY Nationality ORDER BY SUM(Years_working) ASC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(Age) FROM journalist GROUP BY Nationality ORDER BY COUNT(Age) ASC": 0.1
        }
    },
    {
        "record_name": "2487@x_name@ASC",
        "db_id": "news_report",
        "target": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "nlq": "Present a bar chart illustrating the nationalities and cumulative ages of journalists. Kindly sort the data in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC",
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) ASC",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality",
            "Visualize BAR SELECT Nationality , AVG(Age) FROM journalist GROUP BY Nationality ORDER BY AVG(Age) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC": 0.4,
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) ASC": 0.3,
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality DESC": 0.2,
            "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY SUM(Age) DESC": 0.1
        }
    },
    {
        "record_name": "777",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "nlq": "Display the quantity of documents based on their respective starting dates. Categorize the starting dates by weekdays and group them by location code using a stacked bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY": 0.6,
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY DAY": 0.2,
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY MONTH": 0.2
        }
    },
    {
        "record_name": "777",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "nlq": "Stacked bar chart illustrating the count of dates in each location from, grouped by Location_Code and further categorized by dates in location from.",
        "predict_rag_nlq": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) ASC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations  ORDER BY COUNT(Date_in_Location_From) DESC BIN Date_in_Location_From BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY",
            "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) DESC BIN Date_in_Locaton_To BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY": 0.6,
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY MONTH": 0.2,
            "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_Locations GROUP BY Location_Code BIN Date_in_Location_From BY DAY": 0.2
        }
    },
    {
        "record_name": "832@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
        "nlq": "Produce a bar chart to illustrate the quantity of documents for various budget type codes, with the Y-axis ranked in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Document_Date >= '2022-01-01' GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code != 'XYZ' GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.1,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY Budget_Type_Code ASC": 0.1
        }
    },
    {
        "record_name": "832@y_name@DESC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
        "nlq": "Display the quantity of documents for various budget type codes in a bar graph, with the Y-axis showing descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code DESC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY Budget_Type_Code ASC",
            "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) DESC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY COUNT(Budget_Type_Description) ASC",
            "Visualize BAR SELECT Budget_Type_Description , COUNT(Budget_Type_Description) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY Budget_Type_Description ORDER BY Budget_Type_Description ASC",
            "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code = 'Travel' GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code = 'Training' GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.1,
            "Visualize BAR SELECT Budget_Type_Code , COUNT(*) FROM Documents_with_Expenses WHERE Budget_Type_Code = 'Supplies' GROUP BY Budget_Type_Code ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "356",
        "db_id": "body_builder",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Visualize a scatter chart depicting the relationship between Snatch and Clean_Jerk.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder": 0.4,
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder": 0.3,
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder": 0.2,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM people": 0.1
        }
    },
    {
        "record_name": "356",
        "db_id": "body_builder",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "What is the connection or correlation between Snatch and Clean Jerk?",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder": 0.4,
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder": 0.3,
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder": 0.2,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk , Total FROM body_builder": 0.1
        }
    },
    {
        "record_name": "356",
        "db_id": "body_builder",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Visualize the correlation between Snatch and Clean_Jerk.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch, Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder": 0.4,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder WHERE Snatch IS NOT NULL AND Clean_Jerk IS NOT NULL": 0.3,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder WHERE Snatch > 0 AND Clean_Jerk > 0": 0.2,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder WHERE Snatch != Clean_Jerk": 0.1
        }
    },
    {
        "record_name": "356",
        "db_id": "body_builder",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Provide a scatter plot illustrating the relationship between Snatch and Clean_Jerk.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch, Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder": 0.4,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk , Total FROM body_builder": 0.3,
            "Visualize SCATTER SELECT Clean_Jerk , Snatch FROM body_builder": 0.2,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder WHERE Total > 100": 0.1
        }
    },
    {
        "record_name": "356",
        "db_id": "body_builder",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Display the correlation between the Snatch and Clean_Jerk in a scatter plot, please.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder": 0.4,
            "Visualize SCATTER SELECT Clean_Jerk , Snatch FROM body_builder": 0.3,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder WHERE Snatch IS NOT NULL AND Clean_Jerk IS NOT NULL": 0.2,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder WHERE Snatch > 0 AND Clean_Jerk > 0": 0.1
        }
    },
    {
        "record_name": "356",
        "db_id": "body_builder",
        "target": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "nlq": "Scatter plot to display snatch on the x-axis and clean_jerk on the y-axis.",
        "predict_rag_nlq": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "rag_dvqs": [
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Clean_Jerk , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Clean_Jerk FROM body_builder",
            "Visualize SCATTER SELECT Snatch , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Snatch FROM body_builder",
            "Visualize SCATTER SELECT People_ID , Total FROM body_builder",
            "Visualize SCATTER SELECT Body_Builder_ID , Total FROM body_builder"
        ],
        "predict_debugged_ref_dvqs": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_debugged_db_ann": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder",
        "predict_dvq_set": {
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder": 0.4,
            "Visualize SCATTER SELECT Clean_Jerk , Snatch FROM body_builder": 0.3,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder WHERE Total > 100": 0.2,
            "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder WHERE Snatch > 80": 0.1
        }
    },
    {
        "record_name": "1421",
        "db_id": "flight_company",
        "target": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
        "nlq": "Provide a histogram indicating the IDs and names of companies that conducted more than one flight.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name DESC",
            "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY Type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id ORDER BY T1.id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id ORDER BY T1.id ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id ORDER BY T1.id ASC": 0.4,
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id GROUP BY T1.id HAVING COUNT(T1.id) > 1 ORDER BY T1.id ASC": 0.3,
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id GROUP BY T1.name, T1.id HAVING COUNT(T1.id) > 1 ORDER BY T1.id ASC": 0.2,
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id GROUP BY T1.name, T1.id HAVING COUNT(T1.id) > 1 ORDER BY COUNT(T1.id) DESC": 0.1
        }
    },
    {
        "record_name": "1421",
        "db_id": "flight_company",
        "target": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
        "nlq": "What are the identifiers and names of the companies that conducted more than one flight.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.id ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name ASC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.id DESC",
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id ORDER BY T1.name DESC",
            "Visualize PIE SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id GROUP BY Type ORDER BY Type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id ORDER BY T1.id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id ORDER BY T1.id ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id ORDER BY T1.id ASC": 0.4,
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id GROUP BY T1.id HAVING COUNT(T1.id) > 1 ORDER BY T1.id ASC": 0.3,
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id GROUP BY T1.name, T1.id HAVING COUNT(T1.id) > 1 ORDER BY T1.id ASC": 0.2,
            "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id GROUP BY T1.name, T1.id HAVING COUNT(T1.id) > 1 ORDER BY COUNT(T1.id) DESC": 0.1
        }
    },
    {
        "record_name": "708",
        "db_id": "county_public_safety",
        "target": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Pie chart. What is the distribution of counties among different police forces?",
        "predict_rag_nlq": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize PIE SELECT County , count(*) FROM school GROUP BY county",
            "Visualize PIE SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize PIE SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name",
            "Visualize PIE SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_dvq_set": {
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.6,
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety WHERE Population > 100000 GROUP BY Police_force": 0.2,
            "Visualize PIE SELECT Police_force , AVG(Crime_rate) FROM county_public_safety GROUP BY Police_force": 0.2
        }
    },
    {
        "record_name": "708",
        "db_id": "county_public_safety",
        "target": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "Generate a pie chart illustrating the distribution of counties among different police forces.",
        "predict_rag_nlq": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize PIE SELECT County , count(*) FROM school GROUP BY county",
            "Visualize PIE SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize PIE SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name",
            "Visualize PIE SELECT Country , COUNT(*) FROM perpetrator GROUP BY Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_dvq_set": {
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.6,
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety WHERE Police_force IS NOT NULL GROUP BY Police_force": 0.2,
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety WHERE Police_force <> '' GROUP BY Police_force": 0.2
        }
    },
    {
        "record_name": "708",
        "db_id": "county_public_safety",
        "target": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "How many police forces correspond to each county.",
        "predict_rag_nlq": "Visualize BAR SELECT County_ID , COUNT(Police_force) FROM county_public_safety GROUP BY County_ID",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , COUNT(County) FROM APPELLATIONS GROUP BY County",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "predict_dvq_set": {
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.6,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY County_ID": 0.2,
            "Visualize BAR SELECT County_ID , COUNT(*) FROM county_public_safety GROUP BY Police_force": 0.2
        }
    },
    {
        "record_name": "708",
        "db_id": "county_public_safety",
        "target": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "nlq": "I would like to determine the ratio of the number of counties for each police force.",
        "predict_rag_nlq": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
        "rag_dvqs": [
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force DESC",
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC",
            "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY County ASC",
            "Visualize BAR SELECT County , count(*) FROM school GROUP BY county ORDER BY count(*) ASC",
            "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM city AS T1 JOIN county_public_safety AS T2 ON T1.County_ID = T2.County_ID GROUP BY T2.Name ORDER BY T2.Name DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY Police_force ASC": 0.6,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "1315@y_name@DESC",
        "db_id": "election",
        "target": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "nlq": "Display the name of each county alongside the corresponding delegate count for that county. Plot them as a bar chart and arrange the y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT County_name , Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY Delegate DESC": 0.3,
            "Visualize BAR SELECT County_name , SUM(Population) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY SUM(Population) DESC": 0.1
        }
    },
    {
        "record_name": "1315@y_name@DESC",
        "db_id": "election",
        "target": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "nlq": "For each region, present the county's name and the number of delegates assigned to that county. Display the data in a bar chart, and could you please arrange the total number in descending order?",
        "predict_rag_nlq": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT County_name , COUNT(Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY COUNT(Delegate) DESC": 0.3,
            "Visualize BAR SELECT County_name , SUM(Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY SUM(Delegate) DESC": 0.2,
            "Visualize BAR SELECT County_name , COUNT(Delegate) AS Total_Delegates FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY Total_Delegates DESC": 0.1
        }
    },
    {
        "record_name": "1315@y_name@DESC",
        "db_id": "election",
        "target": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "nlq": "Display a bar chart depicting the names of each county and the corresponding number of delegates, with the y-axis ranked in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name DESC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) DESC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY COUNT(County_name) ASC",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name ORDER BY County_name ASC",
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id",
            "Visualize BAR SELECT County_name , COUNT(County_name) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY County_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT County_name , SUM(Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY SUM(Delegate) DESC": 0.3,
            "Visualize BAR SELECT County_name , COUNT(Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY COUNT(Delegate) DESC": 0.2,
            "Visualize BAR SELECT County_name , AVG(Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District GROUP BY T1.County_Id ORDER BY AVG(Delegate) DESC": 0.1
        }
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "For the entries pertaining to the products and their respective manufacturers, please present the distribution of names and manufacturers. Display this information in a bar chart, grouped by attribute name, and sort it in descending order on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC": 0.5,
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Manufacturer ORDER BY T1.Manufacturer DESC": 0.3,
            "Visualize BAR SELECT T2.Name , T2.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.2
        }
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "For the records from the products and the manufacturer of each product, provide me with a comparison of manufacturers based on their names. Group the attribute names and display them in a bar chart, with the names ordered in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC": 0.6,
            "Visualize BAR SELECT T2.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.2,
            "Visualize BAR SELECT T2.Name , T2.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T2.Name ORDER BY T2.Name DESC": 0.2
        }
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "Generate a bar chart illustrating the distribution of names and manufacturers for the records from the products, grouped by the attribute name, and sorted in descending order based on the names.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name ORDER BY T1.Name DESC": 0.6,
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Manufacturer ORDER BY T1.Name DESC": 0.3,
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Name, T1.Manufacturer ORDER BY T1.Name DESC": 0.1
        }
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "For the records pertaining to the products and their respective manufacturers, retrieve the name and manufacturer of each product, group them based on the attribute name, and represent them visually using a bar chart. Please sort them in descending order based on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.NAME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.NAME DESC": 0.4,
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.Manufacturer ORDER BY T1.NAME DESC": 0.3,
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Manufacturer DESC": 0.2,
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Manufacturer ASC": 0.1
        }
    },
    {
        "record_name": "2239@x_name@DESC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
        "nlq": "Visualize a bar chart representing the distribution of names and manufacturers for the records of products, grouped by the attribute name. Could you please sort it in descending order on the X-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC",
            "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Manufacturer ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name ORDER BY T1.Name DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.NAME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.NAME DESC": 0.5,
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY T1.Manufacturer DESC": 0.3,
            "Visualize BAR SELECT T1.NAME , T1.Manufacturer FROM Products AS T1 JOIN Manufacturers AS T2 ON T1.Manufacturer = T2.Code GROUP BY T1.NAME ORDER BY COUNT(T1.Manufacturer) DESC": 0.2
        }
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "Bar chart with the X-axis representing the names and the Y-axis representing the number of occurrences, arranged in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC": 0.5,
            "Visualize BAR SELECT Name , COUNT(*) FROM Products GROUP BY Name ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC": 0.2
        }
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "A bar graph illustrating the quantity of product names, arranged in ascending order on the X-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC": 0.4,
            "Visualize BAR SELECT Name , COUNT(*) FROM Products GROUP BY Name ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC": 0.2,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC": 0.1
        }
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "What are the quantities of the names of all products? Please rank the x-axis in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name ORDER BY COUNT(Product_Name) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC": 0.5,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC": 0.2
        }
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "Display the names of all products and represent their count using a bar graph. Please arrange the X-axis in ascending order, from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , COUNT(*) FROM Products GROUP BY Name ORDER BY Name ASC": 0.2,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC": 0.2
        }
    },
    {
        "record_name": "2180@x_name@ASC",
        "db_id": "manufactory_1",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "nlq": "Choose the names of all the items available in the store and represent their count using a bar graph. Please ensure that the X-axis is arranged in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC": 0.4,
            "Visualize BAR SELECT Name , COUNT(*) FROM Products GROUP BY Name ORDER BY Name ASC": 0.3,
            "Visualize BAR SELECT Name , COUNT(Name) AS Count FROM Products GROUP BY Name ORDER BY Name ASC": 0.2,
            "Visualize BAR SELECT Name , COUNT(*) AS Count FROM Products GROUP BY Name ORDER BY Name ASC": 0.1
        }
    },
    {
        "record_name": "546@y_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "nlq": "What are the weekdays of the birthdates of the professors in charge of ACCT-211? Present the data with a bar chart and arrange them in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) ASC BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" BIN EMP_DOB BY WEEKDAY",
            "Visualize LINE SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB DESC BIN EMP_DOB BY YEAR",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize LINE SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB ASC BIN EMP_DOB BY YEAR",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' BIN EMP_HIREDATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY": 0.5,
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) ASC BIN EMP_DOB BY WEEKDAY": 0.2,
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY EMP_DOB DESC BIN EMP_DOB BY WEEKDAY": 0.3
        }
    },
    {
        "record_name": "546@y_name@DESC",
        "db_id": "college_1",
        "target": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "nlq": "What is the day of the week that professors teaching course ACCT-211 were born on? Display this information in a bar graph, and arrange the total number in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) ASC BIN EMP_DOB BY WEEKDAY",
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" BIN EMP_DOB BY WEEKDAY",
            "Visualize LINE SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB DESC BIN EMP_DOB BY YEAR",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize LINE SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY EMP_DOB ASC BIN EMP_DOB BY YEAR",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME ORDER BY COUNT(EMP_HIREDATE) DESC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102'  ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' GROUP BY EMP_LNAME ORDER BY COUNT(EMP_HIREDATE) ASC BIN EMP_HIREDATE BY WEEKDAY",
            "Visualize BAR SELECT EMP_HIREDATE , COUNT(EMP_HIREDATE) FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num = T2.emp_num WHERE T2.prof_office = 'DRE 102' BIN EMP_HIREDATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY": 0.5,
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) ASC BIN EMP_DOB BY WEEKDAY": 0.3,
            "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM EMPLOYEE AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\" ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY MONTH": 0.2
        }
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "nlq": "Bar graph depicting the average age for each city code, with the y-axis sorted in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC": 0.4,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) ASC": 0.3,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code DESC": 0.2,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code ASC": 0.1
        }
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "nlq": "What is the mean age for each urban area and which urban areas are they? Display the information using a bar chart, with the Y-axis sorted in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC": 0.5,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) ASC": 0.3,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code DESC": 0.2
        }
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "nlq": "Create a bar chart illustrating the average age for each city, and identify the respective cities. Display the cities in descending order along the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC": 0.6,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) ASC": 0.2,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code DESC": 0.1,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code ASC": 0.1
        }
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "nlq": "A bar chart illustrating the average age for each city and identifying the respective cities, with the Y-axis arranged in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC": 0.6,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) ASC": 0.2,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code DESC": 0.1,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code ASC": 0.1
        }
    },
    {
        "record_name": "1233@y_name@DESC",
        "db_id": "dorm_1",
        "target": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "nlq": "Display the mean age of all students residing in each city using a bar graph, depicting the cities in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY city_code ASC",
            "Visualize BAR SELECT city_code , avg(age) FROM student WHERE sex = 'M' GROUP BY city_code ORDER BY avg(age) DESC",
            "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) DESC": 0.4,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY avg(Age) ASC": 0.3,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code DESC": 0.2,
            "Visualize BAR SELECT city_code , avg(Age) FROM Student GROUP BY city_code ORDER BY city_code ASC": 0.1
        }
    },
    {
        "record_name": "1010",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "nlq": "Present each state and the quantity of addresses in each state using a bar graph.",
        "predict_rag_nlq": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "rag_dvqs": [
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "predict_debugged_db_ann": "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county",
        "predict_dvq_set": {
            "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county": 0.4,
            "Visualize BAR SELECT state_province_county , COUNT(address_id) FROM Addresses GROUP BY state_province_county": 0.3,
            "Visualize BAR SELECT state_province_county , COUNT(DISTINCT address_id) FROM Addresses GROUP BY state_province_county": 0.2,
            "Visualize BAR SELECT state_province_county , COUNT(DISTINCT address_id) AS address_count FROM Addresses GROUP BY state_province_county": 0.1
        }
    },
    {
        "record_name": "1010",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "nlq": "Display the number of addresses per state, showcasing each state using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "rag_dvqs": [
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "predict_debugged_db_ann": "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county",
        "predict_dvq_set": {
            "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county": 0.6,
            "Visualize BAR SELECT state_province_county , COUNT(address_id) FROM Addresses GROUP BY state_province_county": 0.2,
            "Visualize BAR SELECT state_province_county , COUNT(DISTINCT address_id) FROM Addresses GROUP BY state_province_county": 0.2
        }
    },
    {
        "record_name": "1010",
        "db_id": "customers_and_products_contacts",
        "target": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
        "nlq": "Display the aggregate count from each state, province, or county.",
        "predict_rag_nlq": "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county",
        "rag_dvqs": [
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county ORDER BY count(*) DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY state_province_county ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) ASC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county ORDER BY count(*) DESC",
            "Visualize BAR SELECT state_province_county , count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id = t2.address_id GROUP BY t2.state_province_county"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT state_province_county , COUNT(*) FROM addresses GROUP BY state_province_county",
        "predict_debugged_db_ann": "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county",
        "predict_dvq_set": {
            "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county": 0.4,
            "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county WHERE country = 'USA'": 0.3,
            "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT state_province_county , COUNT(*) FROM Addresses GROUP BY state_province_county LIMIT 10": 0.1
        }
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Provide a bar chart comparing the height among different names, and please arrange the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC": 0.3,
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY NAME DESC": 0.2,
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY NAME ASC": 0.2,
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT ASC": 0.3
        }
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Retrieve the names and heights, and represent them using a bar chart, with the y-axis ordered in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.4,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Weight DESC": 0.1
        }
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "A bar chart illustrates the distribution of Name and Height, and I would like to display it with the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC": 0.4,
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY Name DESC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.3
        }
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Create a bar chart depicting the relationship between name and height, arranged in descending order along the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.6,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC": 0.2
        }
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Create a bar chart representing the distribution of names and heights, and arrange the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC": 0.4,
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY NAME DESC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC": 0.1
        }
    },
    {
        "record_name": "394@y_name@DESC",
        "db_id": "candidate_poll",
        "target": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "nlq": "Provide a bar graph illustrating the distribution of Name and Height, with the Y-axis displayed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC",
            "Visualize BAR SELECT Name , Height FROM people",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight DESC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Name DESC",
            "Visualize BAR SELECT Date_of_Birth , Height FROM people ORDER BY Height ASC",
            "Visualize BAR SELECT Name , Weight FROM people ORDER BY Weight ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT NAME , HEIGHT FROM people ORDER BY HEIGHT DESC": 0.3,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Height ASC": 0.1,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name DESC": 0.2,
            "Visualize BAR SELECT Name , Height FROM people ORDER BY Name ASC": 0.2
        }
    },
    {
        "record_name": "769@y_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "nlq": "Display the quantity of documents for each location code in a bar graph, and arrange the y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOCATION_CODE , COUNT(LOCATION_CODE) FROM Document_Locations GROUP BY LOCATION_CODE ORDER BY COUNT(LOCATION_CODE) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOCATION_CODE , COUNT(LOCATION_CODE) FROM Document_Locations GROUP BY LOCATION_CODE ORDER BY COUNT(LOCATION_CODE) DESC": 0.6,
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC": 0.3,
            "Visualize BAR SELECT Location_Code , COUNT(*) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(*) DESC": 0.1
        }
    },
    {
        "record_name": "769@y_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "nlq": "Show the quantity of documents for different location codes in a bar chart to illustrate the proportion, and arrange the Y-axis in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT LOCATION_CODE , COUNT(LOCATION_CODE) FROM Document_Locations GROUP BY LOCATION_CODE ORDER BY COUNT(LOCATION_CODE) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT LOCATION_CODE , COUNT(LOCATION_CODE) FROM Document_Locations GROUP BY LOCATION_CODE ORDER BY COUNT(LOCATION_CODE) DESC": 0.5,
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC": 0.3,
            "Visualize BAR SELECT Location_Code , COUNT(*) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "769@y_name@DESC",
        "db_id": "cre_Doc_Tracking_DB",
        "target": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "nlq": "Bar chart with the X-axis representing location codes and the Y-axis representing the number of location codes, displayed in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code DESC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code ORDER BY Location_Code ASC",
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code",
            "Visualize BAR SELECT Location_Code , count(*) FROM Document_locations GROUP BY location_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC": 0.5,
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY Location_Code DESC": 0.3,
            "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_Locations GROUP BY Location_Code ORDER BY Location_Code ASC": 0.2
        }
    },
    {
        "record_name": "2762@y_name@ASC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
        "nlq": "For each category, depict the quantity of ships as a bar chart and list the y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC": 0.4,
            "Visualize BAR SELECT Name , COUNT(*) FROM ship GROUP BY Name ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT Nationality , COUNT(*) FROM ship GROUP BY Nationality ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Tonnage , COUNT(*) FROM ship GROUP BY Tonnage ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "2762@y_name@ASC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
        "nlq": "Present a bar chart displaying the diverse categories of ships along with the quantity of ships belonging to each category. Please arrange the bars in ascending order based on the total number of ships.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY Type ASC": 0.1
        }
    },
    {
        "record_name": "2762@y_name@ASC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
        "nlq": "In a bar chart, use the X-axis to represent the different types of categories, and the Y-axis to display the total number. Please arrange the Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Name , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Type , COUNT(*) FROM mission GROUP BY Type ORDER BY COUNT(*) ASC": 0.1,
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Nationality ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "2762@y_name@ASC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
        "nlq": "Display various categories of vessels and the respective quantities of each category in a bar graph, and arrange them in ascending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Name , COUNT(*) FROM ship GROUP BY Type ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY Nationality ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "2055",
        "db_id": "journal_committee",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "nlq": "Aggregate and tally the name attribute to create a bar chart visualization.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM train GROUP BY Name ORDER BY Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name": 0.6,
            "Visualize BAR SELECT Name , SUM(Age) FROM editor GROUP BY Name": 0.2,
            "Visualize BAR SELECT Age , COUNT(Name) FROM editor GROUP BY Age": 0.2
        }
    },
    {
        "record_name": "2055",
        "db_id": "journal_committee",
        "target": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "nlq": "The x-axis of the bar chart represents the names of the categories, while the y-axis represents the quantity of occurrences.",
        "predict_rag_nlq": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
        "rag_dvqs": [
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY COUNT(Name) ASC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
            "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY COUNT(Name) DESC",
            "Visualize BAR SELECT Product_Name , COUNT(Product_Name) FROM Products GROUP BY Product_Name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name",
        "predict_debugged_db_ann": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
        "predict_dvq_set": {
            "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name": 0.5,
            "Visualize BAR SELECT Age , COUNT(Age) FROM editor GROUP BY Age": 0.3,
            "Visualize BAR SELECT Theme , COUNT(Theme) FROM journal GROUP BY Theme": 0.2
        }
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "Present the name and enrollment count of students for each course in a bar graph, arranged on the X-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY T1.course_name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY T1.course_name ASC": 0.5,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC": 0.3,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "What are the names of each course and the respective student enrollment numbers? Please display the information in a bar chart with the bars arranged in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC": 0.1
        }
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "Provide a list of the names of courses and the corresponding number of enrolled students. Show this information in a bar chart, with the x-axis arranged in ascending order from lowest to highest.",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC": 0.1
        }
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "Provide a histogram displaying the course names and the respective number of student enrollments, with the X-axis sorted in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY T1.course_name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY T1.course_name ASC": 0.6,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "1273@x_name@ASC",
        "db_id": "e_learning",
        "target": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "nlq": "Present a bar chart showcasing the name of each course and the corresponding count of student enrollments. Additionally, could you arrange the chart in ascending order along the x-axis?",
        "predict_rag_nlq": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY T1.course_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY course_name DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT course_name , count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY T1.course_name ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY T1.course_name ASC": 0.6,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY COUNT(*) DESC": 0.2
        }
    },
    {
        "record_name": "829@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "nlq": "Bar chart to display the quantity of document type descriptions from various document type descriptions, arranged in ascending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC": 0.6,
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_Document_Types GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC": 0.2,
            "Visualize BAR SELECT Document_Type_Description , COUNT(*) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "829@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "nlq": "How many document types are there for different descriptions of document types? Please visualize this information using a bar chart and sort it in ascending order on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC": 0.6,
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_Document_Types GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC": 0.2,
            "Visualize BAR SELECT Document_Type_Code , COUNT(Document_Type_Code) FROM Ref_Document_Types GROUP BY Document_Type_Code ORDER BY Document_Type_Code ASC": 0.1,
            "Visualize BAR SELECT Document_Type_Description , COUNT(*) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "829@x_name@ASC",
        "db_id": "cre_Docs_and_Epenses",
        "target": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "nlq": "Display the quantity of document types for various descriptions in a bar graph, and arrange them in ascending order on the x-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Type_Description DESC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) ASC",
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY COUNT(Document_Type_Description) DESC",
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC": 0.6,
            "Visualize BAR SELECT Document_Type_Name , COUNT(Document_Type_Name) FROM Ref_Document_Types GROUP BY Document_Type_Name ORDER BY Document_Type_Name ASC": 0.2,
            "Visualize BAR SELECT Document_Type_Description , COUNT(*) FROM Ref_Document_Types GROUP BY Document_Type_Description ORDER BY COUNT(*) ASC": 0.2
        }
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
        "nlq": "Display the first name and ID of all customers with a minimum of two accounts in a bar graph, and sort them in ascending order based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_FIRST_NAME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_FIRST_NAME ASC": 0.5,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T1.CUSTOMER_ID ASC": 0.3,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_ID DESC": 0.2
        }
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
        "nlq": "Create a bar chart illustrating the first names and IDs of customers who have two or more accounts, and arrange them in ascending order based on the customer ID.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_FIRST_NAME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID GROUP BY T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID HAVING COUNT(T1.CUSTOMER_ID) >= 2 ORDER BY T2.CUSTOMER_ID ASC": 0.6,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID WHERE COUNT(T1.CUSTOMER_ID) >= 2 ORDER BY T2.CUSTOMER_ID ASC": 0.3,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID GROUP BY T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID ORDER BY T2.CUSTOMER_ID ASC": 0.1
        }
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
        "nlq": "Provide a histogram displaying the first names and IDs of customers who have two or more accounts. Please arrange the data in ascending order based on the customer_id.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_id ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_id ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_ID ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_ID ASC": 0.5,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID GROUP BY T2.CUSTOMER_FIRST_NAME, T1.CUSTOMER_ID ORDER BY T2.CUSTOMER_ID ASC": 0.3,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID HAVING COUNT(T1.CUSTOMER_ID) >= 2 ORDER BY T2.CUSTOMER_ID ASC": 0.2
        }
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
        "nlq": "What are the given names and identification numbers for customers who possess two or more accounts, and display them on the y-axis in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_FIRST_NAME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_FIRST_NAME ASC": 0.6,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID WHERE COUNT(T1.CUSTOMER_ID) >= 2 ORDER BY T2.CUSTOMER_FIRST_NAME ASC": 0.3,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID GROUP BY T1.CUSTOMER_ID HAVING COUNT(T1.CUSTOMER_ID) >= 2 ORDER BY T2.CUSTOMER_FIRST_NAME ASC": 0.1
        }
    },
    {
        "record_name": "960@y_name@ASC",
        "db_id": "customers_and_invoices",
        "target": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
        "nlq": "Display the first name and ID for all customers who have a minimum of two accounts. Present the data in a bar graph, ordering the Y-axis from the lowest to the highest values, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id DESC",
            "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_last_name ASC",
            "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY customer_first_name DESC",
            "Visualize BAR SELECT customer_last_name , COUNT(customer_last_name) FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id = T2.customer_id GROUP BY customer_last_name ORDER BY customer_last_name ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_first_name ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_FIRST_NAME ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID ORDER BY T2.CUSTOMER_FIRST_NAME ASC": 0.6,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID WHERE COUNT(T1.ACCOUNT_ID) >= 2 ORDER BY T2.CUSTOMER_FIRST_NAME ASC": 0.3,
            "Visualize BAR SELECT T2.CUSTOMER_FIRST_NAME , T1.CUSTOMER_ID FROM Accounts AS T1 JOIN Customers AS T2 ON T1.CUSTOMER_ID = T2.CUSTOMER_ID GROUP BY T2.CUSTOMER_FIRST_NAME HAVING COUNT(T1.ACCOUNT_ID) >= 2 ORDER BY T2.CUSTOMER_FIRST_NAME ASC": 0.1
        }
    },
    {
        "record_name": "2833",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
        "nlq": "Provide a bar chart displaying the departure times and frequencies of all trains heading towards Chennai, ordered by time.",
        "predict_rag_nlq": "Visualize BAR SELECT time , COUNT(*) FROM train WHERE destination = 'Chennai' GROUP BY time ORDER BY time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) ASC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) DESC",
            "Visualize BAR SELECT origin , count(*) FROM train GROUP BY origin ORDER BY origin ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT time , COUNT(time) FROM train WHERE destination = 'Chennai' GROUP BY time ORDER BY time ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT time , COUNT(time) FROM train WHERE destination = 'Chennai' GROUP BY time ORDER BY time ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT time , COUNT(time) FROM train WHERE destination = 'Chennai' GROUP BY time ORDER BY time ASC": 0.5,
            "Visualize BAR SELECT time , COUNT(time) FROM train WHERE destination = 'Chennai' AND origin != 'Chennai' GROUP BY time ORDER BY time ASC": 0.3,
            "Visualize BAR SELECT time , COUNT(time) FROM train WHERE destination = 'Chennai' AND origin = 'Chennai' GROUP BY time ORDER BY time ASC": 0.2
        }
    },
    {
        "record_name": "2833",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
        "nlq": "Provide me with the departure times and quantities of all trains that go to Chennai, arranged in chronological order. Display this information using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY time ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
            "Visualize PIE SELECT time , train_number FROM train WHERE destination = 'Chennai'",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) ASC",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY COUNT(Arrival) DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY time",
        "predict_debugged_db_ann": "Visualize BAR SELECT time , TRAIN_NUMBER FROM train WHERE destination = 'Chennai' ORDER BY time",
        "predict_dvq_set": {
            "Visualize BAR SELECT time , TRAIN_NUMBER FROM train WHERE destination = 'Chennai' ORDER BY time": 0.5,
            "Visualize BAR SELECT time , TRAIN_NUMBER FROM train WHERE origin = 'Chennai' ORDER BY time": 0.3,
            "Visualize BAR SELECT time , TRAIN_NUMBER FROM train WHERE destination = 'Chennai' ORDER BY train_number": 0.2
        }
    },
    {
        "record_name": "2833",
        "db_id": "station_weather",
        "target": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
        "nlq": "Create a bar chart representing the frequency and quantity of all trains traveling to Chennai, arranged according to their respective times.",
        "predict_rag_nlq": "Visualize BAR SELECT time , COUNT(*) FROM train WHERE destination = 'Chennai' GROUP BY time",
        "rag_dvqs": [
            "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival ASC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY time ASC",
            "Visualize BAR SELECT origin , count(*) FROM train GROUP BY origin",
            "Visualize BAR SELECT Arrival , COUNT(Arrival) FROM train GROUP BY Arrival ORDER BY Arrival DESC",
            "Visualize BAR SELECT time , COUNT(time) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY time ORDER BY COUNT(time) DESC",
            "Visualize BAR SELECT name , COUNT(name) FROM train GROUP BY name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT time , COUNT(time) FROM train WHERE destination = 'Chennai' GROUP BY time",
        "predict_debugged_db_ann": "Visualize BAR SELECT TIME , COUNT(TIME) FROM train WHERE destination = 'Chennai' GROUP BY TIME",
        "predict_dvq_set": {
            "Visualize BAR SELECT TIME , COUNT(TIME) FROM train WHERE destination = 'Chennai' GROUP BY TIME": 0.4,
            "Visualize BAR SELECT TIME , COUNT(TIME) FROM train WHERE origin = 'Chennai' GROUP BY TIME": 0.3,
            "Visualize BAR SELECT TIME , COUNT(TIME) FROM train WHERE destination = 'Chennai' AND origin != 'Chennai' GROUP BY TIME": 0.2,
            "Visualize BAR SELECT TIME , COUNT(TIME) FROM train WHERE destination = 'Chennai' AND origin = 'Chennai' GROUP BY TIME": 0.1
        }
    },
    {
        "record_name": "633@x_name@DESC",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
        "nlq": "What is the mean credit value of courses that have multiple prerequisites for each department? Please generate a bar chart where the bars are listed in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY SUM(credits) DESC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY SUM(credits) ASC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC": 0.5,
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id WHERE COUNT(prereq_id) > 1 GROUP BY dept_name ORDER BY AVG(credits) DESC": 0.3,
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name HAVING COUNT(prereq_id) > 1 ORDER BY AVG(credits) DESC": 0.2
        }
    },
    {
        "record_name": "633@x_name@DESC",
        "db_id": "college_2",
        "target": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
        "nlq": "Calculate the mean number of credits for courses that have more than one prerequisite for each department, and represent the data using a bar chart. Please arrange the bars in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY SUM(credits) DESC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY SUM(credits) ASC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name ASC",
            "Visualize BAR SELECT dept_name , SUM(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY AVG(credits) DESC": 0.5,
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name HAVING COUNT(prereq_id) > 1 ORDER BY AVG(credits) DESC": 0.3,
            "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name HAVING COUNT(DISTINCT prereq_id) > 1 ORDER BY AVG(credits) DESC": 0.2
        }
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "nlq": "A grouped bar chart displays the distribution of All_Home and School_ID, grouped by the attribute ACC_Home, and ordered on the y-axis from highest to lowest, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC": 0.5,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC": 0.2
        }
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "nlq": "Retrieve All_Home and School_ID, group them by the attribute ACC_Home, and visualize them using a bar chart. Please list them in descending order based on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC": 0.5,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ACC_HOME DESC": 0.3,
            "Visualize BAR SELECT ALL_HOME , School_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY School_ID DESC": 0.2
        }
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "nlq": "Present the distribution of All_Home and School_ID, categorized by the ACC_Home attribute, in a bar chart. Please sort the bars on the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ALL_HOME DESC": 0.3,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ACC_HOME DESC": 0.2,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY SCHOOL_ID DESC": 0.2,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY ACC_HOME ASC": 0.1,
            "Visualize BAR SELECT ALL_HOME , SCHOOL_ID FROM basketball_match GROUP BY ACC_HOME , ALL_HOME ORDER BY SCHOOL_ID ASC": 0.2
        }
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "nlq": "Generate a grouping bar chart illustrating the distribution of All_Home and School_ID, categorized by the ACC_Home attribute, and sorted in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC": 0.4,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.2,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID ASC": 0.1
        }
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "nlq": "Stacked bar chart comparing school ID to ACC Home, based on all home, listed on the y-axis in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC": 0.5,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.2
        }
    },
    {
        "record_name": "3093@y_name@DESC",
        "db_id": "university_basketball",
        "target": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "nlq": "Create a stacked bar chart illustrating the distribution of All_Home and School_ID, grouped by attribute ACC_Home, and arranged in descending order on the Y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY School_ID ASC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home DESC",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home",
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
            "Visualize BAR SELECT ACC_Road , School_ID FROM basketball_match GROUP BY All_Home ,  ACC_Road ORDER BY School_ID DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY School_ID DESC": 0.5,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY All_Home DESC": 0.3,
            "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home , All_Home ORDER BY ACC_Home DESC": 0.2
        }
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people",
        "target": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "nlq": "Display the names of political parties and the quantity of events for each party in a bar graph, arranged in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY Party_name DESC": 0.2,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY Party_name ASC": 0.2,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY Party_name": 0.3
        }
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people",
        "target": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "nlq": "How many occurrences are there for each party, sorted in descending order by the total count, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY COUNT(*) DESC LIMIT 10": 0.2,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY COUNT(*) DESC LIMIT 5": 0.1
        }
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people",
        "target": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "nlq": "Display the names of political parties and the number of events associated with each party, ordered in descending order based on the total number, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY Party_name DESC": 0.3
        }
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people",
        "target": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "nlq": "Provide a bar chart indicating the number of events per party, arranged in descending order on the y-axis, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC": 0.4,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY COUNT(*) ASC": 0.2,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY Party_name DESC": 0.1
        }
    },
    {
        "record_name": "2509@y_name@DESC",
        "db_id": "party_people",
        "target": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "nlq": "Provide me with a histogram illustrating the frequency of events for each political party, and list them in descending order based on the total count.",
        "predict_rag_nlq": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name DESC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY Party_name ASC",
            "Visualize BAR SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_name ORDER BY COUNT(*) DESC": 0.2,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY Party_name ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T1.Party_ID ORDER BY COUNT(*) ASC": 0.1,
            "Visualize BAR SELECT Party_name , COUNT(*) FROM party_events AS T1 JOIN party AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_name ORDER BY COUNT(*) ASC": 0.1
        }
    },
    {
        "record_name": "2765@x_name@DESC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
        "nlq": "Present a bar chart displaying the average tonnage for each category, with the bars arranged in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC": 0.4,
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) ASC": 0.3,
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY Type DESC": 0.2,
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY Type ASC": 0.1
        }
    },
    {
        "record_name": "2765@x_name@DESC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
        "nlq": "Display various categories of vessels and the mean tonnage of each category in a bar graph, and arrange the types in descending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC": 0.5,
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) ASC": 0.3,
            "Visualize BAR SELECT Type , sum(Tonnage) FROM ship GROUP BY Type ORDER BY sum(Tonnage) DESC": 0.2
        }
    },
    {
        "record_name": "2765@x_name@DESC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
        "nlq": "Display a bar chart representing various categories of ships and the average tonnage of ships within each category. Please ensure that the x-axis is arranged in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) ASC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY Type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC": 0.4,
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) ASC": 0.3,
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY Type DESC": 0.2,
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY Type ASC": 0.1
        }
    },
    {
        "record_name": "2765@x_name@DESC",
        "db_id": "ship_mission",
        "target": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
        "nlq": "For each category, what is the mean weight, and display X in descending order.",
        "predict_rag_nlq": "Visualize BAR SELECT Category , avg(weight) FROM ship GROUP BY Category ORDER BY avg(weight) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY avg(Tonnage) ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type ASC",
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY product_category_code DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) DESC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY COUNT(Type) DESC",
            "Visualize BAR SELECT product_category_code , avg(product_price) FROM products GROUP BY product_category_code ORDER BY avg(product_price) ASC",
            "Visualize BAR SELECT Type , COUNT(Type) FROM ship GROUP BY Type ORDER BY Type DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) DESC": 0.4,
            "Visualize BAR SELECT Nationality , avg(Tonnage) FROM ship GROUP BY Nationality ORDER BY avg(Tonnage) DESC": 0.3,
            "Visualize BAR SELECT Name , avg(Tonnage) FROM ship GROUP BY Name ORDER BY avg(Tonnage) DESC": 0.2,
            "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY Type ORDER BY avg(Tonnage) ASC": 0.1
        }
    },
    {
        "record_name": "2816@x_name@DESC",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "nlq": "A bar graph illustrating the number of competitions for each country, with the bars displayed in descending order from highest to lowest.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM competition GROUP BY COUNTRY ORDER BY COUNT(COUNTRY) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM competition GROUP BY COUNTRY ORDER BY COUNT(COUNTRY) DESC": 0.6,
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC": 0.1,
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC": 0.1
        }
    },
    {
        "record_name": "2816@x_name@DESC",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "nlq": "Display the quantity of countries per country in a histogram, and please sort them in descending order based on the X-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC": 0.4,
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC": 0.3,
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC": 0.2,
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC": 0.1
        }
    },
    {
        "record_name": "2816@x_name@DESC",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "nlq": "How many competitions does each country have? Please arrange the data in descending order based on the country.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
        "predict_debugged_db_ann": "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM competition GROUP BY COUNTRY",
        "predict_dvq_set": {
            "Visualize BAR SELECT COUNTRY , COUNT(COUNTRY) FROM competition GROUP BY COUNTRY": 0.5,
            "Visualize BAR SELECT Country , COUNT(Competition_ID) FROM competition GROUP BY Country": 0.3,
            "Visualize BAR SELECT Country , COUNT(*) FROM competition GROUP BY Country": 0.2
        }
    },
    {
        "record_name": "2816@x_name@DESC",
        "db_id": "sports_competition",
        "target": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "nlq": "Compare the aggregate number of competitions for each nation, and sort them in descending order based on the x-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) DESC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY Country ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country ORDER BY COUNT(Country) ASC",
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Competition_type ,  Country"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC": 0.5,
            "Visualize BAR SELECT Country , COUNT(Competition_ID) FROM competition GROUP BY Country ORDER BY Country DESC": 0.3,
            "Visualize BAR SELECT Country , COUNT(Competition_type) FROM competition GROUP BY Country ORDER BY Country DESC": 0.2
        }
    },
    {
        "record_name": "2494",
        "db_id": "orchestra",
        "target": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "nlq": "Present a bar chart illustrating the number of orchestras managed by each record company.",
        "predict_rag_nlq": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC": 0.6,
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC": 0.3,
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC": 0.1
        }
    },
    {
        "record_name": "2494",
        "db_id": "orchestra",
        "target": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "nlq": "Visualize a bar chart illustrating the number of orchestras managed by each record company.",
        "predict_rag_nlq": "Visualize BAR SELECT Record_Company, COUNT(*) FROM orchestra GROUP BY Record_Company",
        "rag_dvqs": [
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
            "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "predict_debugged_db_ann": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "predict_dvq_set": {
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company": 0.5,
            "Visualize BAR SELECT Record_Company , COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company": 0.3,
            "Visualize BAR SELECT Record_Company , COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company": 0.2
        }
    },
    {
        "record_name": "2494",
        "db_id": "orchestra",
        "target": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "nlq": "How many orchestras are managed by each record label? Display the data in a bar chart, please.",
        "predict_rag_nlq": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "rag_dvqs": [
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
            "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "predict_debugged_db_ann": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "predict_dvq_set": {
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company": 0.5,
            "Visualize BAR SELECT Record_Company , COUNT(Orchestra_ID) FROM orchestra GROUP BY Record_Company": 0.3,
            "Visualize BAR SELECT Record_Company , COUNT(DISTINCT Orchestra_ID) FROM orchestra GROUP BY Record_Company": 0.2
        }
    },
    {
        "record_name": "2494",
        "db_id": "orchestra",
        "target": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
        "nlq": "Create a bar chart comparing different record companies based on the total number.",
        "predict_rag_nlq": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
        "rag_dvqs": [
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company DESC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY Record_Company ASC",
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
            "Visualize BAR SELECT Record_Company , COUNT(Record_Company) FROM orchestra GROUP BY Record_Company ORDER BY Year_of_Founded DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) DESC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY count(*) ASC",
            "Visualize BAR SELECT Company , count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id = T2.company_id GROUP BY T1.company_id ORDER BY Company ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
        "predict_debugged_db_ann": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC",
        "predict_dvq_set": {
            "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company ORDER BY COUNT(*) DESC": 0.6,
            "Visualize BAR SELECT Record_Company , SUM(Orchestra_ID) FROM orchestra GROUP BY Record_Company ORDER BY SUM(Orchestra_ID) DESC": 0.2,
            "Visualize BAR SELECT Record_Company , AVG(Year_of_Founded) FROM orchestra GROUP BY Record_Company ORDER BY AVG(Year_of_Founded) DESC": 0.2
        }
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees whose first names contain the letters D or S, retrieve their hire dates and compute the sum of employee IDs grouped by weekday. Visualize this data using a bar chart, with the Y-axis displayed in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY": 0.5,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME IN ('D', 'S') ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees with the letters D or S in their first name, create a bar graph illustrating the distribution of hire dates and the sum of employee IDs binned by weekdays. Please ensure that the Y-axis is ordered in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY WEEKDAY": 0.5,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME IN ('D', 'S') BIN HIRE_DATE BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees whose first names contain the letters D or S, a bar chart illustrates the distribution of hire dates and the total employee ID count binned by weekdays, listed in ascending order by the Y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , COUNT(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY COUNT(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'  ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) ASC BIN HIRE_DATE BY WEEKDAY": 0.2,
            "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees with the letters D or S in their first name, create a bar chart illustrating the distribution of hire dates and sum of employee IDs binned by weekday, ordered in ascending order on the y-axis.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY": 0.5,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' AND FIRST_NAME LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY WEEKDAY": 0.2
        }
    },
    {
        "record_name": "1548@y_name@ASC",
        "db_id": "hr_1",
        "target": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "nlq": "For all employees whose first names contain the letters D or S, please present a bar chart depicting the distribution of hire dates and the total number of employee IDs binned by weekday. Kindly sort the Y-axis in ascending order.",
        "predict_rag_nlq": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "rag_dvqs": [
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(SALARY) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(DEPARTMENT_ID) ASC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY WEEKDAY",
            "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY WEEKDAY"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_debugged_db_ann": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY",
        "predict_dvq_set": {
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY": 0.6,
            "Visualize BAR SELECT HIRE_DATE , COUNT(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY COUNT(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY": 0.3,
            "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE FIRST_NAME LIKE '%D%' OR FIRST_NAME LIKE '%S%' ORDER BY HIRE_DATE ASC BIN HIRE_DATE BY WEEKDAY": 0.1
        }
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "nlq": "Present the description of the results for each project, and quantify them using a bar chart.",
        "predict_rag_nlq": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY outcome_code ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_dvq_set": {
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description": 0.6,
            "Visualize BAR SELECT outcome_description , SUM(outcome_code) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description": 0.3,
            "Visualize BAR SELECT outcome_description , AVG(outcome_code) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description": 0.1
        }
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "nlq": "A bar chart illustrating the frequency of descriptions for all project outcomes.",
        "predict_rag_nlq": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY outcome_code ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_dvq_set": {
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description": 0.6,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code WHERE T2.project_id = 'XYZ' GROUP BY outcome_description": 0.2,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code WHERE T1.outcome_code = 'ABC' GROUP BY outcome_description": 0.1,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code WHERE T1.outcome_description LIKE '%impact%' GROUP BY outcome_description": 0.1
        }
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "nlq": "What is the count of the descriptions for all of the project outcomes?",
        "predict_rag_nlq": "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "rag_dvqs": [
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
            "Visualize PIE SELECT product_category_description , COUNT(product_category_description) FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_description LIKE '%t%' GROUP BY product_category_description",
            "Visualize PIE SELECT treatment_type_description , SUM(cost_of_treatment) FROM Treatments AS T1 JOIN treatment_types AS T2 ON T1.treatment_type_code = T2.treatment_type_code GROUP BY treatment_type_description",
            "Visualize PIE SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_debugged_db_ann": "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_dvq_set": {
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description": 0.6,
            "Visualize PIE SELECT outcome_description , COUNT(*) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description": 0.3,
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code": 0.1
        }
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "nlq": "A bar chart displaying the count of outcome descriptions for all projects.",
        "predict_rag_nlq": "Visualize BAR SELECT outcome_description, COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY outcome_code ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_dvq_set": {
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description": 0.6,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code WHERE T2.project_id IN (SELECT project_id FROM Projects) GROUP BY outcome_description": 0.3,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code WHERE T2.project_id IN (SELECT project_id FROM Projects WHERE organisation_id = 'XYZ') GROUP BY outcome_description": 0.1
        }
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "nlq": "What are the explanations for each of the project results, and represent them through a bar chart indicating their respective quantities.",
        "predict_rag_nlq": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY outcome_code ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_debugged_db_ann": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "predict_dvq_set": {
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description": 0.6,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code WHERE T2.project_id = '123' GROUP BY outcome_description": 0.2,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code WHERE T2.project_id = '456' GROUP BY outcome_description": 0.2
        }
    },
    {
        "record_name": "2959",
        "db_id": "tracking_grants_for_research",
        "target": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
        "nlq": "Enumerate the quantity of descriptions for the outcomes of all projects.",
        "predict_rag_nlq": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) ASC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC",
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize PIE SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY outcome_code ASC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY outcome_code DESC",
            "Visualize BAR SELECT outcome_code , count(*) FROM mailshot_customers GROUP BY outcome_code ORDER BY count(*) DESC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description ASC": 0.6,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY COUNT(outcome_description) DESC": 0.3,
            "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_Outcomes AS T1 JOIN Project_Outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description ORDER BY outcome_description DESC": 0.1
        }
    },
    {
        "record_name": "1305",
        "db_id": "election",
        "target": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "nlq": "Display the percentage distribution of each political party in a pie chart.",
        "predict_rag_nlq": "Visualize PIE SELECT Party , COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "rag_dvqs": [
            "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize PIE SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize PIE SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize PIE SELECT Party_name , count(*) FROM Member AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id",
            "Visualize PIE SELECT Governor , COUNT(Governor) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 GROUP BY Governor",
            "Visualize PIE SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize PIE SELECT Comptroller , COUNT(Comptroller) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T1.District = 1 OR T1.District = 2 GROUP BY Comptroller",
            "Visualize PIE SELECT Party , count(*) FROM driver GROUP BY party",
            "Visualize PIE SELECT Party , COUNT(*) FROM representative GROUP BY Party"
        ],
        "predict_debugged_ref_dvqs": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_debugged_db_ann": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_dvq_set": {
            "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.6,
            "Visualize PIE SELECT T2.Party , SUM(T1.Delegate) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.2,
            "Visualize PIE SELECT T2.Party , AVG(T1.Population) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.1,
            "Visualize PIE SELECT T2.Party , MAX(T1.First_Elected) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.1
        }
    },
    {
        "record_name": "1305",
        "db_id": "election",
        "target": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "nlq": "Can you provide the breakdown or distribution of the percentage of votes for each political party in the election?",
        "predict_rag_nlq": "Visualize BAR SELECT Party , SUM(Votes) FROM election GROUP BY Party",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY SUM(COUNT(*)) ASC",
            "Visualize BAR SELECT Party , COUNT(*) FROM representative GROUP BY Party",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party",
            "Visualize BAR SELECT T2.Party , SUM(COUNT(*)) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY SUM(COUNT(*)) DESC",
            "Visualize BAR SELECT Party , COUNT(Party) FROM representative GROUP BY Party",
            "Visualize BAR SELECT state , SUM(vote_id) FROM votes GROUP BY state",
            "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party ASC"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Party , SUM(COUNT(*) ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Party , SUM(COUNT(*) ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Party , SUM(COUNT(*) ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.4,
            "Visualize BAR SELECT T2.Party , AVG(COUNT(*) ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.3,
            "Visualize BAR SELECT T2.Party , MAX(COUNT(*) ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.2,
            "Visualize BAR SELECT T2.Party , MIN(COUNT(*) ) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party": 0.1
        }
    },
    {
        "record_name": "1306@y_name@ASC",
        "db_id": "election",
        "target": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
        "nlq": "Please compare the quantity of party names using a bar graph, with the y-axis arranged in ascending order, please.",
        "predict_rag_nlq": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
        "rag_dvqs": [
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party DESC",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"
        ],
        "predict_debugged_ref_dvqs": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
        "predict_debugged_db_ann": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
        "predict_dvq_set": {
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC": 0.6,
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) DESC": 0.3,
            "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY T2.Party ASC": 0.1
        }
    }
]