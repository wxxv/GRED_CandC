[
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , id FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id = T1.id ORDER BY id ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "browser_web",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "id",
            "x_data": [
                [
                    "CACHEbox",
                    "CProxy",
                    "Fasterfox"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present a bar graph representing the IDs and names of web accelerators that are compatible with two or more browsers, and kindly sort the y-axis in ascending order.",
            "What are the identifiers and names of the web accelerators that are compatible with two or more browsers? Visualize this information using a bar chart, and sort it in ascending order on the y-axis, please.",
            "Create a bar chart to represent the IDs and names of web accelerators that are compatible with two or more browsers. Display the Y-axis in ascending order from lowest to highest."
        ],
        "record_name": "375@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "SUM(EMPLOYEE_ID)",
            "x_data": [
                [
                    "Sept",
                    "Aug",
                    "July",
                    "June",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    5512,
                    4960,
                    3999,
                    1491,
                    206
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For employees whose salary falls within the range of 8000 to 12000 and have a non-null commission or do not belong to department number 40, determine their hire_date and the sum of employee_id grouped by hire_date, and represent the data using a bar chart with the y-axis displayed in descending order.",
            "For employees with salaries ranging from 8000 to 12000, and with either non-null commission or department number not equal to 40, provide a comparison of the total employee_id sum grouped by hire_date bins over time using a bar chart. Please display the results in descending order by the total number count.",
            "For employees with salaries ranging from 8000 to 12000, and either a non-null commission or a department number not equal to 40, create a bar chart illustrating the distribution of hire dates and the sum of employee IDs per hire date over time, with the Y-axis ranked in descending order.",
            "For employees with salaries ranging from 8000 to 12000 and a non-null commission or a department number not equal to 40, please display the distribution of hire dates and the sum of employee IDs binned by hire date in a bar chart. Please arrange the Y-axis in descending order.",
            "For employees with salaries ranging from 8000 to 12000, and either a non-null commission or a department number not equal to 40, provide a comparison of the sum of employee_id over the hire_date bin hire_date sorted by time, and list the Y-axis in descending order."
        ],
        "record_name": "1582@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Team_ID , All_Games_Percent FROM basketball_match GROUP BY ACC_Home"
        },
        "chart": "Grouping Scatter",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Team_ID",
            "y_name": "All_Games_Percent",
            "x_data": [
                [
                    1,
                    4
                ],
                [
                    3,
                    2
                ]
            ],
            "y_data": [
                [
                    0.946,
                    0.6
                ],
                [
                    0.706,
                    0.8240000000000001
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home"
        },
        "nl_queries": [
            "Visualize the correlation between Team_ID and All_Games_Percent, with the grouping attribute set to ACC_Home.",
            "Create a scatter plot illustrating the relationship between Team_ID and All_Games_Percent, grouped by the attribute ACC_Home.",
            "A grouping scatter chart illustrates the relationship between Team_ID and All_Games_Percent, categorized by the ACC_Home attribute.",
            "Display the correlation between Team_ID and All_Games_Percent, and group them by the attribute ACC_Home in a scatter chart.",
            "Provide a scatter plot demonstrating the relationship between Team_ID and All_Games_Percent, with the data grouped according to the ACC_Home attribute.",
            "Create a scatterplot with team identification on the x-axis and all_games_percent on the y-axis. Color the points according to the ACC_Home category."
        ],
        "record_name": "3082"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Directed_by",
            "y_name": "COUNT(Directed_by)",
            "x_data": [
                [
                    "Bill Schreiner",
                    "Jesus Salvador Trevi\u00f1o"
                ]
            ],
            "y_data": [
                [
                    4,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Directed_by"
        },
        "nl_queries": [
            "Bar chart to display the quantity of films directed by various directors, with the \"Directed_by\" category listed in ascending order.",
            "Provide me with a bar chart illustrating the quantity of films for each director, and arrange the bars in ascending order.",
            "What is the quantity of films for each director? Provide a bar graph, arranged in ascending order by the names, please."
        ],
        "record_name": "443@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY Package_Option DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tvshow",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Package_Option",
            "y_name": "COUNT(Package_Option)",
            "x_data": [
                [
                    "no ( FTV )",
                    "Sky Famiglia + Sky HD",
                    "Sky Famiglia"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Package_Option"
        },
        "nl_queries": [
            "Create a bar chart for the quantity of package options for all TV channels that do not broadcast any cartoons directed by Ben Jones. Please arrange the names in descending order.",
            "What are the available package choices for all TV channels that do not broadcast any cartoons directed by Ben Jones? Please present them in a bar chart, sorted from highest to lowest on the X-axis.",
            "Identify the package options of TV channels that do not include any cartoons directed by Ben Jones, and represent their count using a bar chart, listing them in descending order from highest to lowest.",
            "What is the count of package choices for all TV channels that do not broadcast any cartoons under the direction of Ben Jones? Please sort the names in descending order."
        ],
        "record_name": "3064@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC",
                "binning": "BIN Date_in_Locaton_To BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Date_in_Locaton_To , COUNT(Date_in_Locaton_To) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Date_in_Locaton_To) ASC BIN Date_in_Locaton_To BY WEEKDAY"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "cre_Doc_Tracking_DB",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Date_in_Locaton_To",
            "y_name": "COUNT(Date_in_Locaton_To)",
            "x_data": [
                [
                    "Sat",
                    "Wed",
                    "Mon",
                    "Sun",
                    "Thur",
                    "Fri",
                    "Tue"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    1,
                    1,
                    1
                ],
                [
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    4
                ]
            ],
            "classify": [
                "b",
                "c",
                "e",
                "n",
                "x"
            ],
            "describe": "GROUP BY Location_Code, BIN Date_in_Locaton_To BY WEEKDAY"
        },
        "nl_queries": [
            "Display the quantity of documents with different ending dates categorized by weekdays and grouped by location code using a stacked bar chart, arranged in ascending order by the Y-axis, please.",
            "Stacked bar chart depicting the dates in location \"to\" and the corresponding number of dates, with each bar color-coded based on the Location_Code. Please arrange the bars in ascending order on the Y-axis."
        ],
        "record_name": "780@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Rank , count(*) FROM captain WHERE age < 50 GROUP BY rank ORDER BY count(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "ship_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Rank",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Commander, junior captain",
                    "Lieutenant",
                    "Midshipman"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Quantify the number of captains below the age of 50 for each rank using a bar graph, and arrange them in ascending order on the y-axis, please.",
            "Create a bar graph illustrating the count of captains under the age of 50 in each rank, with the Y-axis arranged in ascending order, please.",
            "Determine the count of captains below the age of 50 for each rank, and list them in ascending order on the y-axis.",
            "Present a bar chart illustrating the number of captains under the age of 50 in each rank, with the y-axis listed in ascending order.",
            "Show the count of captains under the age of 50 in each rank, with the y-axis arranged in ascending order."
        ],
        "record_name": "2737@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Carrier , COUNT(*) FROM phone GROUP BY Carrier"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "phone_market",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Carrier",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Sprint",
                    "TMobile"
                ]
            ],
            "y_data": [
                [
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present the distribution of phone carriers along with the corresponding quantity of phones for each carrier using a pie chart.",
            "Display the variety of phone carriers alongside the corresponding quantity of phones for each carrier.",
            "I would like to determine the ratio of the total quantity for each carrier."
        ],
        "record_name": "2567"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Fname , count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID = T2.facID GROUP BY T1.FacID ORDER BY Fname ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "activity_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Fname",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Alan",
                    "Cheng",
                    "Daniel",
                    "David",
                    "Ellie",
                    "Joanne",
                    "Lawrence",
                    "Leslie",
                    "Louis",
                    "Luigi",
                    "Mark",
                    "Michael",
                    "Robert",
                    "Russell",
                    "Scott",
                    "Stacey",
                    "Steven",
                    "Yair"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    3,
                    3,
                    1,
                    2,
                    2,
                    1,
                    2,
                    2,
                    3,
                    3,
                    1,
                    2,
                    3,
                    3,
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A stacked bar chart displaying the given names of all the faculty members who took part in a certain activity, along with the count of activities they participated in. Please arrange them in ascending order based on the x-axis.",
            "What are the given names of the faculty members who took part in at least one activity? Additionally, demonstrate the number of activities they participated in for each individual using a bar graph, listed in ascending order on the X-axis."
        ],
        "record_name": "26@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , count(*) FROM singer GROUP BY country ORDER BY Country ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "concert_singer",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "count(*)",
            "x_data": [
                [
                    "France",
                    "Netherlands",
                    "United States"
                ]
            ],
            "y_data": [
                [
                    4,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display a bar chart depicting all countries and the respective count of singers in each country. Please ensure that the chart is sorted in ascending order according to the X-axis.",
            "Provide me with a histogram depicting the distribution of singers based on their respective countries, sorting the names in ascending order, please.",
            "Create a bar graph illustrating the total number based on country, and arrange them in ascending order on the X-axis.",
            "Provide a bar graph illustrating the quantity of singers from each country, and arrange them in ascending order on the X-axis.",
            "How many vocalists are from each country, I would like to represent this using a bar graph, with the bars arranged from lowest to highest.",
            "Display a bar chart illustrating the countries and the respective number of singers in each country, sorted in ascending order based on the X-axis, please."
        ],
        "record_name": "690@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "pie",
            "x_name": "JOB_ID",
            "y_name": "COUNT(JOB_ID)",
            "x_data": [
                [
                    "FI_ACCOUNT",
                    "FI_MGR"
                ]
            ],
            "y_data": [
                [
                    5,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "Using a pie chart, present the distribution of job IDs for all employees in the Finance department."
        ],
        "record_name": "1961"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , elevation FROM airports WHERE city = 'New York' ORDER BY name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "flight_4",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "elevation",
            "x_data": [
                [
                    "Indianola Municipal Airport",
                    "John F Kennedy International Airport",
                    "La Guardia Airport",
                    "One Police Plaza Heliport"
                ]
            ],
            "y_data": [
                [
                    126,
                    13,
                    21,
                    244
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the altitude (or elevation) of the airports in the city of New York? Please present the data in a bar chart with the x-axis sorted in ascending order from low to high.",
            "Generate a bar chart displaying the altitude (or elevation) of airports within the city of New York, arranged in ascending order along the X-axis, please."
        ],
        "record_name": "1416@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT LName , AVG(Age) FROM Student WHERE Sex = 'F' GROUP BY LName ORDER BY LName ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "allergy_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "LName",
            "y_name": "AVG(Age)",
            "x_data": [
                [
                    "Apap",
                    "Cheng",
                    "Jones",
                    "Kim",
                    "Lee",
                    "Nelson",
                    "Prater",
                    "Schmidt",
                    "Smith"
                ]
            ],
            "y_data": [
                [
                    18,
                    21,
                    21,
                    19,
                    16,
                    20,
                    18,
                    26,
                    19
                ]
            ],
            "classify": [],
            "describe": "GROUP BY LName"
        },
        "nl_queries": [
            "Display the mean age for all female students, categorized by last name, using a bar graph, and arrange the bars in ascending order, please."
        ],
        "record_name": "44@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT product_type_code , AVG(product_price) FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id = T2.product_id WHERE T1.supplier_id = 3 GROUP BY product_type_code ORDER BY AVG(product_price) ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "department_store",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_type_code",
            "y_name": "AVG(product_price)",
            "x_data": [
                [
                    "Hardware",
                    "Clothes"
                ]
            ],
            "y_data": [
                [
                    803,
                    817
                ]
            ],
            "classify": [],
            "describe": "GROUP BY product_type_code"
        },
        "nl_queries": [
            "Display the mean price provided by supplier ID 3 for different product type codes in a bar graph, and sort the y-axis in ascending order, please."
        ],
        "record_name": "1139@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT job , min(age) FROM Person GROUP BY job",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT job , min(age) FROM Person GROUP BY job"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "network_2",
        "vis_obj": {
            "chart": "pie",
            "x_name": "job",
            "y_name": "min(age)",
            "x_data": [
                [
                    "doctor",
                    "engineer",
                    "student"
                ]
            ],
            "y_data": [
                [
                    45,
                    35,
                    25
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Illustrate a pie chart representing the minimum age requirement for each job title.",
            "Provide a pie chart illustrating the minimum age requirement for each job title.",
            "What is the minimum age requirement for each job title? Please present the information in a pie chart.",
            "Generate a pie chart illustrating the age of the youngest individual in each occupation.",
            "Pie chart. What is the age of the youngest individual for each occupation?",
            "What is the minimum age for each occupation? Please display the percentage.",
            "Create a pie chart illustrating the lowest age across different job positions."
        ],
        "record_name": "2462"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT brand , COUNT(brand) FROM camera_lens GROUP BY brand ORDER BY COUNT(brand) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "mountain_photos",
        "vis_obj": {
            "chart": "bar",
            "x_name": "brand",
            "y_name": "COUNT(brand)",
            "x_data": [
                [
                    "Schneider Kreuznach",
                    "Olympus",
                    "Panasonic",
                    "Sigma"
                ]
            ],
            "y_data": [
                [
                    2,
                    3,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY brand"
        },
        "nl_queries": [
            "Create a bar chart to group and tally the brands for each camera lens, and arrange them in ascending order based on the total number.",
            "Display the quantity of brands from each individual brand, and arrange the total number in ascending order."
        ],
        "record_name": "2349@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations",
                "binning": "BIN Date_in_Location_From BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations BIN Date_in_Location_From BY YEAR"
        },
        "chart": "Line",
        "hardness": "Easy",
        "db_id": "cre_Doc_Tracking_DB",
        "vis_obj": {
            "chart": "line",
            "x_name": "Date_in_Location_From",
            "y_name": "COUNT(Date_in_Location_From)",
            "x_data": [
                [
                    "1972~1976",
                    "1977~1981",
                    "1982~1986",
                    "1987~1991",
                    "1992~1996",
                    "1997~2001",
                    "2002~2006",
                    "2007~2011",
                    "2012~2016",
                    "2017"
                ]
            ],
            "y_data": [
                [
                    3,
                    0,
                    3,
                    0,
                    0,
                    1,
                    0,
                    3,
                    0,
                    5
                ]
            ],
            "classify": [],
            "describe": "BIN Date_in_Location_From BY YEAR"
        },
        "nl_queries": [
            "Display the quantity of documents based on their respective starting dates, and categorize the starting dates into yearly intervals in a line chart.",
            "How many documents are there for different starting dates? Please provide a line chart that groups the starting dates into intervals of one year.",
            "Can you plot the trend of the number of dates in each location compared to the dates in the location from?"
        ],
        "record_name": "771"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nationality , SUM(ID) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "swimming",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nationality",
            "y_name": "SUM(ID)",
            "x_data": [
                [
                    "Australia",
                    "Canada",
                    "France",
                    "Italy",
                    "Poland",
                    "Tunisia",
                    "Ukraine"
                ]
            ],
            "y_data": [
                [
                    6,
                    6,
                    8,
                    5,
                    7,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "Display the distribution of Nationalities and the total sum of IDs, grouped by the Nationality attribute, in a bar chart, and arrange them in ascending order on the X-axis, please.",
            "Create a bar chart illustrating the distribution of Nationality and the total sum of IDs, grouped by the attribute Nationality, and ordered from lowest to highest on the X-axis, please.",
            "Generate a stacked bar chart illustrating the breakdown of Nationalities and the total sum of IDs, grouped by the Nationality attribute, and please display the data on the x-axis in ascending order.",
            "Provide me with a comparison of the total sum of ID across different nationalities, grouped by the nationality attribute, and ordered in ascending order by nationality.",
            "Display the total count of IDs for each nationality, arrange the bars in ascending order from lowest to highest.",
            "Provide me with a comparison of the total sum of ID based on nationality, and present it as a bar chart with the bars ordered from low to high."
        ],
        "record_name": "2906@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Category , COUNT(Category) FROM music_festival WHERE RESULT = \"Awarded\" GROUP BY Category ORDER BY Category DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "music_4",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Category",
            "y_name": "COUNT(Category)",
            "x_data": [
                [
                    "Best Sound Song",
                    "Best Song"
                ]
            ],
            "y_data": [
                [
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Category"
        },
        "nl_queries": [
            "Generate a bar chart illustrating the count of music festival categories that have been \"Awarded\", sorted in descending order by the X-axis.",
            "Create a bar graph to present the count of music festival categories that have the outcome \"Awarded,\" and arrange the categories in descending order, please.",
            "A bar graph indicating the quantity of music festival categories awarded, and I would like them arranged in decreasing order on the X-axis, please.",
            "What is the count of music festival categories categorized as \"Awarded\"? Display the results in descending order on the x-axis, please.",
            "Provide the count of music festival categories that have been given the result \"Awarded,\" displayed in descending order on the x-axis, please.",
            "What are the genres of music festivals that have been \"Awarded\", and display the count of each genre using a bar chart, arranging them in descending order on the x-axis, please."
        ],
        "record_name": "2439@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Participant_Type_Code , COUNT(Participant_Type_Code) FROM Participants GROUP BY Participant_Type_Code ORDER BY Participant_Type_Code DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "local_govt_in_alabama",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Participant_Type_Code",
            "y_name": "COUNT(Participant_Type_Code)",
            "x_data": [
                [
                    "Participant",
                    "Organizer"
                ]
            ],
            "y_data": [
                [
                    8,
                    7
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Participant_Type_Code"
        },
        "nl_queries": [
            "Please create a histogram illustrating the total number of participants in each type code, and arrange them in descending order based on the Participant_Type_Code.",
            "Bar chart with participant type codes on the x-axis and the corresponding number of participant type codes on the y-axis, displayed by descending bars, please.",
            "Compare the quantity of participants in each participant type code using a bar graph, arrange the bars in descending order from highest to lowest."
        ],
        "record_name": "2127@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC",
                "binning": "BIN First_year BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT First_year , COUNT(First_year) FROM party WHERE Party_Theme = \"Spring\" OR Party_Theme = \"Teqnology\"  ORDER BY COUNT(First_year) ASC BIN First_year BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "party_host",
        "vis_obj": {
            "chart": "bar",
            "x_name": "First_year",
            "y_name": "COUNT(First_year)",
            "x_data": [
                [
                    "Fri",
                    "Mon",
                    "Sun",
                    "Thur",
                    "Wed",
                    "Sat",
                    "Tue"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN First_year BY WEEKDAY"
        },
        "nl_queries": [
            "Present the cumulative count of parties in the first year with the themes \"Spring\" or \"Technology\" in a bar graph. Group the first year into intervals based on weekdays and tally the count. Please arrange the y-axis in ascending order from lowest to highest."
        ],
        "record_name": "2498@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY ACC_Road"
        },
        "chart": "Grouping Scatter",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "School_ID",
            "y_name": "ACC_Percent",
            "x_data": [
                [
                    5,
                    4
                ],
                [
                    2
                ],
                [
                    1
                ]
            ],
            "y_data": [
                [
                    0.563,
                    0.625
                ],
                [
                    0.813
                ],
                [
                    0.875
                ]
            ],
            "classify": [
                "3\u20135",
                "6\u20132",
                "8\u20130"
            ],
            "describe": "GROUP BY ACC_Road"
        },
        "nl_queries": [
            "Provide me with a scatter chart that categorizes accidents on roads. The X-axis should represent the school ID, while the Y-axis should represent the percentage of accidents.",
            "Group the data by every ACC road and present the school id and All_Games_Percent in a scatter plot.",
            "Create a scatterplot with school ID plotted on the x-axis and accuracy percentage on the y-axis. Color the points based on ACC_Road."
        ],
        "record_name": "3075"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT payment_date , COUNT(payment_date) FROM payments WHERE amount_paid > 300 OR payment_type_code = 'Check' GROUP BY payment_date ORDER BY payment_date DESC"
        },
        "chart": "Line",
        "hardness": "Extra Hard",
        "db_id": "products_for_hire",
        "vis_obj": {
            "chart": "line",
            "x_name": "payment_date",
            "y_name": "COUNT(payment_date)",
            "x_data": [
                [
                    "2018-03-23",
                    "2018-03-22",
                    "2018-03-19",
                    "2018-03-17",
                    "2018-03-12",
                    "2018-03-09",
                    "2018-03-03",
                    "2018-03-02",
                    "2018-02-27"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    2,
                    2,
                    1,
                    3,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY payment_date"
        },
        "nl_queries": [
            "What are the dates of payment for payments with a payment amount higher than 300 or with a payment type of 'Check', and count them using a line chart, with the X-axis arranged in descending order from high to low, please.",
            "What are the dates of payment for payments with an amount greater than 300 or with a payment type of 'Check', and count them using a line chart, arranged in descending order by the payment date."
        ],
        "record_name": "2617@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT year , COUNT(year) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY year ORDER BY year ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "formula_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "year",
            "y_name": "COUNT(year)",
            "x_data": [
                [
                    "2016-01-01",
                    "2017-01-01"
                ]
            ],
            "y_data": [
                [
                    2,
                    20
                ]
            ],
            "classify": [],
            "describe": "GROUP BY year"
        },
        "nl_queries": [
            "How many race events are conducted each year starting from 2014? Please display the data in a bar chart with the X-axis arranged in ascending order.",
            "Present a bar chart illustrating the quantity of races conducted each year starting from 2014, with the names ranked in ascending order."
        ],
        "record_name": "1437@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE hire_date < '2002-06-21' ORDER BY HIRE_DATE ASC"
        },
        "chart": "Line",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "line",
            "x_name": "HIRE_DATE",
            "y_name": "SALARY",
            "x_data": [
                [
                    "1987-06-17",
                    "1987-06-18",
                    "1987-06-19",
                    "1987-06-20",
                    "1987-06-21",
                    "1987-06-22",
                    "1987-06-23",
                    "1987-06-24",
                    "1987-06-25",
                    "1987-06-26",
                    "1987-06-27",
                    "1987-06-28",
                    "1987-06-29",
                    "1987-06-30",
                    "1987-07-01",
                    "1987-07-02",
                    "1987-07-03",
                    "1987-07-04",
                    "1987-07-05",
                    "1987-07-06",
                    "1987-07-07",
                    "1987-07-08",
                    "1987-07-09",
                    "1987-07-10",
                    "1987-07-11",
                    "1987-07-12",
                    "1987-07-13",
                    "1987-07-14",
                    "1987-07-15",
                    "1987-07-16",
                    "1987-07-17",
                    "1987-07-18",
                    "1987-07-19",
                    "1987-07-20",
                    "1987-07-21",
                    "1987-07-22",
                    "1987-07-23",
                    "1987-07-24",
                    "1987-07-25",
                    "1987-07-26",
                    "1987-07-27",
                    "1987-07-28",
                    "1987-07-29",
                    "1987-07-30",
                    "1987-07-31",
                    "1987-08-01",
                    "1987-08-02",
                    "1987-08-03",
                    "1987-08-04",
                    "1987-08-05",
                    "1987-08-06",
                    "1987-08-07",
                    "1987-08-08",
                    "1987-08-09",
                    "1987-08-10",
                    "1987-08-11",
                    "1987-08-12",
                    "1987-08-13",
                    "1987-08-14",
                    "1987-08-15",
                    "1987-08-16",
                    "1987-08-17",
                    "1987-08-18",
                    "1987-08-19",
                    "1987-08-20",
                    "1987-08-21",
                    "1987-08-22",
                    "1987-08-23",
                    "1987-08-24",
                    "1987-08-25",
                    "1987-08-26",
                    "1987-08-27",
                    "1987-08-28",
                    "1987-08-29",
                    "1987-08-30",
                    "1987-08-31",
                    "1987-09-01",
                    "1987-09-02",
                    "1987-09-03",
                    "1987-09-04",
                    "1987-09-05",
                    "1987-09-06",
                    "1987-09-07",
                    "1987-09-08",
                    "1987-09-09",
                    "1987-09-10",
                    "1987-09-11",
                    "1987-09-12",
                    "1987-09-13",
                    "1987-09-14",
                    "1987-09-15",
                    "1987-09-16",
                    "1987-09-17",
                    "1987-09-18",
                    "1987-09-19",
                    "1987-09-20",
                    "1987-09-21",
                    "1987-09-22",
                    "1987-09-23",
                    "1987-09-24",
                    "1987-09-25",
                    "1987-09-26",
                    "1987-09-27",
                    "1987-09-28",
                    "1987-09-29",
                    "1987-09-30",
                    "1987-10-01"
                ]
            ],
            "y_data": [
                [
                    24000,
                    17000,
                    17000,
                    9000,
                    6000,
                    4800,
                    4800,
                    4200,
                    12000,
                    9000,
                    8200,
                    7700,
                    7800,
                    6900,
                    11000,
                    3100,
                    2900,
                    2800,
                    2600,
                    2500,
                    8000,
                    8200,
                    7900,
                    6500,
                    5800,
                    3200,
                    2700,
                    2400,
                    2200,
                    3300,
                    2800,
                    2500,
                    2100,
                    3300,
                    2900,
                    2400,
                    2200,
                    3600,
                    3200,
                    2700,
                    2500,
                    3500,
                    3100,
                    2600,
                    2500,
                    14000,
                    13500,
                    12000,
                    11000,
                    10500,
                    10000,
                    9500,
                    9000,
                    8000,
                    7500,
                    7000,
                    10000,
                    9500,
                    9000,
                    8000,
                    7500,
                    7000,
                    10500,
                    9500,
                    7200,
                    6800,
                    6400,
                    6200,
                    11500,
                    10000,
                    9600,
                    7400,
                    7300,
                    6100,
                    11000,
                    8800,
                    8600,
                    8400,
                    7000,
                    6200,
                    3200,
                    3100,
                    2500,
                    2800,
                    4200,
                    4100,
                    3400,
                    3000,
                    3800,
                    3600,
                    2900,
                    2500,
                    4000,
                    3900,
                    3200,
                    2800,
                    3100,
                    3000,
                    2600,
                    2600,
                    4400,
                    13000,
                    6000,
                    6500,
                    10000,
                    12000,
                    8300
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For employees hired prior to 2002-06-21, create a line graph depicting the salary changes over hire_date, with the x-axis sorted in ascending order.",
            "For employees hired prior to 2002-06-21, create a line graph illustrating the salary changes over their hire dates, and arrange the x-axis in ascending order.",
            "For employees hired prior to 2002-06-21, please generate a line chart illustrating the salary change over hire date. Additionally, kindly arrange the data on the X-axis in ascending order from lowest to highest.",
            "For the employees hired prior to 2002-06-21, present the salary changes over hire_date using a line chart, and kindly sort them on the X-axis in ascending order from low to high.",
            "For employees hired prior to 2002-06-21, a line graph illustrates the salary fluctuations over the hire dates, and arrange the x-axis in ascending order.",
            "For employees hired prior to 2002-06-21, please provide a line chart illustrating the trend of salary over hire_date. Arrange the data in ascending order based on the HIRE_DATE."
        ],
        "record_name": "1790@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC",
                "binning": "BIN long BY ZERO"
            },
            "VQL": "Visualize BAR SELECT long , COUNT(long) FROM station  ORDER BY COUNT(long) ASC BIN long BY ZERO"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "bike_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "long",
            "y_name": "COUNT(long)",
            "x_data": [
                [
                    ">0",
                    "<=0"
                ]
            ],
            "y_data": [
                [
                    0,
                    69
                ]
            ],
            "classify": [],
            "describe": "BIN long BY ZERO"
        },
        "nl_queries": [
            "Display the quantity of longitudinal data in a histogram, and please arrange the y-axis in ascending order from least to greatest.",
            "For each station, categorize its longitude divided by zero into buckets, and calculate the frequency in each bucket. Please display the information on the Y-axis in ascending order."
        ],
        "record_name": "327@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY Class ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "ship_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Class",
            "y_name": "COUNT(Class)",
            "x_data": [
                [
                    "GL",
                    "KR"
                ]
            ],
            "y_data": [
                [
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Class"
        },
        "nl_queries": [
            "Provide me with a bar chart depicting the cumulative count of ship classes lacking a captain, arranged in ascending order by the bars, please.",
            "For the ships without a captain, present the total count of their classes using a pie chart, and arrange them in ascending order by the bars, please."
        ],
        "record_name": "2749@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT languages , avg(rating) FROM song GROUP BY languages ORDER BY avg(rating) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "music_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "languages",
            "y_name": "avg(rating)",
            "x_data": [
                [
                    "bangla",
                    "english"
                ]
            ],
            "y_data": [
                [
                    7.5,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the mean rating of songs for each language? Display them as a bar chart, and could you arrange them in descending order based on the total count?",
            "Display the average rating by languages in a histogram, arranged in descending order by the mean rating, please.",
            "Provide me with a bar chart illustrating the average rating of songs for each language, and kindly sort the total number in descending order.",
            "Create a bar graph illustrating the average song ratings for each language, arranged in descending order based on the mean rating, please.",
            "Present a bar chart illustrating the average song rating for each language, and please sort the total number in descending order.",
            "What is the mean song rating for each language? Plot them in a bar chart, and could you arrange them in descending order based on the total number?"
        ],
        "record_name": "2423@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Name , count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid = T2.PCP GROUP BY T1.employeeid ORDER BY T1.Name ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hospital_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Christopher Turk",
                    "Elliot Reid",
                    "John Dorian"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many patients are cared for by each physician? Present their names and the number of patients they attend to in a bar chart, with the X-axis arranged in ascending order, please.",
            "What is the patient load per physician? Please provide a list of their names along with the corresponding number of patients they care for. Additionally, display this information in a bar chart, sorted in ascending order on the x-axis.",
            "Create a bar chart representing the number of patients cared for by each physician. Provide a list of their names alongside the corresponding number of patients, and arrange the data in ascending order on the X-axis.",
            "Present the name of each doctor and the count of patients they attend to in a bar chart, sorted in ascending order by the bars, please.",
            "Provide the names of each doctor along with the number of patients they treat, sorted in ascending order based on the bars.",
            "Generate a bar chart illustrating the number of patients each physician is responsible for. Include their names and the corresponding number of patients they care for, and sort the bars in ascending order."
        ],
        "record_name": "1535@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Location , COUNT(Location) FROM station GROUP BY Location ORDER BY Location ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "train_station",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Location",
            "y_name": "COUNT(Location)",
            "x_data": [
                [
                    "Birmingham",
                    "Glasgow",
                    "London"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    10
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Location"
        },
        "nl_queries": [
            "A bar chart displays the quantity of locations, sorted in ascending order on the X-axis, please.",
            "Bar chart to display the count of locations from various geographical areas, please arrange in ascending order based on the X-axis.",
            "What is the number of locations? Please draw a bar chart and list them on the X-axis in ascending order."
        ],
        "record_name": "3043@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT T1.Code , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"
        },
        "chart": "Grouping Scatter",
        "hardness": "Medium",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Code",
            "y_name": "Manufacturer",
            "x_data": [
                [
                    6,
                    7,
                    10
                ],
                [
                    3
                ],
                [
                    8,
                    9,
                    11
                ],
                [
                    2,
                    4
                ],
                [
                    1
                ],
                [
                    5
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    2
                ],
                [
                    4
                ],
                [
                    3,
                    3,
                    3
                ],
                [
                    6,
                    6
                ],
                [
                    5
                ],
                [
                    1
                ]
            ],
            "classify": [
                "Austin",
                "Beijing",
                "Los Angeles",
                "Paris",
                "Taiwan",
                "Tokyo"
            ],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For the records pertaining to products and their respective manufacturers, create a scatter chart to illustrate the correlation between the product code and manufacturer. Additionally, group the data based on the attribute \"headquarter\".",
            "For the data entries pertaining to products and their respective manufacturers, generate a scatter plot illustrating the correlation between the product code and manufacturer. Additionally, group the data based on the attribute \"headquarter.\"",
            "For the records pertaining to the products and their respective manufacturers, create a scatter plot illustrating the relationship between the product code and manufacturer. Additionally, group the data by the attribute of the manufacturer's headquarters.",
            "For the data pertaining to the products and their respective manufacturers, visualize the correlation between the product code and the manufacturer, and group them based on the attribute of the headquarters.",
            "For the data records of products and their respective manufacturers, a scatter chart illustrates the relationship between the product code and the manufacturer, grouping them based on the attribute of headquarters."
        ],
        "record_name": "2284"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY CRS_DESCRIPTION ,  EMP_FNAME ORDER BY COUNT(EMP_FNAME) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "EMP_FNAME",
            "y_name": "COUNT(EMP_FNAME)",
            "x_data": [
                [
                    "Peter",
                    "Gerald",
                    "Ismael",
                    "Carlos",
                    "Arnelle",
                    "Robert"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    2,
                    0,
                    0,
                    1
                ],
                [
                    0,
                    0,
                    2,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    2,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Accounting I",
                "Accounting II",
                "Database Design and Implementation",
                "Intro. to Microcomputing",
                "Intro. to Statistics",
                "Statistical Applications"
            ],
            "describe": "GROUP BY CRS_DESCRIPTION, GROUP BY EMP_FNAME"
        },
        "nl_queries": [
            "Display the quantity of courses taught by each instructor in a stacked bar graph. The x-axis represents the instructor's first name, and the bars are grouped according to the course description. Please arrange the bars on the Y-axis in descending order.",
            "Show me a stacked bar chart illustrating the number of courses taught by each teacher. The x-axis should represent the teacher's first name, grouped by course description, and ranked from greatest to least according to the total count."
        ],
        "record_name": "582@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "SCHOOL_CODE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "BUS",
                    "A&SCI"
                ]
            ],
            "y_data": [
                [
                    10,
                    12
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the count of professors for various schools? Plot them in a bar chart and display the names in descending order from highest to lowest.",
            "Provide a bar chart illustrating the quantity of professors for different schools, and display the names in descending order from highest to lowest.",
            "A bar chart illustrating the number of distinct professors for each different school, listed in descending order on the X-axis, please.",
            "Display the number of distinct professors for the various schools in a bar chart, sorting the bars in descending order from highest to lowest.",
            "Provide a bar chart depicting the number of distinct professors for each school, with the X-axis sorted in descending order, please.",
            "Provide me with a histogram illustrating the quantity of professors for different schools, with the X-axis sorted in descending order, please."
        ],
        "record_name": "574@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(*) FROM department AS T1 JOIN professor AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.school_code ORDER BY SCHOOL_CODE ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "SCHOOL_CODE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "A&SCI",
                    "BUS"
                ]
            ],
            "y_data": [
                [
                    12,
                    10
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the count of professors for various schools? Plot them as a bar chart and arrange the X-axis in ascending order, please.",
            "Provide me with a histogram illustrating the quantity of professors for different schools. Please arrange the histogram in ascending order based on the X-axis.",
            "A bar chart illustrating the number of distinct professors for each school. Please organize the bars in ascending order from low to high.",
            "Generate a bar chart illustrating the number of distinct professors for each school, listed in ascending order on the X-axis, please.",
            "Generate a bar chart illustrating the number of professors for different schools. Please organize the bars in ascending order from lowest to highest.",
            "Display the count of unique professors for each school using a bar chart, and arrange the bars in ascending order based on the SCHOOL_CODE."
        ],
        "record_name": "574@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Support_rate , Oppose_rate FROM candidate",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Support_rate , Oppose_rate FROM candidate"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "candidate_poll",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Support_rate",
            "y_name": "Oppose_rate",
            "x_data": [
                [
                    0.25,
                    0.33,
                    0.24,
                    0.18,
                    0.24,
                    0.17
                ]
            ],
            "y_data": [
                [
                    0.43,
                    0.45,
                    0.43,
                    0.44,
                    0.32,
                    0.32
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A scatterplot illustrating the relationship between the rates of support and opposition for each candidate.",
            "What is the correlation between the rates of support and opposition for each candidate?",
            "Plot a scatter chart, representing the support rate on the x-axis and the oppose rate on the y-axis."
        ],
        "record_name": "401"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY stars DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "movie_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "director",
            "y_name": "stars",
            "x_data": [
                [
                    "James Cameron",
                    "Victor Fleming",
                    "Steven Spielberg",
                    "Robert Wise"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For every director, provide their name along with the corresponding rating value, excluding movies with NULL directors. Can you please create a bar chart based on the results, ordering them by the total number in descending order?"
        ],
        "record_name": "2396@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT other_details , COUNT(other_details) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ORDER BY COUNT(other_details) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "assets_maintenance",
        "vis_obj": {
            "chart": "bar",
            "x_name": "other_details",
            "y_name": "COUNT(other_details)",
            "x_data": [
                [
                    "Skilled",
                    ""
                ]
            ],
            "y_data": [
                [
                    1,
                    19
                ]
            ],
            "classify": [],
            "describe": "GROUP BY other_details"
        },
        "nl_queries": [
            "Present the quantity of engineers for various additional details in a bar chart, and arrange the y-axis in ascending order, please."
        ],
        "record_name": "130@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "SUM(Code)",
            "x_data": [
                [
                    "Winchester",
                    "Hewlett-Packard",
                    "Creative Labs",
                    "Fujits",
                    "Iomega",
                    "Sony"
                ]
            ],
            "y_data": [
                [
                    12,
                    9,
                    6,
                    5,
                    4,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For the data pertaining to the products and their respective manufacturers, please create a bar chart representing the distribution of names and the total sum of codes. Group the data by the attribute name and kindly display the chart with the y-axis in descending order.",
            "Generate a bar chart illustrating the distribution of names and the total code sum for the records from the products and their respective manufacturers. Group the data by the attribute name and display it in descending order on the Y-axis, please.",
            "For the data pertaining to products and their respective manufacturers, present information about the distribution of names and the total sum of codes. Display this in a bar chart, grouping the data by the attribute name, and sorting it from highest to lowest based on the total count.",
            "Create a bar chart illustrating the distribution of names and the total sum of codes for the records from the products and their respective manufacturers. Group the data by the attribute name and display it in descending order on the y-axis, please.",
            "For the entries in the products dataset, retrieve the name and total sum of the code for each product's manufacturer. Group the results by attribute name and visualize them using a bar chart, sorted in descending order on the Y-axis."
        ],
        "record_name": "2211@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT FIRST_NAME , COUNT(FIRST_NAME) FROM employees WHERE first_name LIKE '%m' GROUP BY FIRST_NAME"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "FIRST_NAME",
            "y_name": "COUNT(FIRST_NAME)",
            "x_data": [
                [
                    "Adam",
                    "Payam",
                    "William"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY FIRST_NAME"
        },
        "nl_queries": [
            "For employees whose first names end with the letter 'm', display the frequency of each first name using a bar chart.",
            "For employees whose first names end with the letter \"m,\" categorize and tally the frequency of each first name to create a bar chart."
        ],
        "record_name": "1802"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T4.name , COUNT(T4.name) FROM swimmer AS t1 JOIN record AS t2 ON t1.id = t2.swimmer_id JOIN event AS t3 ON t2.event_id = t3.id JOIN stadium AS t4 ON t4.id = t3.stadium_id WHERE t1.nationality = 'Australia' GROUP BY T4.name ORDER BY COUNT(T4.name) ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "swimming",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Baku Olympic Stadium",
                    "Gazprom Arena",
                    "Yubileyniy Stadium",
                    "Nou Mestalla"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Identify the stadiums visited by Australian swimmers and present the count using a bar chart, arranging the total number in ascending order, please.",
            "Retrieve the count of stadium names that Australian swimmers have visited and display them in ascending order based on the number of names.",
            "A bar chart to determine the quantity of stadium names that Australian swimmers have visited, and could you please display Y in ascending order?"
        ],
        "record_name": "2931@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Title , T1.AlbumId FROM ALBUM AS T1 JOIN TRACK AS T2 ON T1.AlbumId = T2.AlbumId WHERE T2.UnitPrice > 1"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "chinook_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Title",
            "y_name": "AlbumId",
            "x_data": [
                [
                    "Battlestar Galactica: The Story So Far",
                    "Battlestar Galactica, Season 3",
                    "Heroes, Season 1",
                    "Lost, Season 3",
                    "Lost, Season 1",
                    "Lost, Season 2",
                    "The Office, Season 1",
                    "The Office, Season 2",
                    "The Office, Season 3",
                    "Battlestar Galactica (Classic), Season 1",
                    "Aquaman",
                    "LOST, Season 4"
                ]
            ],
            "y_data": [
                [
                    226,
                    227,
                    228,
                    229,
                    230,
                    231,
                    249,
                    250,
                    251,
                    253,
                    254,
                    261
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the names and IDs of the albums that have tracks with a unit price greater than 1 using a bar chart.",
            "Display the names and IDs of albums that contain tracks with a unit price greater than 1. Visualize this information using a bar chart.",
            "Provide a histogram showcasing the titles and IDs of albums that include tracks with a unit price higher than 1.",
            "Present a bar chart indicating the titles and IDs of albums that contain tracks with a unit price higher than 1.",
            "What are the titles and IDs of albums that contain tracks with a unit price greater than 1?"
        ],
        "record_name": "438"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , AVG(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "AVG(DEPARTMENT_ID)",
            "x_data": [
                [
                    "ST_MAN",
                    "ST_CLERK",
                    "SH_CLERK",
                    "SA_REP",
                    "SA_MAN",
                    "PU_MAN",
                    "PU_CLERK",
                    "PR_REP",
                    "MK_REP",
                    "MK_MAN",
                    "IT_PROG",
                    "FI_MGR",
                    "FI_ACCOUNT",
                    "AD_VP",
                    "AD_PRES",
                    "AD_ASST",
                    "AC_MGR",
                    "AC_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    50,
                    50,
                    50,
                    77.33333333333333,
                    80,
                    30,
                    30,
                    70,
                    20,
                    20,
                    60,
                    100,
                    100,
                    90,
                    90,
                    10,
                    110,
                    110
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For employees with salaries ranging from 8000 to 12000, and either with a non-null commission or not assigned to department number 40, create a bar chart illustrating the distribution of job_id and the average department_id. Please group the data by the job_id attribute, and order the chart in descending order on the x-axis.",
            "For the employees whose salary falls within the range of 8000 and 12000, and their commission is not null, or their department number is not equal to 40, retrieve the job_id and the average department_id. Group them by the job_id attribute and visualize the data using a bar chart. Sort the chart in descending order based on the x-axis.",
            "For employees whose salary falls between 8000 and 12000, and have a non-null commission or a department number not equal to 40, provide a comparison of the average department_id across job_id. Please group the data by job_id and sort it in descending order on the X-axis.",
            "For the employees whose salary falls between 8000 and 12000 and have a non-null commission or their department number is not equal to 40, generate a bar chart illustrating the distribution of job_id and the average of department_id. Group the data by the job_id attribute and display the names in descending order.",
            "For employees whose salary falls within the range of 8000 and 12000 and have a non-null commission or do not belong to department number 40, please provide a comparison of the average department ID across job IDs. Group the data by the job ID attribute and present it using a bar chart, with the x-axis ordered in descending order."
        ],
        "record_name": "1607@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Role_Code , count(*) FROM Employees GROUP BY role_code ORDER BY Role_Code DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Doc_Tracking_DB",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Role_Code",
            "y_name": "count(*)",
            "x_data": [
                [
                    "PT",
                    "PR",
                    "MG",
                    "HR",
                    "ED"
                ]
            ],
            "y_data": [
                [
                    1,
                    5,
                    1,
                    1,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Bar chart with the X-axis representing the role code and the Y-axis representing the total number, where the data is displayed in descending order based on the role code.",
            "Display a bar chart depicting all role codes and the corresponding number of employees in each role. Please arrange the bars in descending order.",
            "Display the role codes and the corresponding number of employees in each role using a bar chart, arranged in descending order on the X-axis, please.",
            "Display the code assigned to each role along with the corresponding number of employees in each role. Please present the information in a bar chart, with the x-axis arranged in descending order.",
            "Provide a histogram indicating the code for each role and the corresponding number of employees in each role. Please sort the X-axis in descending order.",
            "Provide a histogram displaying the code of each role and the corresponding number of employees in each role, and sort the X-axis in descending order, please."
        ],
        "record_name": "782@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Author , COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID = T2.Submission_ID ORDER BY COUNT(DISTINCT T1.workshop_id) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "workshop_paper",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Author",
            "y_name": "COUNT(DISTINCT T1.workshop_id)",
            "x_data": [
                [
                    "Jeff Lloyd",
                    "Sherman Smith",
                    "Steve Niehaus",
                    "Steve Raible",
                    "Sammy Green"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display each author and the quantity of workshops they submitted to with a bar chart, and arrange them in ascending order on the Y-axis, please.",
            "How many workshops did each contributor submit to? Provide the contributor's name and the workshop count. Plot them in a bar graph and arrange them on the y-axis from lowest to highest.",
            "How many workshops did each writer contribute to? Render the author's name and the number of workshops in a bar graph, and organize the Y-axis in ascending order from least to greatest.",
            "Visualize a bar chart representing the number of workshops submitted by each author. List the author's name and the count of workshops, sorted by workshop ID in ascending order.",
            "Display each author and the count of workshops they submitted to. Show this information in a bar chart, arranged in ascending order based on the total number.",
            "Provide a histogram depicting the number of workshops submitted by each author. Present the author's name and the corresponding number of workshops, and arrange the total number in ascending order."
        ],
        "record_name": "3266@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code ORDER BY booking_status_code DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "apartment_rentals",
        "vis_obj": {
            "chart": "bar",
            "x_name": "booking_status_code",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Provisional",
                    "Confirmed"
                ]
            ],
            "y_data": [
                [
                    8,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the booking status codes and their respective number of bookings in a bar chart, and arrange them in descending order by their names, please.",
            "Generate a bar chart illustrating the number of bookings for each booking status. Provide the booking status code and the corresponding count of bookings, ordered from highest to lowest based on the booking_status_code.",
            "How many reservations are there for each reservation status? Please provide the reservation status code and the corresponding number of reservations, ordered in descending order by X.",
            "Display the booking status code and the corresponding count of bookings in a bar graph, ordered from highest to lowest based on the names, please.",
            "Display a bar chart illustrating the number of bookings for each booking status. Provide the booking status code and the corresponding number of bookings. Can you arrange the booking status codes in descending order, from highest to lowest?",
            "Create a bar chart illustrating the total count grouped by booking status code, ranked from highest to lowest based on the names, please.",
            "How many bookings are there for each booking status? Provide a bar chart with the booking status code and the corresponding number of bookings, ordered in descending order on the X-axis."
        ],
        "record_name": "74@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY COUNT(date_moved_in) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "local_govt_and_lot",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_moved_in",
            "y_name": "COUNT(date_moved_in)",
            "x_data": [
                [
                    "2016-09-27",
                    "2015-03-27"
                ]
            ],
            "y_data": [
                [
                    4,
                    9
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date_moved_in"
        },
        "nl_queries": [
            "Please utilize a bar chart to compare the quantity of customers based on their respective move-in dates, and arrange them in ascending order based on the total number.",
            "What is the distribution of customer moves by date? Please provide a bar chart showing the number of moves, ordered in ascending order by the date moved in."
        ],
        "record_name": "2096@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date , COUNT(date) FROM weather WHERE min_dew_point_f < (SELECT min(min_dew_point_f) FROM weather WHERE zip_code = 94107) GROUP BY date ORDER BY COUNT(date) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "bike_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date",
            "y_name": "COUNT(date)",
            "x_data": [
                [
                    "2014-12-31",
                    "2013-12-20"
                ]
            ],
            "y_data": [
                [
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date"
        },
        "nl_queries": [
            "For the days with a minimum dew point lower than any day in zip code 94107, present the total count of such days using a bar graph. Please arrange the number of dates in ascending order.",
            "Count the number of days and display in a bar graph the zip codes where the minimum dew point was lower than any day in zip code 94107. Please arrange the bars in ascending order on the y-axis."
        ],
        "record_name": "329@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees  ORDER BY AVG(SALARY) ASC BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "AVG(SALARY)",
            "x_data": [
                [
                    "Sept",
                    "July",
                    "Aug",
                    "June"
                ]
            ],
            "y_data": [
                [
                    9180,
                    9600,
                    14000,
                    15000
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "Compare the mean salary for each date of hire (categorized into monthly intervals) of employees using a bar graph, and sort the Y-axis in ascending order, please.",
            "Provide a bar graph representing the average salary for each date of hire, and arrange the Y-axis in ascending order, please.",
            "Display the average salary for each employee's hire date, and please group the hire dates into monthly intervals for the bar chart. Arrange the y-axis in ascending order from lowest to highest."
        ],
        "record_name": "1843@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Template_Type_Code , count(*) FROM Templates AS T1 JOIN Documents AS T2 ON T1.template_id = T2.template_id GROUP BY T1.template_type_code ORDER BY count(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cre_Doc_Template_Mgt",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Template_Type_Code",
            "y_name": "count(*)",
            "x_data": [
                [
                    "AD",
                    "PPT",
                    "PP",
                    "BK"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    4,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display a bar chart illustrating all template type codes and the count of documents utilizing each type. Please arrange the y-axis in ascending order.",
            "What are the various type codes for templates, and how many documents use each type? Please plot them as a bar chart, and arrange the Y-axis in ascending order, from lowest to highest.",
            "Display a bar chart showcasing the template type codes and the corresponding number of documents that utilize each type. Please list them in ascending order on the Y-axis.",
            "A bar chart illustrating the different codes for template types and the corresponding number of documents that utilize each type. Kindly arrange the chart in ascending order along the y-axis, please.",
            "What are the distinct codes for template types, and how many documents are assigned to each type? Could you please display the quantities in ascending order along the y-axis?"
        ],
        "record_name": "744@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC",
                "binning": "BIN date_of_transaction BY YEAR"
            },
            "VQL": "Visualize LINE SELECT date_of_transaction , COUNT(date_of_transaction) FROM TRANSACTIONS  ORDER BY date_of_transaction DESC BIN date_of_transaction BY YEAR"
        },
        "chart": "Line",
        "hardness": "Medium",
        "db_id": "tracking_share_transactions",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_of_transaction",
            "y_name": "COUNT(date_of_transaction)",
            "x_data": [
                [
                    "2004",
                    "2001~2003",
                    "1998~2000",
                    "1995~1997",
                    "1992~1994",
                    "1989~1991",
                    "1986~1988",
                    "1983~1985",
                    "1980~1982",
                    "1977~1979"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    1,
                    1,
                    0,
                    1,
                    1,
                    2,
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_transaction BY YEAR"
        },
        "nl_queries": [
            "Group all transaction dates into weekday intervals, calculate the total number of transactions in each interval, and then present the trend. Please display the results sorted by the date_of_transaction in descending order.",
            "Plot the number of transaction dates against the dates of transaction in a line chart, and list the X-axis in descending order, please.",
            "Provide me with a line graph that organizes all transaction dates into weekday intervals and displays the count for each interval, arranged in descending order based on the date of transaction."
        ],
        "record_name": "3008@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT semester , COUNT(semester) FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = 'Psychology' GROUP BY semester"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "college_2",
        "vis_obj": {
            "chart": "pie",
            "x_name": "semester",
            "y_name": "COUNT(semester)",
            "x_data": [
                [
                    "Fall",
                    "Spring"
                ]
            ],
            "y_data": [
                [
                    3,
                    9
                ]
            ],
            "classify": [],
            "describe": "GROUP BY semester"
        },
        "nl_queries": [
            "Represent the total number of courses offered by the Psychology department in each semester using a pie chart.",
            "How many courses are offered in the Psychology department for every academic term? Generate a pie chart to illustrate the distribution."
        ],
        "record_name": "610"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Rank , COUNT(Rank) FROM Faculty GROUP BY Rank ORDER BY COUNT(Rank) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "activity_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Rank",
            "y_name": "COUNT(Rank)",
            "x_data": [
                [
                    "Professor",
                    "AsstProf",
                    "Instructor",
                    "AssocProf"
                ]
            ],
            "y_data": [
                [
                    27,
                    15,
                    8,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Rank"
        },
        "nl_queries": [
            "Display the quantity of ranks from each rank, sorted by the Y-axis in descending order, please.",
            "Display the quantity of faculty members for each level in a bar graph, with the ranks arranged on the Y-axis in descending order, please.",
            "What is the count of faculty members for each classification? Represent it in a bar graph, sorted in descending order based on the total number."
        ],
        "record_name": "9@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT SCHOOL_CODE , count(DISTINCT dept_name) FROM department ORDER BY count(DISTINCT dept_name) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "SCHOOL_CODE",
            "y_name": "count(DISTINCT dept_name)",
            "x_data": [
                [
                    "A&SCI",
                    "BUS"
                ]
            ],
            "y_data": [
                [
                    7,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Obtain the count of departments in each school. Present them in a bar chart, and arrange the y-axis in descending order, please.",
            "Display the number of departments in each school using a bar chart, and can you sort them by the total number in descending order, please?",
            "A bar chart illustrating the number of departments in each school, ordered in descending order based on the count of distinct department names, please.",
            "Provide a bar chart illustrating the quantity of departments in each school, and arrange them in descending order based on the total number, please."
        ],
        "record_name": "515@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Party , COUNT(*) FROM people GROUP BY Party ORDER BY Party DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "debate",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Party",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Republican",
                    "Independent Democrat",
                    "Democratic",
                    "Anti-Lecompton Democrat"
                ]
            ],
            "y_data": [
                [
                    4,
                    1,
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the various parties of individuals along with the corresponding number of people in each party using a bar graph, and could you arrange them in descending order on the X-axis, please?",
            "Depict various groups of individuals, accompanied by the corresponding number of people in each group. Represent them as a bar chart, and arrange them by names in descending order, please.",
            "Bar chart to display the overall quantity from various political parties, sorted in descending order on the x-axis, please."
        ],
        "record_name": "1069@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Position , count(*) FROM player WHERE points < 30 GROUP BY POSITION ORDER BY Position DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "sports_competition",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Position",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Second Row",
                    "Prop",
                    "Loose Forward",
                    "Left Wing",
                    "Full Back"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the count of players with scores below 30 for each position? Plot them as a bar chart, and list them in descending order by name.",
            "What is the count of players with points below 30 for each position? Please arrange them in descending order by the X-axis.",
            "Provide me with a histogram illustrating the count of players with points below 30 for each position, and I would like the bars to be sorted in descending order."
        ],
        "record_name": "2818@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT premises_type , COUNT(premises_type) FROM customer_addresses AS T1 JOIN premises AS T2 ON T1.premise_id = T2.premise_id GROUP BY address_type_code ,  premises_type ORDER BY COUNT(premises_type) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "customers_campaigns_ecommerce",
        "vis_obj": {
            "chart": "bar",
            "x_name": "premises_type",
            "y_name": "COUNT(premises_type)",
            "x_data": [
                [
                    "Warehouse",
                    "Office",
                    "Residence"
                ]
            ],
            "y_data": [
                [
                    4,
                    3,
                    1
                ],
                [
                    3,
                    2,
                    2
                ]
            ],
            "classify": [
                "Billing",
                "Shipping"
            ],
            "describe": "GROUP BY address_type_code, GROUP BY premises_type"
        },
        "nl_queries": [
            "Display the customer address count and group them by premises type and address type code in a stacked bar chart. The X-axis should represent the premises type, and I would like it to be sorted in descending order based on the total count."
        ],
        "record_name": "1016@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT FIRST_NAME , COMMISSION_PCT FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY COMMISSION_PCT DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "FIRST_NAME",
            "y_name": "COMMISSION_PCT",
            "x_data": [
                [
                    "Kimberely",
                    "William",
                    "Susan",
                    "Shelley",
                    "Pat",
                    "Michael",
                    "Hermann"
                ]
            ],
            "y_data": [
                [
                    0.15,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For the employees who work in departments without managers with IDs between 100 and 200, create a bar chart depicting the distribution of first names and commission percentages, sorted in descending order by the COMMISSION_PCT.",
            "For the employees who are not employed in departments with managers whose IDs are between 100 and 200, display a bar chart illustrating the distribution of first_name and commission_pct, with the total number shown in descending order, please.",
            "For employees who are not employed in departments managed by managers with IDs between 100 and 200, retrieve their first names and commission percentages. Visualize this data using a bar chart, listing them in descending order on the Y-axis.",
            "For employees who are not part of departments where the manager's ID falls between 100 and 200, depict the distribution of first_name and commission_pct in a bar graph, and sort it in descending order along the Y-axis, please.",
            "For the employees who work in departments without managers whose IDs fall between 100 and 200, generate a bar chart illustrating the distribution of first_name and commission_pct. Please arrange the Y-axis in descending order, from highest to lowest."
        ],
        "record_name": "1692@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "SUM(SALARY)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept"
                ]
            ],
            "y_data": [
                [
                    73400,
                    59900,
                    110100,
                    53900
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For every employee whose first name contains the letters D or S, create a bar chart illustrating the distribution of hire dates and the aggregated sum of salaries binned by hire date over time.",
            "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of hire dates and the sum of salary grouped by hire date over time.",
            "For all employees with the letters D or S in their first name, visualize a bar chart depicting the distribution of hire dates and the cumulative sum of salary bins by hire date over time.",
            "For all employees with the D or S letters in their first name, please present the distribution of hire dates and the sum of salary categorized by hire date over time in a bar chart.",
            "For all employees whose first name contains the letters D or S, a bar chart illustrates the distribution of hire dates and the cumulative salary amount binned by hire date over time."
        ],
        "record_name": "1542"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC",
                "binning": "BIN Document_Date BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' GROUP BY Document_Name ORDER BY COUNT(Document_Date) DESC BIN Document_Date BY WEEKDAY"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Document_Date",
            "y_name": "COUNT(Document_Date)",
            "x_data": [
                [
                    "Wed",
                    "Thur",
                    "Sun",
                    "Tue",
                    "Sat",
                    "Mon",
                    "Fri"
                ]
            ],
            "y_data": [
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Chapter on private files",
                "Katheryn statement",
                "Review on Canadian files",
                "Review on USA files",
                "Winona Book"
            ],
            "describe": "GROUP BY Document_Name, BIN Document_Date BY WEEKDAY"
        },
        "nl_queries": [
            "Present a stacked bar graph illustrating the quantity of documents per day for all documents in the 'Graph Database project'. Please categorize the document dates by weekday and group them by document name. Arrange the graph from highest to lowest on the Y-axis, please."
        ],
        "record_name": "852@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.name , T1.id FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id ORDER BY T1.id ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "mountain_photos",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "id",
            "x_data": [
                [
                    "Mount Cameroon",
                    "Ighil Mgoun",
                    "Taska n\u2019Zat"
                ]
            ],
            "y_data": [
                [
                    12,
                    14,
                    20
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What are the identification numbers (IDs) and names of the mountains that have a minimum of 2 photographs? Please display the information in a bar chart, with the y-axis arranged in ascending order from lowest to highest.",
            "Present a bar chart showcasing the identification and names of mountains that possess a minimum of 2 photos. Please list them on the y-axis in ascending order.",
            "Create a bar chart displaying the identification numbers and names of mountains that have a minimum of 2 photos. Please sort the chart in ascending order based on the identification numbers."
        ],
        "record_name": "2337@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "customers_and_products_contacts",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_name",
            "y_name": "COUNT(product_name)",
            "x_data": [
                [
                    "Apple",
                    "gucci",
                    "jcrew"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY product_name"
        },
        "nl_queries": [
            "Compare the occurrence rate of product names using a bar graph.",
            "Display a bar chart illustrating the frequency of each product name.",
            "Product name displayed on the x-axis of a bar chart, with the y-axis representing the quantity of each product name."
        ],
        "record_name": "1000"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "SUM(Code)",
            "x_data": [
                [
                    "Fujits",
                    "Iomega",
                    "Sony",
                    "Winchester",
                    "Creative Labs",
                    "Hewlett-Packard"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    5,
                    6,
                    23,
                    28
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For the provided data on products and their respective manufacturers, generate a bar graph illustrating the distribution of product names and the total sum of codes. Group the data by the attribute name and display them in ascending order according to the total count.",
            "For the records pertaining to products and their respective manufacturers, please present the distribution of names and the sum of codes. Display this information in a bar chart, grouped by the attribute name, and arrange the data in ascending order on the Y-axis.",
            "For the entries pertaining to the products and their respective manufacturers, retrieve the name and the total sum of the code. Group them based on the attribute name and represent them visually using a bar chart. Please ensure that the bars are ordered in ascending order on the y-axis.",
            "For the data from the products and their respective manufacturers, create a bar chart that displays the distribution of names and the sum of codes. Group the data by the attribute name and sort the total number of codes in ascending order.",
            "Create a bar chart illustrating the distribution of names and the cumulative sum of codes for the records from the products and their respective manufacturers. Group the data by the attribute name and display it in ascending order based on the total number."
        ],
        "record_name": "2205@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name",
                "binning": "BIN Document_Date BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Name BIN Document_Date BY WEEKDAY"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Document_Date",
            "y_name": "COUNT(Document_Date)",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    1,
                    0,
                    1,
                    1,
                    1,
                    0,
                    2
                ],
                [
                    0,
                    0,
                    2,
                    0,
                    0,
                    1,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    1,
                    1,
                    2,
                    1,
                    0
                ]
            ],
            "classify": [
                "Book",
                "CV",
                "Film",
                "Paper"
            ],
            "describe": "GROUP BY Document_Type_Name, BIN Document_Date BY WEEKDAY"
        },
        "nl_queries": [
            "Show the number of documents generated each day. Categorize the document dates by weekdays and group them by document type using a stacked bar chart.",
            "Present the quantity of documents generated each day and categorize the document dates by weekdays, grouping them by document type using a stacked bar chart."
        ],
        "record_name": "849"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY COUNT(organization_details) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT organization_details , COUNT(organization_details) FROM Things AS T1 JOIN Organizations AS T2 ON T1.organization_id = T2.organization_id GROUP BY Type_of_Thing_Code ,  organization_details ORDER BY COUNT(organization_details) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "local_govt_and_lot",
        "vis_obj": {
            "chart": "bar",
            "x_name": "organization_details",
            "y_name": "COUNT(organization_details)",
            "x_data": [
                [
                    "Denesik and Sons Party",
                    "Robel-Schulist Group",
                    "Reinger, Hudson and Nolan Group"
                ]
            ],
            "y_data": [
                [
                    5,
                    2,
                    1
                ],
                [
                    4,
                    0,
                    1
                ],
                [
                    1,
                    1,
                    0
                ]
            ],
            "classify": [
                "Commen",
                "Electronics",
                "Furniture"
            ],
            "describe": "GROUP BY Type_of_Thing_Code, GROUP BY organization_details"
        },
        "nl_queries": [
            "Provide me with a stacked bar chart to illustrate the quantity of items across various types of each item, along with the corresponding ownership details. Please arrange the chart in descending order based on the Y-axis."
        ],
        "record_name": "2080@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT DEPARTMENT_ID , SUM(salary) FROM employees GROUP BY department_id"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "DEPARTMENT_ID",
            "y_name": "SUM(salary)",
            "x_data": [
                [
                    20,
                    30,
                    50,
                    60,
                    80,
                    90,
                    100,
                    110
                ]
            ],
            "y_data": [
                [
                    19000,
                    24900,
                    156400,
                    28800,
                    304500,
                    58000,
                    51600,
                    20300
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a scatter plot displaying the department ID and total salaries for each department that has more than two employees.",
            "Plot a scatter plot showing the total salaries and department ID for each department that has more than two employees.",
            "What is the combined salary and department identification for each department that has a workforce exceeding two employees? Please present this information in a scatter chart.",
            "Scatter plot to depict department identification on the x-axis and the total salary on the y-axis."
        ],
        "record_name": "1709"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC",
                "binning": "BIN Actual_Delivery_Date BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Actual_Delivery_Date , COUNT(Actual_Delivery_Date) FROM BOOKINGS  ORDER BY COUNT(Actual_Delivery_Date) DESC BIN Actual_Delivery_Date BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Drama_Workshop_Groups",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Actual_Delivery_Date",
            "y_name": "COUNT(Actual_Delivery_Date)",
            "x_data": [
                [
                    "Fri",
                    "Thur",
                    "Sun",
                    "Sat",
                    "Mon",
                    "Wed",
                    "Tue"
                ]
            ],
            "y_data": [
                [
                    4,
                    3,
                    3,
                    2,
                    2,
                    1,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN Actual_Delivery_Date BY WEEKDAY"
        },
        "nl_queries": [
            "Provide me with a bar graph illustrating the quantity of actual delivery dates for each individual actual delivery date, and arrange the total count in descending order.",
            "Display the actual delivery dates categorized by the day of the week in a bar chart, and sort them in descending order based on the y-axis, please."
        ],
        "record_name": "863@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id WHERE T2.transaction_type_code = \"SALE\" ORDER BY T1.investor_id DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tracking_share_transactions",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Investor_details",
            "y_name": "investor_id",
            "x_data": [
                [
                    "d",
                    "z"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the identifiers and information of the investors who have made at least two transactions with the type code \"SALE\" using a bar chart, listing them in descending order on the Y-axis.",
            "Display the IDs and details of investors who have made at least two transactions with the type code \"SALE\". Represent this data in a bar chart, sorted in descending order on the y-axis."
        ],
        "record_name": "2997@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID = T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID = T3.Phone_ID GROUP BY Name ORDER BY Name ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "phone_market",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "IPhone 5s",
                    "IPhone 6s",
                    "IPhone 7",
                    "IPhone X"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "I would like to compare the quantity of phone names using a bar chart, and list them in ascending order by name.",
            "Display the quantity of phone names in a bar graph, sorted in ascending order by the name, please."
        ],
        "record_name": "2581@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Category , count(*) FROM book_club GROUP BY category ORDER BY Category DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "culture_company",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Category",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Lesb. M/SF",
                    "Gay SF/F",
                    "Gay M/SF"
                ]
            ],
            "y_data": [
                [
                    5,
                    2,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Provide a histogram illustrating the distribution of books across different categories. Please list the X-axis in descending order.",
            "Display the total count for each category, with the bars listed in descending order, please.",
            "Display a bar chart illustrating all book genres and the corresponding number of books in each category, arranged in descending order by their names, please.",
            "How many books are categorized within each category, and I would like them listed in descending order based on the bars, please.",
            "Display all book genres and the quantity of books in each genre, I would like them listed in descending order based on the bars.",
            "Create a bar graph to illustrate the distribution of books across different categories, sorted by category names in descending order."
        ],
        "record_name": "907@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "tvshow",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Package_Option",
            "y_name": "COUNT(Package_Option)",
            "x_data": [
                [
                    "Sky Famiglia",
                    "Sky Famiglia + Sky HD",
                    "no ( FTV )"
                ]
            ],
            "y_data": [
                [
                    8,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Package_Option"
        },
        "nl_queries": [
            "What are the package choices for all TV channels that exclude any cartoons directed by Ben Jones, and represent the count using a pie chart please.",
            "What is the count of package choices for all TV channels that exclude any cartoons directed by Ben Jones?",
            "Identify the package options of the TV channel that do not include any cartoons directed by Ben Jones, and represent the count using a pie chart.",
            "A pie chart illustrating the distribution of package options for all TV channels excluding those that do not broadcast any cartoons directed by Ben Jones."
        ],
        "record_name": "3063"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT EMPLOYEE_ID , COMMISSION_PCT FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'"
        },
        "chart": "Scatter",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "EMPLOYEE_ID",
            "y_name": "COMMISSION_PCT",
            "x_data": [
                [
                    100,
                    205,
                    168,
                    114,
                    148,
                    169,
                    151,
                    163,
                    103,
                    109,
                    175,
                    121,
                    153,
                    159,
                    112,
                    111,
                    160,
                    161,
                    113,
                    165,
                    123,
                    203,
                    166,
                    179,
                    173,
                    105,
                    107,
                    184,
                    185,
                    192,
                    137,
                    133,
                    138,
                    180,
                    194,
                    115,
                    142,
                    116,
                    117,
                    183,
                    143,
                    198,
                    199,
                    131,
                    140,
                    191,
                    127,
                    128
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0.25,
                    0,
                    0.3,
                    0.2,
                    0.25,
                    0.15,
                    0,
                    0,
                    0.25,
                    0,
                    0.2,
                    0.3,
                    0,
                    0,
                    0.3,
                    0.25,
                    0,
                    0.1,
                    0,
                    0,
                    0.1,
                    0.1,
                    0.1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For all employees whose first names contain the letters D or S, a scatter plot illustrates the relationship between employee_id and commission_pct.",
            "For all employees whose first name contains the letters D or S, what is the correlation between employee_id and commission_pct?",
            "For all employees whose first names contain the letters D or S, create a scatter plot illustrating the relationship between employee_id and commission_pct.",
            "For all employees whose first names contain the letters D or S, generate a scatter chart depicting the correlation between employee_id and commission_pct.",
            "For all employees whose first names contain the letters D or S, create a scatter plot depicting the relationship between employee_id and commission_pct."
        ],
        "record_name": "1576"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT FIRST_NAME , DEPARTMENT_ID FROM employees ORDER BY DEPARTMENT_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "FIRST_NAME",
            "y_name": "DEPARTMENT_ID",
            "x_data": [
                [
                    "Shelley",
                    "Nancy",
                    "Steven",
                    "John",
                    "Hermann",
                    "Alexander",
                    "Adam",
                    "Susan",
                    "Den",
                    "Michael",
                    "Jennifer"
                ]
            ],
            "y_data": [
                [
                    110,
                    100,
                    90,
                    80,
                    70,
                    60,
                    50,
                    40,
                    30,
                    20,
                    10
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Utilize a histogram to present the ID of the department and the first names of the employees, and arrange them in descending order on the y-axis, please.",
            "Present the department_id by first name in a histogram, with the Y-axis organized in descending order, please."
        ],
        "record_name": "1899@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT EMP_FNAME , COUNT(EMP_FNAME) FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num = T2.emp_num JOIN course AS T3 ON T1.crs_code = T3.crs_code GROUP BY EMP_FNAME ORDER BY EMP_FNAME ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "EMP_FNAME",
            "y_name": "COUNT(EMP_FNAME)",
            "x_data": [
                [
                    "Arnelle",
                    "Carlos",
                    "Gerald",
                    "Ismael",
                    "Peter",
                    "Robert"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    3,
                    2,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY EMP_FNAME"
        },
        "nl_queries": [
            "How many classes did each instructor teach? Please present the information in a bar graph and arrange the bars in ascending order.",
            "Display the quantity of courses taught by each instructor in a bar graph, arranged in ascending order on the X-axis, please."
        ],
        "record_name": "583@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Budget_Type_Code",
            "y_name": "COUNT(Budget_Type_Code)",
            "x_data": [
                [
                    "GV",
                    "ORG",
                    "SF"
                ]
            ],
            "y_data": [
                [
                    6,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Budget_Type_Code"
        },
        "nl_queries": [
            "Display the quantity of documents for various budget type codes in a pie chart.",
            "Present a pie chart illustrating the distribution of documents across various budget type codes."
        ],
        "record_name": "834"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT STU_LNAME , COUNT(STU_LNAME) FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num = T2.stu_num WHERE T2.enroll_grade = 'C' OR T2.enroll_grade = 'A' GROUP BY STU_LNAME ORDER BY COUNT(STU_LNAME) ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "STU_LNAME",
            "y_name": "COUNT(STU_LNAME)",
            "x_data": [
                [
                    "Smithson",
                    "Bowser"
                ]
            ],
            "y_data": [
                [
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY STU_LNAME"
        },
        "nl_queries": [
            "Retrieve the count of students who enrolled in a particular course and earned either an A or C grade, grouped by last name, and present the data in a bar graph with the y-axis arranged in ascending order.",
            "How many students enrolled in a course received an A or C grade? Present the data in a bar chart, grouping by students' last names, and arrange in ascending order based on the number of students' last names."
        ],
        "record_name": "578@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT sum(grant_amount) , organisation_id FROM Grants GROUP BY organisation_id"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "tracking_grants_for_research",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "sum(grant_amount)",
            "y_name": "organisation_id",
            "x_data": [
                [
                    608438.0290999999,
                    281.2446,
                    610.7004,
                    76977810.29079999,
                    42.8061,
                    25313.51,
                    38679503.1437,
                    330.6339,
                    2001349.459,
                    4516014.121800002
                ]
            ],
            "y_data": [
                [
                    2,
                    3,
                    5,
                    7,
                    8,
                    9,
                    10,
                    11,
                    12,
                    14
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Generate a scatter plot illustrating the total grants disbursed by each organization, and include a list of the organization IDs.",
            "Scatter plot. Provide the total sum of grants allocated by each organization, and include the organization ID in the list.",
            "What is the cumulative value of grants awarded by each organization? Additionally, please provide the organization ID.",
            "Scatter plot. What is the aggregate sum of grant funds awarded to each institution and what is its identification number?",
            "Create a scatter plot depicting the total amount of grant money awarded to each organization and its corresponding ID.",
            "What is the aggregate sum of grant funds allocated to each institution, and what is their corresponding identification number? Display the correlation between them.",
            "Plot a scatter chart, where the grant amount is summed by organization ID."
        ],
        "record_name": "2961"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY T1.Code DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "SUM(Code)",
            "x_data": [
                [
                    "Hewlett-Packard",
                    "Creative Labs",
                    "Winchester",
                    "Sony",
                    "Iomega",
                    "Fujits"
                ]
            ],
            "y_data": [
                [
                    28,
                    23,
                    6,
                    5,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Generate a stacked bar chart illustrating the distribution of names and the total sum of codes for the records from the products and their respective manufacturers. Group the data by the attribute name and arrange them in descending order based on the y-axis.",
            "For the entries in the products and their respective manufacturers, retrieve the name and the sum of the codes, grouping them by attribute name. Visualize this data using a bar chart, ordered by the total number of codes from highest to lowest.",
            "For the records pertaining to products and their respective manufacturers, create a bar chart representing the distribution of product names and the total code sum, grouped by the attribute name. Could you please list the y-axis in descending order?",
            "For the records pertaining to products and their respective manufacturers, create a bar chart that presents the distribution of names and the total sum of codes, grouped by the attribute name. Please display the total number in descending order.",
            "For the records pertaining to the products and their respective manufacturers, present the distribution of names and the sum of codes. Display this information in a bar chart, grouped by the attribute name, and sort the y-axis in descending order."
        ],
        "record_name": "2205@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Investor_details , COUNT(Investor_details) FROM INVESTORS GROUP BY Investor_details ORDER BY COUNT(Investor_details) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "tracking_share_transactions",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Investor_details",
            "y_name": "COUNT(Investor_details)",
            "x_data": [
                [
                    "z",
                    "y",
                    "w",
                    "l",
                    "k",
                    "d",
                    "t",
                    "r",
                    "q",
                    "o",
                    "j",
                    "i",
                    "c",
                    "b"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    2,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Investor_details"
        },
        "nl_queries": [
            "Display all the details of investors and represent their count with a bar chart. Please rank them in descending order based on the number of investor details.",
            "Create a bar chart to represent the quantity of investor information grouped by investor details, with the Y-axis arranged in descending order from highest to lowest."
        ],
        "record_name": "3002@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC",
                "binning": "BIN date_of_enrolment BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT date_of_enrolment , COUNT(date_of_enrolment) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"Spanish\"  ORDER BY COUNT(date_of_enrolment) DESC BIN date_of_enrolment BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "e_learning",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_enrolment",
            "y_name": "COUNT(date_of_enrolment)",
            "x_data": [
                [
                    "Thur",
                    "Wed",
                    "Tue",
                    "Sun",
                    "Sat",
                    "Mon",
                    "Fri"
                ]
            ],
            "y_data": [
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_enrolment BY WEEKDAY"
        },
        "nl_queries": [
            "What is the enrollment date for the course titled \"Spanish\", and represent it using a bar chart, sorted in descending order based on the total count.",
            "Find the count of dates when the \"Spanish\" course was enrolled, and display them in descending order on the y-axis.",
            "Find the enrollment dates for the \"Spanish\" course, and represent them with a bar chart, arranging the Y-axis in descending order.",
            "A stacked bar chart that represents the enrollment dates of the \"Spanish\" course, listed in descending order based on the total number."
        ],
        "record_name": "1294@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Home_city , AVG(Age) FROM driver GROUP BY Home_city ORDER BY Home_city DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "school_bus",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Home_city",
            "y_name": "AVG(Age)",
            "x_data": [
                [
                    "Manchester",
                    "Hartford",
                    "East Hartford",
                    "Coventry",
                    "Bethel"
                ]
            ],
            "y_data": [
                [
                    52,
                    43.5,
                    37,
                    35,
                    30
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Home_city"
        },
        "nl_queries": [
            "Display the mean age of drivers from the identical city of residence using a bar chart, and kindly arrange the X-axis in descending order from highest to lowest.",
            "Create a bar chart depicting the average age grouped by hometown, and please sort the bars from highest to lowest.",
            "Compare the mean age of drivers from the identical city of origin using a bar graph, sorted in descending order on the X-axis."
        ],
        "record_name": "2698@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT long , avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id = T2.start_station_id GROUP BY T2.start_station_id"
        },
        "chart": "Scatter",
        "hardness": "Medium",
        "db_id": "bike_1",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "long",
            "y_name": "avg(T2.duration)",
            "x_data": [
                [
                    -121.901782,
                    -121.888979,
                    -121.894902,
                    -121.8932,
                    -121.894074,
                    -121.886943,
                    -121.885831,
                    -121.894715,
                    -121.886995,
                    -121.88566000000002,
                    -121.883891,
                    -121.88993700000002,
                    -121.900084,
                    -121.877349,
                    -122.226904,
                    -122.232089,
                    -122.227424,
                    -122.203288,
                    -122.223492,
                    -122.081896,
                    -122.07671299999998,
                    -122.106758,
                    -122.066553,
                    -122.108338,
                    -122.083678,
                    -122.099076,
                    -122.164759,
                    -122.163093,
                    -122.142805,
                    -122.159504,
                    -122.13777749999998,
                    -122.408433,
                    -122.39997,
                    -122.398436,
                    -122.402923,
                    -122.404767,
                    -122.403452,
                    -122.398525,
                    -122.390637,
                    -122.394203,
                    -122.391034,
                    -122.388013,
                    -122.394643,
                    -122.39708600000002,
                    -122.405127,
                    -122.418235,
                    -122.418603,
                    -122.403234,
                    -122.39028799999998,
                    -122.39623600000002,
                    -122.398108,
                    -122.392738,
                    -122.402717,
                    -122.418954,
                    -122.417385,
                    -122.401014,
                    -122.39547,
                    -122.39526,
                    -122.408499,
                    -122.411748,
                    -122.407245,
                    -122.394434,
                    -122.399051,
                    -122.404966,
                    -122.400811,
                    -121.905733,
                    -122.40086200000002,
                    -122.236234,
                    -121.895617
                ]
            ],
            "y_data": [
                [
                    544.7611940298508,
                    885,
                    378.28,
                    980.0714285714287,
                    840.225,
                    529.0909090909091,
                    682.3333333333334,
                    1230.655172413793,
                    1123.4,
                    810.5416666666665,
                    711.7777777777777,
                    616.4,
                    608.8333333333334,
                    3597.095238095238,
                    3909,
                    2643.871794871795,
                    741,
                    979.0666666666667,
                    555.4,
                    563.0333333333333,
                    714.8062015503875,
                    380.4090909090909,
                    918.1315789473683,
                    667.5925925925926,
                    1082.7142857142858,
                    699.7,
                    1653.3255813953488,
                    2643.6,
                    1423.842105263158,
                    1164.1153846153845,
                    872.2222222222223,
                    1245.5836909871246,
                    906.0827586206897,
                    1067.6629213483143,
                    524.774834437086,
                    1497.7671232876712,
                    825.1928571428572,
                    1817.221649484536,
                    655.7166666666667,
                    1802.6721991701245,
                    938.7894736842104,
                    766.0746268656717,
                    535.0488372093023,
                    752.6637554585153,
                    551.4051282051282,
                    1774.6315789473686,
                    734.3861386138614,
                    1630.002267573696,
                    905.3340611353713,
                    399.6787330316742,
                    414.5117370892018,
                    512.8461538461538,
                    568.9297752808989,
                    912.8475609756098,
                    1139.6389891696754,
                    561.7394957983194,
                    725.3219284603423,
                    801.9405320813771,
                    765.4458598726114,
                    1276.7208121827412,
                    1423.375,
                    890.9441964285713,
                    655.2933333333333,
                    1664.8505338078294,
                    786.4408284023668,
                    862.4666666666667,
                    1044.7237569060774,
                    253.33333333333331,
                    556
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each station, simply present its longitude and the average duration of trips that originated from the station using a scatter plot.",
            "Please provide a scatter chart displaying the longitude of each start station and the average duration of trips initiated from each station."
        ],
        "record_name": "328"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT meter_700 , meter_100 FROM swimmer ORDER BY meter_100 DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "swimming",
        "vis_obj": {
            "chart": "bar",
            "x_name": "meter_700",
            "y_name": "meter_100",
            "x_data": [
                [
                    "6:57.69",
                    "6:52.58",
                    "6:52.69",
                    "6:57.44",
                    "6:55.07",
                    "6:50.91",
                    "6:50.80",
                    "6:53.34"
                ]
            ],
            "y_data": [
                [
                    57.84,
                    57.66,
                    57.35,
                    57.34,
                    57.34,
                    57.31,
                    57.31,
                    55.67
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the distribution of meter_700 and meter_100 in a stacked bar chart, arranged on the Y-axis in descending order, please.",
            "Display a bar chart depicting the meter_100 values for different meter 700 measurements, arranged in descending order based on the meter_100 values, please.",
            "Provide me with the comparison between meter_100 and meter_700, and sort them in descending order based on the meter_100 values.",
            "A bar chart illustrates the allocation of meter_700 and meter_100, with the y-axis displayed in descending order.",
            "Locate values for meter_700 and meter_100, and present them visually in a bar chart. Please arrange the meter_100 values in descending order.",
            "Create a bar chart illustrating the distribution of meter_700 and meter_100, with the meter_100 values displayed in descending order."
        ],
        "record_name": "2925@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "gas_company",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarters",
            "y_name": "COUNT(Headquarters)",
            "x_data": [
                [
                    "Brazil",
                    "China",
                    "Netherlands",
                    "UK",
                    "USA"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1,
                    2,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarters"
        },
        "nl_queries": [
            "Display the quantity of companies in each corporate headquarters using a bar chart.",
            "Show the number of companies for each headquarters in a bar chart.",
            "Bar chart illustrating the number of headquarters for each individual headquarters."
        ],
        "record_name": "1518"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "dog_kennels",
        "vis_obj": {
            "chart": "bar",
            "x_name": "last_name",
            "y_name": "COUNT(last_name)",
            "x_data": [
                [
                    "DuBuque",
                    "Feil",
                    "Fisher",
                    "Funk",
                    "Haley",
                    "Mertz",
                    "Nicolas",
                    "Price",
                    "Prohaska",
                    "Rippin",
                    "Schmitt",
                    "Stoltenberg"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY last_name"
        },
        "nl_queries": [
            "Present the quantity of dogs owned by each individual in a bar chart that groups by the owner's surname, and arrange the x-axis in ascending order from least to greatest.",
            "How many dogs does each owner possess? Provide a bar chart that groups the data by the owner's last name and arrange it in ascending order on the X-axis."
        ],
        "record_name": "1204@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Is_full_time , COUNT(Is_full_time) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "employee_hire_evaluation",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Is_full_time",
            "y_name": "COUNT(Is_full_time)",
            "x_data": [
                [
                    "F",
                    "T"
                ]
            ],
            "y_data": [
                [
                    2,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Is_full_time"
        },
        "nl_queries": [
            "Create a stacked bar chart illustrating the distribution of Is_full_time and the corresponding number of occurrences. Group the bars based on the attribute Is_full_time. Please arrange the bars in ascending order.",
            "Create a bar chart comparing the number of individuals who are full-time versus the number of individuals who are not full-time, and I would like them listed in ascending order by the \"Is_full_time\" category.",
            "Generate a stacked bar chart illustrating the distribution and quantity of \"Is_full_time\". Group the data based on the attribute \"Is_full_time\" and list the bars on the X-axis in ascending order.",
            "A bar chart illustrates the breakdown of Is_full_time and the corresponding count of Is_full_time, grouped by the Is_full_time attribute, and I would like to display it in ascending order on the X-axis.",
            "Provide a bar chart comparing the amounts of \"Is_full_time\" across different \"Is_full_time\" attributes. Group the data by the \"Is_full_time\" attribute and list them on the x-axis in ascending order.",
            "Present the distribution and quantity of \"Is_full_time\" and group them based on the attribute \"Is_full_time\" in a bar chart, with the bars arranged in ascending order, please."
        ],
        "record_name": "1335@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT All_Neutral , ACC_Percent FROM basketball_match ORDER BY All_Neutral ASC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "All_Neutral",
            "y_name": "ACC_Percent",
            "x_data": [
                [
                    "3\u20133",
                    "4\u20133",
                    "5\u20133",
                    "9\u20131"
                ]
            ],
            "y_data": [
                [
                    0.563,
                    0.625,
                    0.813,
                    0.875
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the distribution of All_Neutral and ACC_Percent in a bar graph, and please list the X-axis in ascending order.",
            "A bar chart illustrates the distribution of All_Neutral and ACC_Percent, and arrange them in ascending order on the x-axis, please.",
            "Bar graph depicting the percentage of accuracy from each neutral source, and please arrange them in ascending order on the X-axis.",
            "Generate a bar graph illustrating the distribution of All_Neutral and ACC_Percent. Please arrange the X-axis in ascending order.",
            "Create a bar chart representing the distribution of All_Neutral and ACC_Percent, and arrange them in ascending order on the x-axis.",
            "Provide me with the comparison of the ACC_Percent in relation to the All_Neutral. Additionally, please arrange the All_Neutral in ascending order."
        ],
        "record_name": "3144@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT acc_type , avg(acc_bal) FROM customer WHERE credit_score < 50 GROUP BY acc_type"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "loan_1",
        "vis_obj": {
            "chart": "pie",
            "x_name": "acc_type",
            "y_name": "avg(acc_bal)",
            "x_data": [
                [
                    "checking",
                    "saving"
                ]
            ],
            "y_data": [
                [
                    1000,
                    2000
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each account category, calculate the mean account balance of customers with a credit score below 50. Display the results in a pie chart.",
            "What is the average balance of accounts for customers with a credit score below 50 across the various types of accounts?",
            "Present a pie chart illustrating the average account balance of customers with a credit score below 50 across various account types.",
            "What is the mean account balance of customers with a credit score below 50 for various account types? Display the proportion, please."
        ],
        "record_name": "2067"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT T1.Code , T1.Price FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Founder"
        },
        "chart": "Grouping Scatter",
        "hardness": "Medium",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Code",
            "y_name": "Price",
            "x_data": [
                [
                    5
                ],
                [
                    8,
                    9,
                    11
                ],
                [
                    1
                ],
                [
                    3
                ],
                [
                    6,
                    7,
                    10
                ],
                [
                    2,
                    4
                ]
            ],
            "y_data": [
                [
                    240
                ],
                [
                    270,
                    66,
                    150
                ],
                [
                    240
                ],
                [
                    150
                ],
                [
                    180,
                    90,
                    180
                ],
                [
                    120,
                    5
                ]
            ],
            "classify": [
                "Andy",
                "James",
                "John",
                "Mary",
                "Owen",
                "Robert"
            ],
            "describe": "GROUP BY Founder"
        },
        "nl_queries": [
            "For the data entries pertaining to the products and their respective manufacturers, visualize the correlation between the product code and price, and group them based on the attribute \"founder\".",
            "For the data pertaining to the products and their respective manufacturers, create a scatter plot illustrating the relationship between the product code and price, while grouping them by the founding attribute.",
            "For the given records of products and their respective manufacturers, generate a scatter plot illustrating the relationship between the product code and price. Additionally, group the data points based on the attribute \"founder\".",
            "For the records of products and their respective manufacturers, a scatter plot illustrates the relationship between the product code and price, grouped according to the attribute \"founder\".",
            "For the records pertaining to the products and their respective manufacturers, please present the correlation between the product code and price in a scatter chart, categorized by the attribute \"founder\"."
        ],
        "record_name": "2293"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT transaction_type_code , avg(amount_of_transaction) FROM TRANSACTIONS GROUP BY transaction_type_code"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "tracking_share_transactions",
        "vis_obj": {
            "chart": "pie",
            "x_name": "transaction_type_code",
            "y_name": "avg(amount_of_transaction)",
            "x_data": [
                [
                    "PUR",
                    "SALE"
                ]
            ],
            "y_data": [
                [
                    25945880.3716125,
                    11198167.237771427
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the mean transaction value for various types of transactions using a pie chart.",
            "Visualize the mean transaction value for varying transaction categories using a pie chart.",
            "Calculate the total and average amount of transactions for each transaction type code and represent it as a pie chart."
        ],
        "record_name": "3004"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT HIRE_DATE , COMMISSION_PCT FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 ORDER BY HIRE_DATE ASC"
        },
        "chart": "Line",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "line",
            "x_name": "HIRE_DATE",
            "y_name": "COMMISSION_PCT",
            "x_data": [
                [
                    "1987-06-17",
                    "1987-06-18",
                    "1987-06-19",
                    "1987-06-20",
                    "1987-06-21",
                    "1987-06-22",
                    "1987-06-23",
                    "1987-06-24",
                    "1987-06-25",
                    "1987-06-26",
                    "1987-06-27",
                    "1987-06-28",
                    "1987-06-29",
                    "1987-06-30",
                    "1987-07-01",
                    "1987-07-02",
                    "1987-07-03",
                    "1987-07-04",
                    "1987-07-05",
                    "1987-07-06",
                    "1987-07-07",
                    "1987-07-08",
                    "1987-07-09",
                    "1987-07-10",
                    "1987-07-11",
                    "1987-07-12",
                    "1987-07-13",
                    "1987-07-14",
                    "1987-07-15",
                    "1987-07-16",
                    "1987-07-17",
                    "1987-07-18",
                    "1987-07-19",
                    "1987-07-20",
                    "1987-07-21",
                    "1987-07-22",
                    "1987-07-23",
                    "1987-07-24",
                    "1987-07-25",
                    "1987-07-26",
                    "1987-07-27",
                    "1987-07-28",
                    "1987-07-29",
                    "1987-07-30",
                    "1987-07-31",
                    "1987-08-01",
                    "1987-08-02",
                    "1987-08-03",
                    "1987-08-04",
                    "1987-08-05",
                    "1987-08-06",
                    "1987-08-07",
                    "1987-08-08",
                    "1987-08-09",
                    "1987-08-10",
                    "1987-08-11",
                    "1987-08-12",
                    "1987-08-13",
                    "1987-08-14",
                    "1987-08-15",
                    "1987-08-16",
                    "1987-08-17",
                    "1987-08-18",
                    "1987-08-19",
                    "1987-08-20",
                    "1987-08-21",
                    "1987-08-22",
                    "1987-08-23",
                    "1987-08-24",
                    "1987-08-25",
                    "1987-08-26",
                    "1987-08-27",
                    "1987-08-28",
                    "1987-08-29",
                    "1987-08-30",
                    "1987-08-31",
                    "1987-09-01",
                    "1987-09-02",
                    "1987-09-03",
                    "1987-09-04",
                    "1987-09-05",
                    "1987-09-06",
                    "1987-09-07",
                    "1987-09-08",
                    "1987-09-09",
                    "1987-09-10",
                    "1987-09-11",
                    "1987-09-12",
                    "1987-09-13",
                    "1987-09-14",
                    "1987-09-15",
                    "1987-09-16",
                    "1987-09-17",
                    "1987-09-18",
                    "1987-09-19",
                    "1987-09-20",
                    "1987-09-21",
                    "1987-09-22",
                    "1987-09-23",
                    "1987-09-24",
                    "1987-09-25",
                    "1987-09-26",
                    "1987-09-27",
                    "1987-09-29",
                    "1987-09-30",
                    "1987-10-01"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0.4,
                    0.3,
                    0.3,
                    0.3,
                    0.2,
                    0.3,
                    0.25,
                    0.25,
                    0.2,
                    0.2,
                    0.15,
                    0.35,
                    0.35,
                    0.35,
                    0.3,
                    0.3,
                    0.25,
                    0.25,
                    0.15,
                    0.1,
                    0.1,
                    0.1,
                    0.1,
                    0.25,
                    0.2,
                    0.2,
                    0.15,
                    0.15,
                    0.1,
                    0.3,
                    0.25,
                    0.2,
                    0.2,
                    0.15,
                    0.1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For employees whose salary falls between 8000 and 12000, and either have a non-null commission or belong to a department number other than 40, create a line chart illustrating the variation of commission_pct over hire_date. Please ensure that the X-axis is sorted in ascending order.",
            "For employees with salaries between 8000 and 12000 and either a non-null commission or a department number not equal to 40, a line chart illustrates the variation in commission percentage over their hire dates, with the X-axis sorted in ascending order.",
            "For employees whose salary falls within the range of 8000 and 12000, and either their commission is not null or their department number is not equal to 40, a line chart will display the trend of commission_pct over hire_date. Please arrange the X-axis in ascending order.",
            "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or belong to a department other than 40, please provide a line chart depicting the fluctuation of commission percentage over hire date, arranged in ascending order on the X-axis.",
            "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or belong to a department other than 40, please present a line chart depicting the variation of commission_pct over hire_date. Please arrange the data in ascending order on the x-axis.",
            "For employees with salaries ranging between 8000 and 12000, and either a non-null commission or a department number not equal to 40, create a line chart illustrating the variation in commission_pct over hire_date. Please arrange the x-axis in ascending order."
        ],
        "record_name": "1621@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.product_name , AVG(sum(T2.order_quantity)) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_products_contacts",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_name",
            "y_name": "AVG(sum(T2.order_quantity))",
            "x_data": [
                [
                    "Apple",
                    "gucci",
                    "jcrew"
                ]
            ],
            "y_data": [
                [
                    7.666666666666667,
                    7,
                    10
                ]
            ],
            "classify": [],
            "describe": "GROUP BY product_name"
        },
        "nl_queries": [
            "Display the name of the product and the total quantity of orders for each product using a bar chart.",
            "Display the name of the product and the total quantity of orders for each product. Present the data in a bar chart."
        ],
        "record_name": "1002"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT first_name , SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id = T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "store_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "first_name",
            "y_name": "SUM(T2.total)",
            "x_data": [
                [
                    "Helena",
                    "Richard",
                    "Luis",
                    "Ladislav",
                    "Hugh",
                    "Julia",
                    "Frank",
                    "Fynn",
                    "Astrid",
                    "Victor"
                ]
            ],
            "y_data": [
                [
                    49.62000000000001,
                    47.62000000000001,
                    46.62,
                    45.62,
                    45.62,
                    43.62000000000001,
                    43.62,
                    43.62,
                    42.62,
                    42.62
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Enumerate the ten customers with the highest total gross sales. Contrast the total gross sales of customers based on their first name.",
            "Which first names appear in the top 10 customers with the highest gross sales, and what are their corresponding sales amounts?",
            "Which first names belong to the top 10 customers with the highest gross sales, and what are their respective sales figures? Please present the results using a bar chart."
        ],
        "record_name": "2852"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Directed_by , COUNT(Directed_by) FROM film GROUP BY Directed_by ORDER BY Directed_by DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Directed_by",
            "y_name": "COUNT(Directed_by)",
            "x_data": [
                [
                    "Jesus Salvador Trevi\u00f1o",
                    "Bill Schreiner"
                ]
            ],
            "y_data": [
                [
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Directed_by"
        },
        "nl_queries": [
            "Provide me with a bar chart illustrating the quantity of films for each director, and I would like them to be displayed in descending order on the x-axis, please.",
            "What is the film count for each director? Provide a bar graph and arrange the directors on the x-axis in descending order from highest to lowest, please.",
            "Bar chart illustrating the count of directors for different \"directed by\" categories, with the X-axis sorted in descending order, please."
        ],
        "record_name": "443@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY CITY ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "CITY",
            "y_name": "COUNT(CITY)",
            "x_data": [
                [
                    "London",
                    "Munich",
                    "OX9 9ZB",
                    "Seattle",
                    "South San Francisco",
                    "Southlake",
                    "Toronto"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    21,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY CITY"
        },
        "nl_queries": [
            "Group and tally the city attribute of the location table to create a bar graph, displaying the names in ascending order from low to high.",
            "Provide me with a bar graph that compares the quantity of departments situated in various cities, and arrange them in ascending order along the x-axis.",
            "Create a bar chart illustrating the count of cities per city, with the bars arranged in ascending order."
        ],
        "record_name": "1624@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain) GROUP BY Class ORDER BY COUNT(Class) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "ship_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Class",
            "y_name": "COUNT(Class)",
            "x_data": [
                [
                    "KR",
                    "GL"
                ]
            ],
            "y_data": [
                [
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Class"
        },
        "nl_queries": [
            "Present a bar graph illustrating the overall count of ship classes without a captain, displaying Y-axis values in descending order.",
            "For the ships that do not have a captain, present the total number of their classifications using a pie chart, and arrange them in descending order based on the y-axis, please."
        ],
        "record_name": "2749@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name ORDER BY COUNT(Name) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "journal_committee",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Kamila Porczyk",
                    "Marek Siudym",
                    "Maria G\u00f3ralczyk",
                    "Piotr Pr\u0119gowski",
                    "W\u0142adys\u0142aw Grzywna",
                    "Gra\u017cyna Wolszczak"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Plot a bar chart with the name of the x-axis as 'Location' and the name of the y-axis as 'Number of Locations', and please sort the data in ascending order based on the y-axis values.",
            "Aggregate and tally the name attribute for the purpose of visualizing a bar chart, and depict the total count in ascending order."
        ],
        "record_name": "2055@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT DEPT_CODE , count(*) FROM student GROUP BY dept_code ORDER BY DEPT_CODE DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "DEPT_CODE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "ENGL",
                    "EDU",
                    "CIS",
                    "BIOL",
                    "ACCT"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many students are there in each academic department? Please display the X-axis in descending order from highest to lowest.",
            "Determine the student count for each department and present them in a bar graph, sorted in descending order by department names.",
            "Provide a histogram illustrating the distribution of students across different departments, and sort the departments in descending order by name.",
            "Visualize the number of students in each department through a bar chart, and display the X-axis in descending order from highest to lowest, please.",
            "Create a bar chart indicating the total number versus the department code, with the bars arranged in descending order based on their height."
        ],
        "record_name": "564@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM WINE WHERE Price > 100 GROUP BY Grape ,  Year ORDER BY YEAR"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "wine_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year",
            "y_name": "COUNT(Year)",
            "x_data": [
                [
                    "2006-01-01",
                    "2007-01-01",
                    "2008-01-01"
                ]
            ],
            "y_data": [
                [
                    4,
                    11,
                    2
                ],
                [
                    1,
                    1,
                    0
                ],
                [
                    1,
                    1,
                    0
                ]
            ],
            "classify": [
                "Cabernet Sauvingnon",
                "Grenache",
                "Syrah"
            ],
            "describe": "GROUP BY Grape, GROUP BY Year"
        },
        "nl_queries": [
            "For wines with a price greater than 100, calculate the total count for each year and arrange them in a bar chart sorted by year."
        ],
        "record_name": "3227"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Carrier , COUNT(Carrier) FROM phone GROUP BY Carrier ORDER BY Carrier ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "phone_market",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Carrier",
            "y_name": "COUNT(Carrier)",
            "x_data": [
                [
                    "Sprint",
                    "TMobile"
                ]
            ],
            "y_data": [
                [
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Carrier"
        },
        "nl_queries": [
            "Bar chart with carriers represented on the x-axis and the number of carriers displayed on the y-axis, arranged in ascending order by the x-values, please.",
            "What is the count of phone carriers? Please provide a bar chart with the X-axis sorted in ascending order.",
            "Can you please provide the specific data or values you would like to visualize on the bar chart for the number of carriers?"
        ],
        "record_name": "2569@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings'",
                "binning": "BIN year BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT year , AVG(count(*)) FROM postseason AS T1 JOIN team AS T2 ON T1.team_id_winner = T2.team_id_br WHERE T2.name = 'Boston Red Stockings' BIN year BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "baseball_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "year",
            "y_name": "AVG(count(*))",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    10,
                    8.333333333333334,
                    5,
                    10,
                    5,
                    5,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN year BY WEEKDAY"
        },
        "nl_queries": [
            "Provide me with a bar graph that categorizes the years into intervals of days of the week and displays the average number of times the Boston Red Stockings team has won in the postseasons."
        ],
        "record_name": "160"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Type , count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id = T2.school_id GROUP BY T2.type ORDER BY count(*) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "school_bus",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Type",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Private",
                    "Public"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the category of schools and the quantity of buses for each category in a bar graph, with the y-axis arranged in descending order, please.",
            "Display the school type and the corresponding number of buses for each type, and arrange them in descending order on the y-axis, please."
        ],
        "record_name": "2694@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT PetID , weight FROM pets WHERE pet_age > 1 ORDER BY PetID DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "pets_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "PetID",
            "y_name": "weight",
            "x_data": [
                [
                    "2002-01-01",
                    "2001-01-01"
                ]
            ],
            "y_data": [
                [
                    13.4,
                    12
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A bar chart displaying the identification (ID) and weight of each pet that is over one year old is requested. Could you kindly list them by name in descending order?",
            "What are the identification number and weight of each pet that is over 1 year old, and display them in descending order using bars.",
            "Create a bar chart illustrating the identifier and weight of each pet that is older than 1, and list them in descending order based on the X-axis.",
            "Find the identification and weight of all pets whose age exceeds 1. Represent the data in a bar chart, sorted in descending order by the names."
        ],
        "record_name": "2551@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ACC_Road , Team_ID FROM basketball_match GROUP BY ACC_Home ,  ACC_Road ORDER BY Team_ID DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ACC_Road",
            "y_name": "Team_ID",
            "x_data": [
                [
                    "3\u20135",
                    "6\u20132",
                    "8\u20130"
                ]
            ],
            "y_data": [
                [
                    4,
                    0,
                    1
                ],
                [
                    3,
                    2,
                    0
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home, GROUP BY ACC_Road"
        },
        "nl_queries": [
            "Retrieve the values for ACC_Road and Team_ID, group them based on the attribute ACC_Home, and represent them in a bar chart. Arrange the bars in descending order by Team_ID.",
            "A grouped bar chart displays the distribution of ACC_Road and Team_ID, grouped by the ACC_Home attribute, and listed in descending order based on the Team_ID.",
            "Provide me with a comparison of the Team_ID based on the ACC_Road attribute, grouped by the ACC_Home attribute, and display Y in descending order.",
            "Display a stacked bar chart representing the team_id for each ACC_Home in each ACC road, with the Y-axis arranged in descending order.",
            "Create a bar chart illustrating the distribution of ACC_Road and Team_ID, grouped by the attribute ACC_Home, and list the Y-axis in descending order.",
            "Present the distribution of ACC_Road and Team_ID, grouped by the ACC_Home attribute, in a bar chart. List the Team_ID in descending order from highest to lowest."
        ],
        "record_name": "3090@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nationality , COUNT(Nationality) FROM ship GROUP BY Nationality ORDER BY COUNT(Nationality) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "ship_mission",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nationality",
            "y_name": "COUNT(Nationality)",
            "x_data": [
                [
                    "United States",
                    "United Kingdom"
                ]
            ],
            "y_data": [
                [
                    3,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "What is the overall count of distinct nationalities among all ships? Provide me with a bar chart, and I would like the Y-axis to be listed in ascending order from lowest to highest.",
            "Provide a bar chart illustrating the cumulative count of nationalities for the total number of ships, arranged in ascending order based on the frequency of each nationality.",
            "Present the comparison of the overall count of nationalities for all ships using a bar graph, and exhibit them in ascending order based on the number of nationalities.",
            "Bar chart illustrating the quantity of nationalities from diverse nationalities, arranged from least to greatest based on the number of nationalities."
        ],
        "record_name": "2760@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT product_type_code , max(product_price) FROM products GROUP BY product_type_code ORDER BY max(product_price) DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "department_store",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_type_code",
            "y_name": "max(product_price)",
            "x_data": [
                [
                    "Hardware",
                    "Clothes"
                ]
            ],
            "y_data": [
                [
                    971.44,
                    939.57
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the maximum price of each product type? Display the information in a bar chart, listing the product types according to their highest prices in descending order.",
            "Bar graph displaying the highest product price for each product type code, presented in descending order based on the maximum product price, please.",
            "Provide a bar chart illustrating the highest price of each product type, sorted in descending order based on the maximum product price, please."
        ],
        "record_name": "1116@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "dog_kennels",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Houston",
                    "Kacey",
                    "Lyric"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Present the count of treatments for each dog belonging to the least common breed in a bar chart.",
            "How many medical treatments does each dog of the least common breed receive? Please provide a bar chart to illustrate this."
        ],
        "record_name": "1155"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Flag , COUNT(Flag) FROM ship WHERE ship_id NOT IN (SELECT ship_id FROM captain WHERE rank = 'Midshipman') GROUP BY Flag ORDER BY Flag ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "ship_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Flag",
            "y_name": "COUNT(Flag)",
            "x_data": [
                [
                    "Malta",
                    "Panama"
                ]
            ],
            "y_data": [
                [
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Flag"
        },
        "nl_queries": [
            "What is the cumulative count of flags of vessels without a captain holding the rank of Midshipman? Represent the result using a bar chart, and present it in ascending order on the X-axis.",
            "Display the overall count of flags from ships without any captain with the rank of Midshipman, using a bar chart arranged in ascending order on the x-axis."
        ],
        "record_name": "2735@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC",
                "binning": "BIN date BY YEAR"
            },
            "VQL": "Visualize BAR SELECT date , SUM(cloud_cover) FROM weather  ORDER BY SUM(cloud_cover) DESC BIN date BY YEAR"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "bike_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date",
            "y_name": "SUM(cloud_cover)",
            "x_data": [
                [
                    "2014",
                    "2015"
                ]
            ],
            "y_data": [
                [
                    32,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN date BY YEAR"
        },
        "nl_queries": [
            "What are the cumulative cloud cover rates for the intervals (grouped by year) that had the highest 5 cloud cover rates? Could you please provide a bar chart for this, with the ranking arranged in descending order on the Y-axis?",
            "For the dates with the top 5 highest cloud cover rates, please categorize the dates into yearly intervals and calculate the cumulative cloud cover for each interval. Please arrange the intervals in descending order based on the total cloud cover.",
            "Plot a bar chart with the date on the x-axis and the total number of cloud cover on the y-axis, and display the y-axis in descending order from high to low, please.",
            "I would like a bar chart displaying the cumulative cloud cover for the dates with the highest five cloud cover rates each year, ranked in descending order on the Y-axis, please."
        ],
        "record_name": "344@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "COUNT(JOB_ID)",
            "x_data": [
                [
                    "FI_ACCOUNT",
                    "FI_MGR"
                ]
            ],
            "y_data": [
                [
                    5,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For all employees in the Finance department, illustrate the comparison of the total count of distinct job IDs using a bar chart.",
            "Provide a grouped bar chart that tabulates and tallies the job IDs for all employees within the Finance department."
        ],
        "record_name": "1962"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_test_taken , COUNT(date_test_taken) FROM Student_Tests_Taken WHERE test_result = \"Pass\" GROUP BY date_test_taken ORDER BY date_test_taken DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "e_learning",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_test_taken",
            "y_name": "COUNT(date_test_taken)",
            "x_data": [
                [
                    "2018-03-25",
                    "2018-03-24",
                    "2018-03-23",
                    "2018-03-21",
                    "2018-03-19"
                ]
            ],
            "y_data": [
                [
                    3,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date_test_taken"
        },
        "nl_queries": [
            "Retrieve the dates of the examinations taken with the result \"Pass\", and represent them using a bar chart. Arrange the names in descending order, please.",
            "A stacked bar chart to determine the quantity of test dates with a \"Pass\" result, with the X-axis displayed in descending order.",
            "Determine the quantity of test dates with a \"Pass\" result, and I would like them to be listed in descending order by the bars.",
            "Which examinations have yielded \"Pass\" outcomes? Provide the dates of these examinations, and represent their count using a bar chart, ordered in descending order based on the X-axis."
        ],
        "record_name": "1284@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT state , AVG(vote_id) FROM votes GROUP BY state ORDER BY state ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "voter_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "state",
            "y_name": "AVG(vote_id)",
            "x_data": [
                [
                    "CA",
                    "NJ\n",
                    "NY"
                ]
            ],
            "y_data": [
                [
                    3,
                    5,
                    1.5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY state"
        },
        "nl_queries": [
            "Enumerate the states of all ballots, calculate the total number of states, and determine the average vote identification number with a bar graph, arranged in ascending order on the x-axis.",
            "In a bar chart, represent the average vote ID on the y-axis, and list the bars in ascending order from lowest to highest."
        ],
        "record_name": "3195@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "SUM(DEPARTMENT_ID)",
            "x_data": [
                [
                    "AC_ACCOUNT",
                    "AC_MGR",
                    "AD_ASST",
                    "AD_PRES",
                    "AD_VP",
                    "FI_ACCOUNT",
                    "FI_MGR",
                    "IT_PROG",
                    "MK_MAN",
                    "MK_REP",
                    "PR_REP",
                    "PU_CLERK",
                    "PU_MAN",
                    "SA_MAN",
                    "SA_REP",
                    "SH_CLERK",
                    "ST_CLERK",
                    "ST_MAN"
                ]
            ],
            "y_data": [
                [
                    110,
                    110,
                    10,
                    90,
                    180,
                    500,
                    100,
                    300,
                    20,
                    20,
                    70,
                    150,
                    30,
                    400,
                    2320,
                    1000,
                    1000,
                    250
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For employees with salaries ranging from 8000 to 12000 and commission not null, or employees whose department number is not equal to 40, visualize a bar chart depicting the distribution of job IDs and the sum of department IDs. Please group the chart by the job ID attribute and sort the bars in ascending order.",
            "For employees whose salary falls between 8000 and 12000 and either have a non-null commission or a department number that is not equal to 40, please provide a comparison of the total department_id for each job_id. Group the data by the job_id attribute and order the x-axis in ascending order.",
            "For employees with a salary between 8000 and 12000, and either a non-null commission or a department number not equal to 40, create a bar chart illustrating the distribution of job_id and the sum of department_id. Please group the data by the attribute job_id and display the bars in ascending order.",
            "For employees whose salary falls within the range of 8000 and 12000 and have a non-null commission or a department number that is not equal to 40, please generate a bar chart illustrating the distribution of job_ids and the sum of department_ids. Group the data by the job_id attribute and display it in ascending order on the bar chart.",
            "For employees with salaries ranging from 8000 to 12000, and either having a non-null commission or not belonging to department 40, display a bar chart representing the distribution of job_id and the sum of department_id. Please group the bars based on the job_id attribute, and order them in ascending order."
        ],
        "record_name": "1606@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , SUM(DEPARTMENT_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' GROUP BY JOB_ID"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "SUM(DEPARTMENT_ID)",
            "x_data": [
                [
                    "AC_MGR",
                    "AD_PRES",
                    "FI_ACCOUNT",
                    "HR_REP",
                    "IT_PROG",
                    "PU_CLERK",
                    "PU_MAN",
                    "SA_MAN",
                    "SA_REP",
                    "SH_CLERK",
                    "ST_CLERK",
                    "ST_MAN"
                ]
            ],
            "y_data": [
                [
                    110,
                    90,
                    400,
                    40,
                    180,
                    90,
                    30,
                    80,
                    1040,
                    450,
                    450,
                    100
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For all employees whose first name contains the letters D or S, present me with the distribution of job IDs and the sum of department IDs, and group them by the attribute job ID in a bar graph.",
            "For all employees whose first name contains the letters D or S, provide me with a comparison of the total sum of department_id across different job_id attributes, and group them by job_id.",
            "For all employees whose first names contain the letters D or S, a bar chart displays the distribution of job IDs and the total sum of department IDs, grouped by the attribute job ID.",
            "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of job_id and the total sum of department_id, grouping the data by the job_id attribute.",
            "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of job_id and the sum of department_id, grouped by the job_id attribute."
        ],
        "record_name": "1566"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.name , T1.category_id FROM film_category AS T1 JOIN category AS T2 ON T1.category_id = T2.category_id ORDER BY T1.category_id DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "sakila_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "category_id",
            "x_data": [
                [
                    "Travel",
                    "Sports",
                    "Sci-Fi",
                    "New",
                    "Music",
                    "Horror",
                    "Games",
                    "Foreign",
                    "Family",
                    "Drama",
                    "Documentary",
                    "Comedy",
                    "Classics",
                    "Children",
                    "Animation",
                    "Action"
                ]
            ],
            "y_data": [
                [
                    16,
                    15,
                    14,
                    13,
                    12,
                    11,
                    10,
                    9,
                    8,
                    7,
                    6,
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present the names and IDs of genres using a bar chart, sorted in descending order by the category ID.",
            "What are the names and IDs of the distinct categories? Please display the bar chart listing the categories in descending order based on the category ID."
        ],
        "record_name": "2690@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC",
                "binning": "BIN date_of_birth BY YEAR"
            },
            "VQL": "Visualize LINE SELECT date_of_birth , COUNT(date_of_birth) FROM Guests WHERE gender_code = \"Male\"  ORDER BY date_of_birth ASC BIN date_of_birth BY YEAR"
        },
        "chart": "Line",
        "hardness": "Hard",
        "db_id": "apartment_rentals",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_of_birth",
            "y_name": "COUNT(date_of_birth)",
            "x_data": [
                [
                    "1983~1985",
                    "1986~1988",
                    "1989~1991",
                    "1992~1994",
                    "1995~1997",
                    "1998~2000",
                    "2001~2003",
                    "2004~2006",
                    "2007~2009",
                    "2010~2012",
                    "2013~2015"
                ]
            ],
            "y_data": [
                [
                    1,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_birth BY YEAR"
        },
        "nl_queries": [
            "Retrieve the count of birthdates for all guests with the gender code \"Male\", and please display it on the x-axis in ascending order.",
            "What is the count of birth dates for all male guests? Please arrange the x-axis in ascending order.",
            "What are the birth dates of all the male guests, and represent them using a line chart, listing the date_of_birth in ascending order.",
            "Retrieve the dates of birth for all guests with the gender code \"Male\" and present them in a line chart, with the x-axis arranged in ascending order.",
            "A line graph depicting the count of birth dates for all male guests, with the X-axis arranged in ascending order, please."
        ],
        "record_name": "80@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Project_Details , T1.Project_ID FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id = T2.project_id ORDER BY T1.Project_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Project_Details",
            "y_name": "Project_ID",
            "x_data": [
                [
                    "Human Resource project",
                    "Graph Database project",
                    "Internet of Things project",
                    "Society Research project"
                ]
            ],
            "y_data": [
                [
                    134,
                    105,
                    35,
                    30
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present the IDs and details associated with projects that have more than two documents in a bar chart, arranged from highest to lowest based on the total number.",
            "Retrieve the IDs and details corresponding to projects where there are more than two documents. Display the data in a bar chart and arrange it in descending order by the total number.",
            "What are the project identification numbers and details for projects that have at least two documents? Please plot them as a bar chart, ordering them on the y-axis from highest to lowest.",
            "Display a bar chart illustrating the project ID and project details for projects with at least two documents, and arrange them in descending order on the y-axis, please.",
            "A bar chart illustrating the project ID and details for projects with a minimum of two documents, and arrange the y-axis in descending order, please."
        ],
        "record_name": "824@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Year , COUNT(Year) FROM exhibition WHERE ticket_price < 15 GROUP BY Theme ORDER BY COUNT(Year) ASC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "theme_gallery",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year",
            "y_name": "COUNT(Year)",
            "x_data": [
                [
                    "2007",
                    "2008",
                    "2009",
                    "2006"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    1,
                    2
                ],
                [
                    0,
                    0,
                    2,
                    2
                ]
            ],
            "classify": [
                "Santa Claus and Rudolph the Red-Nosed Reindeer",
                "Summer"
            ],
            "describe": "GROUP BY Theme, BIN Year BY TIME"
        },
        "nl_queries": [
            "Identify the themes and years for all exhibitions with ticket prices below 15, and present a stacked bar chart that groups by themes, counts years, and displays the X-axis as the Year, arranged in ascending order on the Y-axis.",
            "Identify the themes and years for all exhibitions where ticket prices are below 15, group them based on themes, count the number of years, and plot the data on a graph with the x-axis representing the years arranged in ascending order, and the y-axis representing the count from low to high."
        ],
        "record_name": "2949@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Road ,  All_Home ORDER BY All_Home ASC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "All_Home",
            "y_name": "School_ID",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    4,
                    5,
                    0
                ],
                [
                    0,
                    0,
                    2
                ],
                [
                    1,
                    0,
                    0
                ]
            ],
            "classify": [
                "3\u20135",
                "6\u20132",
                "8\u20130"
            ],
            "describe": "GROUP BY ACC_Road, GROUP BY All_Home"
        },
        "nl_queries": [
            "Obtain the values of All_Home and School_ID, and group them by the attribute ACC_Road. Visualize this data using a bar chart, sorting the bars in ascending order.",
            "Visualize a stacked bar chart illustrating the distribution of All_Home and School_ID, with grouping by the ACC_Road attribute. Please sort the bars in ascending order.",
            "Provide me with a comparison of School_ID across All_Home, and group the attribute ACC_Road by a bar chart, with the names sorted in ascending order, please.",
            "Stacked bar chart comparing school IDs against ACC_Road for all households, and display the bars in ascending order, please.",
            "Provide me with a comparison of the School_ID with respect to the All_Home, grouped by the ACC_Road attribute, and display the data in a bar chart in ascending order.",
            "Create a stacked bar chart representing the distribution of All_Home and School_ID, grouped by the attribute ACC_Road, and arrange the bars in ascending order."
        ],
        "record_name": "3087@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Name , count(*) FROM projects AS T1 JOIN assignedto AS T2 ON T1.code = T2.project WHERE T1.hours > 300 GROUP BY T1.name"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "scientist_1",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "A Silver-Cleaning Battery",
                    "Aerodynamics and Ice Hockey",
                    "Build Your Own Telescope",
                    "Juicy: Extracting Apple Juice with Pectinase"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the quantity of scientists engaged in projects that demand over 300 hours. Represent the data in a pie chart.",
            "Provide a pie chart detailing the names of projects that necessitate over 300 hours, along with the respective number of scientists assigned to each.",
            "A pie chart illustrating the names of projects that necessitate more than 300 hours and the corresponding number of scientists assigned to each.",
            "What are the titles of projects that necessitate more than 300 hours, and the number of scientists assigned to each project?"
        ],
        "record_name": "2725"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC",
                "binning": "BIN Year BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Year , AVG(max(Score)) FROM WINE  ORDER BY AVG(max(Score)) DESC BIN Year BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "wine_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year",
            "y_name": "AVG(max(Score))",
            "x_data": [
                [
                    "Sun",
                    "Mon",
                    "Tue",
                    "Sat",
                    "Thur",
                    "Fri",
                    "Wed"
                ]
            ],
            "y_data": [
                [
                    98,
                    98,
                    95,
                    95,
                    93.5,
                    88,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN Year BY WEEKDAY"
        },
        "nl_queries": [
            "Compare the mean maximum score of wines per annum, categorize the years into weekday intervals, and display on the Y-axis in descending order.",
            "A stacked bar chart representing the yearly average maximum scores of wines, where the years are grouped into weekday intervals, and the bars are arranged in descending order based on the total number.",
            "Compare the mean of the highest score of wines each year, categorize the years into weekly intervals, and create a bar graph, listing Y-axis values in descending order from highest to lowest.",
            "Provide me with a bar chart illustrating the average maximum score for each year, and display it on the Y-axis in descending order, please."
        ],
        "record_name": "3251@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC",
                "binning": "BIN date_of_notes BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT date_of_notes , COUNT(date_of_notes) FROM Assessment_Notes AS T1 JOIN Students AS T2 ON T1.student_id = T2.student_id WHERE T2.first_name = \"Fanny\"  ORDER BY COUNT(date_of_notes) DESC BIN date_of_notes BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "behavior_monitoring",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_of_notes",
            "y_name": "COUNT(date_of_notes)",
            "x_data": [
                [
                    "Tue",
                    "Thur",
                    "Wed",
                    "Sun",
                    "Sat",
                    "Mon",
                    "Fri"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_notes BY WEEKDAY"
        },
        "nl_queries": [
            "A bar graph to determine the quantity of assessment notes dates for students with the first name \"Fanny\", and arrange the Y-axis in descending order.",
            "Retrieve the assessment note dates for students with the first name \"Fanny\", and present them in a bar chart. Sort the bars from highest to lowest on the Y-axis, please.",
            "Retrieve the count of assessment notes dates for students with the first name \"Fanny\", and sort them in descending order by the Y-axis, please."
        ],
        "record_name": "185@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Sex , COUNT(Sex) FROM people GROUP BY Sex"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "candidate_poll",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Sex",
            "y_name": "COUNT(Sex)",
            "x_data": [
                [
                    "F",
                    "M"
                ]
            ],
            "y_data": [
                [
                    2,
                    7
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Sex"
        },
        "nl_queries": [
            "Provide a comparison of the quantity of individuals by their sex, and group the data by the sex attribute using a bar chart.",
            "Generate a bar chart illustrating the distribution of gender and the corresponding quantity, grouped by the attribute \"gender\".",
            "Illustrate the Sex distribution and the corresponding quantities of Sex, with the grouping based on the Sex attribute, using a bar chart.",
            "A stacked bar chart illustrates the distribution and quantity of sexes, grouped by the attribute \"sex\".",
            "Identify the gender and the respective count of each gender, group the data by the attribute \"gender,\" and represent it visually using a bar graph.",
            "Bar chart with the X-axis representing gender and the Y-axis indicating the number of individuals per gender."
        ],
        "record_name": "376"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT customer_last_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_invoices",
        "vis_obj": {
            "chart": "bar",
            "x_name": "customer_last_name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Schaefer",
                    "Leuschke",
                    "Keeling",
                    "Ruecker",
                    "Muller",
                    "Auer",
                    "Boyle"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    4,
                    1,
                    1,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the quantity of accounts for each customer in a bar chart with grouping by the last name of the customer.",
            "Display the quantity of accounts for each customer in a bar chart, with grouping based on the customer's last name."
        ],
        "record_name": "990"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , SUM(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY SUM(MANAGER_ID) DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "SUM(MANAGER_ID)",
            "x_data": [
                [
                    "SA_REP",
                    "ST_CLERK",
                    "SH_CLERK",
                    "PU_CLERK",
                    "FI_ACCOUNT",
                    "IT_PROG",
                    "ST_MAN",
                    "SA_MAN",
                    "AC_ACCOUNT",
                    "MK_REP",
                    "AD_VP",
                    "PR_REP",
                    "FI_MGR",
                    "AD_ASST",
                    "AC_MGR",
                    "PU_MAN",
                    "MK_MAN",
                    "AD_PRES"
                ]
            ],
            "y_data": [
                [
                    4410,
                    2440,
                    2440,
                    570,
                    540,
                    514,
                    500,
                    500,
                    205,
                    201,
                    200,
                    101,
                    101,
                    101,
                    101,
                    100,
                    100,
                    0
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For employees whose salary falls within the range of 8000 and 12000 and who have a non-null commission or a department number that is not equal to 40, provide a comparison of the total sum of manager_ids over the job_id. Group the data by the attribute job_id and display it in a bar chart, with the y-axis arranged in descending order, please.",
            "For employees with salaries ranging from 8000 to 12000, and either a non-null commission or a department number other than 40, retrieve the job_id and the sum of manager_id. Group them by the job_id attribute and visualize the data using a bar chart, with the Y-axis listed in descending order.",
            "For the employees with salaries ranging from 8000 to 12000 and either a non-null commission or a department number not equal to 40, create a bar chart depicting the distribution of job IDs and the sum of manager IDs, grouped by the job ID attribute, and display the results on the y-axis in descending order, please.",
            "For employees with salaries ranging from 8000 to 12000, and either a non-null commission or a department number not equal to 40, please provide information on the distribution of job IDs and the sum of manager IDs. Represent this data in a bar chart, grouping it by job ID, and arrange the y-axis in descending order.",
            "Visualize a bar chart depicting the distribution of job_id and the sum of manager_id for employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or belong to a department other than 40. Please group the data by the job_id attribute, and sort by the Y-axis in descending order."
        ],
        "record_name": "1604@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT role_description , count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Doc_Control_Systems",
        "vis_obj": {
            "chart": "bar",
            "x_name": "role_description",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Editor",
                    "Manager",
                    "Proof Manager",
                    "Photo"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present a bar graph illustrating the distribution of employees across different roles."
        ],
        "record_name": "723"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Name , COUNT(Name) FROM journal_committee AS T1 JOIN editor AS T2 ON T1.Editor_ID = T2.Editor_ID JOIN journal AS T3 ON T1.Journal_ID = T3.Journal_ID WHERE T3.Sales > 3000 GROUP BY Name"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "journal_committee",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Gra\u017cyna Wolszczak",
                    "Kamila Porczyk",
                    "Maria G\u00f3ralczyk",
                    "W\u0142adys\u0142aw Grzywna"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Display the count of editor names who are part of the committee for journals with sales exceeding 3000.",
            "A pie chart illustrating the quantity of editors' names who are part of committees for journals with sales exceeding 3000.",
            "Display the identities of editors who serve on committees of journals with sales exceeding 3000, and represent their count using a pie chart."
        ],
        "record_name": "2059"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , COUNT(name) FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5 GROUP BY name"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "formula_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Honda",
                    "Toyota"
                ]
            ],
            "y_data": [
                [
                    45,
                    95
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Determine the quantity of Japanese builders' names who have previously achieved a score higher than 5 points?",
            "Please provide the specific context or dataset in order for me to assist you accurately in replacing the nouns in the sentences. Additionally, it would be helpful to clarify the meaning of \"constructors\" in this context.",
            "A bar chart illustrating the count of Japanese constructors' names who have accumulated more than 5 points.",
            "A bar chart for determining the count of Japanese constructors' names who have previously earned more than 5 points.",
            "What is the count of the names of Japanese constructors who have accumulated more than 5 points?",
            "Identify the names of Japanese builders who have achieved a score higher than 5 at least once, and represent the count using a bar chart."
        ],
        "record_name": "1435"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Creative Labs",
                    "Fujits",
                    "Hewlett-Packard",
                    "Iomega",
                    "Sony",
                    "Winchester"
                ]
            ],
            "y_data": [
                [
                    3,
                    1,
                    3,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For the records pertaining to the products and their respective manufacturers, please present a bar chart illustrating the distribution and quantity of names. Group the data based on the attribute name.",
            "For the data pertaining to the products and their respective manufacturers, provide a comparison of the quantity of names against the name, and group them based on the attribute name.",
            "For the records pertaining to products and their respective manufacturers, retrieve the name of each product and the count of occurrences for each name. Group the results by the attribute \"name\" and visualize them using a bar chart.",
            "For the records pertaining to the products and their respective manufacturers, create a bar chart illustrating the distribution of names and the quantity of each name, grouped by the attribute name.",
            "For the records pertaining to products and their respective manufacturers, create a bar chart illustrating the distribution of product names and the quantity of each name, grouped by the attribute \"name\"."
        ],
        "record_name": "2204"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT School_ID , ACC_Percent FROM basketball_match GROUP BY Team_Name"
        },
        "chart": "Grouping Scatter",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "School_ID",
            "y_name": "ACC_Percent",
            "x_data": [
                [
                    4
                ],
                [
                    2
                ],
                [
                    1
                ],
                [
                    5
                ]
            ],
            "y_data": [
                [
                    0.625
                ],
                [
                    0.813
                ],
                [
                    0.875
                ],
                [
                    0.563
                ]
            ],
            "classify": [
                "Clemson",
                "Duke",
                "North Carolina",
                "Virginia Tech"
            ],
            "describe": "GROUP BY Team_Name"
        },
        "nl_queries": [
            "What is the association between School_ID and ACC_Percent, with grouping based on the attribute Team_Name?",
            "A scatter plot illustrates the relationship between School_ID and ACC_Percent, while grouping the data by the attribute Team_Name.",
            "Present the correlation between School_ID and ACC_Percent, and organize them by the attribute Team_Name in a scatter plot.",
            "Create a scatter plot depicting the relationship between School_ID and ACC_Percent, and group the data according to the attribute Team_Name.",
            "Provide a scatter chart illustrating the relationship between School_ID and ACC_Percent, with the grouping done based on the attribute Team_Name.",
            "Display the correlation between school ID and acceptance percentage for each Team Name using a scatter chart."
        ],
        "record_name": "3163"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5",
                "binning": "BIN birthday BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT birthday , COUNT(birthday) FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id  ORDER BY potential DESC LIMIT 5 BIN birthday BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "soccer_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "birthday",
            "y_name": "COUNT(birthday)",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2,
                    0,
                    1,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN birthday BY WEEKDAY"
        },
        "nl_queries": [
            "For the five players with the highest potential, categorize their birthdays into intervals of weekdays and present the distribution of their birthdays.",
            "For the five players with the highest potential, group their birthdays into weekday intervals and display the count using a bar chart."
        ],
        "record_name": "2780"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Document_Description , COUNT(Document_Description) FROM Documents GROUP BY Document_Description ORDER BY COUNT(Document_Description) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Doc_Template_Mgt",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Document_Description",
            "y_name": "COUNT(Document_Description)",
            "x_data": [
                [
                    "y",
                    "w",
                    "h",
                    "z",
                    "r",
                    "n",
                    "k",
                    "f",
                    "b",
                    ""
                ]
            ],
            "y_data": [
                [
                    4,
                    2,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Document_Description"
        },
        "nl_queries": [
            "How many documents are there for each description? Please display a bar chart, sorted in descending order based on the number of document descriptions.",
            "Present the quantity of documents for each description of document in a bar graph, with the sorting in descending order based on the number of document descriptions.",
            "Bar chart with the X-axis representing document descriptions and the Y-axis representing the count of document descriptions. Please arrange the total number in descending order."
        ],
        "record_name": "763@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tvshow",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Package_Option",
            "y_name": "COUNT(Package_Option)",
            "x_data": [
                [
                    "Sky Famiglia + Sky HD",
                    "no ( FTV )",
                    "Sky Famiglia"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Package_Option"
        },
        "nl_queries": [
            "A bar chart illustrating the quantity of package options for all TV channels that do not broadcast any cartoons directed by Ben Jones, arranged in ascending order on the Y-axis, please.",
            "Find the package options of TV channels that do not include any cartoons directed by Ben Jones, and represent them using a bar chart, ranked in ascending order based on the total number.",
            "What is the count of package choices for all TV channels that do not broadcast any cartoons directed by Ben Jones, and arrange them in ascending order based on the total number, please.",
            "What are the available package choices for all TV channels that do not broadcast any cartoons directed by Ben Jones? Count them using a bar graph and rank them in ascending order based on the total number."
        ],
        "record_name": "3064@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM people WHERE age < (SELECT avg(age) FROM people) GROUP BY Country"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "wedding",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(Country)",
            "x_data": [
                [
                    "Australia",
                    "United States"
                ]
            ],
            "y_data": [
                [
                    1,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Country"
        },
        "nl_queries": [
            "Display the count of countries for all individuals whose age is less than the mean, please.",
            "A bar graph depicting the number of countries for individuals whose age is below the average."
        ],
        "record_name": "3214"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match ORDER BY ACC_Regular_Season ASC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ACC_Regular_Season",
            "y_name": "All_Games_Percent",
            "x_data": [
                [
                    "10\u20136",
                    "13\u20133",
                    "14\u20132",
                    "9\u20137"
                ]
            ],
            "y_data": [
                [
                    0.706,
                    0.8240000000000001,
                    0.946,
                    0.6
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A bar chart illustrates the distribution of ACC_Regular_Season and All_Games_Percent, with the bars displayed in ascending order from low to high.",
            "Display the distribution of ACC_Regular_Season and All_Games_Percent in a bar graph, and please arrange the x-axis in ascending order.",
            "Generate a bar chart illustrating the percentage of all games across the ACC regular season, and please list ACC_Regular_Season in ascending order.",
            "Provide a comparison of the All_Games_Percent during the ACC_Regular_Season, and present it using bars arranged in ascending order from low to high.",
            "Provide a bar chart comparing the All_Games_Percent across the ACC_Regular_Season, with the X-axis arranged in ascending order from lowest to highest.",
            "Locate ACC_Regular_Season and All_Games_Percent, and represent them using a bar graph with the X-axis arranged in ascending order."
        ],
        "record_name": "3137@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT cName , min(enr) FROM college GROUP BY state ORDER BY cName ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "soccer_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "cName",
            "y_name": "min(enr)",
            "x_data": [
                [
                    "ASU",
                    "FSU",
                    "LSU",
                    "OU"
                ]
            ],
            "y_data": [
                [
                    12000,
                    19000,
                    18000,
                    22000
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Bar graph to illustrate the minimum enrollment from various country names, with the X-axis displayed in ascending order, please.",
            "Compare the minimum enrollment of schools in each state using a bar graph, and please display them in ascending order on the X-axis.",
            "What is the name of the school with the lowest enrollment in each state? I would like to list the x-axis in ascending order.",
            "Provide a bar chart depicting the name of the school with the lowest enrollment in each state, arranged in ascending order on the X-axis, please."
        ],
        "record_name": "2798@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Rank , count(Rank) FROM Faculty GROUP BY Rank ORDER BY Rank DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "activity_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Rank",
            "y_name": "count(Rank)",
            "x_data": [
                [
                    "Professor",
                    "Instructor",
                    "AsstProf",
                    "AssocProf"
                ]
            ],
            "y_data": [
                [
                    27,
                    8,
                    15,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Rank"
        },
        "nl_queries": [
            "How many faculty members are there for each rank? Please display the information in a bar chart, with the ranks arranged in descending order on the X-axis, please.",
            "Display the quantity of faculty members for each level of rank in a bar graph, and list the X-axis in descending order, please.",
            "Bar chart illustrating the total count for each rank, and please arrange the bars in descending order from highest to lowest."
        ],
        "record_name": "17@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Year_Join , COUNT(Year_Join) FROM artist WHERE country != 'United States' GROUP BY Name ORDER BY COUNT(Year_Join) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "theme_gallery",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year_Join",
            "y_name": "COUNT(Year_Join)",
            "x_data": [
                [
                    "1994",
                    "1998",
                    "1997",
                    "1996",
                    "1995"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    0,
                    0,
                    0
                ],
                [
                    2,
                    2,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Nick Price",
                "Vijay Singh"
            ],
            "describe": "GROUP BY Name, BIN Year_Join BY TIME"
        },
        "nl_queries": [
            "For names of artists who are not from the United States, how many names are there in each year? Please sort the y-axis in descending order.",
            "For non-United States artist names, please present a stacked chart where the x-axis represents the Year_Join and the y-axis groups the names. Arrange the chart in descending order based on the total count."
        ],
        "record_name": "2936@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT booking_status_code , COUNT(*) FROM Apartment_Bookings GROUP BY booking_status_code"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "apartment_rentals",
        "vis_obj": {
            "chart": "pie",
            "x_name": "booking_status_code",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Confirmed",
                    "Provisional"
                ]
            ],
            "y_data": [
                [
                    7,
                    8
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present the status code for bookings and the associated quantity of bookings using a pie chart.",
            "Display the booking status code and the corresponding quantity of bookings. Represent this information using a pie chart.",
            "Pie chart depicting the distribution of bookings among different booking statuses. Provide a list of the booking status codes and the corresponding number of bookings for each status.",
            "Create a pie chart to illustrate the distribution of bookings among different booking status categories. Provide the booking status code and the corresponding number of bookings for each category.",
            "How many bookings are there for each booking status? Represent the booking status code and the corresponding number of bookings in a pie chart.",
            "How many bookings are there for each booking status? Provide the booking status code and the corresponding number of bookings. Display the information in a pie chart.",
            "Provide me with a pie chart illustrating the aggregate count of bookings based on various status codes."
        ],
        "record_name": "73"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Affiliation",
            "y_name": "sum(Enrollment)",
            "x_data": [
                [
                    "Private/Methodist",
                    "Public"
                ]
            ],
            "y_data": [
                [
                    2100,
                    43092
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Determine the cumulative count of students enrolled in colleges established after the year 1850 for each type of affiliation. Display the results in a bar chart.",
            "A bar graph illustrating the various affiliations and the total enrollment of schools established after 1850 for each enrollment category.",
            "Present a bar graph illustrating the various affiliations, and the total enrollment of schools established after 1850 for each enrollment category.",
            "What are the distinct affiliations, and what is the total number of schools established after 1850 for each enrollment category? Represent the data using a bar chart."
        ],
        "record_name": "3191"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Founder , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Founder ORDER BY T1.Code DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Founder",
            "y_name": "SUM(Code)",
            "x_data": [
                [
                    "James",
                    "Owen",
                    "Robert",
                    "Andy",
                    "Mary",
                    "John"
                ]
            ],
            "y_data": [
                [
                    28,
                    23,
                    6,
                    5,
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Founder"
        },
        "nl_queries": [
            "Generate a bar chart presenting the distribution of founders and the sum of codes for records pertaining to products and their respective manufacturers. Group the chart by the founder attribute and arrange the Y-axis in descending order, please.",
            "For the records of products and their respective manufacturers, a bar chart illustrates the distribution of founders and the total number of codes, grouped by the founder attribute. I would like the Y-axis to be sorted in descending order, please.",
            "For the records of products and their respective manufacturers, create a bar chart depicting the distribution of founders and the total code sum. Group the data by the founder attribute and display the total number of code in descending order from highest to lowest.",
            "For the records pertaining to the products and their respective manufacturers, provide a comparison of the total code sum across the founders. Group the founder attribute and present it in a bar chart, with the Y-axis displayed in descending order.",
            "For the entries related to the products and their respective manufacturers, please present the distribution of founders and the total code sum. Group the data by the founder attribute and display it in a bar chart, with the Y-axis arranged in descending order."
        ],
        "record_name": "2227@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Openning_year , COUNT(Openning_year) FROM cinema",
                "binning": "BIN Openning_year BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Openning_year , COUNT(Openning_year) FROM cinema BIN Openning_year BY YEAR"
        },
        "chart": "Line",
        "hardness": "Easy",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "line",
            "x_name": "Openning_year",
            "y_name": "COUNT(Openning_year)",
            "x_data": [
                [
                    "2009",
                    "2010",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    3,
                    1,
                    1,
                    0,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN Openning_year BY YEAR"
        },
        "nl_queries": [
            "Display the number of cinemas operating per year in a line graph.",
            "Plot the opening year against the frequency of opening years as a trend line."
        ],
        "record_name": "466"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Title , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Title ORDER BY Title DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Title",
            "y_name": "AVG(Price)",
            "x_data": [
                [
                    "The Case: Off the Record",
                    "The Case of the Smart Dummy",
                    "The Case of the Piggy Banker",
                    "The Case of the Mystery Weekend",
                    "The Case of the Bermuda Triangle"
                ]
            ],
            "y_data": [
                [
                    8,
                    12,
                    12,
                    12,
                    9
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Title"
        },
        "nl_queries": [
            "Display the mean price of each movie in a bar graph, with the names arranged in descending order."
        ],
        "record_name": "451@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Language , count(*) FROM TV_Channel GROUP BY LANGUAGE"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "tvshow",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Language",
            "y_name": "count(*)",
            "x_data": [
                [
                    "English",
                    "Italian"
                ]
            ],
            "y_data": [
                [
                    3,
                    12
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display each language and the count of TV channels utilizing it in a bar graph, please.",
            "Enumerate each language and the corresponding count of TV channels utilizing it. Represent this information through a bar chart visualization.",
            "For every language, enumerate the count of TV channels that utilize it. Represent them visually as a bar graph.",
            "Bar chart illustrating the aggregate count from each language."
        ],
        "record_name": "3058"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Rank , count(*) FROM Faculty GROUP BY Sex ,  Rank ORDER BY count(*) DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "activity_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Rank",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Professor",
                    "AsstProf",
                    "AssocProf",
                    "Instructor"
                ]
            ],
            "y_data": [
                [
                    0,
                    3,
                    3,
                    1
                ],
                [
                    27,
                    12,
                    7,
                    5
                ]
            ],
            "classify": [
                "F",
                "M"
            ],
            "describe": "GROUP BY Sex, GROUP BY Rank"
        },
        "nl_queries": [
            "Stacked bar chart displaying the total count for each gender within each rank, arranged in descending order based on the total count.",
            "Display a bar chart illustrating the total number of male and female faculty members for each rank, arranged in descending order based on the total count.",
            "How many faculty members do we have for each level and gender? Represent the data as a bar chart, with the rank arranged in descending order on the y-axis, please."
        ],
        "record_name": "11@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM Student WHERE StuID NOT IN (SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy = T2.Allergy WHERE T2.allergytype = \"food\") GROUP BY LName"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "allergy_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "LName",
            "y_name": "COUNT(LName)",
            "x_data": [
                [
                    "Adams",
                    "Andreo",
                    "Brody",
                    "Brown",
                    "Cheng",
                    "Davis",
                    "Epp",
                    "Goldman",
                    "Jones",
                    "Nelson",
                    "Pang",
                    "Prater",
                    "Rugh",
                    "Schmidt",
                    "Simms",
                    "Smith",
                    "Tai",
                    "Thornton",
                    "Wilson"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY LName"
        },
        "nl_queries": [
            "Enumerate the surnames of students who do not possess any allergies to specific food types and represent the count of such students in a bar chart.",
            "What is the surname of each student who does not have any food allergies? Represent the count using a bar chart."
        ],
        "record_name": "49"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Is_full_time , SUM(Shop_ID) FROM hiring GROUP BY Is_full_time ORDER BY Is_full_time DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "employee_hire_evaluation",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Is_full_time",
            "y_name": "SUM(Shop_ID)",
            "x_data": [
                [
                    "T",
                    "F"
                ]
            ],
            "y_data": [
                [
                    17,
                    10
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Is_full_time"
        },
        "nl_queries": [
            "Create a stacked bar chart illustrating the distribution of Is_full_time and the sum of Shop_ID, grouped by the Is_full_time attribute, and please arrange the bars in descending order on the x-axis.",
            "Display the distribution of \"Is_full_time\" and the total sum of \"Shop_ID\" grouped by the attribute \"Is_full_time\" in a bar chart, listed in descending order on the x-axis, please.",
            "Create a grouped bar chart illustrating the distribution of \"Is_full_time\" and the sum of \"Shop_ID,\" with attribute \"Is_full_time\" as the grouping factor. Please arrange the bars in descending order along the x-axis.",
            "Provide a bar chart illustrating the distribution of Is_full_time and the sum of Shop_ID, grouped by the Is_full_time attribute, and please rank it in descending order by the X-axis.",
            "A stacked bar chart displays the distribution of Is_full_time and the total sum of Shop_ID, grouped by the Is_full_time attribute. I would like the X-axis to be listed in descending order from high to low.",
            "Bar graph illustrating the total number of shop IDs for each full-time status, and I would like to list them in descending order on the X-axis."
        ],
        "record_name": "1345@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT HIRE_DATE , DEPARTMENT_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)"
        },
        "chart": "Line",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "line",
            "x_name": "HIRE_DATE",
            "y_name": "DEPARTMENT_ID",
            "x_data": [
                [
                    "1987-09-03",
                    "1987-09-26",
                    "1987-09-27",
                    "1987-09-28",
                    "1987-09-29",
                    "1987-09-30",
                    "1987-10-01"
                ]
            ],
            "y_data": [
                [
                    0,
                    20,
                    20,
                    40,
                    70,
                    110,
                    110
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For employees who are not employed in departments where the managers have IDs between 100 and 200, create a line chart that illustrates the trend of department IDs over hire dates.",
            "For employees who are not employed in departments with managers whose IDs fall between 100 and 200, please depict the trend of department IDs over hire dates using a line chart.",
            "For employees who are not assigned to departments managed by managers with IDs between 100 and 200, generate a line chart illustrating the fluctuations in department ID over hire date.",
            "For employees who are not employed in departments where the manager's ID falls between 100 and 200, a line chart illustrates the progression of the department ID over the hire date.",
            "Provide me with the trend of the department_id over the hire_date for employees who are not in departments with managers whose IDs range from 100 to 200.",
            "For employees who are not employed in departments where the manager's ID falls between 100 and 200, a line graph illustrates the fluctuation in department IDs over hire dates."
        ],
        "record_name": "1654"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT dorm_name , avg(T1.age) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid = T2.stuid JOIN dorm AS T3 ON T3.dormid = T2.dormid GROUP BY T3.dorm_name ORDER BY dorm_name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "dorm_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "dorm_name",
            "y_name": "avg(T1.age)",
            "x_data": [
                [
                    "University Hovels",
                    "Smith Hall",
                    "Grad Student Asylum",
                    "Fawlty Towers",
                    "Dorm-plex 2000",
                    "Bud Jones Hall",
                    "Anonymous Donor Hall"
                ]
            ],
            "y_data": [
                [
                    18,
                    20.166666666666668,
                    18,
                    19.777777777777782,
                    19.6,
                    20,
                    19.666666666666668
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the average age for each residence hall, and what are the names of each residence hall? Please plot them as a bar chart, and can you arrange them in descending order by the dorm_name?",
            "Calculate the mean age of students residing in each dormitory and display the dormitory names and corresponding averages as a bar chart. Please sort the bars in descending order from highest to lowest.",
            "Present a bar chart depicting the average age for each dormitory, accompanied by the respective names of each dormitory. Kindly arrange the bars in descending order, from highest to lowest.",
            "What is the mean age for each residence hall, and what are the designations of each residence hall, arranged in descending order on the x-axis."
        ],
        "record_name": "1222@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Publication_Date , COUNT(Publication_Date) FROM publication GROUP BY Publication_Date ORDER BY COUNT(Publication_Date) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "book_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Publication_Date",
            "y_name": "COUNT(Publication_Date)",
            "x_data": [
                [
                    "April 2007",
                    "June 2006",
                    "March 2007",
                    "March 2008",
                    "October 2005",
                    "August 2008"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Publication_Date"
        },
        "nl_queries": [
            "A bar chart displaying the quantity of release dates for books, and arrange them in ascending order on the Y-axis, please.",
            "Bar chart with the x-axis representing publication dates and the y-axis representing the number of publications, arranged in ascending order on the y-axis, please."
        ],
        "record_name": "365@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM race GROUP BY Class ORDER BY COUNT(Class) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "race_track",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Class",
            "y_name": "COUNT(Class)",
            "x_data": [
                [
                    "GT",
                    "DP/GT"
                ]
            ],
            "y_data": [
                [
                    2,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Class"
        },
        "nl_queries": [
            "Generate a bar chart illustrating the quantity of classes across different class categories, and organize the y-axis in ascending order from lowest to highest, please.",
            "Present the distribution of individuals in each class across all races using a bar graph, and organize the bars in ascending order based on the number of classes."
        ],
        "record_name": "2643@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Package_Option , COUNT(Package_Option) FROM TV_Channel WHERE id NOT IN (SELECT channel FROM cartoon WHERE directed_by = 'Ben Jones') GROUP BY Package_Option ORDER BY COUNT(Package_Option) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tvshow",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Package_Option",
            "y_name": "COUNT(Package_Option)",
            "x_data": [
                [
                    "Sky Famiglia",
                    "no ( FTV )",
                    "Sky Famiglia + Sky HD"
                ]
            ],
            "y_data": [
                [
                    8,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Package_Option"
        },
        "nl_queries": [
            "Find the subscription package options of TV channels that do not include any cartoons directed by Ben Jones, and represent them using a bar chart, listing them in descending order on the y-axis.",
            "What is the count of package choices for all TV channels that do not broadcast any cartoons directed by Ben Jones? Please present the total number in descending order.",
            "A bar chart illustrating the quantity of package options for all TV channels excluding those that do not broadcast any cartoons directed by Ben Jones, arranged in descending order based on the total count.",
            "What are the package choices for all TV channels that do not air any cartoons directed by Ben Jones, and display them in a bar chart, ranking the number of package options in descending order."
        ],
        "record_name": "3064@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT job , avg(age) FROM Person GROUP BY job",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT job , avg(age) FROM Person GROUP BY job"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "network_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "job",
            "y_name": "avg(age)",
            "x_data": [
                [
                    "doctor",
                    "engineer",
                    "student"
                ]
            ],
            "y_data": [
                [
                    45,
                    35,
                    25.5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a bar chart illustrating the average age for various job titles.",
            "A bar chart depicting the average age for various job titles.",
            "What is the mean age for different job titles? Represent this information through a bar chart.",
            "Provide a histogram illustrating the average age of individuals in each occupation.",
            "Present a bar graph illustrating the average age of individuals in each occupation.",
            "Display the average age of individuals for each occupation in a bar chart, please.",
            "Bar chart with the x-axis representing occupations and the y-axis displaying the average age."
        ],
        "record_name": "2459"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT director , min(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID GROUP BY director ORDER BY min(T1.stars) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "movie_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "director",
            "y_name": "min(T1.stars)",
            "x_data": [
                [
                    "Robert Wise",
                    "Steven Spielberg",
                    "Victor Fleming",
                    "James Cameron",
                    ""
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    2,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Please create a bar chart where the X-axis represents the director and the Y-axis represents their lowest rating among all movies. Please arrange the bars in ascending order based on the Y-axis values.",
            "Display the director and their minimum rating among all movies in a bar chart, arranged in ascending order based on the number of stars, please.",
            "Compare the minimum rating among all films by each director using a bar graph, and could you list the Y-axis in ascending order, please?"
        ],
        "record_name": "2387@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , AVG(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "AVG(EMPLOYEE_ID)",
            "x_data": [
                [
                    "ST_MAN",
                    "ST_CLERK",
                    "SH_CLERK",
                    "SA_REP",
                    "SA_MAN",
                    "PU_MAN",
                    "PU_CLERK",
                    "PR_REP",
                    "MK_REP",
                    "MK_MAN",
                    "IT_PROG",
                    "FI_MGR",
                    "FI_ACCOUNT",
                    "AD_VP",
                    "AD_PRES",
                    "AD_ASST",
                    "AC_MGR",
                    "AC_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    122,
                    134.5,
                    189.5,
                    164.5,
                    147,
                    114,
                    117,
                    204,
                    202,
                    201,
                    105,
                    108,
                    111,
                    101.5,
                    100,
                    200,
                    205,
                    206
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For employees whose salary falls between 8000 and 12000, and have a non-null commission or a department number other than 40, find the job_id and the average employee_id. Group them by the job_id attribute, and represent them visually in a bar chart. Could you display the X-axis in descending order?",
            "For employees with salaries ranging from 8000 to 12000, who either have a non-null commission or are not in department number 40, create a bar chart depicting the distribution of job IDs and the average employee ID, grouped by the job ID attribute. Please display the job IDs on the X-axis in descending order.",
            "For employees whose salary falls between 8000 and 12000, and either have a non-null commission or are not in department number 40, generate a bar chart depicting the distribution of job ID and the average employee ID. Group the data by the job ID attribute and list it on the X-axis in descending order.",
            "For the employees whose salary falls between 8000 and 12000, and either have a non-null commission or belong to a department other than 40, create a bar chart illustrating the distribution of job_ids along with the average employee_id, grouping them by the job_id attribute. Display the X-axis in descending order, please.",
            "For employees with a salary ranging from 8000 to 12000, and a non-null commission or a department number that is not equal to 40, please provide a bar chart illustrating the distribution of job_ids and the average employee_ids, grouped by job_id attribute. Please rank the X-axis in descending order."
        ],
        "record_name": "1601@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Type , count(*) FROM store GROUP BY TYPE ORDER BY Type DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "store_product",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Type",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Village Store",
                    "City Mall"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find all categories of stores and their respective quantities, and visualize them using a bar chart. Could you please sort the X-axis in descending order?",
            "In the bar chart, the X-axis represents the type of x, and the Y-axis represents the total number. Please order the names in descending order.",
            "Plot the number of stores for each store type in a bar chart, and display them in descending order on the X-axis."
        ],
        "record_name": "2862@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT LName , COUNT(LName) FROM STUDENT WHERE Sex = \"F\" GROUP BY LName ORDER BY Age DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_3",
        "vis_obj": {
            "chart": "bar",
            "x_name": "LName",
            "y_name": "COUNT(LName)",
            "x_data": [
                [
                    "Apap",
                    "Cheng",
                    "Jones",
                    "Kim",
                    "Lee",
                    "Nelson",
                    "Prater",
                    "Schmidt",
                    "Smith"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY LName"
        },
        "nl_queries": [
            "A bar graph illustrating the count of last names of female students, organized in descending order based on their age, please.",
            "Retrieve the count of female (sex=F) students' last names in descending order of age.",
            "Identify the surnames of female (sex=F) students, sorted in descending order by age, and represent the count using a bar chart.",
            "What are the surnames of female students, sorted by age in descending order, and represent them using a bar chart to count their occurrences.",
            "A stacked bar chart to determine the count of last names of female (sex is F) students, arranged in descending order by age.",
            "What is the count of surnames of female students, arranged in descending order by age?"
        ],
        "record_name": "659"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId ORDER BY T1.SupportRepId DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "chinook_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "FirstName",
            "y_name": "SupportRepId",
            "x_data": [
                [
                    "Luis",
                    "Diego",
                    "Puja"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a bar chart depicting the first names and support representative IDs of employees who serve 10 or more customers, and list the total numbers in descending order, please.",
            "Display a bar graph depicting the first names and support rep IDs of employees who have served 10 or more customers. Please arrange them on the Y-axis in descending order from highest to lowest.",
            "What are the given names and support representative IDs for employees assisting 10 or more clients, and could you please provide a list in descending order of the total number?"
        ],
        "record_name": "437@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY COUNT(services) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "station_weather",
        "vis_obj": {
            "chart": "bar",
            "x_name": "services",
            "y_name": "COUNT(services)",
            "x_data": [
                [
                    "London Overground",
                    "London Overground and London Midland",
                    "c2c",
                    "Metropolitan line",
                    "Greater Anglia",
                    "Metropolitan line and Chiltern Railways"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY services"
        },
        "nl_queries": [
            "Enumerate the quantity of services by service type, and present the Y-axis in ascending order from least to greatest, please.",
            "Provide me with a bar graph illustrating the quantity of services for each service category, with the y-axis arranged in ascending order from least to greatest, please.",
            "Compare the quantity of services categorized by service type using a bar chart, with the Y-axis arranged in ascending order, please.",
            "A bar graph illustrating the types of services and the corresponding quantity of services provided by all stations, arranged in ascending order on the Y-axis, please."
        ],
        "record_name": "2831@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(EMPLOYEE_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)  ORDER BY AVG(EMPLOYEE_ID) ASC BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "AVG(EMPLOYEE_ID)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    107.33333333333333,
                    129.75862068965517,
                    160,
                    190.2962962962963,
                    206
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "Create a bar graph illustrating the distribution of hire dates and the average bin of employee IDs based on hire date for employees who have no prior job history. Sort the total number in ascending order from low to high.",
            "For employees who have no prior job experience, retrieve their hire dates and calculate the average of employee ID groups based on their hire dates over time. Visualize this data with a bar chart, with the y-axis displayed in ascending order.",
            "For employees who had no previous employment, create a bar chart depicting the distribution of hire dates and the average number of employee IDs binned by hire date over time. List the values on the Y-axis in ascending order from lowest to highest.",
            "For employees who have no prior job experience, create a bar chart that illustrates the distribution of hire dates and the average of employee ID bins based on hire dates over time. Please arrange the Y-axis in ascending order from lowest to highest.",
            "For employees who have no prior job history, present the distribution of hire dates and the average of employee IDs binned by hire date over time in a bar graph, sorted from lowest to highest on the Y-axis, please."
        ],
        "record_name": "1713@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Name , COUNT(T2.Name) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Name ORDER BY COUNT(T2.Name) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Fujits",
                    "Iomega",
                    "Sony",
                    "Winchester",
                    "Creative Labs",
                    "Hewlett-Packard"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "For the records pertaining to the products and their respective manufacturers, please present the distribution and quantity of product names using a bar chart. Group the data by the attribute name and sort the y-axis in ascending order from least to greatest.",
            "For the data pertaining to the products and their respective manufacturers, provide a comparison of the quantity of names against the names themselves. Group the data by attribute name and rank the Y-axis in ascending order.",
            "For the records pertaining to products and their respective manufacturers, create a bar chart illustrating the distribution and quantity of product names. Please group the data by the name attribute and rank the y-axis from lowest to highest.",
            "For the records of products and their respective manufacturers, create a bar chart illustrating the distribution of names and the quantity of names. Group them according to the attribute name, and could you please order them in ascending order by the y-axis?",
            "For the records pertaining to products and their respective manufacturers, retrieve the names of the products and the count of occurrences for each name. Group the data by the attribute name and present it visually using a bar chart. Please ensure that the bars are ranked in ascending order on the y-axis."
        ],
        "record_name": "2204@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , AVG(grade) FROM Highschooler GROUP BY name ORDER BY name DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "network_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "AVG(grade)",
            "x_data": [
                [
                    "Tiffany",
                    "Logan",
                    "Kyle",
                    "Kris",
                    "Jordan",
                    "John",
                    "Jessica",
                    "Haley",
                    "Gabriel",
                    "Cassandra",
                    "Brittany",
                    "Austin",
                    "Andrew",
                    "Alexis"
                ]
            ],
            "y_data": [
                [
                    9,
                    12,
                    12,
                    10,
                    10.5,
                    12,
                    11,
                    10,
                    10,
                    9,
                    10,
                    11,
                    10,
                    11
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Display the names and average grades of each high school student using a bar chart, and I would like the bars to be ranked in descending order.",
            "Display the names and average grades of each high school student, and arrange them in descending order based on the bar.",
            "Bar chart illustrating the average grade by different titles, and can you arrange them in descending order according to the names, please?",
            "Create a bar graph representing the names and average grades of each high school student, and arrange the bars in descending order for ranking.",
            "What are the identities and mean scores for each secondary school student? Plot them as a bar graph, arranging them in descending order on the X-axis, please.",
            "Present a bar chart representing the names of high school students and their respective average grades, and sort the X-axis in descending order, please."
        ],
        "record_name": "2453@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Name , sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID = T2.Phone_ID GROUP BY T2.Name"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "phone_market",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Name",
            "y_name": "sum(T1.Num_of_stock)",
            "x_data": [
                [
                    "IPhone 5s",
                    "IPhone 6s",
                    "IPhone 7",
                    "IPhone X"
                ]
            ],
            "y_data": [
                [
                    2914,
                    4324,
                    874,
                    2540
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For every phone, display its names and the overall quantity of stocks."
        ],
        "record_name": "2574"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid = T2.uid ORDER BY partitionid ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "twitter_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "partitionid",
            "x_data": [
                [
                    "Tyler Swift",
                    "Black Widow\n"
                ]
            ],
            "y_data": [
                [
                    10,
                    23
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the names and partition IDs of users who have tweeted fewer than twice. Display the data in a bar chart and sort it in ascending order based on the total number."
        ],
        "record_name": "3066@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nominee , COUNT(Nominee) FROM musical WHERE Award = \"Tony Award\" OR Award = \"Cleavant Derricks\" GROUP BY Nominee ORDER BY Nominee DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "musical",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nominee",
            "y_name": "COUNT(Nominee)",
            "x_data": [
                [
                    "Cleavant Derricks",
                    "Bob Fosse"
                ]
            ],
            "y_data": [
                [
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nominee"
        },
        "nl_queries": [
            "Show the quantity of musical nominees for the \"Bob Fosse\" or \"Cleavant Derricks\" awards, and sort the x-axis in descending order, please.",
            "A bar chart displaying the quantity of musical nominees with the \"Bob Fosse\" or \"Cleavant Derricks\" award, with the x-axis arranged in descending order.",
            "Display a bar chart depicting the count of musical nominees for the \"Bob Fosse\" and \"Cleavant Derricks\" awards, and kindly list them in descending order by the X-axis, please.",
            "Who are the individuals nominated for either the Bob Fosse or Cleavant Derricks awards, and represent their count with a bar chart, with the x-axis displayed in descending order."
        ],
        "record_name": "2446@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY AVG(MANAGER_ID) ASC BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "AVG(MANAGER_ID)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Sept",
                    "Aug",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    96.78571428571429,
                    116.45161290322581,
                    125.51724137931035,
                    139.16129032258064,
                    205
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For the employees whose salary falls within the range of 8000 to 12000 and have a non-null commission or do not belong to department number 40, please present a bar chart that illustrates the distribution of hire dates and the average of manager IDs grouped by hire date. Arrange the chart from lowest to highest on the y-axis.",
            "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or do not belong to department number 40, please create a bar chart displaying the distribution of hire_date. Bin the hire_date by time intervals and calculate the average of manager_id within each bin. The bars should be ordered in ascending order based on the Y-axis.",
            "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or do not have a department number of 40, please provide a comparison of the average manager_id over the hire_date bins. Arrange the data on the y-axis in ascending order.",
            "For employees whose salary falls between 8000 and 12000 and have a non-null commission or a department number other than 40, create a bar chart illustrating the distribution of hire dates and the average of manager IDs grouped by hire date over time, ordered in ascending order by the Y-axis.",
            "For the employees whose salary falls within the range of 8000 and 12000, and whose commission is not null or department number is not equal to 40, provide a comparison of the average manager_id by the hire_date bin over time using a bar chart. Please list the results in ascending order on the y-axis."
        ],
        "record_name": "1587@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email'",
                "binning": "BIN active_from_date BY YEAR"
            },
            "VQL": "Visualize BAR SELECT active_from_date , COUNT(active_from_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id = t2.customer_id WHERE t2.channel_code = 'Email' BIN active_from_date BY YEAR"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "customers_and_addresses",
        "vis_obj": {
            "chart": "bar",
            "x_name": "active_from_date",
            "y_name": "COUNT(active_from_date)",
            "x_data": [
                [
                    "2017",
                    "2018"
                ]
            ],
            "y_data": [
                [
                    3,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN active_from_date BY YEAR"
        },
        "nl_queries": [
            "Find the count of customers who utilize email as their contact channel for each year. Represent this information using a bar chart.",
            "Provide a bar chart illustrating the quantity of customers with an email contact channel code for each year."
        ],
        "record_name": "920"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Winery , COUNT(Winery) FROM WINE WHERE Price > 100 GROUP BY Winery ORDER BY Winery ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "wine_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Winery",
            "y_name": "COUNT(Winery)",
            "x_data": [
                [
                    "Bucella",
                    "Carter",
                    "Casa Piena",
                    "Caymus",
                    "Chappellet",
                    "Chimeney Rock",
                    "Darioush",
                    "David Arthur",
                    "Dos Lagos",
                    "Hourglass",
                    "Janzen",
                    "Lewis",
                    "Morlet",
                    "Paul Hobbs",
                    "Sine Qua Non"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Winery"
        },
        "nl_queries": [
            "Compare the quantity of wineries for wines with a price higher than 100, and could you please arrange the bars in ascending order?",
            "Display the quantity of wineries for wines with a price greater than 100 in a bar graph, ranked from least to greatest by the names, please.",
            "Create a bar chart illustrating the quantity of wineries for wines priced higher than 100, and arrange the X-axis in ascending order, please."
        ],
        "record_name": "3236@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Date , SUM(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY SUM(Price) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Date",
            "y_name": "SUM(Price)",
            "x_data": [
                [
                    "21 May",
                    "19 May",
                    "2 Aug",
                    "20 May",
                    "11 July",
                    "21 Jun"
                ]
            ],
            "y_data": [
                [
                    24,
                    15,
                    12,
                    9,
                    9,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Date"
        },
        "nl_queries": [
            "For every entry in the schedule, present the total price for each day in a bar graph, and please list the y-axis in descending order."
        ],
        "record_name": "459@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "AVG(SALARY)",
            "x_data": [
                [
                    "ST_MAN",
                    "ST_CLERK",
                    "SH_CLERK",
                    "SA_REP",
                    "SA_MAN",
                    "PU_MAN",
                    "PU_CLERK",
                    "PR_REP",
                    "MK_REP",
                    "MK_MAN",
                    "IT_PROG",
                    "HR_REP",
                    "FI_MGR",
                    "FI_ACCOUNT",
                    "AD_VP",
                    "AD_PRES",
                    "AD_ASST",
                    "AC_MGR",
                    "AC_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    7280,
                    2785,
                    3215,
                    8350,
                    12200,
                    11000,
                    2780,
                    10000,
                    6000,
                    13000,
                    5760,
                    6500,
                    12000,
                    7920,
                    17000,
                    24000,
                    4400,
                    12000,
                    8300
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For employees who were hired prior to 2002-06-21, create a bar chart illustrating the distribution of job IDs and the average salary, grouped by the job ID attribute, with the X-axis listed in descending order.",
            "For employees hired prior to 2002-06-21, please provide a bar chart depicting the distribution of job IDs and the average salary. Group them by the job ID attribute and arrange them in descending order on the X-axis.",
            "For employees hired prior to 2002-06-21, generate a bar chart illustrating the distribution of job IDs and the average salary. Group the data by the job ID attribute and display it on the X-axis in descending order, please.",
            "For employees who were hired prior to 2002-06-21, present a bar chart illustrating the distribution of job IDs and the average salary, grouped by the job ID attribute. Please ensure that the bars are ordered in descending order.",
            "For employees hired before 2002-06-21, retrieve the job_id and average salary, and group them by the job_id attribute. Visualize this information in a bar chart, arranged in descending order on the X-axis, please."
        ],
        "record_name": "1777@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT All_Home , SUM(School_ID) FROM basketball_match GROUP BY All_Home ORDER BY All_Home ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "All_Home",
            "y_name": "SUM(School_ID)",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    5,
                    5,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY All_Home"
        },
        "nl_queries": [
            "Provide me with a comparison of the total School_ID across all homes, grouped by the All_Home attribute, and displayed on the x-axis in ascending order from lowest to highest.",
            "Create a stacked bar chart illustrating the distribution of All_Home and the sum of School_ID, grouped by the All_Home attribute, and ordered in ascending order from lowest to highest, please.",
            "Find the All_Home attribute and calculate the sum of School_ID. Group them based on the All_Home attribute and represent them visually using a bar chart. Please order them from low to high on the x-axis.",
            "Provide a bar chart illustrating the total number of school IDs for each respective household, and display the bars in ascending order, please.",
            "Generate a bar graph illustrating the distribution of All_Home and the total number of School_ID, grouped by the All_Home attribute, and display the bars in ascending order, please.",
            "Present the distribution of All_Home and the total of School_ID, grouped by the All_Home attribute, in a bar chart. Please display the x-axis in ascending order from lowest to highest."
        ],
        "record_name": "3104@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC",
                "binning": "BIN Year BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Year , avg(Weight) FROM CARS_DATA ORDER BY avg(Weight) DESC BIN Year BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "car_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Year",
            "y_name": "avg(Weight)",
            "x_data": [
                [
                    "Thur",
                    "Mon",
                    "Sat",
                    "Fri",
                    "Tue",
                    "Wed",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    9051,
                    6474,
                    6234,
                    5413,
                    5313,
                    3176,
                    2861
                ]
            ],
            "classify": [],
            "describe": "BIN Year BY WEEKDAY"
        },
        "nl_queries": [
            "Create a bar chart representing the total average weight by grouping it by year, and arrange the bars in descending order along the y-axis, please.",
            "Calculate the mean weight and classify the years into weekday intervals for a bar chart; sort in descending order on the Y-axis, please."
        ],
        "record_name": "413@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , MANAGER_ID FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200) ORDER BY MANAGER_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "MANAGER_ID",
            "x_data": [
                [
                    "AC_ACCOUNT",
                    "MK_REP",
                    "SA_REP",
                    "PR_REP",
                    "HR_REP",
                    "AC_MGR",
                    "MK_MAN"
                ]
            ],
            "y_data": [
                [
                    205,
                    201,
                    149,
                    101,
                    101,
                    101,
                    100
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For employees who are not assigned to departments managed by managers with IDs between 100 and 200, create a bar chart illustrating the distribution of job IDs and manager IDs, sorted in descending order based on the total count.",
            "For the employees who are not employed in departments with managers whose IDs fall between 100 and 200, please provide a bar chart illustrating the distribution of job IDs and manager IDs. Kindly sort the total number in descending order.",
            "For employees who are not working in departments where managers have IDs between 100 and 200, create a bar chart depicting the distribution of job IDs and manager IDs, listed in descending order on the Y-axis.",
            "Provide a comparison of manager_ids over job_ids for employees who do not work in departments with manager_ids between 100 and 200. Please list them in descending order on the y-axis.",
            "For employees who are not employed in departments where the manager's ID falls between 100 and 200, I would like to see a bar chart illustrating the distribution of job ID and manager ID. Additionally, please display the total number in descending order."
        ],
        "record_name": "1688@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%'",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name NOT LIKE '%M%' BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "COUNT(HIRE_DATE)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept"
                ]
            ],
            "y_data": [
                [
                    12,
                    24,
                    28,
                    24
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "When were the employees without the letter M in their first names hired? Please represent this data with a bar chart showing the count.",
            "On which dates were employees with first names lacking the letter \"M\" hired, and represent the count using a bar chart."
        ],
        "record_name": "1953"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Team_Name , School_ID FROM basketball_match ORDER BY School_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Team_Name",
            "y_name": "School_ID",
            "x_data": [
                [
                    "Virginia Tech",
                    "Clemson",
                    "Duke",
                    "North Carolina"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize a bar chart illustrating the distribution of Team_Name and School_ID, and display it in descending order according to the Y-axis.",
            "Display a bar chart with the team names on the X-axis and the school IDs on the Y-axis, sorted in descending order along the Y-axis, please.",
            "Provide me with a comparison of School_ID across Team_Name, sorted by the total number in descending order, please.",
            "A bar chart displays the distribution of Team_Name and School_ID, and ranks the total number in descending order.",
            "Present the distribution of Team_Name and School_ID in a bar chart, with the Y-axis arranged in descending order, please.",
            "Generate a bar graph illustrating the distribution of Team_Name and School_ID, with the Y-axis listed in descending order, please."
        ],
        "record_name": "3111@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(*) FROM member GROUP BY Country",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(*) FROM member GROUP BY Country"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "decoration_competition",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Canada",
                    "United States"
                ]
            ],
            "y_data": [
                [
                    4,
                    6
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the distinct nations and the count of individuals from each country using a bar chart.",
            "Display the various nations and the quantity of members from each country. Visualize this information using a bar chart.",
            "Illustrate the cumulative count categorized by nation in the form of a bar chart."
        ],
        "record_name": "1091"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id GROUP BY date_moved_in ORDER BY date_moved_in ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "local_govt_and_lot",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_moved_in",
            "y_name": "COUNT(date_moved_in)",
            "x_data": [
                [
                    "2015-03-27",
                    "2016-09-27"
                ]
            ],
            "y_data": [
                [
                    9,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date_moved_in"
        },
        "nl_queries": [
            "What is the distribution of customer movement dates? Please display a bar chart showing the proportion of each customer's move, with the X-axis sorted in ascending order.",
            "Please utilize a bar chart to compare the number of customers based on their move-in dates, and arrange the bars in ascending order from low to high."
        ],
        "record_name": "2096@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT All_Home , COUNT(All_Home) FROM basketball_match GROUP BY All_Home"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "pie",
            "x_name": "All_Home",
            "y_name": "COUNT(All_Home)",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY All_Home"
        },
        "nl_queries": [
            "Create a pie chart illustrating the distribution of All_Home and the corresponding quantity of All_Home.",
            "Provide me with a pie chart illustrating the distribution of All_Home and the corresponding quantity of All_Home.",
            "Present the ratio between the quantity of All_Home and the quantity of All_Home in a pie chart.",
            "Create a pie chart illustrating the distribution of All_Home and the corresponding quantity of All_Home.",
            "For the characteristic \"All_Home\" and the quantity of \"All_Home\", illustrate their respective proportions using a pie chart.",
            "Provide me with a pie chart displaying the distribution of the total number of homes across different categories of homes."
        ],
        "record_name": "3159"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT local_authority , COUNT(local_authority) FROM station GROUP BY local_authority ORDER BY COUNT(local_authority) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "station_weather",
        "vis_obj": {
            "chart": "bar",
            "x_name": "local_authority",
            "y_name": "COUNT(local_authority)",
            "x_data": [
                [
                    "Brentwood",
                    "Thurrock",
                    "Watford",
                    "Broxbourne",
                    "Chiltern",
                    "Three Rivers"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY local_authority"
        },
        "nl_queries": [
            "Enumerate the quantity of local authorities based on the respective local authority, and organize the Y-axis in ascending order from least to greatest, please.",
            "A bar chart showcasing the different local authorities and the number of local authorities offered by each station, arranged in ascending order on the y-axis.",
            "Bar chart displaying the quantity of local authorities from each respective local authority, arranged in ascending order on the y-axis, please.",
            "Compare the quantity of local authorities by each individual local authority, and could you display it based on the total number in ascending order, please?"
        ],
        "record_name": "2830@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC",
                "binning": "BIN Start_from BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Start_from , SUM(Employee_ID) FROM hiring  ORDER BY Start_from ASC BIN Start_from BY YEAR"
        },
        "chart": "Line",
        "hardness": "Medium",
        "db_id": "employee_hire_evaluation",
        "vis_obj": {
            "chart": "line",
            "x_name": "Start_from",
            "y_name": "SUM(Employee_ID)",
            "x_data": [
                [
                    "2003",
                    "2004",
                    "2005",
                    "2006",
                    "2007",
                    "2008",
                    "2009",
                    "2010",
                    "2011",
                    "2012",
                    "2013"
                ]
            ],
            "y_data": [
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    7,
                    1,
                    6,
                    3,
                    4,
                    5
                ]
            ],
            "classify": [],
            "describe": "BIN Start_from BY YEAR"
        },
        "nl_queries": [
            "A line chart depicting the fluctuation of the total number of Employee_IDs over the Start_from bin start_from by time, with the X-axis sorted in ascending order.",
            "Provide a line graph illustrating the progression of the cumulative sum of Employee_ID over different starting points in the \"start_from\" bin, organized in ascending order on the x-axis.",
            "Create a line graph illustrating the fluctuation of the cumulative count of Employee_ID over different bins of start_from, sorted in ascending order along the x-axis.",
            "Create a line chart illustrating the variation in the total count of Employee_ID across different time intervals of Start_from, and arrange the display in ascending order based on the x-axis.",
            "A line graph displays the trend of the cumulative sum of Employee_ID over the Start_from bin, sorted on the x-axis in ascending order from low to high.",
            "Display the variation in the total sum of Employee_ID over different Start_from bins, categorized by time, in a line chart. Please sort the Start_from bins in ascending order.",
            "I would like to observe the trend of the total employee IDs based on their start dates, listed in ascending order on the x-axis, please."
        ],
        "record_name": "1360@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Type_of_Thing_Code , COUNT(Type_of_Thing_Code) FROM Things GROUP BY Type_of_Thing_Code ORDER BY COUNT(Type_of_Thing_Code) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "local_govt_and_lot",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Type_of_Thing_Code",
            "y_name": "COUNT(Type_of_Thing_Code)",
            "x_data": [
                [
                    "Furniture",
                    "Electronics",
                    "Commen"
                ]
            ],
            "y_data": [
                [
                    2,
                    5,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Type_of_Thing_Code"
        },
        "nl_queries": [
            "Compare the quantity of items in each category using a bar chart, and list them in ascending order on the Y-axis, please.",
            "Display the quantity of thing codes for each type of thing code, and I would like the Y-axis to be ranked in ascending order, please."
        ],
        "record_name": "2087@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "All_Home",
            "y_name": "School_ID",
            "x_data": [
                [
                    "15\u20131",
                    "14\u20133",
                    "14\u20132"
                ]
            ],
            "y_data": [
                [
                    0,
                    5,
                    1
                ],
                [
                    2,
                    0,
                    4
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home, GROUP BY All_Home"
        },
        "nl_queries": [
            "Provide a bar chart illustrating the distribution of All_Home and School_ID, grouped by the ACC_Home attribute, with the X-axis sorted in descending order, please.",
            "Create a bar chart illustrating the distribution of All_Home and School_ID, grouped by the ACC_Home attribute, and arrange the bars in descending order.",
            "Illustrate the distribution of All_Home and School_ID, grouped by the ACC_Home attribute, in a bar chart, and kindly arrange the bars in descending order from highest to lowest.",
            "A stacked bar chart displays the distribution of All_Home and School_ID, grouped by the attribute ACC_Home, and the X-axis is sorted in descending order.",
            "Stacked bar chart comparing school IDs to ACC_Home based on all homes, and list the bars from highest to lowest.",
            "Retrieve the All_Home and School_ID attributes, group them by the ACC_Home attribute, and represent them visually using a bar chart. Please ensure that the X-axis is sorted in descending order."
        ],
        "record_name": "3093@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT All_Home , Team_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY All_Home ASC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "All_Home",
            "y_name": "Team_ID",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    1,
                    4,
                    0
                ],
                [
                    3,
                    0,
                    2
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home, GROUP BY All_Home"
        },
        "nl_queries": [
            "Create a bar chart illustrating the distribution of All_Home and Team_ID, grouped by the attribute ACC_Home, and please rank All_Home in ascending order.",
            "Retrieve the values of All_Home and Team_ID, group them by the attribute ACC_Home, and represent them using a bar chart. Arrange the bars in ascending order based on the x-axis.",
            "Display the distribution of All_Home and Team_ID, grouped by the ACC_Home attribute, in a bar chart, with the x-axis ranked in ascending order from least to greatest.",
            "Provide a comparison of Team_ID based on the All_Home attribute, and group the results by the ACC_Home attribute using a bar chart, arranging them in ascending order according to the All_Home values.",
            "Stacked bar chart comparing team_id and ACC_Home based on all home locations, and arrange them in ascending order on the x-axis, please.",
            "Provide me with a comparison of Team_ID across All_Home, grouped by the attribute ACC_Home, and I would like the All_Home values to be ranked in ascending order."
        ],
        "record_name": "3092@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT HIRE_DATE , SALARY FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)"
        },
        "chart": "Line",
        "hardness": "Easy",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "line",
            "x_name": "HIRE_DATE",
            "y_name": "SALARY",
            "x_data": [
                [
                    "1987-06-17",
                    "1987-06-20",
                    "1987-06-21",
                    "1987-06-22",
                    "1987-06-23",
                    "1987-06-24",
                    "1987-06-25",
                    "1987-06-26",
                    "1987-06-27",
                    "1987-06-28",
                    "1987-06-29",
                    "1987-06-30",
                    "1987-07-02",
                    "1987-07-03",
                    "1987-07-04",
                    "1987-07-05",
                    "1987-07-06",
                    "1987-07-07",
                    "1987-07-08",
                    "1987-07-10",
                    "1987-07-11",
                    "1987-07-12",
                    "1987-07-13",
                    "1987-07-14",
                    "1987-07-15",
                    "1987-07-16",
                    "1987-07-17",
                    "1987-07-18",
                    "1987-07-19",
                    "1987-07-20",
                    "1987-07-21",
                    "1987-07-22",
                    "1987-07-23",
                    "1987-07-24",
                    "1987-07-25",
                    "1987-07-26",
                    "1987-07-27",
                    "1987-07-28",
                    "1987-07-29",
                    "1987-07-30",
                    "1987-07-31",
                    "1987-08-01",
                    "1987-08-02",
                    "1987-08-03",
                    "1987-08-04",
                    "1987-08-05",
                    "1987-08-06",
                    "1987-08-07",
                    "1987-08-08",
                    "1987-08-09",
                    "1987-08-10",
                    "1987-08-11",
                    "1987-08-12",
                    "1987-08-13",
                    "1987-08-14",
                    "1987-08-15",
                    "1987-08-16",
                    "1987-08-17",
                    "1987-08-18",
                    "1987-08-19",
                    "1987-08-20",
                    "1987-08-21",
                    "1987-08-22",
                    "1987-08-23",
                    "1987-08-24",
                    "1987-08-25",
                    "1987-08-26",
                    "1987-08-27",
                    "1987-08-28",
                    "1987-08-29",
                    "1987-08-30",
                    "1987-08-31",
                    "1987-09-02",
                    "1987-09-03",
                    "1987-09-04",
                    "1987-09-05",
                    "1987-09-06",
                    "1987-09-07",
                    "1987-09-08",
                    "1987-09-09",
                    "1987-09-10",
                    "1987-09-11",
                    "1987-09-12",
                    "1987-09-13",
                    "1987-09-14",
                    "1987-09-15",
                    "1987-09-16",
                    "1987-09-17",
                    "1987-09-18",
                    "1987-09-19",
                    "1987-09-20",
                    "1987-09-21",
                    "1987-09-22",
                    "1987-09-23",
                    "1987-09-24",
                    "1987-09-27",
                    "1987-09-28",
                    "1987-09-29",
                    "1987-09-30",
                    "1987-10-01"
                ]
            ],
            "y_data": [
                [
                    24000,
                    9000,
                    6000,
                    4800,
                    4800,
                    4200,
                    12000,
                    9000,
                    8200,
                    7700,
                    7800,
                    6900,
                    3100,
                    2900,
                    2800,
                    2600,
                    2500,
                    8000,
                    8200,
                    6500,
                    5800,
                    3200,
                    2700,
                    2400,
                    2200,
                    3300,
                    2800,
                    2500,
                    2100,
                    3300,
                    2900,
                    2400,
                    2200,
                    3600,
                    3200,
                    2700,
                    2500,
                    3500,
                    3100,
                    2600,
                    2500,
                    14000,
                    13500,
                    12000,
                    11000,
                    10500,
                    10000,
                    9500,
                    9000,
                    8000,
                    7500,
                    7000,
                    10000,
                    9500,
                    9000,
                    8000,
                    7500,
                    7000,
                    10500,
                    9500,
                    7200,
                    6800,
                    6400,
                    6200,
                    11500,
                    10000,
                    9600,
                    7400,
                    7300,
                    6100,
                    11000,
                    8800,
                    8400,
                    7000,
                    6200,
                    3200,
                    3100,
                    2500,
                    2800,
                    4200,
                    4100,
                    3400,
                    3000,
                    3800,
                    3600,
                    2900,
                    2500,
                    4000,
                    3900,
                    3200,
                    2800,
                    3100,
                    3000,
                    2600,
                    2600,
                    6000,
                    6500,
                    10000,
                    12000,
                    8300
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For those employees who have no previous job experience, create a line chart illustrating the salary changes over the hire_date.",
            "For employees who have no job history, generate a line chart illustrating the salary changes over the hire date.",
            "For employees with no previous employment history, create a line chart illustrating the salary change over the hire date.",
            "For employees who have no prior job experience, please provide a line chart depicting the salary changes over their hire date.",
            "For employees with no prior job experience, please illustrate the trend of salary over hire_date using a line chart.",
            "For employees with no previous employment, provide me with the salary trend over their hire dates, please."
        ],
        "record_name": "1746"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT director , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "movie_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "director",
            "y_name": "stars",
            "x_data": [
                [
                    "",
                    "James Cameron",
                    "Robert Wise",
                    "Steven Spielberg",
                    "Victor Fleming"
                ]
            ],
            "y_data": [
                [
                    4,
                    3,
                    2,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the ratings of each director using a bar chart.",
            "Please provide a bar chart comparing the ratings by directors."
        ],
        "record_name": "2385"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Allergy , count(*) FROM Has_allergy GROUP BY Allergy ORDER BY Allergy ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "allergy_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Allergy",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Anchovies",
                    "Cat",
                    "Dog",
                    "Eggs",
                    "Grass Pollen",
                    "Milk",
                    "Nuts",
                    "Ragweed",
                    "Rodent",
                    "Shellfish",
                    "Soy",
                    "Tree Pollen"
                ]
            ],
            "y_data": [
                [
                    3,
                    4,
                    3,
                    3,
                    4,
                    3,
                    11,
                    6,
                    1,
                    4,
                    4,
                    13
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Generate a bar chart depicting the frequency of different allergies among students, sorted in ascending order on the X-axis, please.",
            "Display the cumulative count of each allergy, arranged in ascending order on the X-axis, please.",
            "Display a bar chart illustrating all allergies along with the corresponding number of affected students, and please list them in ascending order along the X-axis.",
            "Display the number of students with each unique allergy in a bar chart, listing them in ascending order on the X-axis, please.",
            "Display a bar chart presenting the allergies along with the corresponding number of students affected. Please arrange the chart in ascending order based on the X-axis, from least to greatest."
        ],
        "record_name": "45@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Height , Prominence FROM mountain WHERE range != 'Aberdare Range'"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "mountain_photos",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Height",
            "y_name": "Prominence",
            "x_data": [
                [
                    4260,
                    4220,
                    4195,
                    4193,
                    4167,
                    4127,
                    4125,
                    4120,
                    4100,
                    4088,
                    4071,
                    4070,
                    4070,
                    4068,
                    4030,
                    3996,
                    3950,
                    3941,
                    3912,
                    3903,
                    3900
                ]
            ],
            "y_data": [
                [
                    1909,
                    350,
                    1605,
                    1215,
                    3755,
                    1530,
                    660,
                    1510,
                    2225,
                    420,
                    610,
                    3931,
                    500,
                    1904,
                    420,
                    910,
                    500,
                    1540,
                    460,
                    450,
                    590
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What is the correlation between the altitude and prominence of mountains that are not part of the 'Aberdare Range'? Please represent the results using a scatter chart."
        ],
        "record_name": "2345"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT decor , avg(basePrice) FROM Rooms GROUP BY decor ORDER BY avg(basePrice) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "inn_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "decor",
            "y_name": "avg(basePrice)",
            "x_data": [
                [
                    "traditional",
                    "rustic",
                    "modern"
                ]
            ],
            "y_data": [
                [
                    187.5,
                    162.5,
                    112.5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Provide me with a bar chart illustrating the average base price of each decoration, and please arrange the Y-axis in descending order, from highest to lowest.",
            "What is the mean price of the rooms for each distinct decor? Present me with a bar graph, and sort the total number in descending order.",
            "Display the mean price of the rooms in various interior designs using a bar graph, and please arrange the Y-axis in descending order from highest to lowest.",
            "Please utilize a bar chart to demonstrate the mean cost of rooms with various decorations, and arrange the Y-axis in descending order."
        ],
        "record_name": "1969@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT GovernmentForm , sum(Population) FROM country GROUP BY GovernmentForm"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "world_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "GovernmentForm",
            "y_name": "sum(Population)",
            "x_data": [
                [
                    "Commonwealth of the US",
                    "Constitutional Monarchy (Emirate)",
                    "Constitutional Monarchy, Federation",
                    "Dependent Territory of the UK",
                    "Emirate Federation",
                    "Federation",
                    "Monarchy (Emirate)",
                    "Monarchy (Sultanate)",
                    "Nonmetropolitan Territory of France",
                    "Nonmetropolitan Territory of The Netherlands",
                    "Overseas Department of France",
                    "Parliamentary Coprincipality",
                    "Part of Denmark",
                    "Socialistic Republic",
                    "Socialistic State",
                    "Special Administrative Region of China",
                    "US Territory"
                ]
            ],
            "y_data": [
                [
                    3947000,
                    1972000,
                    82516000,
                    193050,
                    2441000,
                    7160400,
                    617000,
                    2870000,
                    464000,
                    320000,
                    1731000,
                    78000,
                    99000,
                    115072000,
                    5605000,
                    7255000,
                    329000
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Retrieve the names of government forms and total population for each government form wherein the average life expectancy surpasses 72.",
            "Provide me with a histogram illustrating the various government forms and their respective total populations. Only include government forms with an average life expectancy greater than 72.",
            "Provide me with a bar graph illustrating the diverse forms of government and the corresponding total population for each government form with an average life expectancy exceeding 72.",
            "What are the distinct forms of government, and what is the total population for each government form with an average life expectancy exceeding 72? Represent the data using a bar chart.",
            "Bar chart illustrating the overall population count across various governance systems."
        ],
        "record_name": "3275"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT AllergyType , count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy = T2.allergy GROUP BY T2.allergytype ORDER BY count(*) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "allergy_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "AllergyType",
            "y_name": "count(*)",
            "x_data": [
                [
                    "food",
                    "environmental",
                    "animal"
                ]
            ],
            "y_data": [
                [
                    28,
                    23,
                    8
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize the number of students affected by each type of allergy through a bar chart, and please display the total number in descending order.",
            "Create a bar chart illustrating the quantity of students impacted by each type of allergy. Additionally, please arrange the total numbers in descending order for display.",
            "Display a bar chart depicting the prevalence of each type of allergy among students, with the total number of students affected listed in descending order.",
            "Display all types of allergies along with the corresponding number of students affected, represented visually through a bar chart. List the total number of allergies in descending order.",
            "A bar chart depicting the number of students affected by each allergy type, ordered in descending order on the Y-axis, please."
        ],
        "record_name": "38@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Capacity FROM cinema ORDER BY Name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Capacity FROM cinema ORDER BY Name DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Capacity",
            "x_data": [
                [
                    "Oriel",
                    "Mount Callan",
                    "Moneypoint",
                    "Grouse Lodge",
                    "Gortahile",
                    "Glenough",
                    "Glenmore",
                    "Dublin Array",
                    "Codling",
                    "Carrowleagh"
                ]
            ],
            "y_data": [
                [
                    330,
                    908,
                    225,
                    203,
                    208,
                    325,
                    305,
                    364,
                    1100,
                    368
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a bar graph representing the capacity for each name, and arrange the names in descending order, please.",
            "Display the seating capacity for each cinema in a bar graph, listing the x-axis in descending order from highest to lowest, please."
        ],
        "record_name": "474@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT CITY , COUNT(CITY) FROM locations GROUP BY CITY ORDER BY COUNT(CITY) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "CITY",
            "y_name": "COUNT(CITY)",
            "x_data": [
                [
                    "Seattle",
                    "Toronto",
                    "Southlake",
                    "South San Francisco",
                    "OX9 9ZB",
                    "Munich",
                    "London"
                ]
            ],
            "y_data": [
                [
                    21,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY CITY"
        },
        "nl_queries": [
            "Aggregate and tally the city attribute from the location table to create a bar graph, sorted in descending order based on the number of cities.",
            "Provide a bar chart for comparing the quantity of departments located in various cities, and list the y-axis in descending order, please.",
            "Generate a bar chart illustrating the quantity of cities across different cities, and arrange them in descending order on the y-axis, please."
        ],
        "record_name": "1624@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Code FROM products WHERE price BETWEEN 60 AND 120 ORDER BY Code ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Code",
            "x_data": [
                [
                    "Memory",
                    "CD drive",
                    "Toner cartridge"
                ]
            ],
            "y_data": [
                [
                    2,
                    7,
                    9
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Generate a bar chart illustrating the distribution of names and codes for products with prices ranging from 60 to 120. Please sort the Y-axis in ascending order from low to high.",
            "For the products with a price ranging from 60 to 120, create a bar chart illustrating the distribution of names and codes, and arrange them in ascending order on the y-axis, please.",
            "For products with a price ranging from 60 to 120, present a bar chart illustrating the distribution of names and codes. Please list the Y-axis in ascending order.",
            "For the products with a price ranging from 60 to 120, create a bar chart representing the distribution of names and codes. Please sort the chart in ascending order based on the y-axis.",
            "For the products with a price ranging from 60 to 120, retrieve the names and codes, and represent them using a bar chart. Please list the Y-axis in ascending order."
        ],
        "record_name": "2189@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(MANAGER_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(MANAGER_ID) DESC BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "SUM(MANAGER_ID)",
            "x_data": [
                [
                    "Aug",
                    "July",
                    "Sept",
                    "June"
                ]
            ],
            "y_data": [
                [
                    1862,
                    1742,
                    1449,
                    740
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For all employees whose first name contains the letters D or S, create a bar chart illustrating the distribution of their hire dates and the total count of manager IDs per hire date over time. Please sort the Y-axis in descending order from highest to lowest.",
            "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of hire dates and the sum of manager IDs binned by hire date over time. Sort the Y-axis in descending order from highest to lowest.",
            "For all employees whose first name contains the letters D or S, provide a comparison of the sum of manager IDs over the hire date bins, categorized by time, using a bar chart, and display them in descending order based on the total number.",
            "For all employees whose first name contains the letters D or S, a bar chart illustrates the distribution of hire dates and the cumulative sum of manager IDs grouped by hire date over time. Please sort the Y-axis in descending order.",
            "For all employees whose first name contains the letters D or S, provide a comparison of the sum of manager IDs grouped by hire date bins, and order them in descending order by the total number."
        ],
        "record_name": "1544@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM mountain WHERE Height > 5000 GROUP BY Country"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "climbing",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(Country)",
            "x_data": [
                [
                    "DR Congo Uganda",
                    "Kenya",
                    "Tanzania"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Country"
        },
        "nl_queries": [
            "A bar graph representing the count of countries with mountains exceeding a height of 5000.",
            "What are the nations where mountains have heights greater than 5000, and represent them in a bar chart with their respective counts?",
            "Provide a bar chart depicting the count of countries with mountains exceeding a height of 5000, please.",
            "Provide the count of countries containing mountains with heights greater than 5000.",
            "What is the count of countries that have mountains exceeding a height of 5000?",
            "A bar graph illustrating the count of countries with mountains exceeding a height of 5000, please."
        ],
        "record_name": "490"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT product_name , COUNT(product_name) FROM products GROUP BY product_name ORDER BY product_name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_products_contacts",
        "vis_obj": {
            "chart": "bar",
            "x_name": "product_name",
            "y_name": "COUNT(product_name)",
            "x_data": [
                [
                    "Apple",
                    "gucci",
                    "jcrew"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": "GROUP BY product_name"
        },
        "nl_queries": [
            "Bar chart with product names on the x-axis and the corresponding quantity of each product on the y-axis. Please display the chart in ascending order based on the x-axis.",
            "Compare the occurrence rate of product names using a bar graph and list the x-axis in ascending order, please.",
            "Present a bar chart depicting the names of products and their corresponding frequencies, arranged in ascending order based on the names, please."
        ],
        "record_name": "1000@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC",
                "binning": "BIN HIRE_DATE BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(SALARY) FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)  ORDER BY SUM(SALARY) ASC BIN HIRE_DATE BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "SUM(SALARY)",
            "x_data": [
                [
                    "Fri",
                    "Sun",
                    "Mon",
                    "Tue",
                    "Wed",
                    "Sat",
                    "Thur"
                ]
            ],
            "y_data": [
                [
                    0,
                    6000,
                    6500,
                    10000,
                    12000,
                    13000,
                    15300
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY WEEKDAY"
        },
        "nl_queries": [
            "For the employees who are not employed in departments where managers have IDs between 100 and 200, present a bar chart illustrating the distribution of hire dates and the sum of salary grouped by weekdays. Please arrange the chart from the least to the greatest on the Y-axis.",
            "For employees who are not assigned to departments where the managers' IDs fall between 100 and 200, please create a bar chart that illustrates the distribution of hire dates and the sum of salary bins by weekday. Please rank them in ascending order based on the total number.",
            "For employees who are not part of departments with managers whose IDs fall between 100 and 200, generate a bar chart illustrating the distribution of hire dates and total salary sum bins, grouped by weekdays. Please arrange the bars in ascending order based on the total number.",
            "For employees who are not assigned to departments with managers whose IDs fall between 100 and 200, present a bar chart illustrating the distribution of hire dates and the sum of salary categorized by weekdays. Arrange the Y-axis in ascending order, please.",
            "For employees who are not part of departments with managers whose IDs fall between 100 and 200, create a bar chart illustrating the distribution of hire date and the sum of salary grouped by weekday. Arrange the chart's Y-axis in ascending order from lowest to highest."
        ],
        "record_name": "1657@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project'",
                "binning": "BIN Document_Date BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id = T2.project_id WHERE T2.project_details = 'Graph Database project' BIN Document_Date BY YEAR"
        },
        "chart": "Line",
        "hardness": "Hard",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "line",
            "x_name": "Document_Date",
            "y_name": "COUNT(Document_Date)",
            "x_data": [
                [
                    "1970~1973",
                    "1974~1977",
                    "1978~1981",
                    "1982~1985",
                    "1986~1989",
                    "1990~1993",
                    "1994~1997",
                    "1998~2001",
                    "2002~2005",
                    "2006~2009",
                    "2010~2012"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN Document_Date BY YEAR"
        },
        "nl_queries": [
            "Display the quantity of documents per day for all documents related to the 'Graph Database project', and organize the document dates into yearly intervals using a line graph."
        ],
        "record_name": "855"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , COUNT(name) FROM station AS t1 JOIN route AS t2 ON t1.id = t2.station_id JOIN train AS t3 ON t2.train_id = t3.id WHERE t1.local_authority = \"Chiltern\" GROUP BY name ORDER BY COUNT(name) ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "station_weather",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Ananthapuri Express",
                    "Jayanthi Janatha Express",
                    "Madurai Fast Passenger",
                    "Quilon Fast Passenger",
                    "Guruvayur Express",
                    "Island Express"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Retrieve the names of trains that pass through stations within the jurisdiction of the Chiltern local authority, and present a bar graph to compare the total count of names, sorted in ascending order on the y-axis."
        ],
        "record_name": "2845@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21'",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , AVG(SALARY) FROM employees WHERE hire_date < '2002-06-21' BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "AVG(SALARY)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    9885.714285714286,
                    3774.1935483870966,
                    9074.193548387097,
                    4880,
                    8300
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For employees hired prior to 2002-06-21, create a bar chart depicting the distribution of hire dates and the average salary binned by hire date over time.",
            "For employees hired prior to 2002-06-21, present a bar chart illustrating the distribution of hire dates and the average salary range based on hire date.",
            "For employees who were hired prior to 2002-06-21, retrieve their hire_date and the average salary grouped by hire_date over time, and present the data in a bar chart.",
            "For employees hired prior to 2002-06-21, provide a comparison of the average salary based on the hire date grouped into time intervals.",
            "For employees hired prior to 2002-06-21, please present a bar chart illustrating the distribution of hire dates and the average salary in each hire date time bin."
        ],
        "record_name": "1759"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Date , AVG(Price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id JOIN cinema AS T3 ON T1.cinema_id = T3.cinema_id GROUP BY Date ORDER BY AVG(Price) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Date",
            "y_name": "AVG(Price)",
            "x_data": [
                [
                    "19 May",
                    "21 May",
                    "2 Aug",
                    "20 May",
                    "11 July",
                    "21 Jun"
                ]
            ],
            "y_data": [
                [
                    15,
                    12,
                    12,
                    9,
                    9,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Date"
        },
        "nl_queries": [
            "For every entry in the schedule, display the average price for each day in a bar graph, with the Y-axis ranked in descending order."
        ],
        "record_name": "460@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , COUNT(name) FROM Highschooler GROUP BY name ORDER BY COUNT(name) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "network_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "COUNT(name)",
            "x_data": [
                [
                    "Jordan",
                    "Gabriel",
                    "Tiffany",
                    "Logan",
                    "Kyle",
                    "Kris",
                    "John",
                    "Jessica",
                    "Haley",
                    "Cassandra",
                    "Brittany",
                    "Austin",
                    "Andrew",
                    "Alexis"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Bar chart illustrating the quantity of names from various names, presented in descending order on the y-axis, please.",
            "Can you please provide a bar chart that illustrates the number of individuals with varying names among high schoolers? Additionally, I would like to see the names ranked in descending order based on frequency.",
            "Tabulate the names of each high school student using a bar graph, arranged in descending order based on the frequency of names."
        ],
        "record_name": "2451@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ACC_Regular_Season , Team_ID FROM basketball_match",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ACC_Regular_Season , Team_ID FROM basketball_match"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ACC_Regular_Season",
            "y_name": "Team_ID",
            "x_data": [
                [
                    "14\u20132",
                    "13\u20133",
                    "10\u20136",
                    "9\u20137"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Draw a bar chart illustrating the distribution of ACC_Regular_Season and Team_ID.",
            "Provide a bar chart comparing the Team_ID in relation to the ACC_Regular_Season.",
            "Provide me with a comparison of Team_ID during the ACC Regular Season.",
            "Visualize a bar chart showcasing the distribution of ACC_Regular_Season and Team_ID.",
            "A bar chart displays the distribution of ACC_Regular_Season and Team_ID.",
            "Display the team ID based on the regular season performance in an histogram, please."
        ],
        "record_name": "3112"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Affiliation , sum(Enrollment) FROM university WHERE founded > 1850 GROUP BY affiliation ORDER BY Affiliation ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Affiliation",
            "y_name": "sum(Enrollment)",
            "x_data": [
                [
                    "Private/Methodist",
                    "Public"
                ]
            ],
            "y_data": [
                [
                    2100,
                    43092
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present a bar chart illustrating the various affiliations, along with the total enrollment of schools established after 1850 for each enrollment category. Arrange the bars in ascending order based on their height.",
            "Calculate the cumulative number of students enrolled in colleges established after the year 1850, categorized by affiliation type. Display the data in a bar chart, with the X-axis sorted in ascending order from lowest to highest, please.",
            "What are the various affiliations and the total enrollment of schools established after 1850 for each enrollment type? Please visualize this information using a bar chart, and list the bars in ascending order from low to high.",
            "A bar chart illustrating the various affiliations and the total enrollment of schools established after 1850 for each enrollment type. Please sort the X-axis in ascending order from low to high."
        ],
        "record_name": "3191@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT card_type_code , COUNT(card_type_code) FROM Customers_cards GROUP BY card_type_code"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "customers_card_transactions",
        "vis_obj": {
            "chart": "bar",
            "x_name": "card_type_code",
            "y_name": "COUNT(card_type_code)",
            "x_data": [
                [
                    "Credit",
                    "Debit"
                ]
            ],
            "y_data": [
                [
                    7,
                    8
                ]
            ],
            "classify": [],
            "describe": "GROUP BY card_type_code"
        },
        "nl_queries": [
            "Display the quantity of cards for various card type codes in a bar graph.",
            "Show the quantity of cards for various card type codes in a bar chart, please.",
            "Present the frequency of card type codes organized by card type code in a histogram."
        ],
        "record_name": "1043"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID WHERE T2.Party = \"Democratic\" GROUP BY Committee ORDER BY Committee DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "election",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Committee",
            "y_name": "COUNT(Committee)",
            "x_data": [
                [
                    "Environmental Matters",
                    "Economic Matters",
                    "Appropriations"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Committee"
        },
        "nl_queries": [
            "Which committees have representatives from the Democratic party, and display the count using a bar chart, with the x-axis ranked in descending order, please.",
            "Provide a bar chart that counts and displays in descending order all the committees that have delegates from the Democratic party."
        ],
        "record_name": "1317@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT services , COUNT(services) FROM station GROUP BY services ORDER BY services DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "station_weather",
        "vis_obj": {
            "chart": "bar",
            "x_name": "services",
            "y_name": "COUNT(services)",
            "x_data": [
                [
                    "c2c",
                    "Metropolitan line and Chiltern Railways",
                    "Metropolitan line",
                    "London Overground and London Midland",
                    "London Overground",
                    "Greater Anglia"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1,
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY services"
        },
        "nl_queries": [
            "Create a bar graph comparing services based on the quantity of services provided, and can you sort the names in descending order for display?",
            "Group the services attribute in the station table and calculate the total count of services using a bar graph, with the x-axis displayed in descending order, please.",
            "Provide me with a bar chart where the X-axis represents the services and the Y-axis represents the count of services, listed in descending order by their names, please."
        ],
        "record_name": "2834@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT donator_name , sum(amount) FROM endowment GROUP BY donator_name ORDER BY sum(amount) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "school_finance",
        "vis_obj": {
            "chart": "bar",
            "x_name": "donator_name",
            "y_name": "sum(amount)",
            "x_data": [
                [
                    "San Jos\u00e9 de Ocoa",
                    "Valverde",
                    "Distrito Nacional",
                    "Monte Plata",
                    "San Crist\u00f3bal",
                    "Santo Domingo Este",
                    "Santiago",
                    "La Vega",
                    "Duarte",
                    "Com. Dom. En Estados Unidos",
                    "Peravia"
                ]
            ],
            "y_data": [
                [
                    9.83,
                    9.73,
                    9.55,
                    9.51,
                    9.05,
                    8.99,
                    8.85,
                    8.82,
                    8.53,
                    8.43,
                    8.33
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present a bar chart that lists the name of each donor and the respective endowment amount, arranged in descending order based on the amount of endowment.",
            "List each donor's name and the endowed amount in descending order according to the endowed amount. Represent them in a bar chart."
        ],
        "record_name": "2703"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC",
                "binning": "BIN HIRE_DATE BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "COUNT(HIRE_DATE)",
            "x_data": [
                [
                    "Wed",
                    "Sat",
                    "Mon",
                    "Fri",
                    "Tue",
                    "Thur",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    11,
                    9,
                    8,
                    7,
                    5,
                    5,
                    3
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY WEEKDAY"
        },
        "nl_queries": [
            "For all employees whose first names contain the letters D or S, provide a bar chart illustrating the distribution of hire dates and the number of hire dates categorized by the weekday. Please arrange the chart from highest to lowest on the Y-axis.",
            "For all employees whose first names contain the letters D or S, retrieve their hire dates and group them by weekday. Visualize the data using a bar chart and sort the bars in descending order based on the number of hire dates.",
            "For all employees whose first names contain the letters D or S, provide me with a bar chart comparing the quantity of hire dates across the hire date bins, grouped by weekdays. Sort the y-axis from highest to lowest.",
            "For all employees whose first names contain the letters D or S, generate a bar chart illustrating the distribution of hire dates and the frequency of hire date bins categorized by weekday. Please ensure that the y-axis is arranged in descending order.",
            "For all employees with the letters D or S in their first name, create a bar chart illustrating the distribution of hire dates and the number of hire date bins by weekday. Please rank the total number in descending order from high to low."
        ],
        "record_name": "1539@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT director , max(T1.stars) FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" GROUP BY director"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "movie_1",
        "vis_obj": {
            "chart": "pie",
            "x_name": "director",
            "y_name": "max(T1.stars)",
            "x_data": [
                [
                    "James Cameron",
                    "Robert Wise",
                    "Steven Spielberg",
                    "Victor Fleming"
                ]
            ],
            "y_data": [
                [
                    5,
                    3,
                    4,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each director, retrieve the director's name along with the highest rating among all of their movies, excluding movies with a NULL director. Can you visualize the result using a pie chart?\n\n"
        ],
        "record_name": "2397"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Sex , count(*) FROM student WHERE age > (SELECT avg(age) FROM student) GROUP BY Sex"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "dorm_1",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Sex",
            "y_name": "count(*)",
            "x_data": [
                [
                    "F",
                    "M"
                ]
            ],
            "y_data": [
                [
                    5,
                    10
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the count of students whose age is higher than the average age for each gender. Represent this information using a pie chart.",
            "Create a pie chart depicting the distribution of students, grouped by gender, who are older than the average age.",
            "Provide a pie chart illustrating the distribution of students, separated by gender, who are older than the average age.",
            "How many students of each gender are above the average age."
        ],
        "record_name": "1234"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Sex , SUM(Height) FROM people GROUP BY Sex",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Sex , SUM(Height) FROM people GROUP BY Sex"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "candidate_poll",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Sex",
            "y_name": "SUM(Height)",
            "x_data": [
                [
                    "F",
                    "M"
                ]
            ],
            "y_data": [
                [
                    395,
                    1366
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Sex"
        },
        "nl_queries": [
            "Present the distribution of the combined sum of Height and the individual sum of Height in a pie chart, please.",
            "For the characteristic \"Sex\" and the total height, demonstrate their ratio using a pie chart.",
            "Visualize a pie chart representing the distribution of genders and the aggregate of heights.",
            "A pie chart displays the distribution of sexes and the total height.",
            "Generate a pie chart illustrating the distribution of sexes and the total height.",
            "Create a pie chart illustrating the total height distribution by gender."
        ],
        "record_name": "388"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT customer_first_name , count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_invoices",
        "vis_obj": {
            "chart": "bar",
            "x_name": "customer_first_name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Joesph",
                    "Vesta",
                    "Meaghan",
                    "Abbey",
                    "Jensen",
                    "Kieran",
                    "Ruby"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    4,
                    1,
                    1,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the quantity of accounts for each individual in a bar graph with grouping based on the customer's first name.",
            "What is the count of accounts per customer? Please present a bar chart that groups the data based on the first name of the customer."
        ],
        "record_name": "988"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT staff_name , count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T1.staff_name ORDER BY count(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "assets_maintenance",
        "vis_obj": {
            "chart": "bar",
            "x_name": "staff_name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Christophe",
                    "Cyrus",
                    "Oren",
                    "Rodger",
                    "Berneice",
                    "Bernice",
                    "Edmond",
                    "Kadin"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    3,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many engineers were contacted by each staff member? Display both the staff contact names and the number of engineers contacted in a bar chart, ranking from lowest to highest on the y-axis.",
            "Provide a bar chart depicting the number of engineers contacted by each staff member. Include both the name of the staff member and the count of engineers contacted. Please arrange the chart in ascending order based on the Y-axis.",
            "How many engineers were contacted by each staff member? Provide a list of both the staff member's name and the number of engineers they contacted. Plot this information as a bar chart and display the total number in ascending order.",
            "Provide a histogram illustrating the number of engineers contacted by each staff member. Please list the names of the contact staff and the corresponding number of engineers contacted. Kindly arrange the data in ascending order based on the y-axis."
        ],
        "record_name": "116@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT born_state , AVG(age) FROM head GROUP BY born_state",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT born_state , AVG(age) FROM head GROUP BY born_state"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "department_management",
        "vis_obj": {
            "chart": "bar",
            "x_name": "born_state",
            "y_name": "AVG(age)",
            "x_data": [
                [
                    "Alabama",
                    "California",
                    "Connecticut",
                    "Delaware",
                    "Florida"
                ]
            ],
            "y_data": [
                [
                    68,
                    61.25,
                    55,
                    53,
                    50
                ]
            ],
            "classify": [],
            "describe": "GROUP BY born_state"
        },
        "nl_queries": [
            "Display the mean age of department heads, categorized by the state in which they were born, using a bar chart.",
            "Display the average age categorized by the state of birth in a histogram, please."
        ],
        "record_name": "1112"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.name , AVG(count(*)) FROM Friend AS T1 JOIN Highschooler AS T2 ON T1.student_id = T2.id GROUP BY T2.name ORDER BY T2.name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "network_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "AVG(count(*))",
            "x_data": [
                [
                    "Tiffany",
                    "Logan",
                    "Kyle",
                    "Kris",
                    "Jordan",
                    "Jessica",
                    "Haley",
                    "Gabriel",
                    "Cassandra",
                    "Austin",
                    "Andrew",
                    "Alexis"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    1.5,
                    1,
                    1,
                    1.5,
                    1,
                    1,
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY name"
        },
        "nl_queries": [
            "Display the names of high school students and their respective number of friends. Represent this data as a bar chart, and arrange the bars in descending order on the X-axis, please.",
            "Create a bar chart illustrating the names of high school students and the number of friends each student has, and display the X-axis in descending order.",
            "Present a bar graph illustrating the names of high school students and the number of friends each student has, with the bars arranged in descending order.",
            "Display the names of high school students and their respective number of friends in a bar graph, arranged in descending order on the x-axis, please.",
            "Display the names of the high school students and the number of friends each student has in a bar chart, and arrange them in descending order based on the X-axis, please."
        ],
        "record_name": "2456@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT login_name , author_id FROM Course_Authors_and_Tutors ORDER BY personal_name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "e_learning",
        "vis_obj": {
            "chart": "bar",
            "x_name": "login_name",
            "y_name": "author_id",
            "x_data": [
                [
                    "al75",
                    "jmckenzie",
                    "dschaefer",
                    "clementina29",
                    "adam.rippin",
                    "fiona77",
                    "antonetta19",
                    "wlehner",
                    "medhurst.alvah",
                    "marty.bergnaum",
                    "qking",
                    "heidenreich.ara",
                    "ekshlerin",
                    "nellie.mosciski",
                    "nyundt"
                ]
            ],
            "y_data": [
                [
                    6,
                    1,
                    11,
                    3,
                    10,
                    14,
                    9,
                    4,
                    8,
                    7,
                    13,
                    2,
                    15,
                    12,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Retrieve the login_name and author_id, and represent them visually using a bar chart.",
            "Visualize a bar chart depicting the distribution of \"login_name\" and \"author_id\".",
            "Present a bar chart illustrating the distribution of login_name and author_id.",
            "Display the distribution of login names and author IDs in a bar chart.",
            "Draw a bar chart representing the distribution of login names and author IDs."
        ],
        "record_name": "1258"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Total_Passengers FROM station WHERE LOCATION != 'London' ORDER BY Name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "train_station",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Total_Passengers",
            "x_data": [
                [
                    "Birmingham New Street",
                    "Glasgow Central"
                ]
            ],
            "y_data": [
                [
                    36.330999999999996,
                    29.658
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize the names and total number of passengers for all train stations excluding London using a bar chart, and please sort the bars in ascending order.",
            "Present the names and total number of passengers for all train stations excluding London in a bar chart, and kindly arrange them on the X-axis in ascending order from lowest to highest."
        ],
        "record_name": "3050@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE hire_date < '2002-06-21'  ORDER BY COUNT(HIRE_DATE) DESC BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "COUNT(HIRE_DATE)",
            "x_data": [
                [
                    "July",
                    "Aug",
                    "Sept",
                    "June",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    31,
                    31,
                    30,
                    14,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For employees hired prior to 2002-06-21, create a bar chart illustrating the distribution of hire_date and the number of employees in each hire_date bin, sorted in descending order on the y-axis, please.",
            "For employees who were hired prior to 2002-06-21, create a bar chart illustrating the distribution of hire_date based on the time period of hire_date bins, and display the Y-axis in descending order, please.",
            "For employees hired prior to 2002-06-21, retrieve the hire_date and the count of hire_date grouped by time intervals. Visualize this data using a bar chart, sorting the bars in descending order based on the frequency of hire dates.",
            "For employees hired prior to 2002-06-21, please present a bar chart illustrating the distribution of hire_date across hire_date bins according to time. Sort the chart in descending order based on the y-axis, please.",
            "For employees hired prior to 2002-06-21, generate a bar chart illustrating the distribution of hire dates and the count of employees per hire date bin, with the Y-axis displayed in descending order."
        ],
        "record_name": "1754@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT CRS_CODE , count(*) FROM CLASS GROUP BY crs_code"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "CRS_CODE",
            "y_name": "count(*)",
            "x_data": [
                [
                    "ACCT-211",
                    "ACCT-212",
                    "CIS-220",
                    "CIS-420",
                    "QM-261",
                    "QM-362"
                ]
            ],
            "y_data": [
                [
                    3,
                    2,
                    3,
                    1,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many divisions does each course have?",
            "Create a bar chart to depict the number of sections for each course.",
            "How many segments does each course have? Represent this information visually using a bar chart.",
            "Create a bar graph illustrating the number of sections for each course.",
            "Provide me with a histogram illustrating the distribution of the number of sections for each course.",
            "How many divisions are there in each course? Represent this information visually using a bar chart.",
            "Bar chart with the X-axis labeled as \"CRS code\" and the Y-axis representing the total number."
        ],
        "record_name": "553"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "election",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Party",
            "y_name": "COUNT(Party)",
            "x_data": [
                [
                    "Democratic",
                    "Independence",
                    "Liberal",
                    "Working Families"
                ]
            ],
            "y_data": [
                [
                    4,
                    1,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Party"
        },
        "nl_queries": [
            "Display the quantity of delegates in each political party using a bar chart.",
            "For each political party, employ a bar graph to depict the quantity of delegates associated with it."
        ],
        "record_name": "1311"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT name , avg(trust) FROM useracct AS T1 JOIN trust AS T2 ON T1.u_id = T2.target_u_id GROUP BY T2.target_u_id ORDER BY name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "epinions_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "avg(trust)",
            "x_data": [
                [
                    "Terry",
                    "Roxi",
                    "Rosie",
                    "Nancy",
                    "Mark"
                ]
            ],
            "y_data": [
                [
                    5,
                    10,
                    4.5,
                    8,
                    4.666666666666667
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Retrieve the name and average trust score of each target user and represent it through a bar chart, arranging it in descending order on the x-axis."
        ],
        "record_name": "1380@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Title , COUNT(Title) FROM film AS T1 JOIN film_market_estimation AS T2 ON T1.Film_ID = T2.Film_ID GROUP BY Title ORDER BY Title ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "film_rank",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Title",
            "y_name": "COUNT(Title)",
            "x_data": [
                [
                    "An Officer and a Gentleman",
                    "ET the Extra-Terrestrial",
                    "Rocky III",
                    "Tootsie"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    4,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Title"
        },
        "nl_queries": [
            "For each category, utilize a bar chart to visualize the quantity of films, sorted in ascending order along the x-axis, please."
        ],
        "record_name": "1394@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT charge_type , charge_amount FROM Charges ORDER BY charge_type ASC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "dog_kennels",
        "vis_obj": {
            "chart": "bar",
            "x_name": "charge_type",
            "y_name": "charge_amount",
            "x_data": [
                [
                    "Daily Accommodation",
                    "Drugs",
                    "Health Check"
                ]
            ],
            "y_data": [
                [
                    98,
                    322,
                    640
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Provide me with a bar chart illustrating the charge_amount for each type of charge, with the x-axis listed in ascending order, please.",
            "Present a bar chart depicting the amount for each type of charge. Arrange the bars in ascending order, please.",
            "Present each category of charges and its corresponding amount in a bar graph, arranged in ascending order along the x-axis, please.",
            "Present a bar chart illustrating the cost of each charge type. Display both the charge type and the corresponding amount, and sort the charge types in ascending order.",
            "What are the costs associated with each charge type? Please provide a list of both the charge type and the corresponding amount. Can you present the information in a bar chart, arranged in ascending order?"
        ],
        "record_name": "1174@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT section_description , COUNT(section_description) FROM Sections GROUP BY section_description"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "student_transcripts_tracking",
        "vis_obj": {
            "chart": "bar",
            "x_name": "section_description",
            "y_name": "COUNT(section_description)",
            "x_data": [
                [
                    "ad",
                    "doloremque",
                    "et",
                    "ex",
                    "facilis",
                    "nesciunt",
                    "non",
                    "provident",
                    "qui",
                    "quis",
                    "reprehenderit",
                    "voluptas",
                    "voluptatem"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY section_description"
        },
        "nl_queries": [
            "Calculate the count of section descriptions, and create a bar chart with section description grouped accordingly.",
            "Display the quantity of section descriptions for each respective section description."
        ],
        "record_name": "2902"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\"",
                "binning": "BIN Date_Closed BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Date_Closed , COUNT(Date_Closed) FROM customers AS t1 JOIN customers_policies AS t2 ON t1.customer_id = t2.customer_id WHERE t1.customer_name LIKE \"%Diana%\" BIN Date_Closed BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "insurance_fnol",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Date_Closed",
            "y_name": "COUNT(Date_Closed)",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    2,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN Date_Closed BY WEEKDAY"
        },
        "nl_queries": [
            "Retrieve the closing dates of all policies linked to the customer whose name includes \"Diana\", categorize the closing dates into intervals based on the day of the week, and generate a bar chart to display the count of policies in each interval."
        ],
        "record_name": "1990"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT T1.Investor_details , T1.investor_id FROM INVESTORS AS T1 JOIN TRANSACTIONS AS T2 ON T1.investor_id = T2.investor_id ORDER BY COUNT(*) DESC LIMIT 3"
        },
        "chart": "Pie",
        "hardness": "Hard",
        "db_id": "tracking_share_transactions",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Investor_details",
            "y_name": "investor_id",
            "x_data": [
                [
                    "d",
                    "z",
                    "w"
                ]
            ],
            "y_data": [
                [
                    3,
                    2,
                    18
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the identification numbers and information for the investors with the highest three transaction counts in a pie chart.",
            "Show the identification and information for the investors who have the highest three counts of transactions. Display the proportion."
        ],
        "record_name": "3019"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT DEPT_NAME , count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code = T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3"
        },
        "chart": "Pie",
        "hardness": "Extra Hard",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "pie",
            "x_name": "DEPT_NAME",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Accounting",
                    "Computer Info. Systems",
                    "Biology"
                ]
            ],
            "y_data": [
                [
                    3,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Obtain the enrollment count for each department with the three highest student populations, and represent it using a pie chart.",
            "Which three departments have the highest number of students? Represent the department names and number of students using a pie chart."
        ],
        "record_name": "525"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Budget_Type_Code , count(*) FROM Documents_with_expenses GROUP BY budget_type_code"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Budget_Type_Code",
            "y_name": "count(*)",
            "x_data": [
                [
                    "GV",
                    "ORG",
                    "SF"
                ]
            ],
            "y_data": [
                [
                    6,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present the budget type codes and the count of documents in each budget type using a pie chart.",
            "Display the codes of budget types and the quantity of documents in each budget type. Show the proportion.",
            "Present a pie chart illustrating the various types of budget codes, along with the corresponding number of documents for each.",
            "Provide the distribution of various budget type codes and the corresponding number of documents for each code, please.",
            "What are the distinct codes for budget types, and what is the count of documents for each code? Present the information in a pie chart.",
            "Calculate the overall number by budget type code and represent it as a pie chart."
        ],
        "record_name": "802"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , sum(revenue) FROM manufacturers GROUP BY name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , sum(revenue) FROM manufacturers GROUP BY name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "sum(revenue)",
            "x_data": [
                [
                    "Creative Labs",
                    "Fujits",
                    "Hewlett-Packard",
                    "Iomega",
                    "Sony",
                    "Winchester"
                ]
            ],
            "y_data": [
                [
                    100,
                    130,
                    50,
                    200,
                    120,
                    30
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Calculate the aggregate revenue for each manufacturer and represent the data as a bar graph.",
            "A bar chart representing the cumulative revenue of each producer.",
            "Provide a bar chart illustrating the cumulative revenue of each manufacturer.",
            "What is the cumulative income of each producer?",
            "Bar chart to display the total revenue from various names."
        ],
        "record_name": "2181"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Seating FROM track WHERE year_opened > 2000 ORDER BY seating"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "race_track",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Seating",
            "x_data": [
                [
                    "Chicagoland Speedway",
                    "Kansas Speedway"
                ]
            ],
            "y_data": [
                [
                    75000,
                    81687
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the names and seating capacities of tracks opened after 2000 in a bar graph, ordered by seating capacity.",
            "Display the names and seating capacities, sorted by seating capacity, for all tracks that were opened after the year 2000. Represent them in a bar chart.",
            "Provide a histogram of the names and seating capacities for all tracks that were opened after the year 2000, ordered by seating capacity.",
            "Provide a bar chart displaying the names and seating capacities of all tracks opened after 2000, ordered by seating capacity.",
            "What are the titles and capacities for all tracks that opened after 2000, sorted by capacity. Display the information using a bar graph."
        ],
        "record_name": "2646"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT title , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY title ORDER BY AVG(credits) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "title",
            "y_name": "AVG(credits)",
            "x_data": [
                [
                    "World History",
                    "Groups and Rings",
                    "Game Programming",
                    "Embedded Systems",
                    "International Practicum",
                    "Rock and Roll",
                    "Ponzi Schemes",
                    "Operating Systems",
                    "Immunology",
                    "Graph Theory",
                    "Fiction Writing",
                    "Electron Microscopy",
                    "Elastic Structures",
                    "Differential Geometry",
                    "Cat Herding",
                    "Aquatic Chemistry"
                ]
            ],
            "y_data": [
                [
                    4,
                    4,
                    4,
                    4,
                    3.5,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY title"
        },
        "nl_queries": [
            "Find the mean of credit units for courses that have multiple prerequisites for each course title, and present it in a bar chart. Please arrange the bars in descending order on the y-axis.",
            "What is the mean credit value of courses that have more than one prerequisite for each title? Please present the results in a bar graph, ordered in descending order based on the total number."
        ],
        "record_name": "636@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Event_Details , COUNT(Event_Details) FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID = T2.Event_ID GROUP BY Event_Details ORDER BY COUNT(Event_Details) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "local_govt_in_alabama",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Event_Details",
            "y_name": "COUNT(Event_Details)",
            "x_data": [
                [
                    "Fail",
                    "Success"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Event_Details"
        },
        "nl_queries": [
            "Provide a bar chart illustrating the quantity of event details for events that involve multiple participants, arranged in descending order based on the total number.",
            "For events that involve multiple participants, tally the details of each event for a bar graph, and sort them in descending order along the y-axis, please."
        ],
        "record_name": "2149@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "county_public_safety",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Police_force",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Abbotsford Police Department",
                    "Central Saanich Police",
                    "RCMP"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present a bar chart illustrating the number of police forces associated with each county.",
            "Provide a bar graph illustrating the number of police forces associated with each county.",
            "What is the number of counties corresponding to each police force?",
            "Create a bar chart illustrating the aggregate count across the police force."
        ],
        "record_name": "709"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , COUNT(HIRE_DATE) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "COUNT(HIRE_DATE)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    14,
                    31,
                    31,
                    29,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For employees whose salary falls within the range of 8000 and 12000, and either have a non-null commission or belong to a department other than 40, create a bar chart illustrating the distribution of hire dates. The hire dates should be grouped into bins based on time.",
            "For the employees whose salary falls within the range of 8000 and 12000, and their commission is not null or their department number is not equal to 40, provide a comparison of the hire_date amount across different hire_date bins by time.",
            "For employees whose salary falls between 8000 and 12000, and either have a non-null commission or their department number is not 40, please depict the distribution of hire dates and the number of employees hired on each hire date using a bar chart. Bin the hire dates by time.",
            "For employees with salaries ranging from 8000 to 12000, and having non-null commission or not belonging to department number 40, determine the hire_date and categorize them into bins based on hire_date intervals. Finally, visualize this data using a bar chart.",
            "For employees whose salary falls within the range of 8000 and 12000 and have a non-null commission or do not belong to department number 40, create a bar chart illustrating the distribution of hire dates and bin hire dates based on time."
        ],
        "record_name": "1580"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM products GROUP BY Name ORDER BY Name DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "ZIP drive",
                    "Toner cartridge",
                    "Printer",
                    "Monitor",
                    "Memory",
                    "Hard drive",
                    "Floppy disk",
                    "DVD drive",
                    "DVD burner",
                    "CD drive"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "What is the count of product names in the store? Please sort them in descending order by name.",
            "Provide me with a bar chart illustrating the frequency of each name occurrence, with the bars arranged from highest to lowest.",
            "Tally the names of all the products in the store and provide me with a bar graph, could you sort the X-axis in descending order?"
        ],
        "record_name": "2177@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Manufacturer , Revenue FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"
        },
        "chart": "Grouping Scatter",
        "hardness": "Medium",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Manufacturer",
            "y_name": "Revenue",
            "x_data": [
                [
                    2,
                    2,
                    2
                ],
                [
                    4
                ],
                [
                    3,
                    3,
                    3
                ],
                [
                    6,
                    6
                ],
                [
                    5
                ],
                [
                    1
                ]
            ],
            "y_data": [
                [
                    100,
                    100,
                    100
                ],
                [
                    200
                ],
                [
                    50,
                    50,
                    50
                ],
                [
                    30,
                    30
                ],
                [
                    130
                ],
                [
                    120
                ]
            ],
            "classify": [
                "Austin",
                "Beijing",
                "Los Angeles",
                "Paris",
                "Taiwan",
                "Tokyo"
            ],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For the data pertaining to products and their respective manufacturers, create a scatter plot illustrating the relationship between the manufacturer and revenue. Additionally, group the data based on the attribute of the manufacturer's headquarters.",
            "For the records pertaining to products and their respective manufacturers, generate a scatter chart illustrating the correlation between the manufacturer and revenue, while grouping the data based on the attribute \"headquarter.\"",
            "For the data regarding product records and their respective manufacturers, please present the correlation between the manufacturer and revenue in a scatter chart, grouping them by the attribute \"headquarter\".",
            "For the records pertaining to products and the respective manufacturers, a scatter chart illustrates the relationship between the manufacturer and revenue, grouped by the attribute of the manufacturer's headquarters.",
            "For the records pertaining to the products and their respective manufacturers, create a scatter chart illustrating the relationship between the manufacturer and revenue, and group them based on the attribute of headquarters."
        ],
        "record_name": "2291"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Number_of_matches , COUNT(Number_of_matches) FROM injury_accident WHERE injury != 'Knee problem' GROUP BY Number_of_matches ORDER BY COUNT(Number_of_matches) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "game_injury",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Number_of_matches",
            "y_name": "COUNT(Number_of_matches)",
            "x_data": [
                [
                    "1 (2)",
                    "10",
                    "12",
                    "4",
                    "2",
                    "3",
                    "4 (6)",
                    "1"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    2,
                    2,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Number_of_matches"
        },
        "nl_queries": [
            "How many injured players, excluding those with knee problems, are there in each match? Please show me a bar chart, grouping by the number of matches, and ranking them on the y-axis from lowest to highest."
        ],
        "record_name": "1481@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )",
                "binning": ""
            },
            "VQL": "Visualize LINE SELECT date_of_treatment , COUNT(date_of_treatment) FROM Dogs AS T1 JOIN Treatments AS T2 ON T1.dog_id = T2.dog_id WHERE T1.breed_code = ( SELECT breed_code FROM Dogs GROUP BY breed_code ORDER BY count(*) ASC LIMIT 1 )"
        },
        "chart": "Line",
        "hardness": "Extra Hard",
        "db_id": "dog_kennels",
        "vis_obj": {
            "chart": "line",
            "x_name": "date_of_treatment",
            "y_name": "COUNT(date_of_treatment)",
            "x_data": [
                [
                    "8th",
                    "9th",
                    "10th",
                    "11th",
                    "12th",
                    "13th",
                    "14th",
                    "15th",
                    "16th",
                    "17th",
                    "18th",
                    "19th"
                ]
            ],
            "y_data": [
                [
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1,
                    2,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "classify": [],
            "describe": "BIN date_of_treatment BY TIME"
        },
        "nl_queries": [
            "Present the quantity of dogs belonging to the least common breed on each day of treatment using a grouping line chart organized by the treatment date.",
            "How many dogs of the least common breed are there on each day of treatment? Create a line graph with grouping by treatment date, please."
        ],
        "record_name": "1157"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Type , count(*) FROM institution GROUP BY TYPE ORDER BY count(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "protein_institute",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Type",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Tribal",
                    "Public",
                    "Private"
                ]
            ],
            "y_data": [
                [
                    1,
                    3,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "In a bar chart, arrange the institution types on the X-axis and display the number of institutions for each type on the Y-axis. Please rank them from lowest to highest using the Y-axis.",
            "Could you please provide me with a bar chart indicating the types of institutions, accompanied by the respective count of institutions for each type? Additionally, arrange the chart from lowest to highest on the y-axis.",
            "Create a bar graph representing the relationship between type and the total count, and arrange the bars in ascending order based on the total count."
        ],
        "record_name": "2629@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Headquarter , AVG(Manufacturer) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarter",
            "y_name": "AVG(Manufacturer)",
            "x_data": [
                [
                    "Austin",
                    "Beijing",
                    "Los Angeles",
                    "Paris",
                    "Taiwan",
                    "Tokyo"
                ]
            ],
            "y_data": [
                [
                    2,
                    4,
                    3,
                    6,
                    5,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For the data pertaining to products and their respective manufacturers, a bar chart can display the distribution of headquarters and the average of manufacturers, grouped by the attribute \"headquarter\".",
            "For the data pertaining to the products and their respective manufacturers, provide me with a comparison of the average values of manufacturers across different headquarters, and group them by the attribute \"headquarter\".",
            "For the records pertaining to products and their respective manufacturers, create a bar chart illustrating the distribution of headquarters and the average information about the manufacturers, categorized by the \"headquarter\" attribute.",
            "For the given records of products and their respective manufacturers, generate a bar chart illustrating the distribution of headquarters and the average manufacturer attribute, grouping them based on the headquarter attribute.",
            "For the entries related to the products and their respective manufacturers, identify the headquarters location and calculate the average manufacturer attribute. Group the data by the headquarters attribute and visualize it using a bar chart."
        ],
        "record_name": "2221"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , SUM(EMPLOYEE_ID) FROM employees WHERE hire_date < '2002-06-21' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "SUM(EMPLOYEE_ID)",
            "x_data": [
                [
                    "ST_MAN",
                    "ST_CLERK",
                    "SH_CLERK",
                    "SA_REP",
                    "SA_MAN",
                    "PU_MAN",
                    "PU_CLERK",
                    "PR_REP",
                    "MK_REP",
                    "MK_MAN",
                    "IT_PROG",
                    "HR_REP",
                    "FI_MGR",
                    "FI_ACCOUNT",
                    "AD_VP",
                    "AD_PRES",
                    "AD_ASST",
                    "AC_MGR",
                    "AC_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    610,
                    2690,
                    3790,
                    4935,
                    735,
                    114,
                    585,
                    204,
                    202,
                    201,
                    525,
                    203,
                    108,
                    555,
                    203,
                    100,
                    200,
                    205,
                    206
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For employees hired prior to 2002-06-21, create a bar chart displaying the distribution of job_ids and the sum of employee_ids, grouped by the job_id attribute, and sorted in descending order on the X-axis.",
            "For employees who were hired prior to 2002-06-21, retrieve the job_id and calculate the sum of employee_id, then group them by the job_id attribute. Visualize this data using a bar chart, and please order the X-axis in descending order.",
            "For employees who were hired prior to 2002-06-21, create a bar chart depicting the distribution of job_id and the sum of employee_id, grouped by the job_id attribute, and display the bars in descending order from highest to lowest.",
            "For employees hired before 2002-06-21, generate a bar chart illustrating the distribution of job_id and the sum of employee_id, grouped by the job_id attribute. Please ensure that the X-axis is ordered in descending order.",
            "For employees hired prior to 2002-06-21, please present the distribution of job IDs and the total sum of employee IDs. Group the data by the job ID attribute and display the information in a bar graph, with the bars arranged in descending order from highest to lowest."
        ],
        "record_name": "1774@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT destination , count(*) FROM Flight GROUP BY destination",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT destination , count(*) FROM Flight GROUP BY destination"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "flight_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "destination",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Boston",
                    "Chicago",
                    "Dallas",
                    "Honolul",
                    "Los Angeles",
                    "New York",
                    "Sydney",
                    "Tokyo",
                    "Washington D.C."
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the complete list of destinations and the corresponding number of flights to each destination using a bar chart.",
            "Display all the places and the corresponding count of flights to each place. Represent them in a bar chart.",
            "Create a bar chart illustrating the destinations and the corresponding number of flights to each destination.",
            "A bar chart illustrating the destinations and the corresponding number of flights to each destination.",
            "What are the locations and the respective number of flights to each destination? Please represent this information visually using a bar chart.",
            "Draw a bar chart comparing different destinations based on the total number of visits."
        ],
        "record_name": "1408"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC",
                "binning": "BIN Document_Date BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Document_Date , COUNT(Document_Date) FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code = T2.document_type_code GROUP BY Document_Type_Description ORDER BY Document_Date ASC BIN Document_Date BY YEAR"
        },
        "chart": "Grouping Line",
        "hardness": "Extra Hard",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "line",
            "x_name": "Document_Date",
            "y_name": "COUNT(Document_Date)",
            "x_data": [
                [
                    "1970~1973",
                    "1974~1977",
                    "1978~1981",
                    "1982~1985",
                    "1986~1989",
                    "1990~1993",
                    "1994~1997",
                    "1998~2001",
                    "2002~2005",
                    "2006~2009",
                    "2010~2013"
                ]
            ],
            "y_data": [
                [
                    10,
                    2,
                    9,
                    3,
                    0,
                    3,
                    0,
                    0,
                    5,
                    2,
                    5
                ],
                [
                    10,
                    2,
                    9,
                    3,
                    0,
                    3,
                    0,
                    0,
                    5,
                    3,
                    5
                ],
                [
                    12,
                    3,
                    9,
                    3,
                    0,
                    3,
                    0,
                    0,
                    6,
                    3,
                    6
                ]
            ],
            "classify": [
                "excellent",
                "fun",
                "good"
            ],
            "describe": "GROUP BY Document_Type_Description, BIN Document_Date BY YEAR"
        },
        "nl_queries": [
            "Display the count of documents created per day. Categorize the document date by yearly intervals and group them based on the description of document type. Use a grouping line chart to visualize the data, with the X-axis arranged in ascending order, please.",
            "Display the quantity of documents generated each day, categorize the document dates into yearly intervals, and group them based on the description of the document type using a grouping line chart. Please arrange the data on the x-axis in ascending order.",
            "Display the quantity of documents created each day and categorize the document date into year intervals. Group the data by document type description and present it in a line chart. Please sort the chart by the document date in ascending order.",
            "Display the count of documents created each day. Categorize the document date into year intervals and group them by document type description using a grouping line chart. Arrange the chart in ascending order on the X-axis."
        ],
        "record_name": "850@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Shop_ID , Employee_ID FROM hiring",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Shop_ID , Employee_ID FROM hiring"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "employee_hire_evaluation",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Shop_ID",
            "y_name": "Employee_ID",
            "x_data": [
                [
                    1,
                    1,
                    8,
                    4,
                    5,
                    2,
                    6
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    3,
                    4,
                    5,
                    6,
                    7
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A scatter plot depicts the relationship between Shop_ID and Employee_ID.",
            "Create a scatter plot illustrating the relationship between the Shop_ID and Employee_ID.",
            "Visualize the correlation between Shop_ID and Employee_ID.",
            "Provide a scatter plot illustrating the relationship between Shop_ID and Employee_ID.",
            "Visualize a scatter plot illustrating the relationship between Shop_ID and Employee_ID.",
            "Scatter plot depicting shop ID on the x-axis and employee ID on the y-axis."
        ],
        "record_name": "1357"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT building , COUNT(building) FROM department WHERE budget > (SELECT avg(budget) FROM department) GROUP BY building ORDER BY COUNT(building) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "building",
            "y_name": "COUNT(building)",
            "x_data": [
                [
                    "Brodhead",
                    "Bronfman",
                    "Linderman",
                    "Mercer",
                    "Palmer",
                    "Thompson",
                    "Whitman",
                    "Wrigley",
                    "Candlestick",
                    "Taylor"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY building"
        },
        "nl_queries": [
            "How many departments have a budget higher than the average budget in each building? Please provide a bar chart, listing the departments in ascending order based on the total number.",
            "Provide a bar chart illustrating the number of departments with a budget greater than the average for each building, and arrange the buildings in ascending order from least to greatest."
        ],
        "record_name": "657@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT dept_name , min(salary) FROM instructor GROUP BY dept_name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "college_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "dept_name",
            "y_name": "min(salary)",
            "x_data": [
                [
                    "Astronomy",
                    "Comp. Sci.",
                    "Cybernetics",
                    "Finance",
                    "Geology",
                    "Marketing",
                    "Mech. Eng.",
                    "Physics",
                    "Pol. Sci."
                ]
            ],
            "y_data": [
                [
                    79070.08,
                    80797.83,
                    79866.95,
                    105311.38,
                    99382.59,
                    43770.36,
                    51647.57,
                    108011.81,
                    87549.8
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Find the lowest wage for the departments with an average salary higher than the average payment of all instructors. Visualize them in a bar graph.",
            "Present a bar graph illustrating the minimum salary in departments where the average salary exceeds the overall average.",
            "Provide me with a histogram illustrating the minimum salary in departments where the average salary is higher than the overall average.",
            "What is the minimum salary in departments with an average salary higher than the overall average? Represent this data as a bar chart.",
            "Bar chart displaying the lowest salary for each department name."
        ],
        "record_name": "619"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Openning_year , AVG(Capacity) FROM cinema",
                "binning": "BIN Openning_year BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Openning_year , AVG(Capacity) FROM cinema BIN Openning_year BY YEAR"
        },
        "chart": "Line",
        "hardness": "Easy",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "line",
            "x_name": "Openning_year",
            "y_name": "AVG(Capacity)",
            "x_data": [
                [
                    "2009",
                    "2010",
                    "2011",
                    "2012",
                    "2013",
                    "2014",
                    "2015"
                ]
            ],
            "y_data": [
                [
                    305,
                    544.3333333333334,
                    445.3333333333333,
                    368,
                    330,
                    0,
                    364
                ]
            ],
            "classify": [],
            "describe": "BIN Openning_year BY YEAR"
        },
        "nl_queries": [
            "Provide me with a line chart displaying the average capacity of cinemas that were open for each year, please.",
            "Can you create a line graph illustrating the trend of the average capacity over the years of opening?"
        ],
        "record_name": "471"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Instructor , DNO FROM COURSE ORDER BY Credits",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Instructor , DNO FROM COURSE ORDER BY Credits"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "college_3",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Instructor",
            "y_name": "DNO",
            "x_data": [
                [
                    4230,
                    9826,
                    6191,
                    9011,
                    2881,
                    6112,
                    1193,
                    4230,
                    6112,
                    6112,
                    6112,
                    1121,
                    9826,
                    9172,
                    2192,
                    1148,
                    8918,
                    7712,
                    2192,
                    1148,
                    8918,
                    7723,
                    8114,
                    7712,
                    7792,
                    1121,
                    8423,
                    1121,
                    9823,
                    9823,
                    8791,
                    8791,
                    2738,
                    8102,
                    6182,
                    9823,
                    8772,
                    6541,
                    8122,
                    9922,
                    8723,
                    9210,
                    6191,
                    1823,
                    9824,
                    6925,
                    6191,
                    6191,
                    2119,
                    7231,
                    9514,
                    6330,
                    8722,
                    9379,
                    7134,
                    9514,
                    4432,
                    6910,
                    4432,
                    6910,
                    8989,
                    4432,
                    4432,
                    5718,
                    2311,
                    8772,
                    6541,
                    8102,
                    2881,
                    1177,
                    2738,
                    8772,
                    9210,
                    8118,
                    9210,
                    9011
                ]
            ],
            "y_data": [
                [
                    600,
                    600,
                    600,
                    50,
                    550,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    600,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    520,
                    50,
                    50,
                    50,
                    50,
                    50,
                    50,
                    50,
                    50,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    550,
                    520,
                    520,
                    520,
                    50
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a scatter plot illustrating the relationship between \"Instructor\" and \"DNO\".",
            "Provide a scatter plot illustrating the relationship between the variables \"Instructor\" and \"DNO\".",
            "Create a scatter chart illustrating the correlation between Instructor and DNO.",
            "Illustrate the correlation between Instructor and DNO.",
            "Illustrate the relationship between Instructor and DNO in a scatter plot, please."
        ],
        "record_name": "672"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT last_name , COUNT(last_name) FROM Owners AS T1 JOIN Dogs AS T2 ON T1.owner_id = T2.owner_id GROUP BY last_name ORDER BY last_name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "dog_kennels",
        "vis_obj": {
            "chart": "bar",
            "x_name": "last_name",
            "y_name": "COUNT(last_name)",
            "x_data": [
                [
                    "Stoltenberg",
                    "Schmitt",
                    "Rippin",
                    "Prohaska",
                    "Price",
                    "Nicolas",
                    "Mertz",
                    "Haley",
                    "Funk",
                    "Fisher",
                    "Feil",
                    "DuBuque"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    3,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY last_name"
        },
        "nl_queries": [
            "Provide a bar chart that groups the number of dogs each owner has by their last name, and display it in descending order based on the last name.",
            "Display the number of dogs owned by each owner. Generate a bar chart that groups the data by the owner's last name and arrange the x-axis in descending order from highest to lowest."
        ],
        "record_name": "1204@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC",
                "binning": "BIN HIRE_DATE BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40  ORDER BY SUM(EMPLOYEE_ID) DESC BIN HIRE_DATE BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "SUM(EMPLOYEE_ID)",
            "x_data": [
                [
                    "Thur",
                    "Wed",
                    "Tue",
                    "Sun",
                    "Sat",
                    "Fri",
                    "Mon"
                ]
            ],
            "y_data": [
                [
                    2456,
                    2440,
                    2325,
                    2295,
                    2280,
                    2265,
                    2107
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY WEEKDAY"
        },
        "nl_queries": [
            "For the employees with salaries ranging from 8000 to 12000 and commission not null or department number not equal to 40, create a bar chart illustrating the distribution of hire dates and the sum of employee IDs binned by weekday. Please order the y-axis in descending order.",
            "For the employees with salaries ranging from 8000 to 12000 and either a non-null commission or a department number not equal to 40, retrieve the hire_date and calculate the sum of employee_id grouped by the weekday of the hire_date. Visualize this data using a bar chart and sort it in descending order based on the y-axis.",
            "For employees with salaries ranging from 8000 to 12000 and having non-null commission or department number not equal to 40, present the distribution of hire dates and the sum of employee IDs binned by weekday in a bar graph, sorted in descending order along the Y-axis, please.",
            "For employees whose salary ranges from 8000 to 12000, and either have a non-null commission or their department number is not equal to 40, create a bar chart illustrating the distribution of hire dates and bin the hire dates by weekday. Display the chart with the y-axis in descending order based on the sum of employee IDs.",
            "For employees whose salary falls within the range of 8000 and 12000 and have a non-null commission or belong to a department other than 40, please provide a bar chart depicting the distribution of hire dates and the sum of employee IDs binned by weekdays. List the results in descending order based on the total number."
        ],
        "record_name": "1590@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Class , COUNT(Class) FROM captain GROUP BY Class ORDER BY Class ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "ship_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Class",
            "y_name": "COUNT(Class)",
            "x_data": [
                [
                    "Armed schooner",
                    "Cutter",
                    "Frigate",
                    "Sloop-of-war",
                    "Third-rate ship of the line"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Class"
        },
        "nl_queries": [
            "What is the cumulative count of captains with varying categories? Please present it based on the Class in ascending order.",
            "Create a bar chart illustrating the quantity of classes, grouped by class, ordered in ascending order by the class.",
            "Present a bar chart that compares the total count of captains from distinct classifications, and arrange the bars in ascending order based on the class, please.",
            "Compare the overall count of captains across distinct categories using a bar chart, arranged in ascending order by the Class."
        ],
        "record_name": "2753@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY SUM(meter_100) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "swimming",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nationality",
            "y_name": "SUM(meter_100)",
            "x_data": [
                [
                    "France",
                    "Canada",
                    "Italy",
                    "Poland",
                    "Tunisia",
                    "Ukraine",
                    "Australia"
                ]
            ],
            "y_data": [
                [
                    55,
                    57,
                    57,
                    57,
                    57,
                    57,
                    114
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "Create a grouped bar chart depicting the distribution of Nationality and the total amount of meter_100, with Nationality as the grouping attribute. Sort the chart in ascending order based on the Y-axis.",
            "Generate a grouped bar chart illustrating the distribution of Nationality and the sum of meter_100, sorted by the total number in ascending order, please.",
            "Bar chart with nationality on the x-axis and the sum of meters (100) on the y-axis, ranked in ascending order by the y-axis, please.",
            "Create a stacked bar chart illustrating the distribution of Nationality and the total sum of meter_100, grouped by the Nationality attribute, and arrange the display based on the ascending order of the total number.",
            "Provide a comparison of the total sum of meter_100 across different nationalities, grouped by the attribute of nationality, and list the Y-axis in ascending order, please.",
            "Retrieve the Nationality and the sum of meter_100, and group them by the attribute Nationality. Visualize this data using a bar chart, with the Y-axis ranked in ascending order from lowest to highest."
        ],
        "record_name": "2908@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Continent , avg(LifeExpectancy) FROM country GROUP BY Continent ORDER BY Continent DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "world_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Continent",
            "y_name": "avg(LifeExpectancy)",
            "x_data": [
                [
                    "South America",
                    "Oceania",
                    "Asia",
                    "Africa"
                ]
            ],
            "y_data": [
                [
                    70.94615384615386,
                    69.715,
                    67.44117647058825,
                    52.57192982456139
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For every continent where the average life expectancy is less than 72, create a bar graph to illustrate their average life expectancy, and arrange them in descending order by the continent.",
            "Create a bar graph illustrating the relationship between continents and the average life expectancy, and arrange them in descending order based on the x-axis.",
            "Provide a bar chart illustrating the average life expectancy for each continent where the average life expectancy is less than 72, arranged in descending order on the X-axis."
        ],
        "record_name": "3269@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM manager WHERE Age > 50 OR Age < 46 GROUP BY Country ORDER BY COUNT(Country) DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "railway",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(Country)",
            "x_data": [
                [
                    "United States",
                    "England",
                    "Australia"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Country"
        },
        "nl_queries": [
            "A bar chart illustrating the quantity of countries with managers aged above 50 or below 46, listed in descending order according to the Y-axis.",
            "Display the quantity of countries with managers aged above 50 or below 46, and could you arrange them in descending order by the total number, please?",
            "Display the nations with managers aged above 50 or below 46, and represent them with a bar chart. Please arrange the countries in descending order based on the count."
        ],
        "record_name": "2657@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT ACC_Road , AVG(School_ID) FROM basketball_match GROUP BY ACC_Road ORDER BY ACC_Road ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "ACC_Road",
            "y_name": "AVG(School_ID)",
            "x_data": [
                [
                    "3\u20135",
                    "6\u20132",
                    "8\u20130"
                ]
            ],
            "y_data": [
                [
                    4.5,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY ACC_Road"
        },
        "nl_queries": [
            "Bar chart with the x-axis representing the ACC Road and the y-axis representing the average school ID. Please sort the bars in ascending order.",
            "Create a bar chart illustrating the distribution of ACC_Road and the average of School_ID, grouped by the ACC_Road attribute. Please arrange the names in ascending order.",
            "A grouped bar chart displays the distribution of ACC_Road and the average of School_ID, categorized by ACC_Road attribute, with names sorted in ascending order from lowest to highest.",
            "Display the distribution of ACC_Road and the average of School_ID, grouped by the ACC_Road attribute, in a bar chart. Please sort the bars in ascending order.",
            "Retrieve the ACC_Road attribute and calculate the average of the School_ID attribute. Group the data by ACC_Road and represent it visually using a bar chart. Please arrange the bars in ascending order, from lowest to highest.",
            "Provide a comparison of the average School_ID across different ACC_Road attributes using a bar chart, and please sort the names in ascending order from low to high."
        ],
        "record_name": "3101@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT avg(stu_gpa) , min(stu_gpa) FROM student GROUP BY DEPT_CODE"
        },
        "chart": "Grouping Scatter",
        "hardness": "Easy",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "avg(stu_gpa)",
            "y_name": "min(stu_gpa)",
            "x_data": [
                [
                    2.776666666666667
                ],
                [
                    2.84
                ],
                [
                    3.18
                ],
                [
                    3.87
                ],
                [
                    2.11
                ]
            ],
            "y_data": [
                [
                    2.26
                ],
                [
                    2.84
                ],
                [
                    3.09
                ],
                [
                    3.87
                ],
                [
                    2.11
                ]
            ],
            "classify": [
                "ACCT",
                "BIOL",
                "CIS",
                "EDU",
                "ENGL"
            ],
            "describe": "GROUP BY DEPT_CODE"
        },
        "nl_queries": [
            "Discover the correlation between the minimum and average GPA of all students in each department using a scatter plot grouped by department code.",
            "What is the correlation between the minimum and average student GPA for each department? Please provide a scatter plot with the departments grouped by department code.",
            "Scatterplot of the minimum student GPA versus the average student GPA grouped by department code."
        ],
        "record_name": "541"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Headquarters , COUNT(Headquarters) FROM company GROUP BY Headquarters ORDER BY Headquarters DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "company_employee",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarters",
            "y_name": "COUNT(Headquarters)",
            "x_data": [
                [
                    "USA",
                    "UK",
                    "Russia",
                    "Netherlands",
                    "Germany",
                    "France",
                    "China",
                    "Brazil"
                ]
            ],
            "y_data": [
                [
                    8,
                    2,
                    1,
                    1,
                    1,
                    1,
                    4,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarters"
        },
        "nl_queries": [
            "Display the quantity of headquarters from each corporate office, and arrange them on the X-axis in descending order, please.",
            "What is the count of companies for each headquarters? Please visualize it using a bar chart and sort it in descending order by the headquarters."
        ],
        "record_name": "683@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nationality , SUM(meter_100) FROM swimmer GROUP BY Nationality ORDER BY Nationality ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "swimming",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nationality",
            "y_name": "SUM(meter_100)",
            "x_data": [
                [
                    "Australia",
                    "Canada",
                    "France",
                    "Italy",
                    "Poland",
                    "Tunisia",
                    "Ukraine"
                ]
            ],
            "y_data": [
                [
                    114,
                    57,
                    55,
                    57,
                    57,
                    57,
                    57
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "Generate a bar chart illustrating the distribution of Nationality and the total sum of meter_100, grouped by the attribute Nationality. Please arrange the bars in ascending order.",
            "Create a bar chart illustrating the distribution of Nationality and the total of meter_100, grouped by the Nationality attribute. Please ensure that the X-axis is sorted in ascending order.",
            "Provide me with a comparison of the total meter_100 values across different nationalities, grouped by the attribute 'Nationality', and arrange the x-axis in ascending order, please.",
            "Construct a bar chart depicting the distribution of Nationality and the cumulative sum of meter_100, grouped by the Nationality attribute, and arrange the bars in ascending order from lowest to highest.",
            "Bar chart with the nationality on the x-axis and the sum on the y-axis, with the x-axis ordered in ascending order, please.",
            "Retrieve the Nationality and the total sum of meter_100, and group them by the attribute Nationality. Visualize the data using a bar chart, and arrange the bars in ascending order on the x-axis."
        ],
        "record_name": "2908@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT All_Neutral , All_Games_Percent FROM basketball_match ORDER BY All_Neutral ASC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "All_Neutral",
            "y_name": "All_Games_Percent",
            "x_data": [
                [
                    "3\u20133",
                    "4\u20133",
                    "5\u20133",
                    "9\u20131"
                ]
            ],
            "y_data": [
                [
                    0.6,
                    0.706,
                    0.8240000000000001,
                    0.946
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a bar graph displaying the percentage of all games across all neutral locations, and arrange the bars in ascending order.",
            "Display the distribution of All_Neutral and All_Games_Percent in a bar chart, and arrange the bars in ascending order, please.",
            "Provide me with the comparison between the All_Games_Percent and the All_Neutral, and sort it in ascending order based on the x-axis.",
            "Provide a bar chart that compares the All_Games_Percent to the All_Neutral, and arrange it in ascending order on the x-axis, please.",
            "Produce a bar graph depicting the distribution of All_Neutral and All_Games_Percent, arranged in ascending order based on the X-axis.",
            "Find the data for All_Neutral and All_Games_Percent, and represent them in a bar graph, with the names ranked from lowest to highest."
        ],
        "record_name": "3146@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nationality , COUNT(*) FROM people GROUP BY Nationality"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "poker_player",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nationality",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Bulgaria",
                    "Russia"
                ]
            ],
            "y_data": [
                [
                    1,
                    6
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What are the various nationalities of individuals and the respective population count for each nationality?",
            "Generate a bar graph illustrating the various nationalities of individuals and the corresponding count of people from each country.",
            "What are the various ethnicities of individuals and their respective population sizes from each country? Represent this data using a bar chart, please.",
            "Create a bar graph depicting the population count for each nationality.",
            "Visualize a bar chart representing the population count for each nationality.",
            "Display the quantity of individuals per nationality. Visualize this using a bar chart.",
            "Create a bar chart comparing nationality to the total number of individuals."
        ],
        "record_name": "2594"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Openning_year , SUM(Capacity) FROM cinema GROUP BY Openning_year ORDER BY Openning_year DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Openning_year",
            "y_name": "SUM(Capacity)",
            "x_data": [
                [
                    "2015-01-01",
                    "2013-01-01",
                    "2012-01-01",
                    "2011-01-01",
                    "2010-01-01",
                    "2009-01-01"
                ]
            ],
            "y_data": [
                [
                    364,
                    330,
                    368,
                    1336,
                    1633,
                    305
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Openning_year"
        },
        "nl_queries": [
            "Provide a bar chart illustrating the total capacity for each year of establishment, and arrange the bars in descending order, please.",
            "A bar chart displaying the total capacity of open cinemas for each year, could you please sort it in descending order based on the x-axis?"
        ],
        "record_name": "468@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT date_departed , COUNT(date_departed) FROM Dogs GROUP BY date_departed ORDER BY date_departed ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "dog_kennels",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_departed",
            "y_name": "COUNT(date_departed)",
            "x_data": [
                [
                    "2018-03-24",
                    "2018-03-25"
                ]
            ],
            "y_data": [
                [
                    3,
                    12
                ]
            ],
            "classify": [],
            "describe": "GROUP BY date_departed"
        },
        "nl_queries": [
            "Present the count of dogs that have departed each day using a grouped bar chart, where the bars are arranged in ascending order, based on the departure date.",
            "Display the quantity of departures for each departure date, and please arrange them in ascending order based on the date_departed.",
            "How many canines left each day? Please visualize this using a bar chart that groups the data by the departure date. Could you sort the date_departed in ascending order?"
        ],
        "record_name": "1182@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Main_Industry , COUNT(Main_Industry) FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company) GROUP BY Main_Industry"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "gas_company",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Main_Industry",
            "y_name": "COUNT(Main_Industry)",
            "x_data": [
                [
                    "Banking",
                    "Conglomerate"
                ]
            ],
            "y_data": [
                [
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Main_Industry"
        },
        "nl_queries": [
            "Display the quantity of companies in each primary sector that do not have a gas station using a bar graph.",
            "How many businesses without a fuel station are there in each primary sector? Create a bar chart to illustrate."
        ],
        "record_name": "1510"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Title , max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id = T2.film_id GROUP BY Title"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "cinema",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Title",
            "y_name": "max(T1.price)",
            "x_data": [
                [
                    "The Case of the Mystery Weekend",
                    "The Case of the Smart Dummy",
                    "The Case: Off the Record",
                    "The Case of the Bermuda Triangle",
                    "The Case of the Piggy Banker"
                ]
            ],
            "y_data": [
                [
                    15.99,
                    12.99,
                    8.99,
                    9.99,
                    12.99
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A bar chart illustrating the titles and maximum prices of each film.",
            "Generate a bar chart showcasing the title and maximum price of each film.",
            "What is the title and highest price of each movie?",
            "Present the title and maximum price for each movie in a bar graph.",
            "Provide the title and maximum price for each movie. Display the information in a bar chart."
        ],
        "record_name": "447"
    },
    {
        "vis_query": {
            "vis_part": "Visualize LINE",
            "data_part": {
                "sql_part": "SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC",
                "binning": "BIN Start_from BY YEAR"
            },
            "VQL": "Visualize LINE SELECT Start_from , AVG(Employee_ID) FROM hiring GROUP BY Is_full_time ORDER BY Start_from DESC BIN Start_from BY YEAR"
        },
        "chart": "Grouping Line",
        "hardness": "Extra Hard",
        "db_id": "employee_hire_evaluation",
        "vis_obj": {
            "chart": "line",
            "x_name": "Start_from",
            "y_name": "AVG(Employee_ID)",
            "x_data": [
                [
                    "2013",
                    "2012",
                    "2011",
                    "2010",
                    "2009",
                    "2008",
                    "2007",
                    "2006",
                    "2005",
                    "2004",
                    "2003"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    1.5,
                    3,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    2.5,
                    2,
                    0,
                    0,
                    0.5,
                    3.5,
                    0,
                    0,
                    0,
                    0,
                    1
                ]
            ],
            "classify": [
                "F",
                "T"
            ],
            "describe": "GROUP BY Is_full_time, BIN Start_from BY YEAR"
        },
        "nl_queries": [
            "A grouping line chart illustrates the fluctuation of the average of Employee_ID across Start_from, categorized by the attribute Is_full_time and binned by time intervals. Please present the data on the x-axis in descending order from high to low.",
            "Present the fluctuations in the average of Employee_ID across Start_from, classified by the attribute Is_full_time and categorizing Start_from by time intervals, in a line chart. Arrange the data on the X-axis in descending order, please.",
            "Present the trend of the average Employee_ID across Start_from, and group it by the attribute Is_full_time, with Start_from binned by time intervals, using a line chart. Please ensure that the X-axis is sorted in descending order.",
            "Provide me with the trend in the average of Employee_ID over Start_from, grouping by the attribute Is_full_time and categorizing Start_from into time intervals. Display the results on the x-axis in descending order from high to low.",
            "Create a line graph depicting the fluctuation of the average Employee_ID over Start_from, categorizing them based on the attribute Is_full_time and grouping Start_from into time intervals. Please sort Start_from in descending order.",
            "For the mean of Employee_ID and Start_from, represent the pattern graphically and present it with the x-axis ordered from highest to lowest.",
            "I would like to visualize the average employee ID trend over time, grouped by the \"Is_full_time\" variable, and sorted on the X-axis in descending order."
        ],
        "record_name": "1353@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Minister , COUNT(Minister) FROM party WHERE party_name != 'Progress Party' GROUP BY Minister ORDER BY Minister ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "party_people",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Minister",
            "y_name": "COUNT(Minister)",
            "x_data": [
                [
                    "Dr. Kwame Nkrumah (MP)",
                    "Ebenezer Ako-Adjei (MP)",
                    "Imoru Egala (MP)"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Minister"
        },
        "nl_queries": [
            "Which ministers do not belong to the Progress Party, and display them in a bar chart, listing the ministers from least to greatest.",
            "Display a bar chart showing all ministers who are not affiliated with the Progress Party, and arrange them in ascending order based on the length of the bars."
        ],
        "record_name": "2517@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , COUNT(JOB_ID) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id = T2.department_id WHERE T2.department_name = 'Finance' GROUP BY JOB_ID ORDER BY JOB_ID DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "COUNT(JOB_ID)",
            "x_data": [
                [
                    "FI_MGR",
                    "FI_ACCOUNT"
                ]
            ],
            "y_data": [
                [
                    1,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "Provide a stacked bar chart that groups and tallies the job IDs for all employees in the Finance department, and please list them in descending order by the bars.",
            "For all employees in the Finance department, compare the total count of distinct job IDs using a bar graph, and please list them in descending order by the bars."
        ],
        "record_name": "1962@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Industry , COUNT(Industry) FROM company GROUP BY Industry ORDER BY Industry DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "company_employee",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Industry",
            "y_name": "COUNT(Industry)",
            "x_data": [
                [
                    "Retailing",
                    "Oil and gas",
                    "Conglomerate",
                    "Banking",
                    "Automotive"
                ]
            ],
            "y_data": [
                [
                    1,
                    8,
                    2,
                    7,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Industry"
        },
        "nl_queries": [
            "Industry-wise bar chart with the number of industries represented on the y-axis, sorted in descending order by the industry.",
            "Generate a bar chart depicting the quantity of companies within each industry, arranging them from highest to lowest based on the length of the bars, please."
        ],
        "record_name": "682@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Fname , Age FROM student AS T1 JOIN has_pet AS T2 ON T1.stuid = T2.stuid ORDER BY Age DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "pets_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Fname",
            "y_name": "Age",
            "x_data": [
                [
                    "Tracy",
                    "Linda"
                ]
            ],
            "y_data": [
                [
                    19,
                    18
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "What are the distinct given names and ages of the students who possess pets? Please represent this information in a bar chart, arranging the Y-axis in descending order.",
            "Provide me with a histogram that represents the various first names and ages of the students who own pets. Please sort the data in descending order on the Y-axis.",
            "Create a bar graph depicting the distinct first names and ages of students who own pets, and arrange them in descending order based on the y-axis.",
            "Retrieve the given names and ages of students who possess a pet, and present the ages in descending order, from highest to lowest."
        ],
        "record_name": "2563@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Length , Height FROM roller_coaster",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Length , Height FROM roller_coaster"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "roller_coaster",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Length",
            "y_name": "Height",
            "x_data": [
                [
                    3236,
                    3914,
                    4726,
                    2900,
                    1574,
                    6442
                ]
            ],
            "y_data": [
                [
                    96,
                    105,
                    136,
                    120,
                    50,
                    163
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Provide a scatter plot illustrating the lengths and heights of roller coasters.",
            "What are the dimensions and heights of roller coasters?",
            "What are the dimensions (lengths and heights) of roller coasters? Please illustrate them in a scatter plot.",
            "Scatter plot to illustrate the relationship between length on the x-axis and height on the y-axis."
        ],
        "record_name": "2684"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT title , stars FROM Rating AS T1 JOIN Movie AS T2 ON T1.mID = T2.mID WHERE director != \"null\" ORDER BY title ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "movie_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "title",
            "y_name": "stars",
            "x_data": [
                [
                    "Avatar",
                    "Gone with the Wind",
                    "Raiders of the Lost Ark",
                    "The Sound of Music"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    4,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Exclude movies with NULL directors. For each director, display the titles and ratings of all the movies they reviewed. Present the results in a bar chart, and arrange the X-axis in ascending order from lowest to highest."
        ],
        "record_name": "2392@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT skill_description , COUNT(skill_description) FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id = T2.engineer_id JOIN Skills AS T3 ON T2.skill_id = T3.skill_id GROUP BY other_details ,  skill_description ORDER BY skill_description ASC"
        },
        "chart": "Stacked Bar",
        "hardness": "Extra Hard",
        "db_id": "assets_maintenance",
        "vis_obj": {
            "chart": "bar",
            "x_name": "skill_description",
            "y_name": "COUNT(skill_description)",
            "x_data": [
                [
                    "Electrical",
                    "Mechanical",
                    "TV, Video"
                ]
            ],
            "y_data": [
                [
                    9,
                    6,
                    4
                ],
                [
                    0,
                    0,
                    1
                ]
            ],
            "classify": [
                "",
                "Skilled"
            ],
            "describe": "GROUP BY other_details, GROUP BY skill_description"
        },
        "nl_queries": [
            "A stacked bar chart illustrating the quantity of engineers for various skill descriptions. The x-axis represents skill descriptions, categorized by other details, and I would like it to be sorted in ascending order."
        ],
        "record_name": "129@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Position , COUNT(Position) FROM player GROUP BY Position HAVING avg(Points) >= 20"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "sports_competition",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Position",
            "y_name": "COUNT(Position)",
            "x_data": [
                [
                    "Full Back",
                    "Hooker",
                    "Loose Forward",
                    "Prop",
                    "Right Centre",
                    "Right Wing",
                    "Scrum Half",
                    "Second Row",
                    "Stand Off"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Position"
        },
        "nl_queries": [
            "Enumerate the player positions with an average points scored higher than 20, and compare the quantity of positions.",
            "Enumerate the player positions for which the average points scored by that position exceed 20, and provide a bar chart illustrating the quantity of different positions.",
            "Stacked bar chart to represent the position of the x-axis and the number of positions on the y-axis, please."
        ],
        "record_name": "2821"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT asset_make , COUNT(asset_make) FROM Assets GROUP BY asset_make"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "assets_maintenance",
        "vis_obj": {
            "chart": "bar",
            "x_name": "asset_make",
            "y_name": "COUNT(asset_make)",
            "x_data": [
                [
                    "CN",
                    "DE",
                    "FR",
                    "GB",
                    "IE",
                    "IN",
                    "IT",
                    "PT",
                    "RU"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    2,
                    1,
                    1,
                    2,
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY asset_make"
        },
        "nl_queries": [
            "Display the quantity of assets and categorize them by the make of the asset in a bar chart.",
            "Bar chart to display the quantity of assets produced by various asset manufacturers."
        ],
        "record_name": "140"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC",
                "binning": "BIN date_moved_in BY YEAR"
            },
            "VQL": "Visualize BAR SELECT date_moved_in , COUNT(date_moved_in) FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id  ORDER BY COUNT(date_moved_in) DESC BIN date_moved_in BY YEAR"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "local_govt_and_lot",
        "vis_obj": {
            "chart": "bar",
            "x_name": "date_moved_in",
            "y_name": "COUNT(date_moved_in)",
            "x_data": [
                [
                    "2015",
                    "2016"
                ]
            ],
            "y_data": [
                [
                    9,
                    4
                ]
            ],
            "classify": [],
            "describe": "BIN date_moved_in BY YEAR"
        },
        "nl_queries": [
            "Please utilize a stacked bar chart to compare the count of customers based on their move-in date, with the move-in dates grouped into yearly intervals. Please ensure that the total count is listed in descending order.",
            "What is the distribution of customer moves by date? Could you please provide a bar chart that groups move-in dates into year intervals and sorts them in descending order based on the number of moves in each interval?"
        ],
        "record_name": "2097@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Pixel_aspect_ratio_PAR , COUNT(Pixel_aspect_ratio_PAR) FROM tv_channel WHERE LANGUAGE != 'English' GROUP BY Pixel_aspect_ratio_PAR ORDER BY COUNT(Pixel_aspect_ratio_PAR) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "tvshow",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Pixel_aspect_ratio_PAR",
            "y_name": "COUNT(Pixel_aspect_ratio_PAR)",
            "x_data": [
                [
                    "16:9",
                    "4:3 / 16:9",
                    "4:3"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    6
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Pixel_aspect_ratio_PAR"
        },
        "nl_queries": [
            "Provide me with a bar graph that illustrates the comparison of the pixel aspect ratio and the country of TV channels that do not utilize English, displayed by the total number in ascending order.",
            "What are the pixel aspect ratio and country of origin for all non-English TV channels? Present the comparison of the total count of pixel aspect ratio in a bar graph, ordering it in ascending order by the y-axis.",
            "Obtain the pixel aspect ratio and identify the countries of the TV channels that do not broadcast in English. Display the number of distinct pixel aspect ratios using a bar chart, and list them in ascending order based on the Y-axis."
        ],
        "record_name": "3062@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT bname , sum(amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id = T2.branch_id GROUP BY T1.bname"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "loan_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "bname",
            "y_name": "sum(amount)",
            "x_data": [
                [
                    "broadway",
                    "downtown",
                    "morningside"
                ]
            ],
            "y_data": [
                [
                    5000,
                    3000,
                    2050
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Determine the aggregate loan amount provided by each branch of the bank.",
            "Provide a bar chart illustrating the names of the distinct bank branches and their corresponding total loan amounts.",
            "What are the titles of the various bank branches, and what are their aggregate loan sums? Please present the information in a bar chart."
        ],
        "record_name": "2072"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT lot_details , COUNT(lot_details) FROM LOTS GROUP BY lot_details ORDER BY COUNT(lot_details) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "tracking_share_transactions",
        "vis_obj": {
            "chart": "bar",
            "x_name": "lot_details",
            "y_name": "COUNT(lot_details)",
            "x_data": [
                [
                    "z",
                    "d",
                    "s",
                    "m",
                    "h",
                    "x",
                    "r",
                    "q"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    2,
                    2,
                    2,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY lot_details"
        },
        "nl_queries": [
            "A stacked bar chart categorizes the lot details and calculates the count of each lot detail, listed in descending order based on the number of lot details.",
            "Bar chart with the X-axis representing the details of the lots, and the Y-axis representing the number of lot details, with the list arranged in descending order on the Y-axis, please.",
            "Retrieve the details of the lots, group them based on the lot details, calculate the quantity of each lot detail, and list them in descending order along the y-axis, please."
        ],
        "record_name": "2993@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT dept_name , COUNT(dept_name) FROM instructor GROUP BY dept_name ORDER BY salary"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "college_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "dept_name",
            "y_name": "COUNT(dept_name)",
            "x_data": [
                [
                    "Accounting",
                    "Astronomy",
                    "Athletics",
                    "Biology",
                    "Comp. Sci.",
                    "Cybernetics",
                    "Elec. Eng.",
                    "English",
                    "Finance",
                    "Geology",
                    "Languages",
                    "Marketing",
                    "Mech. Eng.",
                    "Physics",
                    "Pol. Sci.",
                    "Psychology",
                    "Statistics"
                ]
            ],
            "y_data": [
                [
                    4,
                    1,
                    5,
                    2,
                    2,
                    4,
                    4,
                    4,
                    1,
                    1,
                    3,
                    4,
                    2,
                    2,
                    3,
                    2,
                    6
                ]
            ],
            "classify": [],
            "describe": "GROUP BY dept_name"
        },
        "nl_queries": [
            "Provide a bar chart illustrating the distribution of department names and the corresponding quantity of each department name, grouped by the attribute \"dept_name\".",
            "Create a bar chart depicting the distribution of department names and the corresponding quantities of each department, with the categories grouped by the attribute \"dept_name\".",
            "Retrieve the department names and their corresponding department amounts, group them by the attribute dept_name, and represent them visually using a bar graph.",
            "Present the distribution and quantity of department names, and group them by the department name attribute in a bar chart.",
            "A bar chart displays the distribution and quantity of department names (dept_name), organized by grouping according to the dept_name attribute."
        ],
        "record_name": "613"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Type , COUNT(Type) FROM ship GROUP BY Type",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Type , COUNT(Type) FROM ship GROUP BY Type"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "ship_mission",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Type",
            "y_name": "COUNT(Type)",
            "x_data": [
                [
                    "Battle ship",
                    "Cargo ship"
                ]
            ],
            "y_data": [
                [
                    3,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Type"
        },
        "nl_queries": [
            "What is the overall count of each classification of ships? Present it to me in the form of a pie chart, please.",
            "Provide me with the ratio of each ship type in relation to the total number.",
            "Present a pie chart illustrating the overall count for each category of ship type.",
            "I would like to determine the ratio of each category."
        ],
        "record_name": "2757"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Work_Type , avg(t1.age) FROM journalist AS t1 JOIN news_report AS t2 ON t1.journalist_id = t2.journalist_id GROUP BY t2.work_type ORDER BY Work_Type ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "news_report",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Work_Type",
            "y_name": "avg(t1.age)",
            "x_data": [
                [
                    "Host",
                    "Music",
                    "Screening"
                ]
            ],
            "y_data": [
                [
                    43,
                    35.5,
                    30.33333333333333
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Calculate the mean age of journalists based on their respective role types, and present the outcome using a bar graph, listing the x-axis values in ascending order from lowest to highest."
        ],
        "record_name": "2475@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT title , COUNT(title) FROM course AS T1 JOIN teaches AS T2 ON T1.course_id = T2.course_id JOIN instructor AS T3 ON T2.id = T3.id WHERE YEAR = 2008 GROUP BY title ORDER BY COUNT(title) DESC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "college_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "title",
            "y_name": "COUNT(title)",
            "x_data": [
                [
                    "Elastic Structures",
                    "World History",
                    "Transaction Processing",
                    "Surfing",
                    "Race Car Driving",
                    "Networking",
                    "Marine Mammals",
                    "Embedded Systems",
                    "Animal Behavior"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY title"
        },
        "nl_queries": [
            "What is the number of instructors for each course in 2008? Please display a bar chart with the courses grouped by title, and arrange them in descending order on the y-axis.",
            "Provide a bar chart that illustrates the quantity of instructors for each course in the year 2008, arranged in descending order on the y-axis, please."
        ],
        "record_name": "653@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Height FROM people",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Height FROM people"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "candidate_poll",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Height",
            "x_data": [
                [
                    "Hubert Henno",
                    "Dominique Daquin",
                    "St\u00e9phane Antiga",
                    "Laurent Capet",
                    "Frantz Granvorka",
                    "Vincent Montm\u00e9at",
                    "Lo\u00efc De Kergret",
                    "Philippe Bar\u00e7a-Cysique",
                    "Guillaume Samica"
                ]
            ],
            "y_data": [
                [
                    188,
                    197,
                    200,
                    202,
                    195,
                    196,
                    193,
                    194,
                    196
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Draw a bar graph illustrating the distribution of \"Name\" and \"Height\".",
            "Retrieve the names and heights, and represent them using a bar graph.",
            "Generate a bar chart illustrating the distribution of individuals' names and their corresponding heights.",
            "Provide a bar chart that compares the height for each name, please.",
            "A bar chart displays the distribution of Name and Height.",
            "Create a bar chart illustrating the relationship between name and height."
        ],
        "record_name": "394"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT JOB_ID , AVG(MANAGER_ID) FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR department_id != 40 GROUP BY JOB_ID ORDER BY JOB_ID ASC"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "JOB_ID",
            "y_name": "AVG(MANAGER_ID)",
            "x_data": [
                [
                    "AC_ACCOUNT",
                    "AC_MGR",
                    "AD_ASST",
                    "AD_PRES",
                    "AD_VP",
                    "FI_ACCOUNT",
                    "FI_MGR",
                    "IT_PROG",
                    "MK_MAN",
                    "MK_REP",
                    "PR_REP",
                    "PU_CLERK",
                    "PU_MAN",
                    "SA_MAN",
                    "SA_REP",
                    "SH_CLERK",
                    "ST_CLERK",
                    "ST_MAN"
                ]
            ],
            "y_data": [
                [
                    205,
                    101,
                    101,
                    0,
                    100,
                    108,
                    101,
                    102.8,
                    100,
                    201,
                    101,
                    114,
                    100,
                    100,
                    147,
                    122,
                    122,
                    100
                ]
            ],
            "classify": [],
            "describe": "GROUP BY JOB_ID"
        },
        "nl_queries": [
            "For employees with salaries ranging from 8000 to 12000 and either a non-null commission or a department number that is not equal to 40, please present the distribution of job IDs and the average manager ID. Display this information in a bar chart grouped by the job ID attribute, listed in ascending order on the X-axis.",
            "For employees whose salary falls between 8000 and 12000, and have a non-null commission or are not in department number 40, provide a comparison of the average manager_id across job_id, grouping the data by job_id, and ranking it in ascending order on the X-axis, please.",
            "For the employees whose salary falls between 8000 and 12000, and either have a non-null commission or their department number is not equal to 40, generate a bar chart illustrating the distribution of job_id and the average manager_id. Group the data by the job_id attribute and list it in ascending order on the X-axis.",
            "For employees whose salary falls within the range of 8000 and 12000, and have a non-null commission or a department number that is not equal to 40, provide a comparison of the average manager_id across job_id attributes. Please represent this data using a bar chart, and arrange the bars in ascending order.",
            "For employees whose salary falls between 8000 and 12000 and have a non-null commission or do not belong to department number 40, generate a bar chart illustrating the distribution of job_id and the average of manager_id. Group the data by job_id and rank it in ascending order on the X-axis, please."
        ],
        "record_name": "1605@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.first_name , T1.customer_id FROM Customers AS T1 JOIN bookings AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.first_name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "products_for_hire",
        "vis_obj": {
            "chart": "bar",
            "x_name": "first_name",
            "y_name": "customer_id",
            "x_data": [
                [
                    "Elinore",
                    "German",
                    "Jamir",
                    "Layne",
                    "Marilo",
                    "Maximilian",
                    "Rosalee"
                ]
            ],
            "y_data": [
                [
                    8,
                    9,
                    15,
                    10,
                    7,
                    11,
                    3
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "How many bookings did each customer make? Display the customer ID on the Y-axis and the first name on the X-axis in a bar graph. Please sort the X-axis in ascending order from low to high."
        ],
        "record_name": "2613@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT CID , Instructor FROM COURSE ORDER BY Credits",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT CID , Instructor FROM COURSE ORDER BY Credits"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "college_3",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "CID",
            "y_name": "Instructor",
            "x_data": [
                [
                    600.1030000000001,
                    600.303,
                    600.601,
                    50.802,
                    550.79,
                    600.101,
                    600.107,
                    600.109,
                    600.113,
                    600.121,
                    600.211,
                    600.227,
                    600.232,
                    600.271,
                    600.315,
                    600.3330000000001,
                    600.337,
                    600.363,
                    600.415,
                    600.433,
                    600.437,
                    600.445,
                    600.461,
                    600.4630000000001,
                    600.465,
                    600.509,
                    600.6569999999999,
                    600.7869999999999,
                    500.20300000000003,
                    500.204,
                    500.205,
                    500.20599999999996,
                    550.62,
                    550.626,
                    550.631,
                    550.661,
                    550.6709999999999,
                    550.681,
                    550.721,
                    550.75,
                    520.137,
                    520.219,
                    520.325,
                    520.345,
                    520.349,
                    520.3530000000001,
                    520.401,
                    520.41,
                    520.419,
                    520.4209999999999,
                    520.432,
                    520.475,
                    520.49,
                    520.605,
                    520.609,
                    520.651,
                    50.102,
                    50.108999999999995,
                    50.325,
                    50.37,
                    50.381,
                    50.427,
                    50.67,
                    50.821000000000005,
                    550.111,
                    550.1709999999999,
                    550.2909999999999,
                    550.31,
                    550.361,
                    550.413,
                    550.42,
                    550.471,
                    520.2130000000001,
                    520.435,
                    520.6030000000001,
                    50.203
                ]
            ],
            "y_data": [
                [
                    4230,
                    9826,
                    6191,
                    9011,
                    2881,
                    6112,
                    1193,
                    4230,
                    6112,
                    6112,
                    6112,
                    1121,
                    9826,
                    9172,
                    2192,
                    1148,
                    8918,
                    7712,
                    2192,
                    1148,
                    8918,
                    7723,
                    8114,
                    7712,
                    7792,
                    1121,
                    8423,
                    1121,
                    9823,
                    9823,
                    8791,
                    8791,
                    2738,
                    8102,
                    6182,
                    9823,
                    8772,
                    6541,
                    8122,
                    9922,
                    8723,
                    9210,
                    6191,
                    1823,
                    9824,
                    6925,
                    6191,
                    6191,
                    2119,
                    7231,
                    9514,
                    6330,
                    8722,
                    9379,
                    7134,
                    9514,
                    4432,
                    6910,
                    4432,
                    6910,
                    8989,
                    4432,
                    4432,
                    5718,
                    2311,
                    8772,
                    6541,
                    8102,
                    2881,
                    1177,
                    2738,
                    8772,
                    9210,
                    8118,
                    9210,
                    9011
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a scatter plot illustrating the relationship between CID and Instructor.",
            "Provide a scatter plot illustrating the relationship between CID and Instructor.",
            "Visualize the correlation between CID and Instructor.",
            "A scatter plot displays the relationship between CID and Instructor.",
            "What is the connection or correlation between the CID (Course ID) and the Instructor?"
        ],
        "record_name": "671"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history)",
                "binning": "BIN HIRE_DATE BY MONTH"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(DEPARTMENT_ID) FROM employees WHERE employee_id NOT IN (SELECT employee_id FROM job_history) BIN HIRE_DATE BY MONTH"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "SUM(DEPARTMENT_ID)",
            "x_data": [
                [
                    "June",
                    "July",
                    "Aug",
                    "Sept",
                    "Oct"
                ]
            ],
            "y_data": [
                [
                    990,
                    1350,
                    2480,
                    1400,
                    110
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY MONTH"
        },
        "nl_queries": [
            "For employees who have no prior job history, provide a comparison of the total department_id sum across different time bins of hire_date using a bar chart.",
            "Visualize a bar chart illustrating the distribution of hire dates for employees who have not previously held any jobs. Additionally, group the hire dates by time and display the sum of department IDs within each bin.",
            "For employees who have no prior job experience, please present a bar chart depicting the distribution of hire dates and the total number of department IDs grouped by hire date over time.",
            "For employees who have no past job experience, generate a bar chart illustrating the distribution of hire dates and the sum of department IDs grouped by hire date over time.",
            "For employees with no prior job experience, a bar chart illustrates the distribution of hire dates and the accumulation of department IDs grouped by hire date over time."
        ],
        "record_name": "1718"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT T1.FirstName , T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId = T2.EmployeeId"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "chinook_1",
        "vis_obj": {
            "chart": "pie",
            "x_name": "FirstName",
            "y_name": "SupportRepId",
            "x_data": [
                [
                    "Puja",
                    "Diego",
                    "Luis"
                ]
            ],
            "y_data": [
                [
                    3,
                    4,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Provide a pie chart illustrating the distribution of first names and support rep IDs for employees who serve 10 or more customers.",
            "Create a pie chart illustrating the distribution of first names and support representative IDs for employees handling 10 or more customers.",
            "What are the given names and support representative identification numbers for employees who are assisting 10 or more clients? Illustrate this information using a pie chart."
        ],
        "record_name": "436"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Age FROM visitor AS t1 JOIN visit AS t2 ON t1.id = t2.visitor_id"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "museum_visit",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Age",
            "x_data": [
                [
                    "Arjen Robben",
                    "Fernando Gago",
                    "Rafael van der Vaart"
                ]
            ],
            "y_data": [
                [
                    27,
                    36,
                    25
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the name and age of visitors who visited multiple museums using a bar chart.",
            "Histogram displaying the name on the X-axis and the age on the Y-axis for visitors who have visited certain museums more than once."
        ],
        "record_name": "2412"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Headquarter , AVG(Revenue) FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY Headquarter ORDER BY Headquarter ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarter",
            "y_name": "AVG(Revenue)",
            "x_data": [
                [
                    "Austin",
                    "Beijing",
                    "Los Angeles",
                    "Paris",
                    "Taiwan",
                    "Tokyo"
                ]
            ],
            "y_data": [
                [
                    100,
                    200,
                    50,
                    30,
                    130,
                    120
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For the records pertaining to the products and their respective manufacturers, please present the distribution of headquarters and the average revenue. Group the data based on the attribute \"headquarters\" and represent it in a bar chart, with the X-axis arranged in ascending order.",
            "Generate a bar chart illustrating the distribution of headquarters and the average revenue for the product records, grouped by the headquarter attribute. Please ensure that the bars are listed in ascending order based on the headquarter attribute.",
            "For the records pertaining to the products and their respective manufacturers, create a bar chart illustrating the distribution of headquarters and the average revenue, and group them based on the \"headquarter\" attribute, listing them in ascending order on the x-axis.",
            "For the records pertaining to the products and the respective manufacturers, provide a comparison of the average revenue across different headquarters. Group the data by the headquarter attribute and list them in ascending order on the X-axis.",
            "For the records pertaining to products and their respective manufacturers, create a bar chart depicting the distribution of headquarters and the average revenue. Group the data by the headquarter attribute, and kindly arrange the bars in ascending order based on the headquarter attribute."
        ],
        "record_name": "2225@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT ACC_Regular_Season , All_Games_Percent FROM basketball_match"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "pie",
            "x_name": "ACC_Regular_Season",
            "y_name": "All_Games_Percent",
            "x_data": [
                [
                    "14\u20132",
                    "13\u20133",
                    "10\u20136",
                    "9\u20137"
                ]
            ],
            "y_data": [
                [
                    0.946,
                    0.8240000000000001,
                    0.706,
                    0.6
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "A pie chart displays the ratio of ACC_Regular_Season and All_Games_Percent.",
            "Create a pie chart illustrating the distribution of ACC_Regular_Season and All_Games_Percent.",
            "Present the proportion of All_Games_Percent and All_Games_Percent in a pie chart.",
            "Generate a pie chart illustrating the distribution or ratio of ACC_Regular_Season and All_Games_Percent.",
            "For the attribute ACC_Regular_Season and All_Games_Percent, represent their respective proportions using a pie chart.",
            "Create a pie chart illustrating the distribution of all_games_percent throughout the ACC regular season."
        ],
        "record_name": "3136"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m'",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT LAST_NAME , SALARY FROM employees WHERE first_name LIKE '%m'"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "pie",
            "x_name": "LAST_NAME",
            "y_name": "SALARY",
            "x_data": [
                [
                    "Fripp",
                    "Kaufling",
                    "Smith",
                    "Gietz"
                ]
            ],
            "y_data": [
                [
                    8200,
                    7900,
                    7400,
                    8300
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For employees whose first name ends with the letter 'm', please illustrate their salaries based on their last names using a pie chart."
        ],
        "record_name": "1805"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Headquarter , T1.Code FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T2.Headquarter ORDER BY T2.Headquarter DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Headquarter",
            "y_name": "AVG(Code)",
            "x_data": [
                [
                    "Tokyo",
                    "Taiwan",
                    "Paris",
                    "Los Angeles",
                    "Beijing",
                    "Austin"
                ]
            ],
            "y_data": [
                [
                    1,
                    5,
                    6,
                    3,
                    4,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Headquarter"
        },
        "nl_queries": [
            "For the entries related to the products and their respective manufacturers, provide a comparison of the average code across different headquarters. Present this comparison in a bar chart, grouping the headquarters by the attribute \"headquarter,\" and sorting them in descending order on the x-axis.",
            "For the data pertaining to the products and their respective manufacturers, create a bar chart illustrating the distribution of headquarters and the average of codes. Group the data by the attribute \"headquarter\" and rank the categories in descending order based on their names.",
            "Generate a bar chart illustrating the distribution of headquarters and the average code for the records from the products and their respective manufacturers. Group the data by the headquarter attribute and arrange the Headquarter values in descending order, please.",
            "For the entries pertaining to products and their respective manufacturers, locate the headquarters and calculate the average code. Group them based on the headquarter attribute and visualize the data in a bar chart, with the x-axis ordered in descending order, please.",
            "For the records pertaining to products and their respective manufacturers, create a bar chart illustrating the distribution of headquarters and the average code value. Group the data by the \"headquarters\" attribute and arrange the bars on the X-axis in descending order from high to low, please."
        ],
        "record_name": "2223@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Continent , count(*) FROM CONTINENTS AS T1 JOIN COUNTRIES AS T2 ON T1.ContId = T2.continent JOIN car_makers AS T3 ON T2.CountryId = T3.Country GROUP BY T1.Continent"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "car_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Continent",
            "y_name": "count(*)",
            "x_data": [
                [
                    "america",
                    "asia",
                    "europe"
                ]
            ],
            "y_data": [
                [
                    4,
                    7,
                    11
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Create a bar graph illustrating the number of car manufacturers present in each continent. Provide the name of the continent and its corresponding count.",
            "How many automobile manufacturers are there in each continent? Provide a list of the continent names and their respective counts.",
            "Show the count of car manufacturers in each continent using a bar chart, indicating the name of the continent and the corresponding count.",
            "How many automobile manufacturers exist in each continent? Provide a list of the continent names and their respective counts. Visualize this data using a bar chart.",
            "A bar chart displaying the names of each continent and the respective number of car makers in each continent.",
            "Present a bar graph depicting the names of each continent and the corresponding count of car makers in each continent.",
            "What are the names of each continent and the number of car manufacturers in each? Plot them in a bar chart, please."
        ],
        "record_name": "434"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Committee , COUNT(Committee) FROM election GROUP BY Committee ORDER BY COUNT(Committee) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "election",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Committee",
            "y_name": "COUNT(Committee)",
            "x_data": [
                [
                    "Economic Matters",
                    "Environmental Matters",
                    "Environmental Matters (Vice-Chair)",
                    "Health and Government Operations",
                    "Ways and Means",
                    "Appropriations"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    1,
                    3
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Committee"
        },
        "nl_queries": [
            "How many delegates are in each committee? Please provide a bar chart that displays the committees in ascending order based on the number of delegates.",
            "Display the quantity of committees from each committee, sorted in ascending order on the y-axis, please.",
            "Display the quantity of delegates in each committee using a bar chart, and please arrange the y-axis in ascending order."
        ],
        "record_name": "1320@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Manufacturer DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Manufacturer",
            "x_data": [
                [
                    "Memory",
                    "Floppy disk",
                    "Hard drive",
                    "DVD drive",
                    "ZIP drive",
                    "Toner cartridge",
                    "Printer",
                    "DVD burner",
                    "CD drive",
                    "Monitor"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    2,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    0
                ],
                [
                    0,
                    0,
                    5,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    3,
                    0,
                    0,
                    3,
                    3,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    4,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    1
                ],
                [
                    6,
                    6,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Creative Labs",
                "Fujits",
                "Hewlett-Packard",
                "Iomega",
                "Sony",
                "Winchester"
            ],
            "describe": "GROUP BY Name, GROUP BY Name"
        },
        "nl_queries": [
            "For the records pertaining to the products and their respective manufacturers, please present the distribution of the product names and manufacturers. Generate a bar chart that groups the data by the attribute name, and display the manufacturers in descending order.",
            "Generate a stacked bar chart illustrating the distribution of names and manufacturers for the records from the products, grouped by the attribute name, and ordered in descending order based on the total count.",
            "Create a bar chart illustrating the distribution of product names and manufacturers for the given records, grouping them by the attribute name. Please ensure that the Y-axis is sorted in descending order.",
            "For the records pertaining to the products and their respective manufacturers, retrieve the name of the product and the name of the manufacturer. Group them by the attribute name and present them in a bar chart. Sort the manufacturers in descending order.",
            "For the records pertaining to the products and their respective manufacturers, provide me with a comparison of manufacturers based on their names, and group the attribute names using a bar chart, displaying them from highest to lowest according to the manufacturer."
        ],
        "record_name": "2239@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Nationality , SUM(Age) FROM journalist GROUP BY Nationality ORDER BY Nationality ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "news_report",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Nationality",
            "y_name": "SUM(Age)",
            "x_data": [
                [
                    "England",
                    "Northern Ireland",
                    "Wales"
                ]
            ],
            "y_data": [
                [
                    308,
                    29,
                    27
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Nationality"
        },
        "nl_queries": [
            "Visualize the nationalities and total ages of journalists using a bar chart, with the X-axis arranged in ascending order from lowest to highest.",
            "Bar chart displaying the total age for each nationality, please arrange the X-axis in ascending order.",
            "Provide a histogram illustrating the nationalities and cumulative ages of journalists. Please arrange the X-axis in ascending order from least to greatest.",
            "Present a bar chart illustrating the nationalities and cumulative ages of journalists. Kindly sort the data in ascending order on the x-axis."
        ],
        "record_name": "2487@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code",
                "binning": "BIN Date_in_Location_From BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT Date_in_Location_From , COUNT(Date_in_Location_From) FROM Document_locations GROUP BY Location_Code BIN Date_in_Location_From BY WEEKDAY"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "cre_Doc_Tracking_DB",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Date_in_Location_From",
            "y_name": "COUNT(Date_in_Location_From)",
            "x_data": [
                [
                    "Mon",
                    "Tue",
                    "Wed",
                    "Thur",
                    "Fri",
                    "Sat",
                    "Sun"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    0,
                    0,
                    1,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    2,
                    0,
                    0
                ],
                [
                    0,
                    1,
                    0,
                    0,
                    3,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    1,
                    0,
                    0
                ],
                [
                    1,
                    1,
                    0,
                    0,
                    2,
                    0,
                    1
                ]
            ],
            "classify": [
                "b",
                "c",
                "e",
                "n",
                "x"
            ],
            "describe": "GROUP BY Location_Code, BIN Date_in_Location_From BY WEEKDAY"
        },
        "nl_queries": [
            "Display the quantity of documents based on their respective starting dates. Categorize the starting dates by weekdays and group them by location code using a stacked bar chart.",
            "Stacked bar chart illustrating the count of dates in each location from, grouped by Location_Code and further categorized by dates in location from."
        ],
        "record_name": "777"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Budget_Type_Code , COUNT(T1.Budget_Type_Code) FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code = T2.budget_type_code GROUP BY T1.Budget_Type_Code ORDER BY COUNT(T1.Budget_Type_Code) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Budget_Type_Code",
            "y_name": "COUNT(Budget_Type_Code)",
            "x_data": [
                [
                    "GV",
                    "SF",
                    "ORG"
                ]
            ],
            "y_data": [
                [
                    6,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Budget_Type_Code"
        },
        "nl_queries": [
            "Produce a bar chart to illustrate the quantity of documents for various budget type codes, with the Y-axis ranked in descending order, please.",
            "Display the quantity of documents for various budget type codes in a bar graph, with the Y-axis showing descending order, please."
        ],
        "record_name": "832@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize SCATTER",
            "data_part": {
                "sql_part": "SELECT Snatch , Clean_Jerk FROM body_builder",
                "binning": ""
            },
            "VQL": "Visualize SCATTER SELECT Snatch , Clean_Jerk FROM body_builder"
        },
        "chart": "Scatter",
        "hardness": "Easy",
        "db_id": "body_builder",
        "vis_obj": {
            "chart": "scatter",
            "x_name": "Snatch",
            "y_name": "Clean_Jerk",
            "x_data": [
                [
                    142.5,
                    137.5,
                    140,
                    137.5,
                    130
                ]
            ],
            "y_data": [
                [
                    175,
                    177.5,
                    175,
                    175,
                    162.5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Visualize a scatter chart depicting the relationship between Snatch and Clean_Jerk.",
            "What is the connection or correlation between Snatch and Clean Jerk?",
            "Visualize the correlation between Snatch and Clean_Jerk.",
            "Provide a scatter plot illustrating the relationship between Snatch and Clean_Jerk.",
            "Display the correlation between the Snatch and Clean_Jerk in a scatter plot, please.",
            "Scatter plot to display snatch on the x-axis and clean_jerk on the y-axis."
        ],
        "record_name": "356"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.name , T1.id FROM operate_company AS T1 JOIN flight AS t2 ON T1.id = T2.company_id"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "flight_company",
        "vis_obj": {
            "chart": "bar",
            "x_name": "name",
            "y_name": "id",
            "x_data": [
                [
                    "Dragonair",
                    "Cathay Pacific Cargo",
                    "Vogue Laundry Service Limited"
                ]
            ],
            "y_data": [
                [
                    4,
                    5,
                    11
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Provide a histogram indicating the IDs and names of companies that conducted more than one flight.",
            "What are the identifiers and names of the companies that conducted more than one flight."
        ],
        "record_name": "1421"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT Police_force , COUNT(*) FROM county_public_safety GROUP BY Police_force"
        },
        "chart": "Pie",
        "hardness": "Easy",
        "db_id": "county_public_safety",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Police_force",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Abbotsford Police Department",
                    "Central Saanich Police",
                    "RCMP"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    4
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Pie chart. What is the distribution of counties among different police forces?",
            "Generate a pie chart illustrating the distribution of counties among different police forces.",
            "How many police forces correspond to each county.",
            "I would like to determine the ratio of the number of counties for each police force."
        ],
        "record_name": "708"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT County_name , COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id = T2.District GROUP BY T1.County_id ORDER BY COUNT(*) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "election",
        "vis_obj": {
            "chart": "bar",
            "x_name": "County_name",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Howard",
                    "Colony",
                    "Baltimore County",
                    "Mansfield"
                ]
            ],
            "y_data": [
                [
                    3,
                    2,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the name of each county alongside the corresponding delegate count for that county. Plot them as a bar chart and arrange the y-axis in descending order, please.",
            "For each region, present the county's name and the number of delegates assigned to that county. Display the data in a bar chart, and could you please arrange the total number in descending order?",
            "Display a bar chart depicting the names of each county and the corresponding number of delegates, with the y-axis ranked in descending order from highest to lowest."
        ],
        "record_name": "1315@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T1.Name , T1.Manufacturer FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer = T2.code GROUP BY T1.Name , T1.Name ORDER BY T1.Name DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Hard",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Manufacturer",
            "x_data": [
                [
                    "ZIP drive",
                    "Toner cartridge",
                    "Printer",
                    "Monitor",
                    "Memory",
                    "Hard drive",
                    "Floppy disk",
                    "DVD drive",
                    "DVD burner",
                    "CD drive"
                ]
            ],
            "y_data": [
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    2,
                    2,
                    2
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    0,
                    5,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    3,
                    3,
                    0,
                    0,
                    0,
                    0,
                    3,
                    0,
                    0
                ],
                [
                    4,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    1,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ],
                [
                    0,
                    0,
                    0,
                    0,
                    6,
                    0,
                    6,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [
                "Creative Labs",
                "Fujits",
                "Hewlett-Packard",
                "Iomega",
                "Sony",
                "Winchester"
            ],
            "describe": "GROUP BY Name, GROUP BY Name"
        },
        "nl_queries": [
            "For the entries pertaining to the products and their respective manufacturers, please present the distribution of names and manufacturers. Display this information in a bar chart, grouped by attribute name, and sort it in descending order on the X-axis.",
            "For the records from the products and the manufacturer of each product, provide me with a comparison of manufacturers based on their names. Group the attribute names and display them in a bar chart, with the names ordered in descending order.",
            "Generate a bar chart illustrating the distribution of names and manufacturers for the records from the products, grouped by the attribute name, and sorted in descending order based on the names.",
            "For the records pertaining to the products and their respective manufacturers, retrieve the name and manufacturer of each product, group them based on the attribute name, and represent them visually using a bar chart. Please sort them in descending order based on the X-axis.",
            "Visualize a bar chart representing the distribution of names and manufacturers for the records of products, grouped by the attribute name. Could you please sort it in descending order on the X-axis?"
        ],
        "record_name": "2239@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM Products GROUP BY Name ORDER BY Name ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "manufactory_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "CD drive",
                    "DVD burner",
                    "DVD drive",
                    "Floppy disk",
                    "Hard drive",
                    "Memory",
                    "Monitor",
                    "Printer",
                    "Toner cartridge",
                    "ZIP drive"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Bar chart with the X-axis representing the names and the Y-axis representing the number of occurrences, arranged in ascending order on the X-axis, please.",
            "A bar graph illustrating the quantity of product names, arranged in ascending order on the X-axis, please.",
            "What are the quantities of the names of all products? Please rank the x-axis in ascending order from lowest to highest.",
            "Display the names of all products and represent their count using a bar graph. Please arrange the X-axis in ascending order, from lowest to highest.",
            "Choose the names of all the items available in the store and represent their count using a bar graph. Please ensure that the X-axis is arranged in ascending order."
        ],
        "record_name": "2180@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC",
                "binning": "BIN EMP_DOB BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT EMP_DOB , COUNT(EMP_DOB) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM = T2.PROF_NUM WHERE CRS_CODE = \"ACCT-211\"  ORDER BY COUNT(EMP_DOB) DESC BIN EMP_DOB BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "college_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "EMP_DOB",
            "y_name": "COUNT(EMP_DOB)",
            "x_data": [
                [
                    "Thur",
                    "Wed",
                    "Tue",
                    "Sun",
                    "Sat",
                    "Mon",
                    "Fri"
                ]
            ],
            "y_data": [
                [
                    2,
                    0,
                    0,
                    0,
                    0,
                    0,
                    0
                ]
            ],
            "classify": [],
            "describe": "BIN EMP_DOB BY WEEKDAY"
        },
        "nl_queries": [
            "What are the weekdays of the birthdates of the professors in charge of ACCT-211? Present the data with a bar chart and arrange them in descending order on the Y-axis, please.",
            "What is the day of the week that professors teaching course ACCT-211 were born on? Display this information in a bar graph, and arrange the total number in descending order from highest to lowest."
        ],
        "record_name": "546@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT city_code , avg(age) FROM student GROUP BY city_code ORDER BY avg(age) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "dorm_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "city_code",
            "y_name": "avg(age)",
            "x_data": [
                [
                    "LON",
                    "YYZ",
                    "WAS",
                    "SFO",
                    "NYC",
                    "ROC",
                    "CHI",
                    "ATL",
                    "PHL",
                    "PIT",
                    "BAL",
                    "NAR",
                    "LOS",
                    "HKG",
                    "DAL",
                    "BOS",
                    "PEK",
                    "HOU",
                    "DET"
                ]
            ],
            "y_data": [
                [
                    27,
                    22.5,
                    21.66666666666667,
                    21,
                    20.33333333333333,
                    20,
                    20,
                    20,
                    19.666666666666668,
                    19,
                    18.5,
                    18,
                    18,
                    18,
                    18,
                    18,
                    17,
                    17,
                    17
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Bar graph depicting the average age for each city code, with the y-axis sorted in descending order, please.",
            "What is the mean age for each urban area and which urban areas are they? Display the information using a bar chart, with the Y-axis sorted in descending order, please.",
            "Create a bar chart illustrating the average age for each city, and identify the respective cities. Display the cities in descending order along the Y-axis.",
            "A bar chart illustrating the average age for each city and identifying the respective cities, with the Y-axis arranged in descending order, please.",
            "Display the mean age of all students residing in each city using a bar graph, depicting the cities in descending order on the Y-axis, please."
        ],
        "record_name": "1233@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT state_province_county , count(*) FROM addresses GROUP BY state_province_county"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "customers_and_products_contacts",
        "vis_obj": {
            "chart": "bar",
            "x_name": "state_province_county",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Colorado",
                    "District of Columbia",
                    "Idaho",
                    "Illinois",
                    "Kentucky",
                    "Louisiana",
                    "Maine",
                    "Maryland",
                    "Nevada",
                    "Oklahoma",
                    "Oregon",
                    "SouthDakota",
                    "Vermont",
                    "Virginia"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present each state and the quantity of addresses in each state using a bar graph.",
            "Display the number of addresses per state, showcasing each state using a bar chart.",
            "Display the aggregate count from each state, province, or county."
        ],
        "record_name": "1010"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , Height FROM people ORDER BY Height DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , Height FROM people ORDER BY Height DESC"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "candidate_poll",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "Height",
            "x_data": [
                [
                    "Laurent Capet",
                    "St\u00e9phane Antiga",
                    "Dominique Daquin",
                    "Vincent Montm\u00e9at",
                    "Guillaume Samica",
                    "Frantz Granvorka",
                    "Philippe Bar\u00e7a-Cysique",
                    "Lo\u00efc De Kergret",
                    "Hubert Henno"
                ]
            ],
            "y_data": [
                [
                    202,
                    200,
                    197,
                    196,
                    196,
                    195,
                    194,
                    193,
                    188
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Provide a bar chart comparing the height among different names, and please arrange the y-axis in descending order.",
            "Retrieve the names and heights, and represent them using a bar chart, with the y-axis ordered in descending order, please.",
            "A bar chart illustrates the distribution of Name and Height, and I would like to display it with the y-axis in descending order.",
            "Create a bar chart depicting the relationship between name and height, arranged in descending order along the y-axis, please.",
            "Create a bar chart representing the distribution of names and heights, and arrange the y-axis in descending order.",
            "Provide a bar graph illustrating the distribution of Name and Height, with the Y-axis displayed in descending order."
        ],
        "record_name": "394@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Location_Code , COUNT(Location_Code) FROM Document_locations GROUP BY Location_Code ORDER BY COUNT(Location_Code) DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Doc_Tracking_DB",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Location_Code",
            "y_name": "COUNT(Location_Code)",
            "x_data": [
                [
                    "x",
                    "e",
                    "b",
                    "c",
                    "n"
                ]
            ],
            "y_data": [
                [
                    5,
                    4,
                    3,
                    2,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Location_Code"
        },
        "nl_queries": [
            "Display the quantity of documents for each location code in a bar graph, and arrange the y-axis in descending order, please.",
            "Show the quantity of documents for different location codes in a bar chart to illustrate the proportion, and arrange the Y-axis in descending order, please.",
            "Bar chart with the X-axis representing location codes and the Y-axis representing the number of location codes, displayed in descending order on the Y-axis, please."
        ],
        "record_name": "769@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Type , COUNT(*) FROM ship GROUP BY TYPE ORDER BY COUNT(*) ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "ship_mission",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Type",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Battle ship",
                    "Cargo ship"
                ]
            ],
            "y_data": [
                [
                    3,
                    5
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "For each category, depict the quantity of ships as a bar chart and list the y-axis in ascending order.",
            "Present a bar chart displaying the diverse categories of ships along with the quantity of ships belonging to each category. Please arrange the bars in ascending order based on the total number of ships.",
            "In a bar chart, use the X-axis to represent the different types of categories, and the Y-axis to display the total number. Please arrange the Y-axis in ascending order.",
            "Display various categories of vessels and the respective quantities of each category in a bar graph, and arrange them in ascending order based on the total count."
        ],
        "record_name": "2762@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Name , COUNT(Name) FROM editor GROUP BY Name",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Name , COUNT(Name) FROM editor GROUP BY Name"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "journal_committee",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Name",
            "y_name": "COUNT(Name)",
            "x_data": [
                [
                    "Gra\u017cyna Wolszczak",
                    "Kamila Porczyk",
                    "Marek Siudym",
                    "Maria G\u00f3ralczyk",
                    "Piotr Pr\u0119gowski",
                    "W\u0142adys\u0142aw Grzywna"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Name"
        },
        "nl_queries": [
            "Aggregate and tally the name attribute to create a bar chart visualization.",
            "The x-axis of the bar chart represents the names of the categories, while the y-axis represents the quantity of occurrences."
        ],
        "record_name": "2055"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT course_name , COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T1.course_name ORDER BY course_name ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "e_learning",
        "vis_obj": {
            "chart": "bar",
            "x_name": "course_name",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "AI",
                    "Art history",
                    "Chinese Painting",
                    "French",
                    "Japanese",
                    "Spanish",
                    "Writing in French",
                    "advanced database",
                    "database",
                    "modern Arts"
                ]
            ],
            "y_data": [
                [
                    2,
                    2,
                    1,
                    3,
                    2,
                    2,
                    2,
                    2,
                    2,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present the name and enrollment count of students for each course in a bar graph, arranged on the X-axis in ascending order.",
            "What are the names of each course and the respective student enrollment numbers? Please display the information in a bar chart with the bars arranged in ascending order.",
            "Provide a list of the names of courses and the corresponding number of enrolled students. Show this information in a bar chart, with the x-axis arranged in ascending order from lowest to highest.",
            "Provide a histogram displaying the course names and the respective number of student enrollments, with the X-axis sorted in ascending order, please.",
            "Present a bar chart showcasing the name of each course and the corresponding count of student enrollments. Additionally, could you arrange the chart in ascending order along the x-axis?"
        ],
        "record_name": "1273@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Document_Type_Description , COUNT(Document_Type_Description) FROM Ref_document_types GROUP BY Document_Type_Description ORDER BY Document_Type_Description ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "cre_Docs_and_Epenses",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Document_Type_Description",
            "y_name": "COUNT(Document_Type_Description)",
            "x_data": [
                [
                    "excellent",
                    "fun",
                    "good",
                    "very good"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Document_Type_Description"
        },
        "nl_queries": [
            "Bar chart to display the quantity of document type descriptions from various document type descriptions, arranged in ascending order on the x-axis, please.",
            "How many document types are there for different descriptions of document types? Please visualize this information using a bar chart and sort it in ascending order on the x-axis.",
            "Display the quantity of document types for various descriptions in a bar graph, and arrange them in ascending order on the x-axis, please."
        ],
        "record_name": "829@x_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.customer_first_name , T1.customer_id FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id = T2.customer_id ORDER BY T1.customer_id ASC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "customers_and_invoices",
        "vis_obj": {
            "chart": "bar",
            "x_name": "customer_first_name",
            "y_name": "customer_id",
            "x_data": [
                [
                    "Meaghan",
                    "Kieran",
                    "Ruby"
                ]
            ],
            "y_data": [
                [
                    8,
                    13,
                    15
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the first name and ID of all customers with a minimum of two accounts in a bar graph, and sort them in ascending order based on the total number.",
            "Create a bar chart illustrating the first names and IDs of customers who have two or more accounts, and arrange them in ascending order based on the customer ID.",
            "Provide a histogram displaying the first names and IDs of customers who have two or more accounts. Please arrange the data in ascending order based on the customer_id.",
            "What are the given names and identification numbers for customers who possess two or more accounts, and display them on the y-axis in ascending order, please.",
            "Display the first name and ID for all customers who have a minimum of two accounts. Present the data in a bar graph, ordering the Y-axis from the lowest to the highest values, please."
        ],
        "record_name": "960@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT time , train_number FROM train WHERE destination = 'Chennai' ORDER BY TIME"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "station_weather",
        "vis_obj": {
            "chart": "bar",
            "x_name": "time",
            "y_name": "train_number",
            "x_data": [
                [
                    "17:15",
                    "4:49"
                ]
            ],
            "y_data": [
                [
                    16724,
                    16128
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Provide a bar chart displaying the departure times and frequencies of all trains heading towards Chennai, ordered by time.",
            "Provide me with the departure times and quantities of all trains that go to Chennai, arranged in chronological order. Display this information using a bar chart.",
            "Create a bar chart representing the frequency and quantity of all trains traveling to Chennai, arranged according to their respective times."
        ],
        "record_name": "2833"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT dept_name , AVG(credits) FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY dept_name ORDER BY dept_name DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "college_2",
        "vis_obj": {
            "chart": "bar",
            "x_name": "dept_name",
            "y_name": "AVG(credits)",
            "x_data": [
                [
                    "Statistics",
                    "Psychology",
                    "Mech. Eng.",
                    "Marketing",
                    "History",
                    "Finance",
                    "English",
                    "Cybernetics",
                    "Comp. Sci.",
                    "Civil Eng.",
                    "Biology",
                    "Athletics"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    3,
                    3,
                    3,
                    4,
                    3,
                    3.5,
                    4,
                    3.5,
                    3,
                    3.5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY dept_name"
        },
        "nl_queries": [
            "What is the mean credit value of courses that have multiple prerequisites for each department? Please generate a bar chart where the bars are listed in descending order.",
            "Calculate the mean number of credits for courses that have more than one prerequisite for each department, and represent the data using a bar chart. Please arrange the bars in descending order."
        ],
        "record_name": "633@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT All_Home , School_ID FROM basketball_match GROUP BY ACC_Home ,  All_Home ORDER BY School_ID DESC"
        },
        "chart": "Stacked Bar",
        "hardness": "Medium",
        "db_id": "university_basketball",
        "vis_obj": {
            "chart": "bar",
            "x_name": "All_Home",
            "y_name": "School_ID",
            "x_data": [
                [
                    "14\u20132",
                    "14\u20133",
                    "15\u20131"
                ]
            ],
            "y_data": [
                [
                    5,
                    1,
                    0
                ],
                [
                    4,
                    0,
                    2
                ]
            ],
            "classify": [
                "6\u20132",
                "7\u20131"
            ],
            "describe": "GROUP BY ACC_Home, GROUP BY All_Home"
        },
        "nl_queries": [
            "A grouped bar chart displays the distribution of All_Home and School_ID, grouped by the attribute ACC_Home, and ordered on the y-axis from highest to lowest, please.",
            "Retrieve All_Home and School_ID, group them by the attribute ACC_Home, and visualize them using a bar chart. Please list them in descending order based on the y-axis.",
            "Present the distribution of All_Home and School_ID, categorized by the ACC_Home attribute, in a bar chart. Please sort the bars on the y-axis in descending order.",
            "Generate a grouping bar chart illustrating the distribution of All_Home and School_ID, categorized by the ACC_Home attribute, and sorted in descending order on the y-axis, please.",
            "Stacked bar chart comparing school ID to ACC Home, based on all home, listed on the y-axis in descending order.",
            "Create a stacked bar chart illustrating the distribution of All_Home and School_ID, grouped by attribute ACC_Home, and arranged in descending order on the Y-axis, please."
        ],
        "record_name": "3093@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Party_name , count(*) FROM party_events AS T1 JOIN party AS T2 ON T1.party_id = T2.party_id GROUP BY T1.party_id ORDER BY count(*) DESC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "party_people",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Party_name",
            "y_name": "count(*)",
            "x_data": [
                [
                    "Convention Peoples Party",
                    "3",
                    "Progress Party"
                ]
            ],
            "y_data": [
                [
                    3,
                    3,
                    2
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Display the names of political parties and the quantity of events for each party in a bar graph, arranged in descending order on the y-axis, please.",
            "How many occurrences are there for each party, sorted in descending order by the total count, please.",
            "Display the names of political parties and the number of events associated with each party, ordered in descending order based on the total number, please.",
            "Provide a bar chart indicating the number of events per party, arranged in descending order on the y-axis, please.",
            "Provide me with a histogram illustrating the frequency of events for each political party, and list them in descending order based on the total count."
        ],
        "record_name": "2509@y_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Type , avg(Tonnage) FROM ship GROUP BY TYPE ORDER BY Type DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "ship_mission",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Type",
            "y_name": "avg(Tonnage)",
            "x_data": [
                [
                    "Cargo ship",
                    "Battle ship"
                ]
            ],
            "y_data": [
                [
                    3932.2,
                    4845
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present a bar chart displaying the average tonnage for each category, with the bars arranged in descending order.",
            "Display various categories of vessels and the mean tonnage of each category in a bar graph, and arrange the types in descending order, please.",
            "Display a bar chart representing various categories of ships and the average tonnage of ships within each category. Please ensure that the x-axis is arranged in descending order from highest to lowest.",
            "For each category, what is the mean weight, and display X in descending order."
        ],
        "record_name": "2765@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Country , COUNT(Country) FROM competition GROUP BY Country ORDER BY Country DESC"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "sports_competition",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Country",
            "y_name": "COUNT(Country)",
            "x_data": [
                [
                    "Spain",
                    "Slovenia",
                    "Russia",
                    "Italy",
                    "Ireland",
                    "Australia"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    3,
                    2,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Country"
        },
        "nl_queries": [
            "A bar graph illustrating the number of competitions for each country, with the bars displayed in descending order from highest to lowest.",
            "Display the quantity of countries per country in a histogram, and please sort them in descending order based on the X-axis.",
            "How many competitions does each country have? Please arrange the data in descending order based on the country.",
            "Compare the aggregate number of competitions for each nation, and sort them in descending order based on the x-axis."
        ],
        "record_name": "2816@x_name@DESC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT Record_Company , COUNT(*) FROM orchestra GROUP BY Record_Company"
        },
        "chart": "Bar",
        "hardness": "Easy",
        "db_id": "orchestra",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Record_Company",
            "y_name": "COUNT(*)",
            "x_data": [
                [
                    "Columbia Masterworks",
                    "Decca Records",
                    "Delos Records",
                    "Deutsche Grammophon",
                    "EMI",
                    "Koch Records / Naxos Records",
                    "Kultur",
                    "Mercury Records",
                    "Philips",
                    "Philips Classics Records",
                    "RCA"
                ]
            ],
            "y_data": [
                [
                    1,
                    2,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": ""
        },
        "nl_queries": [
            "Present a bar chart illustrating the number of orchestras managed by each record company.",
            "Visualize a bar chart illustrating the number of orchestras managed by each record company.",
            "How many orchestras are managed by each record label? Display the data in a bar chart, please.",
            "Create a bar chart comparing different record companies based on the total number."
        ],
        "record_name": "2494"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC",
                "binning": "BIN HIRE_DATE BY WEEKDAY"
            },
            "VQL": "Visualize BAR SELECT HIRE_DATE , SUM(EMPLOYEE_ID) FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%'  ORDER BY SUM(EMPLOYEE_ID) ASC BIN HIRE_DATE BY WEEKDAY"
        },
        "chart": "Bar",
        "hardness": "Extra Hard",
        "db_id": "hr_1",
        "vis_obj": {
            "chart": "bar",
            "x_name": "HIRE_DATE",
            "y_name": "SUM(EMPLOYEE_ID)",
            "x_data": [
                [
                    "Sun",
                    "Tue",
                    "Thur",
                    "Fri",
                    "Mon",
                    "Sat",
                    "Wed"
                ]
            ],
            "y_data": [
                [
                    424,
                    740,
                    834,
                    980,
                    1197,
                    1361,
                    1653
                ]
            ],
            "classify": [],
            "describe": "BIN HIRE_DATE BY WEEKDAY"
        },
        "nl_queries": [
            "For all employees whose first names contain the letters D or S, retrieve their hire dates and compute the sum of employee IDs grouped by weekday. Visualize this data using a bar chart, with the Y-axis displayed in ascending order.",
            "For all employees with the letters D or S in their first name, create a bar graph illustrating the distribution of hire dates and the sum of employee IDs binned by weekdays. Please ensure that the Y-axis is ordered in ascending order.",
            "For all employees whose first names contain the letters D or S, a bar chart illustrates the distribution of hire dates and the total employee ID count binned by weekdays, listed in ascending order by the Y-axis.",
            "For all employees with the letters D or S in their first name, create a bar chart illustrating the distribution of hire dates and sum of employee IDs binned by weekday, ordered in ascending order on the y-axis.",
            "For all employees whose first names contain the letters D or S, please present a bar chart depicting the distribution of hire dates and the total number of employee IDs binned by weekday. Kindly sort the Y-axis in ascending order."
        ],
        "record_name": "1548@y_name@ASC"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT outcome_description , COUNT(outcome_description) FROM Research_outcomes AS T1 JOIN Project_outcomes AS T2 ON T1.outcome_code = T2.outcome_code GROUP BY outcome_description"
        },
        "chart": "Bar",
        "hardness": "Medium",
        "db_id": "tracking_grants_for_research",
        "vis_obj": {
            "chart": "bar",
            "x_name": "outcome_description",
            "y_name": "COUNT(outcome_description)",
            "x_data": [
                [
                    "Published Research Paper",
                    "Research Patent"
                ]
            ],
            "y_data": [
                [
                    10,
                    5
                ]
            ],
            "classify": [],
            "describe": "GROUP BY outcome_description"
        },
        "nl_queries": [
            "Present the description of the results for each project, and quantify them using a bar chart.",
            "A bar chart illustrating the frequency of descriptions for all project outcomes.",
            "What is the count of the descriptions for all of the project outcomes?",
            "A bar chart displaying the count of outcome descriptions for all projects.",
            "What are the explanations for each of the project results, and represent them through a bar chart indicating their respective quantities.",
            "Enumerate the quantity of descriptions for the outcomes of all projects."
        ],
        "record_name": "2959"
    },
    {
        "vis_query": {
            "vis_part": "Visualize PIE",
            "data_part": {
                "sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party",
                "binning": ""
            },
            "VQL": "Visualize PIE SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party"
        },
        "chart": "Pie",
        "hardness": "Medium",
        "db_id": "election",
        "vis_obj": {
            "chart": "pie",
            "x_name": "Party",
            "y_name": "COUNT(Party)",
            "x_data": [
                [
                    "Democratic",
                    "Independence",
                    "Liberal",
                    "Working Families"
                ]
            ],
            "y_data": [
                [
                    2,
                    1,
                    1,
                    1
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Party"
        },
        "nl_queries": [
            "Display the percentage distribution of each political party in a pie chart.",
            "Can you provide the breakdown or distribution of the percentage of votes for each political party in the election?"
        ],
        "record_name": "1305"
    },
    {
        "vis_query": {
            "vis_part": "Visualize BAR",
            "data_part": {
                "sql_part": "SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC",
                "binning": ""
            },
            "VQL": "Visualize BAR SELECT T2.Party , COUNT(T2.Party) FROM election AS T1 JOIN party AS T2 ON T1.Party = T2.Party_ID GROUP BY T2.Party ORDER BY COUNT(T2.Party) ASC"
        },
        "chart": "Bar",
        "hardness": "Hard",
        "db_id": "election",
        "vis_obj": {
            "chart": "bar",
            "x_name": "Party",
            "y_name": "COUNT(Party)",
            "x_data": [
                [
                    "Independence",
                    "Liberal",
                    "Working Families",
                    "Democratic"
                ]
            ],
            "y_data": [
                [
                    1,
                    1,
                    1,
                    2
                ]
            ],
            "classify": [],
            "describe": "GROUP BY Party"
        },
        "nl_queries": [
            "Please compare the quantity of party names using a bar graph, with the y-axis arranged in ascending order, please."
        ],
        "record_name": "1306@y_name@ASC"
    }
]